{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b7015acd-db86-46eb-a0e1-12e89beaede7",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f0f32a5c-6d23-4aa1-a804-8537717c9008",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3856020a-8add-4fde-9eb8-567a970bf618",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1fe72de2-9f37-4312-a0fa-e1721a1ee5e7"
                }
              }
            ]
          },
          {
            "id": "7dbf4204-db12-4c4b-bae4-e5d149ba7778",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1b3a1315-1de2-4b38-9638-ea8b2be16793",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f98f8bc2-c48c-44a9-b22d-2def2e4dfd3f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f4ed9d60-eec0-4e1e-acdb-106ad249e112",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0dbde8a0-483a-4cc1-ba28-811ac62881d4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9ca07c84-4fef-4c52-8a29-958477e93776",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "faa57838-e9e3-4718-98c7-56d4256b7247",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2836a5be-bded-4e93-a760-c5642a176525"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "be8e9492-1e80-493c-aa13-efb481162e98",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "acca10b3-b8ae-404c-8d69-1475a100f6b8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68e02928-e0fb-4df5-957f-d37741e8b522",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d05cc97b-a468-438e-a978-9bfffdc89f28"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "13f60015-4bc0-4838-849d-3fef0463e2cd",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "86298982-7c83-4ca7-81b6-e4d2bc496059"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "df246167-c55a-4833-8c91-f7192ad2af81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96ed93db-abcb-489a-956a-93514f6b2c27"
            }
          }
        ]
      },
      {
        "id": "052e5a19-b657-4b82-892a-933c41bfbc78",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "2b68cbe4-e8ae-4943-8956-d37cefe5068a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea3f9b55-8efa-4c34-bf5b-0d6b0d8672ac",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9d2ab7e1-4a9c-429d-8e65-3384622dad98",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162c5782-164f-4675-96d3-1c9a2360ee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "325c443e-f0bb-49dc-9d04-e7d45b62f09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc841640-cd83-4fa6-a509-6d5e13a0069e",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7cb167-fa2a-4cd5-be7d-2f322ea2fef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efb627f9-b272-4580-b97a-88c45accc269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4beec1df-6e79-4a12-a97c-1c3a9a564b7c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21993360-b0f0-4ad1-8aed-9123f10c3cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0a02001-81e9-4afb-bed9-3d0412ab4959"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c32fb19c-53c7-46a9-aab8-719b5d0037d2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5a33573-d37a-4bec-9d4a-b06e816724f9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f761f8cc-fe8d-4c4c-9e3b-f77decf4a05e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "64b362da-4463-44c0-a929-b2dcdbfb9109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04648f6f-2d3e-4aa1-8352-c7041613a574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3f505a-3771-4c96-add6-c9ca7fe35735"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e52f622b-f3d5-45d9-9fca-2ce4718da424",
            "name": "Positive Testing",
            "item": [
              {
                "id": "176a5e81-167a-47b9-87b2-8cf8d7f45bc0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6272bda-6003-4b75-a1c3-305d579630c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0d7e2846-8282-4ac0-b141-9b2229d42e85"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b03ae38-793e-4ef8-af3a-45b0f243567a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8b724b0e-3891-429d-9506-e83e41671c95"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ef848231-1322-47a0-bdb6-dd1866c3b35e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39000e50-8a14-49c3-864f-9d860f67bf09"
            }
          }
        ]
      },
      {
        "id": "8daa8986-6290-4cc7-a006-9ce31a866444",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "688c8844-7872-42ba-9257-91094786eb19",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b60c8417-1a46-449b-9e55-1a82102dc4d4",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "7b92c93a-3f0a-45bc-a047-7fa0f6e02535",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8821c08-7c81-4b75-bcd2-2fafb0979ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a82ee5f0-fb04-4d0f-99b1-e63b686b3ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f9e808-9e19-4c5f-97b7-c01fb8e94fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "452914a1-30c8-489d-9f17-ed12692941ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aac72d2-ba2c-4658-a20c-857cfb08b57c",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a12995-5198-4c07-9824-871b7a407f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dff6d7-a63d-412c-8b65-b6b8cf6dc83b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b24343a7-7a78-46ec-b09b-459b1b07834b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "011896f2-3d0f-4804-a19f-69ad3df970ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61cfbcd-af14-450c-80cf-3a898d4fc58c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21e59a03-d93f-45be-bc5b-7f7e0b7bdbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2334de4c-49ef-4f9a-acd9-bfea9e2e0ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1636c5-48e1-456b-9090-5563afaa35bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24cb0bc5-782c-460d-a8d4-c192c92a74ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c0ce8e-ea08-4e83-8b0b-5e0f85c86f69",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a1c40e-3b0e-4fb7-810d-69d6bd6dd581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27433fb9-329b-4b56-adfc-699786a0f37a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1904ff40-00eb-43f6-a4f1-f84cb191b093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "157447da-841c-443e-a0ee-4a57c72e8aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d219fd5-aec2-43af-afd4-46be4572ccf2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a95ec7d-36fa-49af-9cf3-b68a86f634a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9be0bca3-4f52-4d00-a993-b13bf952f6dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6c5e1e-3139-4504-b2bb-fb08c8177675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77ee82c7-a27b-42a2-b236-974a969b1f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd81bc47-407e-4f7e-8353-40477ce281f8",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2591200-1ebf-4c26-8214-caef4b5a5f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8464f4b8-3511-4f95-a719-2f2dcebf7fb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c6f1586-6208-4b03-941d-702cdfa5d644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fe11d05-96da-4ea8-a1e3-2a3b0ebb84dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50ebea8-fd6b-4b1e-8c52-5d0aa28ea440",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "004f7a57-1bdc-418c-b840-b562519383c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d776c83-5278-4dfd-bc72-228cafe6570e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64fcae7e-9369-4e9b-a65d-a428ed57159c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d32d4c4-4a03-4c61-8282-ea1590491398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bb9d4aa-74b5-485e-8778-dc66226a3387",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ca0e868-148e-4e6c-8b75-2df30cedf382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54e0125-0d6f-4b95-911d-5c2abce19119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622efe44-f74b-4fca-8d07-de86120552bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0613477d-9884-4159-8df7-0c897ba973a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdeae92-77e2-4463-a9f8-525ee1482b71",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7a8030-5c59-43f6-9046-e0cd4f77c5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b54cc885-6f12-49dc-916f-7e94cc74ca29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85be9b72-e1bd-4551-80ea-96e5713372cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2b054b3-52b2-46b3-b831-903615cf3d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eac6f9e-2e39-4fd9-88d1-59157dc3090d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "309daa54-6deb-427a-9397-075ac7d326b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b2f007-6c4b-40a8-860f-8f05570cc711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f06268-d4bb-46da-bb70-92c98182dcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5110af3e-a23f-4b90-bfa3-9914d60c4b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259ba039-0722-4d35-8244-948f84a6e452",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb04b880-607c-46c5-b498-2f6b1438b53c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06594cdd-bf1c-416d-a836-4778ce227e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8be137c-b1e6-493c-a6e8-4a907bb107a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3615e65-b089-4bb9-8c9c-f575173daf90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d0c298a-42a9-4e6e-b112-7fa42afff42f",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c27475-a640-4f46-ac4d-d053cc8280e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157c1e4b-dd47-439c-abee-364d267d6137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deec3b1-c640-4c86-9719-84955c0da174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e02af82-8319-4564-9a4a-c6f0ec652121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cf1e3d-b1ba-4043-bfb7-a101b492dd52",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1ab5124-3640-48f7-ab4a-314060ad4022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8e6cc2-0a38-40fe-aa53-bf1ea82e4a6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a5ebc2a-ed9c-4b8a-bdc6-756d0214c1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "66b724ff-e2fc-42c2-8438-3c32d013b371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb8f4be-de3f-4723-910f-d55507d352e8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48756d5-68db-4c28-a57c-c5fe7fdc02d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a49c03-a8c2-4d9b-8f09-c87b8ac0fce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f5d1359-6614-46b6-9cea-ae0023ddd930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "372ff5ea-0f4b-419c-8415-e9c9f501caeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a730274f-0f2d-4ba8-912c-192cebd3ad0e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec59d38-7056-4b41-9779-18696f4fc514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "524acecb-54d3-4fbe-8fc7-a09a232da3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d386eddd-c3a9-45fd-95d5-4194bf68dbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c6fa141-bd38-49e9-9bc0-6ffb0453fda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef5f996-66a5-4eaf-9525-6d1aeb03edb0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a10fa2-5b5b-4bf0-adde-da2b82888460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e558b8-2436-42b3-87ad-1884f9da5b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f460f2-d246-4d8e-8f3c-37ec0f2490f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ada2cff-ee50-4104-8827-cba71ee744f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09593bae-d6dc-46cb-b738-212ee9887dda",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb877e8-fc8a-4c6f-82a4-ebbdecaf16a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44be224e-1a80-4e8b-9a1b-e67afa12a67b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ee36ef-b199-46f9-b64f-7338e7250f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa9bd41f-3e90-4490-85f2-e1e75384acd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d4adeb-0610-475f-ad94-f5d193925de8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6c74dc-58d4-4892-b395-d99125fa9a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4186167-dc6b-4cdc-a57d-069fbc32c0c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df153212-37e3-4476-9420-7c901b2eedba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "417e9648-1700-487c-b2be-af967fc14b65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5076bd-260f-46a6-a884-df0225a229a4",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63b9c137-d029-42da-80de-c49ef3161daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce37a14c-0395-40fb-a15a-a02d4f52105e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734cdb44-34e6-4a1b-98f8-e0513255e9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e33db5-b6eb-4079-8de6-e6c498b20af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f466628-2f59-41fb-ac08-c2e2dfe4ea1c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c06196-f6a1-416e-90b9-b358919091b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02e523a8-6d2d-40a7-b556-a2087cfd22db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57d0972-8920-43ae-910a-91c9c66d4c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "77b810c7-92a9-42e4-966a-215faa971d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10df571f-adab-421f-b3e3-5b8c33fc3ca2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc88515-af18-4e31-bfe8-5469e35100bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cf525d-06df-4127-9c01-4ec66cccc123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62fcbe7f-79e1-4307-8503-844d7d4fa867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0341c5e-c9ca-4de7-a012-4f0392c58fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "086d9bd7-e314-4bdd-a615-2c924a68870b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b10a349-c065-40de-9f28-893a9242e7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47195fc9-a984-4699-90cb-bbf9c63ab554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62870489-3e28-4bc9-a5f1-75c83ffe637d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f27074a-e446-4678-8db5-4f5efd8cf04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8cad2d-9618-4933-be9d-4a777da6a62a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3520874f-4585-4d76-ab35-bb077b8a3b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f274b55a-4eef-4b32-a13c-8f8f331d2c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e0572e-5bd2-426b-a501-d02fc5215c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cfefcc-0779-4a5e-9d91-f9b3d4129f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beeb73d6-672d-4495-bb6b-fd2f9575d5cb",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cc82f9-1eb6-4fa0-a057-52aa960cde1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3e32e0a-5885-448d-bf56-2132c6ea18f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a07773-f07d-4a1a-b446-25d41ab4a752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "968cc184-0931-484c-95e4-6d3f10190686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df2acd6-784e-4332-8043-447bb29570a4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe65c80f-b9cd-44b5-8803-a79011bfd1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37c5b6e7-e042-4955-87f3-43e2c2d997ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ca9358-7155-460b-ae6d-a7b7c21951b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c375fb49-bdab-4039-bd27-a755ee5f2807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b244e2-e121-41f9-b125-57aee903f879",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be75fda-0d6c-4278-b8a6-bfb693ad70b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bff0eeb-13a3-4da7-a7fc-4dcb5d6801b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf12153-2491-40b5-b7be-b2eb89ea8362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4900dff-7d5b-4c46-9bd7-88f1fbcbe14b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8e3bfa-e667-41f6-bd82-de6ecf65c33a",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8167cb7-c25f-4bc9-bd58-66961f3cddaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82473b3e-8603-44cf-b793-3da5f3b2fd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc0cec5-4f2a-41e8-b341-9dcd91bfbbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f036e48-4de9-4b16-99ba-66219dfda27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c95672b-1d5b-403d-85ce-a4bd03c8def4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fa1736-4539-4046-9e2d-2fb9d3536716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2196be08-c105-4ba4-a4c7-ac931fc1beac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e491da-cbca-410a-9c9c-9895c113f159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57fb07b0-dc09-447e-a082-f3204a57f52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9c674c-0f44-466d-97d4-79466970a2b9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b0126c-9ef7-4f5d-b7a8-64ca3794178c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df7260d-e393-4006-9059-eb312ef9a55a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b58f76-1b51-4684-bd26-6449aca2c465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0ef934-b219-446f-a917-2a492dcf5b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c409302-7ee2-4c6e-b1b2-df3e0c0db10c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c5d465-722e-4b9f-bf1f-0253bbe232e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfee8b33-1294-4d64-ad39-a2e54dbdbf98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812781a8-4bf9-45d6-b7b5-5208b0fe4b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f48ebca1-5d79-4449-95bc-e4c8f779bf0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "634aa747-00a4-4248-ac58-f94fc8b11f9e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc355255-c099-42e0-88cf-e42fd75ddcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2440b65-9d4a-47a8-9c8a-5a7570c60178"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e3e88d6-d7e3-4369-99af-fed9683024a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8e273c-6592-41e0-8db0-002036e6f991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c77a7b7-9970-488e-bb16-a4ce5e15dde4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bdbec2-f2ec-4c80-8aa7-1f1fb682de63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "210b9f7a-0fa9-4ad0-bfa8-bbeb03df14e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "569c82f5-293b-45c2-9ded-2c71c6e20cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50100f0b-d3ad-4007-bccf-978e232ab1f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6723605d-7016-4716-b39a-721a6835d4f6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a4e021d-428a-4131-96d6-8bc15bcf01cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0376c71a-73c2-4bc0-9949-689c842493c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5f2eee2-ecb2-4ccc-a971-2181afedf285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c3dcc8-07a0-450b-a18f-676bdddf723c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb624dc-05a4-4dfe-a52c-3c6db46c8dee",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaca1a14-6820-4655-a6b7-0335623cc967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3292a5b-5f67-4e68-8da1-fba880eabd0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce58714-9ad2-4625-977b-ac2e50a644d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d5b1893-95cb-4f35-a708-825dae18dbda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27644d6-0ff4-4aa1-944b-96e3d0590740",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178933c5-df0a-4247-8b60-52261aa61a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a6b7c7-8986-46ea-8192-8080005a710b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456ad467-bd00-4b4b-a5f5-a406bccf6133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "23ff5128-ec3b-46a8-9a95-9b772c3b55c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc53d948-0a19-428a-8089-3b80d068c702",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e863c89-b2d9-4d49-a0ac-4b81d3f414c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94e31bc3-67bd-4339-912f-56cd4b4e0c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef424110-e30d-455c-a7d3-b6f8c76e7706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d238f6-7b53-4854-9bd1-df370b981778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdfa4995-9c1b-46ec-9ca3-2b99f7c27aeb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32da5521-4347-482a-9682-b1e84608a2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0ff0523-7b3d-41f3-9e65-37e252d691cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92622ef0-a0b6-4e00-b846-bac438f23f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef4ead69-4a21-422b-9169-75c0c0ae6bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb06d5c-2ccb-4649-8455-8c19f542cde2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cb4492-8ee9-44b5-9b01-b641db07d911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65dcadd-ef3d-4b1c-9dc2-d329890d5a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b800c8-713f-4f1d-b745-8f3e85fab776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb77a80f-3113-4e3b-a490-024638e74902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9947ff52-ab13-4414-8492-e82ebfc1c1e3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2ee9ba-808d-49d3-b8e4-0a4ddd0ac984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2307119-48dd-4de3-82ce-c68037ccaf98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accf0b7a-05b6-4868-8a5e-208c0fb609d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d740406f-e07e-4eab-a6e9-573cab21132a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b4ea3bf-ba43-4269-a723-166da91f0547",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa8ef33a-c256-4bca-9a7d-95dbf5532145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d89a86-6de4-469a-975b-88577e46ccca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccbbc89-e394-4403-ad06-f030f6286dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "53fb6842-25ba-4e78-b72f-91feca17c4d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360ab0f7-e5f3-4b81-b199-b08543453202",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deba1742-228c-4fe0-bce0-824c0bffc355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7971bcbe-1e0e-49a4-a993-6a6b2d6955e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761f07f9-3189-47ad-a521-ce0f93e8c348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1b83b5-39ce-4e8d-98a6-91a443cb4c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2509129-cd14-4e39-be5d-d360be2c86c1",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1e2d8d-5a47-4d2b-b711-225a5339f8a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06863801-2c36-4204-b071-3ba06856170d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bf8f98-7723-49b5-afe0-767375c55ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "758d4730-659b-40f6-9957-e7047d23be2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a931382-f4c8-4253-a409-ad19c67b0623",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cc887b-2437-45be-86b1-57690104e064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e066d3c9-cd33-4c92-95bd-fe5f4636e3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aed3c36-002e-47da-8518-ca2f2ddbf871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e0ab1c92-c9ad-4bc8-9165-49af44f4b354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378bbcc2-179c-4680-a6b4-b6a2a12eb604",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd7601a2-f2fb-41b8-ba33-ae16c3c77c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493ec4ec-c1e0-4d9c-b17c-09ea5db5c217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f58f9af-6b77-4dc0-a16a-a3cb649566d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3cbff7d-cee5-42e2-a859-c2c0d164a4bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad02da52-db34-4f0b-849b-ad618cb807df",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60c45f8-9aad-420d-9c0a-9f63f845a0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02465e0e-fe01-43ad-999a-696d7cd8b859"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3545c74-6c5f-4f3c-bab0-bcfbfc77afa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "816ba5b1-3a6b-49be-aa7f-f6568aa0c198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb86e31-fd22-48e2-a830-9ba21a616b75",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c9c8e9-289b-4709-9b42-795e59c0eab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39317f1f-9305-4c49-a46e-6defac21c0d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a5754e-7bfb-4177-bf83-119a7f9f51d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96352f75-141e-42a6-a698-73e3a9ed522e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e924b1b-22fa-4aa0-bfd4-5a0298a31a1b",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75cb45f2-ec69-4224-8a40-b60f18d7dcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e31c5ce-53da-4215-8421-28f16e8b70d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc4aa5d-9c1f-4248-ac18-512e900d07f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac59d37-db11-4a8d-bdfd-04af04111019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3dc515-9e00-4cf1-bf25-36e66ea7b79d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1b7e3ed-bb0c-4a23-b7d9-db84dd1562d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c445a9ac-d99a-44e6-9ab0-e39720377670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbb97482-f100-4858-b825-19410a6c348a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "76970959-0992-428f-a565-bb1592d3ea12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21316845-64c3-4945-9b16-d3bac02d421a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "338e13cc-7c6f-4823-a67f-3e56cfa1a34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7328aaf7-ead9-45f7-9c51-3dda1797cae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8472983b-0542-4682-bac9-a32587392679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "653a06d3-af4d-4624-a34a-9c07a153c655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115fb1d6-712f-4581-9085-7364c1442cec",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df357e7b-cce3-4411-b3c9-eb001f7e9e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff7ab6c-95f8-4001-984c-b5a0194bfa41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90293aee-38ac-4213-8272-1ffa59c5fbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "653b16b2-1f72-4ae7-bb05-be1bfc3ce51f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7b9987-b1b6-41b7-8f50-8bb0dc6a90dc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf90aa1-3eaa-41f2-99aa-bcd6825738a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ced0b89b-0eb2-48f4-b6b5-a9cddc3312bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0b1494-47f4-4c0b-a35f-c51e1f3e73f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca25fc59-40ae-4d1a-8a43-a8f5e189d64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "852bab5e-552c-40da-8db1-e55d36534c60",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8e0319-d18b-470e-9d8e-5be6fc542f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfd190f3-51ab-4956-aa95-f8eb3c820d3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1555ace-f9f7-4f68-aebc-877e2d228638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "997162d6-6bb9-4ab5-aa75-df017860dd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6002cb-d5c5-450c-a7e3-8708c4abd6fd",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f123a9dc-89e8-4792-a6d1-9a21b603f84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69bde88-dd54-4425-ba58-2b8453e08a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cde2891d-fcd6-46a8-882c-f1a5d1bdab1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df71e3e1-9e3e-4c3c-b302-284471ffc6e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ca51a9-5cc1-4dca-9d71-a172cdf91fbd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5753f6-5f72-4fab-9461-b0f7fec87c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82edd50-e802-4d07-9363-eda615089f40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "849b25ef-a027-4f76-8e60-268537818d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a31e6dcd-ad2d-4adb-ad93-b9f7391a14ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968fe628-ae8b-4383-bc31-c4654bd383ad",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d09678b6-8e57-408a-a5c4-8387b9a2a820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e3a84e8-8344-4fa7-b24d-0a9c0767b76a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee884d20-731d-4dbc-adbd-c135c8b0bf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12ed9b8b-478c-4b1d-9775-22e364d4bb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72767810-4441-471f-a55b-529b46197752",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21929a2-9b9f-4a7d-b042-66a4f7f135f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cde83795-1d19-4c25-8d9a-30d195379035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33283f62-ec30-41bc-a5ee-0e8bb2ff022b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c11f1e46-f27a-4717-8a99-e3e00e2fe306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3371f4a9-b5ce-4ba5-af26-5b286d2a09b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2d79cb-c49c-4aa6-882e-66d0d42892e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03842177-7f85-4a79-9f07-8b175b0bd96e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d967a35e-1073-4883-8164-2a3e39a7cf47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad287dd9-85c8-4e09-9d59-63934be2ddc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1389135e-4f4f-4001-879a-a2fdc0b8191f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd0d82f-5909-4249-b307-a77582bd7997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62c74aca-7b83-41b3-8706-501a02d7a89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c5e74-d31a-4793-adc3-1069bbabee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bf0486a-4da1-4dbf-83ef-53a336404a14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98297b34-b359-494e-8e0a-e1537d2f5b5a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "916a7cf2-23c3-4cd7-ad48-f85f4e91c6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba76dbc-b912-4169-b39e-238413c92259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fc9638-2efd-41dc-944e-51742772d831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "493b07ef-4038-4157-827b-214178121bb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "489a509c-809f-4331-97b6-ccdea4389c74",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca5edab1-285a-41bc-98a8-15340bcd2567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2013d5b4-7085-4c4d-b6c9-e6ec9f80e155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c82180a5-717f-4b3f-abbc-00b29d12a7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "47a9a193-8833-44db-b555-8403a7d549e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aafe78e5-22f6-49ab-8e96-7d4f36f187d5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f877da7d-99a2-4a4f-af04-60a462a6353c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08cffac2-5168-4c40-acd9-7a28a0d2db29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93f488c-525a-4e86-b7cb-82234124af30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d402f677-b4a5-4fe5-8c6f-1d23bb137fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e75c6f6-e6c8-4bce-9eee-488de0953ad7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e39a07e-597c-4b8a-9593-8802ead7516a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6ec478-a9ab-4909-9048-cbc3af869ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a0292e-21e9-4625-9051-f8d07768a977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "18af38da-2655-4e4a-a5c5-486da9b5ae3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ab90a1-450e-4498-a57b-408f310cf2aa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193f6f47-1806-4398-a24b-4698502c66f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4aaab0-a1f3-4a81-897f-bbd40ae2d248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3b0182-f6d4-4df9-8b83-00bb7e9de10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "21e9c427-9f11-4bbd-9d8b-e72d357be68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540e5e07-0f7c-446f-998a-50579d8e8e69",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fd6b536-9971-4b3b-9455-f1553ebd8335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8eb4208-aee0-48df-9dad-d7ab90eba5b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "908f9457-939c-4b71-b720-88406fc2c770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "45d475ff-57a4-4491-8e7b-2c1945557977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c684c7-7d1d-4da2-bb40-b13104fa0e8c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac6cee8-6e98-4c96-8320-6433637538a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cfd4d02-16f1-4628-b846-76b26ae62b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09577145-c4ab-4273-8dd5-6e25c566875d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2451c1-cf1b-4d65-90c6-bb478367280c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477acc1e-9273-415c-9613-65440e866a02",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05799fe-e0d3-4360-a76b-7507496dc61b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702c3c30-60c2-4cf5-b11b-53d8cb65c649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c055e32-8f5d-4acb-b095-ef21975e7c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "374add3e-a81b-4d3a-9079-c273bc0f97af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e318c3-20c4-453c-af42-efc018e5de02",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83401164-4f03-4777-8e34-15ca7c4b9cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7adcad9-2d34-433e-8623-ada137c49268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80f3d38-5039-46a6-b46f-44cce7795b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec7ed6c-c13e-48f1-994b-97f49eeffb27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3bd5a9-1c96-40e7-bc08-c37fedf8cd85",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d50b20-5b77-4e73-ad0c-6d27917fa8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb01519e-db1b-448f-b9f9-7e2adc1320dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb10c46-040c-49ac-ab4c-6d352ef60053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a48870-3e6f-42ed-893d-3bb247992124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b4f8ec-27d4-4f97-ac31-04ad17ad6f8b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede82592-f907-4cdc-a69b-6c0eb94b0901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32759b57-ad54-47b2-a9a4-a1cad6aaf7ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fadadf2-d891-43f1-8955-0f83d1b5d9e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "236e0e3e-f5f7-4c0b-959a-c98d5ca937a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9538afb-d743-4f71-90c6-dbfe84b7ddc9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81112ef6-9b2e-45cf-8d15-47df7a457985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a2d0772-2424-4d6e-9a5a-c3bf092e5d9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833d3926-c21e-4dcc-9f7e-09b38bfa02a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9bd4f5e-c866-45c7-ad5d-75b49eca988e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219e4201-9a9c-4de4-992d-e1451a082d50",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1386180-40b2-472d-bf42-21c5b6e47b4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8f3fd8-509e-4de5-80ee-b1164e9100d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1333718b-f365-47cb-8a8f-a40e3935dbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "81553112-62c5-447a-bcb2-60a76d7c112e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb3980de-7ce6-413a-9a51-ab0417e2eb20",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e2f8d1-1402-4529-b705-e3cb701d2bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b373cc7c-b237-4d21-a127-c1d1c38f48f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff94acf7-40a0-4cee-b21d-071d55c2fb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0411592-57fe-405e-acfd-04e93baa761d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018e1f3b-3006-4a02-b68a-a7a4955b6a9d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30e514b-a3a5-4322-a303-850c333f1504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c1696d-432b-4200-b447-98a69ff1f120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b7586d-3721-44c3-aef0-98abf6897c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e50b6620-a1cc-4ffa-825c-ec21a600da27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0aa3ea8-2e5b-47d1-96db-5e96d1204854",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef8ce92-89fa-4bdb-a28e-62f2e815f15a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53ec0565-52aa-4bcd-a9e2-8e5d4135ebbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465c3192-e25a-47ec-a2d4-3d7263200d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bdc4d2-0c1c-46d9-ab20-925c2550dfc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e02650da-7db4-43d6-b465-21c0f79002f4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a2964f-6a9c-4e9f-b2bb-0929176a96a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d875cef1-ea1a-45db-a264-7f14c2d6da56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba3bd13-a58c-4086-af78-750170c90da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e36d590-866f-4485-a077-7509f545565f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5d8ea14-7ab7-453f-b854-79e655ed1c3d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5edbeda0-f682-4f0e-93be-956da07174ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a342211-8e8a-4dae-a469-cb6da3e4f927"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db74708-c7c1-4ee2-98b7-997808138c32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba39a28c-2c9b-4cf8-b836-1f64e439850c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6706b4d9-f2f3-4795-b3c1-d6945055ca67",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578eeecb-909e-42f3-aab0-0c12c997f8ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b70379-9184-4ab6-939e-a977451e6f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ffa4dfd-e07e-4901-8c11-743c27f2f841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e026fa9c-d9d3-4fbd-86eb-4dae5128319b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0c579b-6807-469a-819c-9f955c5b2437",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccb4d49-2742-48f8-95d5-0a0b5838a574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7246b58b-211c-4724-8fd6-912bca967d72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e9143e-bd9d-4289-8eaa-0e6c5709de51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "43215ead-a3d7-46f0-b094-4995ee84439e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ed6c13-caf6-4c96-8476-bb1d3b7095a2",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29691b59-2a37-4d24-940e-83f0f2f2afce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d495a773-c518-42b1-a6b8-a7180fac6118"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a57b01bd-bc8e-4d49-bce3-fdfe51b66a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b2c17e-342f-4589-ab6e-c383a289744d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0440cadb-717a-4363-8ebd-6a43603b079e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c2f164-f818-4c9a-b0db-cfacc3b5feed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa4581e-bd07-4896-a6a6-2612d0d1af8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da12cdf5-8d88-4824-9270-d2f5d8e7df60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d83a0d4f-c14b-45e1-a256-21d5ef8a224a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e4bb70b-433d-4206-8ff2-f51f104312d7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0644ebf-c90f-4ced-8732-5315686f6e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4e00ea-c0fd-4321-9cbc-86d9d0176897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1a9425-7eae-49c3-93d7-f0110ae618c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3869b490-3cf1-45fa-baac-0f25c5bf0500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5b4e29-5add-4700-a86a-55998860ce83",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92d3c48-3ffa-42a5-b9f8-3ccd80d0cfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ad7b59-0170-461e-bc65-3ef0d0b113d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f6b96f-f5b8-4ff7-bc99-b5229246ac86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "341dc488-efe6-4854-95eb-bdd46799c805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5777b997-7847-4052-8860-a76bd71917f6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e14a825-19a3-4cd1-a846-6610c996859e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e12340-4bff-4919-ab50-77702101a42b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e81dc4b3-f559-4ac3-b6e6-d5cac338bbc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed4334e7-5664-468e-a36f-71764ff64ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f26747f1-db06-49a2-8645-4f42a2102495",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b20e8ac-8a4d-42f5-b680-d9903d7e4c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607ffce4-27f2-4894-9a63-f937726e3fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d319fe7b-dd96-4c4c-a06d-aeee205103eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac3357b9-d778-4ead-8bb4-c9b922ed39eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae3209d-d174-4712-bbbf-ef2a8b10efca",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76821de3-dd96-4c82-ae7c-fb5c1255f092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b23c5ab-31fa-4b49-8363-7dce11316857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81b2006-72bd-43da-b400-d34633d966fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7065b922-3b33-4996-924f-13ed0763d5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7860086e-fba6-49d7-b4ca-a69c4f6eec3f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00154711-daf6-4ce3-b197-f2917e87f2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e669f06-3f04-4069-a24a-f0ae3980b6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53062c1-a40d-4242-a67a-f2d80fb84923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "655788e3-2fbc-4b98-9ef3-580028b6b903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9838d009-4a89-40eb-8290-03275d2922f9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d5eeef-b73e-4377-b6f3-12c5641ac536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5013eff-ad25-4334-b000-6d34dd88a7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d208c38e-5940-42d3-b1ce-7710f215e10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a26d5a03-be8e-43c5-b665-bb4438c839a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908651f2-5441-4675-bd65-b7dfebc8f52f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b53fb3-369e-4c96-80da-158ef4e9b741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53abdade-e814-4b66-ac21-e90ef82dc4df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53da332-a193-4942-9152-d08fe970d8fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "49f16beb-2858-450c-b99e-8a67977130a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d76297-ac06-43d1-a979-807773940550",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d50b0a38-0682-4296-9399-fc9bcb3f6a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192b3aa3-0925-4c9a-afcb-94cfa0dafe41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2552fde-1276-4399-adfc-827cd0e087fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "339c6a10-b5f3-4671-bda1-596bc1617b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d4c346-6e27-4bef-a63a-2074ce57d88e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc282c12-5ef4-441c-aaf0-30aa016d3c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9068039-1ff1-4ea1-8d5b-d91ede514553"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7e0500-1bb6-4a50-ae1e-d5e7e325abd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "77a0dd6d-bde7-4299-9bae-9207f3a77fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff037e2-71be-4d17-b7cc-8bc5f8852db1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f45555-1ec7-439f-9869-b74630a5c97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce816511-bf2c-4736-82e8-206e20dcb8c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf674aa2-4699-4d55-a43d-6962bfae9085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "251ce743-4144-4ee9-adae-2952ea4e8748"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9c0b88-ce64-4783-87ca-f04593b4e9ca",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223abecb-546f-4401-ac92-41e622371534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7c2dd638-d7bc-4970-86e0-0cd26ca2a78c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f4d80f-e0f4-4549-8868-dc63cf6cce3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "3efbfd7d-9793-41d5-a77d-06a3247a8d87"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b318f8d0-5e69-4574-8c47-b5d3e0bf8ffc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "581e16db-ab5b-4e7a-89a5-3d1bbf7a2821",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c59f32a-37aa-4b55-b1e1-f652d2f853ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5ff8267-5907-4720-89e2-876fa1082193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c1e838-7faa-4979-9e2d-290a59e4c333",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e718235-6c8b-461c-9f2f-ff1765f15c3b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e904fae-4059-4abd-b2a8-403d898406a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d285deab-f505-4e05-8130-bc255d3d7b58"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a636594-9ce8-4838-9ec1-a21c4b46c22e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03cd20cd-53e6-4403-b6d8-1d8e7dd13dad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5c608ece-22ac-49f2-8351-772e7727e58c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3a8ea0a1-d166-4ba7-8d53-315b49cf5894"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "15ba20cc-5864-49a1-a002-2335efa9c42a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2f42511-a5b0-486e-a6b5-358c7a0e95ec"
                }
              }
            ]
          },
          {
            "id": "6928dfb1-c2d5-4c00-b5bf-86406cf3c7a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "59d97d1d-e3f0-47dc-9747-bfbf4a82ec6f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee975cdd-8274-495f-aae5-9bded9f6f1f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1757902-0071-4eda-9315-c2892968f4a7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b358902-68e9-47a2-8a00-90b0192bd997",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "be63541a-fc06-4db0-9862-26eae719b99b"
                    }
                  }
                ]
              },
              {
                "id": "b44d4de6-13e7-4d09-ab58-8fc3c7787367",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c2f5083b-7475-40ff-8ae9-a759198313f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a39bd823-111c-4da2-b443-358b5307b3ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ba73999-74cb-4d62-a3ba-a32778bad194",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "358a5b07-7d05-4594-a4a9-f759627ce084"
                    }
                  }
                ]
              },
              {
                "id": "c01dfcc9-dfcf-4a97-bd0e-bb082133b81a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "01fb687d-cc74-4697-8e24-dfdef837f8be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e17e05f8-2876-43f3-82c9-f36b14f5ace0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "376e25d9-ffff-4107-96dd-2a98736fac62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b1e6a095-2964-4753-952a-f4ff567cb764"
                    }
                  }
                ]
              },
              {
                "id": "eac76b83-84fc-4df5-97b1-ee0790280a72",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d25b5d7-4d49-41e5-89c2-ba4e3e90e8d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3577dbd7-bf9e-416d-8ecc-e6f8faa88618"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6504601-0b57-4a91-97cc-5f80908a6a3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "25b66f5e-41ab-4c0b-9401-7f55eb40f1a4"
                    }
                  }
                ]
              },
              {
                "id": "83baa5c3-0724-48e0-9e43-92fb7b88d3a3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29862069-e7f4-4148-b234-7b84070ac014",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25110713-ffbb-4c0c-9bd9-ab58395ccac7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cacdbac7-4d57-4f50-97de-b398d61e44f1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b0a6e117-ea4d-468d-ad9a-3fc608ecdc13"
                    }
                  }
                ]
              },
              {
                "id": "d6241b09-4165-48bd-839a-e942c78a9a0e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7693c7ed-e1ef-446c-a42a-8e628cb79238",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33ca5be1-6726-4fee-9cde-33954b6830df"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9e7170ac-6013-4135-82f2-829a7d432ee6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3baeb420-5af4-4f52-9f5e-cb63ce5e2bd3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c04ec9b7-1625-469b-83fb-a871b0b033bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e30ec46b-46b7-4143-a1b6-66565d14443e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b142cf1d-6624-4f76-b1d4-1994194c1c9b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b9660ba5-873a-4955-82b4-9e907549fa98"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b6a49edc-7f57-4866-bbf0-e35339eb1c97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0ad7cea0-ead3-43f5-8797-4bd5e0e13a3d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0bd359c2-e794-43d8-92ae-39e58cb42a81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "982807e7-207a-4429-a42a-c403fdd7e45d"
            }
          }
        ]
      },
      {
        "id": "c8c6b564-5632-45f6-9fe9-03b6820ce87a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0fc6dd7f-d594-43f0-96f1-66d0c37ff3b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7956b32-ff1f-4436-9e7f-858e31e676dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb3c0bb4-9666-41db-b2b7-69c5c1f3e81b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a0affae-cf4a-4801-b952-0182a8bb94aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed689aec-c42d-403e-bdc4-f1eb511ebb13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e45e4e8-12ae-4658-b88f-b6f3f6c4cac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "79969071-7a31-42f5-9db9-fba0d126d2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d99aed-e377-40af-8d59-fae1afce8105",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a150ff28-97d9-4622-bd74-2f8d32a1d27a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ede42df5-8e99-4b1b-9a07-a560f2cbaa06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b36b7a5-3bbd-4661-8e1a-c6c057805444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "335ae899-1207-48b9-8997-0922bae75067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41ff974-32c8-4410-9d3c-0ede6bb65ada",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9ec3876-9ea1-4b85-a559-36b4c50bb575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a08a34e-07c6-4cb9-a319-7e92c1f319e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3ad0b7-4a75-45db-8b90-22a9a976132e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2220746-9d1e-4aaa-aff1-6de9b8f22651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd96440c-8352-412c-85c7-8a71e30085b7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3014a725-efa5-4a33-b47d-9f5504ef5673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1beae1d5-c0f7-4665-a36f-6c02d0b06a61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8681d852-59cb-4eb8-b5ba-aaf5d2aee883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "aaa21f73-1f55-46b6-8936-deaeea1b6726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7feaf34-b05f-4af1-8d77-72c3ee893c60",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3d27f1-d1c5-498e-a2c1-e245e2504ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c8e7bd-8a0b-4c3e-afb3-bc00e0798bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edee360-f8ce-4a21-8996-f75953a5fc47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a304fe70-f2eb-4de3-9df9-8232606a44e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773b0eae-5998-4585-a069-f994ebd2b199",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c52daa-1a8f-4e06-966b-597be57922be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9ba1ec-180a-4c97-8340-370db35ac5ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ae0d08-0d33-484a-90cd-23f63a88d4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "29c6dbfc-cc49-4a7f-ac09-b51a9a4cb420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed36d73-df78-444b-9ebc-22391f1a3746",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b78219-6a3f-4cf3-be49-14a47800d22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76de6722-8199-42a2-94ea-5f55e3fe8112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b680bf7-00d0-4a3c-816c-4adb6f66c9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b55384-e4af-4a03-a5e7-90e921643e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad3ef3e-c54d-474c-8362-048a00b5a09b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2deb0e86-c8d2-4bb9-ac4c-8e80a667adb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23718e5-6c66-4b4b-8c75-19eda4ecb6ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe13b0a0-88aa-4476-8fae-c7d47a6b0d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc8ad0f0-3966-4d0d-af84-b1229ad108e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e376bd-c1cd-4f0f-b548-b2c7bc1d3f2c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91023524-701d-4ac7-8d2f-c23699663571",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c548bdfa-2e79-4c18-bd43-7f85a5a77cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0989874-5933-4086-93c3-8619ad1d56d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf715811-e1f1-47e3-9fcd-a75c8dcfcfe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4561bec-fb5d-4748-bf66-ad960f3d0be1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be41f91-9449-404b-92dd-3de3d9091551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e819ef9-93c2-4e09-82fd-466f4fe2409d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5dcf1d-006d-41c9-a6ba-212326cc989b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90dc17b1-e563-4d19-860e-7da9b5f74320"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fbb2af-91ff-473c-8663-3e515de2af6a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62976462-d2f7-4f76-9cda-b8391bf59c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44209a9d-1686-44d9-8262-20439c3cf8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6478ed5-c8f0-4edf-9950-27a92af03726",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "31c18d28-9cfe-4454-9b94-2a78fd9ef95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4001595-fd94-496e-8220-34e63726c9f9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec7f22d-97eb-485f-9f23-d04a125264c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a368d6-ac41-4a5b-9282-c06619a7eb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f1d570-b7d5-41aa-8e59-b492d66dc05d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12782146-5d3c-4e3e-a429-de70e3985bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0c76f53-b431-4f12-a04a-e33fa8de81c9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cae3a4a-714f-4d95-a843-48d461cdb593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b71583b-8acb-4029-a60c-55722a2d7950"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10158e45-129e-4d12-9863-2b63c65ec20d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b6263c4-2a58-4f36-bbc8-e0ef926fe12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e961d0-4fd8-4baf-97a3-c541955452b2",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b34620c-d45d-49b9-a37b-ba1a5104474d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa67462e-502a-4b1c-b7e7-83c5a7454782"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df047f22-2884-4a99-aa69-f6f61a7b72ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "582de34f-fe99-4ac4-bf33-b81b397bdd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "241a9fc1-f475-4cfd-9ac3-914275d27ad4",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d0c428b-1e0a-434a-94a2-f63966060f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3966a4-f681-4fc6-bdd0-df6d004acb9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb53909-e907-423e-bc9f-c8baf11a1fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d99ec3bf-ffa9-404c-aee1-33911564e8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecfae5df-5234-4d1e-9ce1-d91452659425",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4def66cc-835c-4511-b23a-4cfcc3ba7321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c7c33d0-a067-4b32-96b4-de3389f703c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "494debfb-7994-4320-b282-6d174aab3563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bba65881-4bc6-4e6f-a8bd-c6050fd68010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d85777-a7dd-4ff9-8780-b39f8239c413",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74fee02-15b3-4465-837b-7e7f4692f153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad6e7d3-0226-48a8-aafd-1c7fb2d2442d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4387a599-b1b7-47be-a0b2-7c2447761992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9cdb6e-dcf5-471f-828f-2ae2b998a0a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfce502-44e9-4e64-b93c-f8a1ebeaee90",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42921006-406b-4c76-8871-1e4548d79bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba7c119a-f046-47fe-992e-cd8906bfcbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87760399-d9d3-41e5-b2ff-e4d3c35d73f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "712ce7a8-94f5-4efa-9201-9ea4379965fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f119c8-7579-4c3d-b17f-966c2147b7d2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f75b83-4a7d-4585-bf9c-e9f24a158283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd3ac89-ab63-4034-b5ee-64851fb1284e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f67b2f-0a72-4a75-a18d-4afadce1b519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9fa417-a0f5-43b0-b0d4-d21e824ba667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84c1792c-2768-4f47-a119-60c841c10615",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af9ba1b-024c-4410-9a19-9c5f1b937aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1eb9632-99ce-4f54-bf72-db685338d874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e5769f-0270-4b40-90b5-1f8019f7d9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b66d443c-0543-489b-b352-1c2d2736144b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162983e9-eeec-4665-9603-9e2b52f9b48c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19d583d-3b4c-47e9-b7de-e5ea5c98a3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3abd9074-4f1c-40b6-823c-5f626fbb5244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704fa321-30d9-40f6-b061-cf96fc0b9a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cb84a64-0674-4097-9400-17728a8fd4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3310d50-77a8-45fb-9c6d-6a731faebb3e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92432b20-d8be-4012-99f8-8a72b03d42a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cef26e8-6708-487f-a351-fe1b7cefcf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2caf7de7-061e-41cf-8285-ac902374a2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99bc8c63-3a50-47ad-991b-7b6a5871508d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269d7688-7787-46ec-8a3c-e33c017da1af",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78520a0a-89b3-48ef-aec5-861066abc616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ef5eb5d-f5e2-4d06-9362-cc8161225344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c94ff5ef-a70b-473d-b107-15eb6c32aaaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88c9d5c5-a61b-4708-bc56-867d843f28a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e40833d7-4fae-4591-8cb8-e62eda7add8c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44a6cf0-d4e2-4dd1-817d-eac9993cd507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ca4abd-2e32-4d8f-8e76-682b458c2ffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b501d896-1f38-4506-9f34-997f3d266ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1f9308-09ae-4d12-8ad7-e37fc9e4ddc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e5d714-8105-4c70-bf37-6d6aec1b143e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543724ac-d54a-4d81-920e-123d5fe04ef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5454386c-07cb-4728-b9e1-de019cc56a9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426adf0f-acdf-4712-b692-bebff662d2f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce9c5fe3-d395-4b19-84ee-5cbf1f47beaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d279607c-46de-4238-a268-51223893d0f2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52c85eb-46fa-4412-adca-a3d411d3ea43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c466256b-739d-48ed-b4d5-3fa15440d7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786271b6-bd5e-4a68-881a-7ac50ce2863a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57ab8e7b-8c99-4cd7-9a72-35e3a57fbe85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "672bbb5b-18d6-4aad-8b81-dc3bc2d724e6",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b7cc19-b081-4e16-8f45-7e395bbcd70e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c017dd88-5a57-423b-9440-0ee872c337fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4ec455-4e68-48cb-89a9-dff3c6433b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6643b1a7-2925-4722-8b63-431e3342d587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b43f46bc-79d2-471b-b90f-8a8d1f573c5f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b230039-ace2-4f33-8a1d-1d25934c4a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8973e14f-500e-42b2-964d-8df0e6c5fc4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f13643-ed62-47b9-a180-d382e58c4663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a7e3cc8-c899-4c54-8001-b0c15549745e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024b6252-f9bc-4303-9a8e-ccc471f83b05",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12198256-5c74-474b-ac49-71da909b1090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3b683d-9098-44cc-bdaa-2b622864191b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ecf75f-3ee7-4009-a9d9-f8bcc4989430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00c9f68f-6375-4375-b81b-ed2fe3c7d6f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a4a45d8-8d36-44a7-89e9-a1745524ccc9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a69207-e43d-49da-9a5e-599255137eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe158ef-fdb8-40a4-8bed-ac19be970b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b87d0c-a83b-47f9-8c1b-6ad8dcf03c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2de94caa-e49d-434e-84f6-4995d9dd1a9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c476a5aa-c5ad-4f1f-a207-04888342c802",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e67e0ae5-def8-425b-86d8-74abaf7b64ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c844ed78-b6ea-4acb-a750-985adb1e8ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4949d257-a937-454a-83f9-5ee1ab473cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a04a27b-908c-4916-9d9a-ce8eb958d3c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6e7039-298c-4498-beb9-bce6cb6c3098",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eaacc6c-e216-4207-9cbc-b84dbb05763b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d229f171-b784-4620-ba03-f9881dc3e8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9f87a5-c59a-40ef-b42f-0bb0f60a2c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e652dc9f-b909-41bf-80c6-bec09175f8ec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fa5a2e4d-255b-4877-a419-49d254a8d360",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8fd257cd-a8b5-4182-adbb-ba6ec28d5d75",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78ce84c-3173-44ec-a9c9-bae571aa5684",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "99cb38a0-a94b-4799-b595-f474b1351103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738baf20-91ad-4956-8641-e183692f19a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9975ba2d-e219-4dfe-b799-aefff8a049fd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87949323-be10-41e0-a0db-e9d7d3a8b280",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb29d4b4-1317-457c-9eb8-d2bcd1522e74"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65275d0b-9ee0-40bb-adeb-4b92fef58cd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c57c23df-a779-440b-b7dd-f2a1b65ec8a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a3488b9b-27e0-47f6-bbf7-c2f2e1291782",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e105c928-7199-47ac-8562-c35857a66166"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae5c3bd3-a1fb-4dde-9f77-9c48057a503c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d917f97c-00c3-4872-9742-0ec37ca4d720"
            }
          }
        ]
      },
      {
        "id": "9423c66c-0397-4f8a-91d0-39e5280091b8",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ad7dc3ab-c69f-49cf-9801-0fc0aedf6187",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb5f2de0-9d8d-400a-99fd-6ea7e3c2425d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "533c69e0-3d5e-43e9-abfb-4ced7ead5e99",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc0d7d2-a1c1-45ba-968b-e541553a6f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823c8b6d-b4b7-430a-81b4-8c793a6e5770"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef9e1d2-2d6f-463a-950b-ee53a6279d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "df9f57a4-e3cb-4b34-9767-bf9c30d1287b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac82f0f-4080-4398-a478-492211260e52",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0443fb0a-ad17-4ed6-b31d-c0803fb8af53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea359f99-f88f-45df-aa38-3a8b80f9f754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07b6030-8f51-4a95-a2a4-b2bbf8628f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "088f6818-79a1-43fb-b247-8d0c6795b7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca2d5a6-e35f-4ff7-b5a1-02b57b604576",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca8644c-e49a-4c5b-992b-c59fecb7d386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5555d9-1f34-4762-a2fe-981a3b39656e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a8dc78-1815-46a9-81fe-f6c7fa81cf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac8a095-5f90-411d-a508-29eb533c7aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fec01c5-3bff-4d61-bacd-a618cf7e02f4",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f89312-2bde-40ca-b7a0-dc4e896f9504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b1054f0-f6fa-48cd-abbc-1c572965bd41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70efa8c5-2373-446e-b6da-55417cd66a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da570ea5-d332-4c62-ba01-3d099256e4a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6265e148-9c1d-4fe4-b64f-f506d8ca59bd",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71202963-3b64-452c-a7dd-e63f5b588ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1365398-6728-4805-a42c-2486e71612d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0636fbef-d52a-4328-a334-57d157c4cbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b403cd2-9f68-40af-a562-df0d64dfc408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "050d9b7b-eb99-483a-80a2-cc773f179ce7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f399c3-6700-4012-9326-f8600873acae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b695951a-a0d6-4520-a194-45abba559902"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0ad1465-5458-41ed-b9f0-e371faa171b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef964b0-e091-4c44-80af-ab224f560569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "659b4c2f-7660-4daf-9341-f8fb9255eb5d",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e1bcf5-2dd2-4b46-a207-cc4c93f236e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e81a98b3-c3f6-4f42-8ade-1f30f5a6df56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9666f207-1d93-4675-a4cc-5ad7ff7f3489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f285ec-9743-4605-b2b2-93a3214e78bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8594fc-2a1b-4b68-b3f6-abc2c80ec237",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35044c3-b8c5-47de-857f-a2c71846556f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f7d6f5-47f8-4aed-b5a2-5c83c59f0c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9df5396-0bd8-44f1-9749-5d31e9528658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d78dc7e7-884f-469a-9cd9-0adda1c19ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59572729-79fd-44dd-bc0c-99c4f866d2c1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4428970-1964-49ad-bc2d-d13933e4bf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7931a3-c285-476e-aa03-63d17fb35057"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52ca5f9c-0f56-455f-a682-07f27191200f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d2cbef1-0c5b-4836-9780-c990366f62f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c4df50-ec93-4a03-ad13-2192f4d106bd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "210b963f-8585-4216-b7b0-c48000d00039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e97a7a5-c34c-491a-9676-f7b09a5bc75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75b7d4f3-db2b-4988-a23a-7c75800374b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4165ffe6-3ca5-438f-8da2-d6e6990e6c4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3edb76f-6c4f-4516-948e-733076068180",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdeeba9-c656-4eca-b068-65d783688a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf903a88-59f7-4329-8501-14e05528e968"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69595ae-edc8-49f0-afb1-f70ac04fbb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "183a2d0c-4763-4b9b-a17e-62a71f2ff074"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb482ac-bd0e-43ff-829b-da67c76252f7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e589d4-b361-4a28-b053-73614e78b62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9b474c-355f-439c-aaa7-b6c2ebe18d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d31b0fd-0fc4-49ef-a120-aed97b358932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1baa0afc-5864-4762-968a-8d88dbfd9152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73f8e502-07ac-49db-a9af-90a28a48d756",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961390d6-18dd-4f18-9822-0b83248bd10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b60ce31c-1892-4acd-8bb3-ccf63eb4e893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a82c6da8-9f5b-4f7f-842b-dcd6d2ce8bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "231210da-e509-4de9-ac4a-67202e175891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab57d80-61e4-41bd-a9a3-00f8a1a6377e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0cf3b9-e77b-43d7-982d-7949be04115f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebc82ee-922f-4edb-b03f-3f646e163bbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b44e45c0-267f-4242-af8a-1758d7dd10fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a53ee12-259c-45f3-9eea-336dfe4e9e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85a266e-71fe-4446-855c-25c171d8418d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f59dae-32da-4e21-b2af-a29caad42300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346e69e5-40db-4748-8727-1f1fc585f8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f93301-3bd0-48e6-bc9d-08f705214e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a171461-a83f-4f14-85aa-311772971f3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694418ca-3d52-4aa9-b942-c02131806410",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "533dac6e-041c-40e1-8ec4-b37bde77bf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ab717e-2d81-41b1-bf80-083bcac6b740"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da484320-ec48-4dc4-ad3a-2b645aa0c515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc446e1c-e36b-4f53-af64-0e0c60d68662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25eee5ec-6448-4643-844a-e9ba2957f484",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff5f071-ecc5-4938-89ef-cfcec8579362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf844f65-2d29-42e6-8a1a-bd729f8a0426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd52146-3183-451c-8928-00062ed3cedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1de0f5d6-9bf3-4ee8-89e0-12fa0b7ff88c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43a304c1-e477-4073-8ca9-a958717a7989",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a58a253a-998f-445a-9c1a-4dfbc239688e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d1d1e24-7e06-4970-b7c0-3c8f662549e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f44b74-3924-40dd-a603-cfb40f1b1288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "856484f3-83aa-4667-aad7-beaeda8094a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "734e348b-fac3-4c6e-9ad7-8977c89b2198",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682cca9f-7d88-4d7b-9092-d9401a28b1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55e9022-4413-436b-978c-36ca82399fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219065f7-ae44-4ba3-8a3d-d6b49add25a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72a7bf4c-10b7-4e32-9831-e8bf440d6b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a068c173-3ec2-4c72-8104-2869b94635f6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "128a0922-b96a-44df-9b7a-74fabd2548eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc8f182-d3ea-4019-a6a2-d3fdce7aa686"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43e3c190-6a7c-43a8-a8c2-b280d00ad38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e887d4-c8fc-424b-9fce-fdc4c9eeeec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909dd3a8-159f-4aaf-8b2d-44731132f0f6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f32775-4606-4c43-98b2-7bd09d3d419a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2dac328b-f11e-44b1-ae27-b76f69dae2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c494a18-121f-43e0-ac9a-2e7ccd621c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "578190e4-13f6-4689-bfb8-1152d99a0e3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162c7d1d-962c-44a4-8e64-5bae8377fc1f",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617933e3-20ba-4f38-bc85-48f579e5d061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9cfbdbc-6d1f-4d98-ade8-202b517a1be8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "809ab7a7-c28a-4a04-ac71-92ea17b30c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4d0130a-0a75-455b-bf26-8124d52141f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cae742-00d6-447a-8bee-82fc0aa963e4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa73180d-5eda-4d3d-aa04-d9e2a7a65cbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "515cabc5-7a1e-49f8-bca5-f6bb05a09603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e45b140-8399-408b-9033-0c92fd5b58e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb9ffee3-4383-4e79-bc70-8c79ba9355db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe327e60-e933-47e8-9e12-f9265dc03805",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86605b4d-6231-41bc-bad8-a64e828a083e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce45468-1491-407b-8d71-809a379b522a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0e8c16-1105-4db1-a3ad-bfb22a9dd72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a28a62f5-d9fa-43f7-b01c-40264c018969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0986da7-bc80-4c77-a658-b00af6541336",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08679c6d-edf5-47c4-a1b2-f59baeeb2a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72588926-f083-4d0a-9dff-f37c1b4e9b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f163249-d873-4133-a279-e854fe3d62f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb286307-64c0-4259-8878-7050329ae6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5fecac-1c91-472d-8a68-203254e023be",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7344f6c-0e1b-4da4-9642-7fad1e8be901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7e03c3-04d5-4f7f-ba0d-8fa09a6e4cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b12a8c8-adc7-44e3-a4ae-5b9390d31e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8956fa28-ff9b-4c57-89ad-b2b7e79af641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43a3d8b-de19-45ba-9d73-853f63db2311",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1547a729-b2a1-449a-95ed-27120c140a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f2ea11e-491d-43e6-b456-5f80d43054e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbbe0d03-85a6-4a94-b40e-c464025c5cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65f18976-9aeb-4b58-a273-1952cbb2202b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329c1021-6614-439c-95af-ab12559e5448",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9338baf-aac0-45b0-88b4-de6b635e44db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fce99178-9ec5-44d7-a7de-982df1ca12ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687a9997-4320-4cb5-9aa7-1e699a6efa74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cdf75cc-10e5-447d-bf3b-179ab1f73d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3fb0a5-51c2-4029-9ce4-e7d158339aec",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba40cd3f-a4dc-434a-a669-3a02f3282cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464d5829-cbad-4a23-af3c-cd5ce0c93c55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106dd5e8-f2e1-4c2a-9d75-efd18943ad4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15a29e5d-4711-4fb7-bdb3-6f3b3833400b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d055ed-7f3a-4f42-aab5-c05d9dda1996",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693eb6f2-39f6-4daf-9847-c8cface83f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7bd1652-32a3-43fe-9506-58a2f97305ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6936d14-98a5-4021-a593-e9859215fcec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db819b53-c0d3-4cf1-9659-7dcd9d9bfe54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4f17025-0a0c-4815-ac57-7a477a57f64e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18473a1d-2fa2-4c3b-8fc1-e88df0271dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7a36ae-9e06-48f1-a5c1-de45c135eff3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bb92e6e-6a02-412a-bd57-387c1bfbb2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e730b76d-7332-4886-b5fb-88369424c09c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec56de05-82e0-47bd-9aeb-d5a4013fcb04",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10762d6d-9cd9-4593-8d4b-108fc876a3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "508dbc74-7e61-4627-ac9c-a419d0fb696c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2408450b-c75c-4a18-b167-a5d772229382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c32e52f-ae6c-4473-b47f-79aefd09bc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a83019-7ecc-49f7-98ad-dbe5fb5fed67",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b15a7f8-39f4-4f9b-8067-ac3afdc76b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325ac3c2-0697-42d5-94a9-0b556be7f7fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c18e8beb-0432-4864-bcb2-7ae5b6574c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5af536a7-3966-4ad5-819e-81d4a6155a26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51663f75-ec77-4ba8-a9c4-16a6eb9a53b3",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "243ac08f-4a37-4a60-8399-82cd121e2d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d8277ee-8333-4315-8c1c-08d7e8952a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "036da145-5f79-4d9c-a798-0e71b04bab3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47a96da5-75ed-4f14-bc73-e9cc2a574e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2461413-00b8-4266-bd20-4a24eef45325",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6551a6-5659-48a5-b119-60dbf5bad305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c80365-f379-46f4-b358-e008807c71aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3065b19-b5a3-4939-9387-0a865ee50754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f69a5970-9a60-4848-aa28-9347a1754c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70a325e-3a35-4c6d-9334-8705fb97cb76",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f13ae8-63df-4b42-9c6d-f7847694a506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd7c403-70da-420c-9fb5-b139966522ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef18ff3-cd4d-4dd3-9006-89588e174f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd387b94-5386-4ce4-90db-a615433fc5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c37123-a408-4083-ad51-c23fb515b4cd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0051142b-6246-4304-a9e6-85358f16e525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9204b1-f8df-43d3-8f3b-9c9eef36f075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbdf9213-c5e6-4a02-acc9-3add65511ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5badbb9c-417a-4549-876b-e549b544f1dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cdf1f6ec-a588-4b0f-a43d-858cd307a207",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2f2a0924-1142-4952-9aca-1526ba243c40",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d403d2b-08f4-4c66-8c0e-de4062552035",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "fb823931-2590-45a3-85bf-dd844a570fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74944ca8-f55a-4929-9e16-0617ee09a549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a846038-cdea-43c3-9e61-cb6de9c0731c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "325630a9-1248-4ed4-81e3-6b980009edf5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c243b3a2-f27d-4a34-9411-9c892ca6acf0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0f27321-b594-41b7-aa0b-4a97545e347a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70d1e3f3-eb8a-44d7-a984-46fdd5c8f498"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca1d8bdf-01b4-4afd-9193-426214403a17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bee07679-33be-496e-82a5-34c67c7b5e12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cbf47b33-e1bb-4e68-a5b1-854bc61d06a7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5fd0490e-6e39-4c12-8f11-a9436847eca7"
            }
          }
        ]
      },
      {
        "id": "dd41b781-a1ea-4306-a963-77da6f370c9c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e8240b2b-100e-4980-9696-2a04c93c5949",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1d1a1e6e-655e-4c01-9554-c7eccc0005d7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f80feb86-32fd-40f0-88e1-09822c3745a8",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fa0a5d-adf4-4a52-9b04-06bd422ed3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f99f3438-5b06-402c-9dfc-d8d59cdd2a34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fd2a38-876c-4057-901c-7b5525c8012f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ac909b-63cf-4545-902d-2fa2d83ee76d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f933eb-e3b7-4be6-86fa-04769896f903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1051c314-0d24-4e78-8e43-92638cf0faa0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40310d7b-8966-4839-b39f-e9c48753f50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3bc71d-6a21-4786-86b3-ab8d02ece730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb06d28-04ec-4696-8622-f9bdc2146f77",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3e8134-5375-4e9a-8dbc-611c3ff52723",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a38f228-0502-4b80-9b62-d99db66f45ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86788412-87b9-422e-88ad-fee50c7ff5f1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72072366-c730-4ee8-bc1a-ecb34e232b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a743b7-985c-4ba7-a1d0-aa6e7f38f183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3a420b-c9b8-4706-80e5-cbd7ff973fe4",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7def6519-0332-4c88-8b13-3cc267b5b040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5679df58-1fec-4983-9665-b47cfe6940fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcf704d1-a50d-4144-90bf-2c7eb26eacdf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8f70ea-4dd6-4159-b5f2-182138f92436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c1eff1-67c2-4790-8a72-84aaa704208a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18c499a-38f0-466b-8090-75c6dec5daf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "324155b2-716c-45fd-9e2f-75a9740f21df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85ca8ed-9d6e-4e62-9e73-cf96fd70d022",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d047f70-fb6a-4399-ad8f-5b1024a785c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b233de92-77eb-4dcb-b2d0-8ace7ae8ed98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8423e3-f685-42db-8939-747f4cf28171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e618693-2c8f-4484-8e58-999fab3fad02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2b57f5-1492-42be-bc31-5d958e9691a6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4591ca-a552-4d0b-a37a-a9ee1a8b5d53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e0c45ab-3899-4b82-abd2-2dcdb50f87ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3dd605-c44a-4cb7-acc2-d937f9707766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ba114d4-9398-45c5-8a09-648bdaf51abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "766df71c-d1a7-4d4e-911a-3cc618d6c445",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d5b244-dd52-4bc8-95bc-775d26ff905b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b60e5756-a52a-4d2c-b619-f51de0b3ff54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf912fbd-3bf3-47c3-aa21-f428feddbee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e404703b-57d1-417d-be67-7251e0ace0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cb90e4-4fef-4427-97c5-d72e195702cd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85220067-8870-4ea6-8b70-c635bd8dfb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "646be34a-a0ca-4f3f-853f-b655ae29727c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487ede28-ee2d-4c2d-a6fd-51bd05323a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7e4c0cb-1090-46e8-a870-4dd826a9a250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b4edb3-56a1-430e-8801-f359a6233d00",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ec9a97-9383-4e7e-9323-844354b0906e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe54f15-d245-48f1-a559-de17a28491d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2a75a1c-093d-44ba-a441-4cd18dcbe2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83ecdf66-72c1-41d2-a6e0-f8f11cd9c437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ad7bf5-d9fb-454f-bd88-94f61deef109",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "060e1831-aa51-4049-a47d-56560e7d9d32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "909ad1e1-ac4a-4d2d-b856-e86c6c27ec40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11c7df3-96d1-40d2-96f9-947d798a5755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7f54854-f8d9-4076-ac3c-9f0b6804a674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593cd8d5-629f-4e76-9cd2-cbb5472bce76",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f08d771-dbbc-4a26-8308-31f4f07138f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e51a8b3-cab8-41c5-a3c4-72db2da75429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825694c9-2e71-4e86-aaa5-5978213bea7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0b5051-55b6-412f-b669-f313e974ad7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea00bce-5a48-4ea3-bdb6-51d96f8e3cb4",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32b1240-5687-49d8-8e26-2fb080a5daf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eead08a-ebb1-41d3-b84c-962f46363ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e605373-309b-4b9e-99bc-0196a550f3b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208d1ef6-6bd2-4a83-919d-d847fd2ba5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28950fab-73c5-41d0-8303-3f8e3c5af236",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3284f726-a351-44aa-a86c-b8479589eec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c93cd6ce-634d-4057-8861-9f52afa2dd87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74952f5-5a45-45d8-a509-dec60488941a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f7b548a-d236-43c0-bfdd-2759aac396e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f3c2d1-393b-4e0f-a7cd-5cd013c186c5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1fced71-bc73-4741-b2df-07476ea7dd51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95b7c69-c7ce-4fd9-80fb-1be912781337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41bdf6ba-32d2-4b31-99d1-7c63d8e18694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e608bbfa-f2c1-4842-8019-c51bf573e647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83549e94-bbae-4227-9a9c-6748f73eef6e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02bec6f-64cc-4d9f-bcd9-1f12b797eefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb516fb6-7e1e-4adf-bd30-206c3e2956cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d17cb22-8b0e-4ffe-85b6-500ee555ca63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891a55a9-03ec-44ca-bb32-c36b82889a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b11fa1-cf63-4c09-a3a4-3481f45a2ddd",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a1c25b-487d-4b12-bcaa-7b681d700ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875bf2ae-1445-4d98-8103-536a6b6ec890"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d2ab586-37ff-439d-b89f-1ab057257960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8afab9b-45c1-4be0-a2ba-60000bf51564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "140815ca-ae8b-4a37-8d4d-1acf1b3ffc83",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a76bf15-fa75-47e8-bd9b-0046a91c1c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523bff95-6c25-4520-ae5d-65d94d746bde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d44e4d-d697-44a4-8af3-7ea4615a2b9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faedd448-ed6e-4e47-bd4f-6dfcfeae7848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bfff9c-a588-4ef1-b408-8ca9fc6fd50e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10abbfff-1f55-40e4-a9ea-aecb58b33291",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5b9128-95bb-4aa0-bb2a-9e94acddb99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb980c04-2e6c-4acf-bb7c-7d283c1278ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab71b21-e60e-4cf2-a2de-3a30d6fab524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee575a4-4707-4444-8787-bb0c65680685",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721cceee-b73d-4856-b770-3e7e67a061df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c530b26-4739-4b4b-9a97-81e361c734a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8541a939-6800-4e93-b71a-9aadd6a81452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bccc2aa2-561d-4102-be7a-c5c8883edad5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "068b240b-bcd0-40e8-987c-0c509f27bf73",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf1495f-d5fa-4992-a237-c7085f72ee5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20121eaa-6b3b-411f-8531-608f1fc23329"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f15f2f-6e3c-4f8c-a133-8f8b7bb00859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2814f2fb-b02c-495d-82cb-def0c6b059ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b99ed2-67a0-4d1b-8250-608520e1712a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3049ea8-f7c2-405e-8a9a-3bcf99acfd85",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08ccb9bb-9648-4e17-b979-3c26f361f59a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fddf1a-5c76-4df3-8dc0-4d30fcb666e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "604ce1c9-4d94-461c-8994-71de02fdc234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ba33f4-b1bf-4c3c-aad2-9902d96ec826",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c0cdd10-87d0-4ea0-b75a-b76afe4e2ed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f70aeb0-58fc-452a-afb3-215523f1201a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "945903b4-43bf-4181-aac5-d569cde34d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c047463-e01b-48fa-8497-6bfcf32e3993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed1bc7b-51a1-4cf2-a431-0ab9cf0330a6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "875ff5e5-44cb-4393-a4a6-f357b00b97df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d82b72-a799-48bd-b5e8-fb901183580c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15d50fbf-3f67-4c20-9c04-5fa6f8473151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b0fab1-fe1f-433c-8bb3-b83cc039c981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49602691-ad3c-41d4-9372-c5a3891b197a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5e16c7-cf89-40bf-8d24-99fabde202ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0cc841a-581a-4444-ac40-ff32d8510b12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02712809-6fc4-41cd-8c78-0bd4aeff029c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76922433-d37a-4ea3-92bb-a82bcc660132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e3a8bd-5c7b-425a-8455-07d032f0c134",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c520f8-b5f7-4f19-a2af-d3de5aa7acb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "505d92e0-9818-41cb-ac80-4aa20614fcd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a859c1f0-0772-4dba-adec-c403ac35b6cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c21a940-b41d-4c83-b245-cb6c1617091b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b4bf7c-9ac3-4a64-96bb-dc2ce76fbd0d",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3d45ce-8690-4837-a3d5-046558231c46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ccdbb23-8717-4496-beb6-34139eb4e647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2f6496-ca13-46aa-98a7-079d7d7b2189",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0c362c-d1a6-46a7-8357-7c1906f2b0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807dc7a7-f0cc-45a3-b276-c04968711ece",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25d710f6-7ef8-43ef-8207-cf13a9b5a76f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e68ed8d6-3a5c-4b04-9203-f789035abd69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd55d9f7-873a-467f-a79b-d0085765d16d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ac4695-921d-4eac-8c83-16137f7362a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c9ffd1-1b54-4872-9a22-9b7659e52c51",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6400d2f0-e49b-4f52-9758-3da95474ef6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af93b20e-95ee-43d1-adbb-b9a57fd8e9f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0860733e-501c-47db-b3a9-34f80ae6c367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8dacb60-fd1e-4f8d-add7-de9b180b92a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ee8e51-886a-4f57-9d15-0cfc572ac556",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487a4524-0fb5-4258-b975-2709d69f3c1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae5f0db3-75f2-411b-aad6-e9611242a481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ce8675-8045-45a3-b71b-4accbf04b0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b11bce0-73d0-4579-a652-08a02cdfc6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37464db6-e56c-4a6c-bf50-476a273b6f80",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c244269-d753-4a28-be50-dad72950b0cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d505af9b-2c93-473a-9873-d9a6daae86fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0047778a-e40d-4fc7-884b-092fcf21e2a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8576db58-dfe4-47e2-a219-0a205eebecc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd92c2b8-aba8-4b78-b7f4-8ec435bbbf5e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5e4275-fb5a-4695-9b18-16632871fe69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5ad361b-cff4-47f0-a248-254807bd0868"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b92fddf-b5ad-4e44-8620-3e4b53b1fea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27bff0eb-58e9-4c22-9c62-b40aec955a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14810e2-59de-4f48-b643-c696ed625e5d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba9c7b3-a7e4-4e42-94b5-0b44ed990b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd0ba56-e173-4730-90dd-d54872da5869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f036b81c-276d-41ca-ad29-ba985163e115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ae3e33-2022-4488-adbd-99df5633d69e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03d29ba-e993-42b5-a03f-6365b76c3e95",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37ebd56-4b2d-46a0-a6b9-c7d9b3bd89dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa573951-f105-4894-a1d3-570915ab368f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d694b1e8-9dc8-4098-b74d-b0bceeff1609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0449cc2f-5660-41b3-978c-c11803c2dc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d60d4a7-e7c5-4dae-96d2-f233def72f6d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9567545-456f-4fb7-97a2-b131e3cd3a28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584b4e5d-db08-412c-b45c-f9da2e0781d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "220a0cfd-18c7-44e5-b54c-63f0089d0141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "494bfd8e-fbf8-4476-95d5-57bcee1f67eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5078c960-6143-4cb9-b8e6-4b8a0ef75ce8",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64dac88-202d-4ca6-b73c-f14ffe938356",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac5cfb7-37db-4a3f-bc05-86cab880ca37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17ca3f7-ec32-48ab-8ae6-b08dad2df349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df8ceb9-cad8-4c5d-8553-0f36b7a03443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae260c7-36a8-4947-bd4a-764f200dff08",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df312e35-2f73-453c-a401-21b6fd836648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c804349e-85b5-44ed-936f-bf93414c161e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f23194cb-1f2b-43b4-ace7-04d251780823",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec35bbe-ddad-46ee-aea5-226b1bb53829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35de762f-64e0-4f8a-b3e7-ac85921d45e1",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b3c872f-6d45-4fcc-ae46-3fa72bd881d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf80ffb-d4d4-40cc-a5c3-902d03c8248a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2079b823-d389-4e5d-b85e-fabbd7b6a24d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49388e68-716a-43e1-9e11-6652967a45d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2d3146-0ce6-41eb-b742-e30cc690f45f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6d60ad-4be0-48f2-9706-31d8e2ece23d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e43b5e-41ca-47f8-adb4-332e0580dde9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "349687b9-cd90-4c5b-bdf6-09090ae4234b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7b5f89-46e2-406f-b7ee-bd369b757c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d69847-a246-4b92-bd45-cf822d4b20db",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0b64e1-1b6c-4157-8bfa-2407684b1076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc804dd1-0e7d-4b4b-9437-aa429f59b87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1ca94d-b401-44f6-90d7-5bf2302e8e4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ba1b8f-4211-4b11-bee9-1358aab310b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a023a94-46e2-4e38-8c0f-dc93e37ee873",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbf9434-6217-47c3-84c7-7b71d15cdd77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c74e111-a59b-41ce-9680-157a41088e31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ead9cc7-0fa1-414a-bf54-ef08a972bf00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1497672-c742-4f54-aaad-899731c76443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def86cf8-7a22-401d-9be4-8946baa96aaa",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ca9bc7-95f0-4c37-a50f-09f33fa0e6b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f81155-8c9e-4502-a252-c87c64855c85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa096e0d-98e0-4777-8c5a-3841d4ab6997",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3ad825-2727-4fc2-817d-20597fab49fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0122763-40db-478e-9c0f-89fbfbdaa2d3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb231cf-3929-4576-81b3-8136417af4e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ebbe01-eeff-42c1-acc5-79019f4609c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370963a5-f9d9-48e5-b458-b3737da6e08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4249430a-7f4b-4dae-83e2-2e89f4ffd7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e06eaf-1f95-4e79-a7b4-0a05bdf25380",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082eb427-4cb2-47db-909e-7824027256df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6db288-94a0-4cef-848d-fb3cf9ba9779"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a9245d-4d72-4445-8d90-609efa41b13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25186874-33c1-4edc-b7f3-ff3b49b9cf9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b586807-73a7-4482-ac4a-a4b80a72c2c3",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e5b4b3-ed81-4dee-9c8d-a60425aa369f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d30985d4-dbad-4ad0-b247-160202166d5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "298a899f-b428-4cc7-bb74-d943b61ae64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b98c0b2-8d6e-4045-af31-a18fbada1cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e973b383-b782-42ea-86cc-85db69bf2db8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135cd606-1755-4a17-ae45-32d0e6342ce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efe4efe4-0fe5-4412-b195-941b592680ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee51c3a-f495-4e90-ad77-27a233f24e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c183884-39eb-4081-a0bf-bde822fa3c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ac8a6a7-e25a-4638-83be-7065a6eebf3d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7778976-47f1-4ae9-ad29-e270ff0b603b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f792a9-879f-42c1-9c43-ae6d1650145d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19b6e02-dac7-41c7-93e1-33e82abcd934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9ddf097-e941-4c09-8d41-aab34bfadf56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1ae33f-9c4b-41f8-804b-d7e0ed390fb4",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52d6ced-6872-449a-b39f-95ab67fa596a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8a745c2-6e4f-4a11-825b-08e1c98a404a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45199284-09d0-44be-9167-b04f32d0e6c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8e1a2d7-841f-4187-8d37-30eb2e74914c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60942d73-8755-457d-95ac-02326bb55a81",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3cd04d4-c1a7-480d-9e3a-81f2d14851a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43107803-a19f-4c96-966e-45d50b03e38f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce16458a-59bf-4699-aa68-322cf4d9c9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d91e76-587e-49e5-a08a-e4be0d59a715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62b19e45-9688-4abe-9054-f5c53c66f4b5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a1c21d-ab00-4fee-8e66-8597cce952f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1e2800e-4220-4f11-a0c8-f8fb54e23f6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6193c7ea-0cfa-42c6-9071-b61a5fd5549e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a11e303-d159-4b60-93c2-cd30bf15299b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29eba26b-37a5-4d9d-ad17-53c750cc52dd",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9d9d9c-999f-44a8-98a9-77d7d6bacb00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "059578ce-eb99-4adb-a67c-9e10b61850cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48c7aeac-de39-4a77-850c-cf0e45353715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0c6101e-7e90-40c2-9a71-e790e9ea9f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee53fc24-0c3e-4d02-b52a-6fa1ce86a09f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f4dad6-d3fc-477f-8d1a-9bdec976a382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83472c51-28b9-4b9c-a874-734d02821a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b08b7971-45f5-4ae8-a13c-e23e336d530a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522da9e6-8c73-4b4e-bf6e-d1ca6f8d8850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88e636a-c213-42dd-9783-a6a488d16011",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba9abe7-0cd7-4edf-b65f-093a0340dc39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6330bc36-45f8-4653-8950-b60e3cd892e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d0bd96-5758-4139-91cd-5fdb0d0956f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8995d997-9e56-4999-9b5f-c85d8a5c2843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f236c39-3e8c-4e8a-a7ed-23d68f0362bc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833d4cba-9009-4def-ae5f-13e15ad64790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f877d909-b7c9-40f7-a7be-93ceb8c75a8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d4b565-920d-4741-8751-0d8f304aef8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83bcbf61-da4d-4c65-bcf5-97d3be7975dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c200828-448d-4440-9eed-792609970af9",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bafe68dc-ecad-415f-b4cd-98a9be696712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8e8795e-c226-458c-82e1-b06f78c8462a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a842d6a0-6d75-4be1-a0ac-458300aa98f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19cd9f99-ae2c-4e11-931e-52653d488edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb39f0b2-93df-4f8b-8353-320ed96b2ab9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe03eda5-c551-4428-9588-13d3a4e29607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed6ade40-2875-434f-b2a0-e0a79df93e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00584753-1a61-4d31-8b03-6b342999ae53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00a899b6-374d-4d44-aa71-7ca6fa022770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c8583d-bc82-4868-8faa-eb84d0833d80",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e32dd5b0-8053-4366-bc7c-60df393cde6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10ba8e59-4b63-4041-8da1-954056c55a4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3110955-b33a-43c3-8e10-c310825f8a94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabd7dbe-9b8f-4696-9222-36d8a9b8ea5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b708b26c-ac21-49eb-a591-486547f28b22",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa13c27-5e53-4f3f-a401-ef10da793367",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d0e9ca-409c-4378-ba29-e440b2b797b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b769834-0e0b-4b25-b672-057bc3299194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fba103c-3085-4af6-a557-4ecbc199f2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512178e9-50f5-4f10-bc40-303f1e90ed1c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb28bcaf-3617-4970-a278-4dd4fc03b30c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42390566-92d2-45e4-9b41-e9e135d5aed1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40caea33-87cf-471e-ac20-4afbd73b18fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f34154a1-3c19-4eb5-a241-3d3510f2a529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5de6d4-77d5-4cd7-a195-d56bfba34dbe",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd266a9-c360-4165-8d44-e784d94ce2d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda57b18-bf8d-4cad-9ed8-a17cbd971ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eedf772-e392-47c9-9551-6cdfe092c419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ad55888-7752-466e-af20-d1837723035f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4aa4ca-e696-4c3f-a1c1-c02aa392b019",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e953981d-881d-4367-a697-ac9973c70c76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb249943-c6bf-440b-9a6e-073689a2c401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46c1fbb2-0969-4682-a865-4c6e4282bb6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0275f6bc-4aab-4117-aca1-c61a7331065d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d29d43-def8-4210-9ed0-233c5e5b4ccc",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c487f4a9-7ce5-4708-a400-f280e1da20f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abe9ae62-5eba-43ae-9195-2a046e678caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2399a594-824e-44cf-b3fa-5772523a90fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78b09165-6aec-46bc-8fb4-dd8c1adbb75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a6bd0c-62d9-47de-8d03-ce24277a970e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe935a3-c79d-4d9e-a7ef-8db23e68b161",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eae85b2-f7c9-40ae-ba7b-e37e3c2e0b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ecc1b8-6cd8-4186-bdb8-5fe45330a711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a733cd8-9dfe-4328-98b5-18b18b878c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a59088-785a-43c3-9f25-529f419014ab",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6090066a-9b39-4a17-8036-32aee8ecca36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c305174-225c-4a69-b408-f16f09168bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a91cfc2e-21ac-492e-b22d-f9f361638f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7abef2ed-e6ca-4288-81a4-7ff6dd21dd56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1f75a4-e75b-4269-8bb5-e45dc134e6ab",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ba3a04-1c00-446c-ae04-e7a604d34d77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eae7677-06f3-4a36-941e-1792db1036b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18569f49-f0f0-4075-9955-1ecfea327868",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6591e42c-3043-4bee-b647-56d70a129032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99a35c80-dc1f-43d1-b9e4-0ccf48b5f79c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf53e83-533e-490a-aee7-9973e4a93295",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "754d6a15-4686-46cd-8609-170a1115cae4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f45c0091-3918-464a-a853-610d63517754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b99697-85a6-4dca-9a52-4c27d16db5da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4573b357-73b9-4c7f-a693-41051e18c5fc",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c16c50a-7277-4fa7-bee4-973243e29f61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dcb8023-e942-4a27-a5a5-9ca38d8bff71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d370c7-b1bd-40b6-b445-daa4d343b8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68b7ef9-d678-4dc8-b12c-0bfc51c7365a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17323240-61bd-45c0-9aad-d737c6bece69",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23518fc4-9d3c-4591-9629-30104437635c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dbc0e31-55e9-4101-aa76-acd9fd5ff161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7528de-01a2-45eb-bcb1-9ec5321f1e31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6259c5d3-efa0-4df7-8709-11dcadb8033f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72025f11-fd2d-45bd-b215-f8537b2ae536",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5993b7eb-38a9-4ec4-b2d7-ad5199e077ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65894075-9304-409d-8de9-189d24c0b453"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7206967a-6815-486e-89d1-1b19be8cb9ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b62466d-61ba-41e3-9dab-d078a4458675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7694886c-4b17-4ce0-84c9-7e44f19cabf8",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb4b439-a760-40d9-8cf4-83ded6ae63eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85b1579e-2138-4598-8cf1-4ef2617f5c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e998526-cf8f-4dce-b687-c67d04af0c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4824bc54-bb47-4b58-a9ad-fa39c767d5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4698053a-c248-4ec4-8812-5e32a7772d2d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788d21f2-2135-4ade-9d4b-fb9ede5b5369",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f19db8-c866-4a83-a4cd-88da256bbb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "566cff30-b971-4791-9560-548de5c6fa32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c791e8d0-05a3-4ac5-b3bd-176851243718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7995f12-9fd4-425e-9212-40b7643f29ae",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfae19e-bc04-4201-8884-1b07dd9e2609",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06bbf446-761e-4eae-a6a0-3108ede43de9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34331cc8-f219-4a2a-9d8d-be87ee8f9711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502dc6cc-82d5-429e-a1ff-0fa7b179b2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed11f5f1-2dac-4813-99a1-362020423980",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4c9886e-a34d-4831-bc84-f2145e734924",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05654980-865e-4a23-9f86-97f54f47937a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9684dc-4216-4248-bede-d0c83c76b97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f76f0bc-2838-4205-9058-3c2d31d2c549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1eb9e55-3db2-467c-b5a3-ea5bb8305546",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4f5933-c2fa-4073-a930-cf1f9308c3f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14a2f1d8-fa70-41a5-9a18-0a964037961e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f0d7c5-4386-4349-b30f-24d08520bb3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123afeef-fcc6-4319-92ca-1adc5eefe8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365c1a4c-1442-44d3-9b0d-ddd4231828b0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23e9a70-4800-4234-8b10-e3d8a6b4f761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d84cd7b6-91ad-4269-8887-55b45bd98e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7445d8cd-8961-433c-9b77-8a9b966fb402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c292e4-528e-429c-b9b1-c92acd9c519a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563d25dd-79fe-44fe-afeb-f5565ad4e4c2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7438b148-b5ee-4282-9772-4e40af731479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08041e6f-8e90-4a10-89ca-2c2f160854a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ff0ba1-5ea8-40c0-8ab5-b64450e57e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93eb786f-c186-4f5c-a3dc-5ab71787547d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f264e6-7724-4e3f-9b0f-2804c7cacadd",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1742e139-7139-4db3-84df-b3fbbe3b7e73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e87c0144-9299-4e87-9d3f-000cc0242511"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ceca96-23d6-46ef-9702-b7c6f542ea1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a11d882-498a-4672-8265-8f8392ebb2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032c56a3-aea8-4f04-991d-997356463c84",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7eb0b7-e146-455b-8877-e7630bfc0169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56fd1c81-dac7-4e19-a631-38e2e910f0e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a3a7c9-f40b-456d-88c0-c70d72863333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e61158ed-db7f-40de-a2cd-9ee7290d4081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd4655d1-ee3d-4f09-8834-42940474b48b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc5d1459-436e-43c3-8dfb-2b015c43f0ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d04a747b-96d9-4b3c-b872-295ddce002a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c5d2ee-f4a7-4716-ace7-632a684798ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b3f73e1-71f5-40a7-848d-7e66f15d8a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6793d60-a9ba-49f0-84b4-aa6c77c6e6d7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de09625-bdd3-468a-86c3-8cf0b7bfae1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b982be-7719-41d4-956a-255f34cbb09d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460e5b62-18ce-4171-8e90-ad979e191309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c43298c4-9f5d-4878-9363-abd8dc0badef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c0f726-e065-4c58-8a63-b3299195ebee",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199f54cd-13af-4481-8de4-859a3de82873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b81a9f4-ca89-4a21-ae73-5e8b826da493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2f374b-ed8c-4563-b674-579820e99bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e783dac1-7ab3-4aae-b545-92c3be2ebfc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53dc22df-a39a-4e20-af0f-674a9f66f8e3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed1869e-2e5f-4691-9b56-3466cc604531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b771d6a-86c1-4e63-925d-0c56337d6877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ae8839-a491-4d15-b5dd-81ff4bd9a2c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47544f1-aa94-420c-be5f-a92f41d35494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae32a74-f148-4c4c-9391-cd7d0b63b0c8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4449c1d1-d822-4183-9f08-415504b4ea55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66911de9-5767-497b-943e-09b518248fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d653371-c99f-4bac-80c9-ea9f430f2856",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517205b5-2c78-4882-aa29-c796ba511963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0a6804-56b1-4016-8732-01b4957e5f9a",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863857a0-2593-4e19-9853-66737394922e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcca1b5c-c91b-4e5b-9e51-f445aab3f08a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "042b31cd-7d0c-4ac8-9818-1da00bf91538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5af8f673-c0b6-4ce7-90a1-ff70b37fc82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "644b5bff-b82c-4d98-b498-1fb9fb7863b5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605989f3-787c-4928-874d-df0699af1586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5ff8b4b-e43a-4911-9c18-113ecc5f5a14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a31b860-36b9-4d70-86b1-fdc24589345b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ff2729-fbbb-4911-a297-59991a5db1a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4659b144-81b1-4159-8e45-bc8642516640",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5dba88-2922-4622-b734-389231acf557",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e5a824-db5e-4c9a-a879-59d275a8317f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d3eb26-bb5f-40ab-8c3f-91c6a966baf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9fc82e7-43ba-4986-9b9d-6de2e0e2f917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4708255-d3be-451f-a58e-87f700101dc4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c68da9b-51d8-481b-893e-149e6ee16830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc479d42-eb67-44d8-9033-0abf1437da30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d41a35f9-da20-4def-b593-11de0a4d5bed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914d9c85-1aec-4cc2-b820-0dd1fc82952c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21074e58-1fa2-4601-8d69-4903b2972fe0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aefa5c0-fe1f-4296-8de2-88a7a3fc401b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a64f615a-01c9-4d8b-910d-c05e1c853629"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "914694ae-60ed-424b-b410-4fde7d7810bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd7bbd7-ca19-4c32-a35a-214698c3dae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "306414c5-fcb6-49b9-8b1e-7821e2a02e33",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e3d9a6-b77b-4638-9198-12c32928abe6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "621a0ea8-6d97-49eb-9303-151976b0e79b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac9a5bc-4683-425c-be07-315d688c2f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3461ac8-601b-4eb1-8d67-89661039f8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2029bb-d06d-4126-b0cd-689786ff346d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3951685-653e-4e03-96e3-591a87776481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33567ab-9c73-41b4-9e52-7ccffba41387"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de055ec2-4b76-4a01-bb18-f2d7da53dd77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba063069-ab8a-487f-a0d5-28df1f7384b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2473e29f-2433-436a-918a-1ed1622cc9ec",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e0200b-aceb-4f8f-8986-c378c51bf009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca41a9a5-a1ef-4bcd-9a20-4d5d6b6693d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc14e25-d2b0-4179-8642-aa18ea6fd471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee73b82-583d-4c55-a747-7b2ee7ab943d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d141b067-cecc-4941-acf2-f37890e58def",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3045f9f0-a003-416c-93c4-56618dda939a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44905fae-8bbd-43c0-bb83-f0e3d76e2d12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84874b70-804d-4bcb-ace1-588d94f77d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f742c5d-b125-4989-ab00-b9915aa61aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334e046f-c403-47d5-983d-8599baa4c6a3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d15256-496e-4856-b74d-ee4136d4bf91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2af6afa4-ab54-4653-a436-9c5753e2ead8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ad373e-ebce-4940-b789-39bc2e101a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e425dc22-34a0-4087-86a0-6e8639100803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbf82e5-f600-45c0-8c64-b9c5f30aebbd",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2169fbf-f867-4858-abfb-ba512522bbe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75d96533-aa19-4f0d-852f-2314d7d0f52a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1a23cc-c4e3-4729-bc65-cbdefafd944e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a606a9e-32c8-4dd9-83c1-8268742c5a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfddebd0-b7be-4a06-823e-9f8159af6b9a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc3199a-6623-4f17-ad8d-ea98c7ebfb28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a23e117-d7a9-4138-ad69-9385cc3a8600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dded725a-0d14-4b30-9db8-bf15c985e77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aafeb49-994e-4a9f-8b8e-4ccdff997c47"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7dbb4075-71d1-4b97-8fec-921b06aa3de6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0ded9a6-4932-4152-b169-264392d202a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2845124-971a-48b6-af79-01056c0012aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ca5b174-ad56-4b93-bc00-404912ac5d77"
                    }
                  }
                ]
              },
              {
                "id": "210a226a-a956-47b5-b8d5-7b111dfca7f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe36c5e4-b6ba-4944-87aa-6854fdfaf6f3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f55b1af-3d21-43a8-86b4-e4866335b0fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c8a03292-c2e9-4a57-a487-14f6e0419715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bb58cb-d463-4699-80b4-651a29271eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbdcfe8b-3baa-4192-8172-18c5a5e1153d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fab07356-70fc-4c8f-bb34-81c39b3d00a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "618b7bbc-3ff4-4750-be86-4d3b7cbadc84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "70ef803b-6af6-47ed-8f31-f338c35ae315",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7cb20562-94c6-45c4-a820-3831374a7800"
                    }
                  }
                ]
              },
              {
                "id": "7c29bbae-0483-4fcc-ba82-4af7abf60d53",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "89d2fd1b-6220-4e5c-903f-89905c4a9de1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe21cf6-f0a6-4384-b5f6-b2dad8d66612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d8536dcd-0e68-4ca0-9ef7-c99325320683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee90c68-3801-4fe4-ab60-ddbad0a290ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ad09426-34bb-42ef-b9c8-171be2f71cca"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9332c2e8-4ebb-417d-9e4d-95536c46d42c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "af50a3c9-b383-4839-8a26-1c7e16635702",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e95fb79e-49cc-4149-a88e-364c1fa1d21b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c28f13f0-e971-4b4d-b79d-77fe4de67642"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3f925939-045f-4c42-987c-0545740569a4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7af6c547-4bbc-4075-af9a-0f82b032d139"
                    }
                  }
                ]
              },
              {
                "id": "c8514a2e-2258-4595-86e1-d1d5d2de0cb3",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e787865e-e5da-4c11-9222-71e26467723f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c96708a3-a2ed-47e3-a7f8-8a092d2566a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "593ec684-902a-4175-8f98-554b57d22d97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b549217-becc-4cd9-a958-a816e8a3f288"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98cf66ad-9c11-406d-b551-e64780d2f16d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8cf987bc-b5bb-47d5-ac8c-6403ed797ca4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f35c02c-32a5-41cc-8511-f83cfe3e5520",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b6874a6-6194-49d9-bd8f-056fbb5cd063"
            }
          }
        ]
      },
      {
        "id": "3c014eb9-4979-4786-9b46-1e5a1501d7f2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "069c0e42-4b8a-4eb3-9cb2-cba174622dad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "03cf3113-9750-4146-8c41-a1d117d5a074",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cf672d3a-9784-4249-9833-47cddbedf19c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994e0f56-03f9-4dff-8671-9543e903a785",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d624015b-4107-42ad-a8a5-6bd2cde9947b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cac163-f548-4681-b60d-042478adef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f32571bc-1efd-4447-84c1-42bb141ba419"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9cb14d4-f7a4-45e2-8972-ea64eddb400d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "456c0341-7eea-4ccc-b61e-6800bb0958a8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f974fe7e-e77c-49d2-bd10-766b000cae75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c14029ec-d2a8-4239-a102-68523dd23244"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9db8006d-60a7-4836-968a-36590a5cbbc7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "af0f634c-2d91-4767-bc20-f32876a8cf15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e63659a8-50c9-43b5-80d3-7d74a3445fee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "069e9e5b-bc16-45d4-8b90-3e58009010f4"
            }
          }
        ]
      },
      {
        "id": "f6a486bf-ccf6-4a77-9be0-c9de47359b11",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bccd4829-da6e-445c-ab6a-f9b946ab0c6e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "90255b59-6ef2-4ad7-a0b9-10c96e8c768e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "686dc565-0bc5-4082-b2ce-11fbced915e0",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69702176-5579-4fa5-b920-fbcc813d4e30",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1e93504-bb29-4a97-acc0-30553d09223e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa88612f-1495-4550-accf-e9af83278f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "93cbfd3d-c700-4cb8-b54c-c3101c5416e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "713383ad-51d5-4c8b-80bc-7ac97c9f5a34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "84692c0d-ccfa-4057-9faa-6e5617863365"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d64619c9-df16-43e4-8192-c73c90ce60f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92c8dc77-3e56-427c-a417-383e2b25c61f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fde27aa-a7bd-447d-89b8-1e6d4db3299a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "db103520-3d81-4804-8cde-f2286ea38e17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "424066f1-1920-41cd-8a65-6ca7c88e2e45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2e9e1fca-4596-4fef-91d6-b105a8f2d5be"
            }
          }
        ]
      },
      {
        "id": "5a5752c3-e928-4193-abde-1201f71193e3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d296f318-60a0-4df6-804f-721ec3fd952e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5838d17f-833d-468a-8380-7677d8c0febd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6be9d7c-57b3-4ce2-ad44-f789d82182d0",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2160035-c87a-4052-94ee-60926e229b54",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7fe0a07-8b64-4a4c-95d5-ca1b16590634"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b87db15-2176-442a-8e9d-174ac5da26d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65841efd-3866-4471-8039-04a0fd8b8c16"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94329684-af9a-4f6c-a82b-ade3b76cf079",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "444d65ec-890e-4d27-ac7d-853a6dae4991"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "92caa90b-0c7c-4c53-a167-2df105a0c22f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0d39fcc-b88b-4b10-b028-8b8a0233c07e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "081793e0-9707-4c8c-a5ad-3abec8ed2978",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "72bb7ad1-b859-476f-9a0a-181871ea8f7c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01824ff2-48c3-4654-b519-fa1863f12099",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2a7febb9-2a95-42a6-9a39-a8d8f9634703"
            }
          }
        ]
      },
      {
        "id": "c9b3287d-ddc9-4382-9e7a-305559cd845a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d69fdbee-af39-4225-8b56-85acf7182f33",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd987436-5fe6-4f57-ac6d-e8f1b4d1e61f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "2fbb1871-f4ac-4faa-8ac3-17b25d4c9663",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad444606-e6da-4382-85a9-83209c049f4a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd2a75fa-51de-49ac-85e9-7dfcefbf0edb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 298.2288732394366,
      "responseMin": 7,
      "responseMax": 6146,
      "responseSd": 752.3914832691252,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688863934144,
      "completed": 1688864032870
    },
    "executions": [
      {
        "id": "f0f32a5c-6d23-4aa1-a804-8537717c9008",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a6025a0a-2b52-4df3-b502-f4930b2c51c8",
          "httpRequestId": "d84e4e95-0949-4243-9967-3fe7de822a2d"
        },
        "item": {
          "id": "f0f32a5c-6d23-4aa1-a804-8537717c9008",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bdca8028-b1ff-4bea-9cab-339fd540e273",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 0
        }
      },
      {
        "id": "7dbf4204-db12-4c4b-bae4-e5d149ba7778",
        "cursor": {
          "ref": "b40662ac-807c-424d-ae72-378894863164",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7176ef36-0926-4879-a587-c1dd6127c281"
        },
        "item": {
          "id": "7dbf4204-db12-4c4b-bae4-e5d149ba7778",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5858c37c-6c9e-4d8f-822e-620b12820b6d",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "9ca07c84-4fef-4c52-8a29-958477e93776",
        "cursor": {
          "ref": "07d26d0b-358a-416e-805f-f851d97e8fcc",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "30f89bec-45e7-44d9-99e4-8b13aac9bf62"
        },
        "item": {
          "id": "9ca07c84-4fef-4c52-8a29-958477e93776",
          "name": "did_json"
        },
        "response": {
          "id": "acd76643-b032-46dd-a85c-2f889ec35d2c",
          "status": "OK",
          "code": 200,
          "responseTime": 1014,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2ab7e1-4a9c-429d-8e65-3384622dad98",
        "cursor": {
          "ref": "dc6a0a8d-336e-431a-98c0-889ce87ba868",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f87b6a6c-03c9-40ac-85c7-5ea9c6b1aaae"
        },
        "item": {
          "id": "9d2ab7e1-4a9c-429d-8e65-3384622dad98",
          "name": "did:invalid"
        },
        "response": {
          "id": "0725824e-6aea-4d79-803c-17d15183f8c4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 659,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "9d2ab7e1-4a9c-429d-8e65-3384622dad98",
        "cursor": {
          "ref": "dc6a0a8d-336e-431a-98c0-889ce87ba868",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f87b6a6c-03c9-40ac-85c7-5ea9c6b1aaae"
        },
        "item": {
          "id": "9d2ab7e1-4a9c-429d-8e65-3384622dad98",
          "name": "did:invalid"
        },
        "response": {
          "id": "0725824e-6aea-4d79-803c-17d15183f8c4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 659,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "dc841640-cd83-4fa6-a509-6d5e13a0069e",
        "cursor": {
          "ref": "a7a966dd-e923-4502-92e0-0d8bc33eaeb5",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a35e2741-6d80-4c84-94c7-c782ebb03122"
        },
        "item": {
          "id": "dc841640-cd83-4fa6-a509-6d5e13a0069e",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5b0a39ab-1709-4b83-9b44-7809806f7614",
          "status": "Not Found",
          "code": 404,
          "responseTime": 76,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4beec1df-6e79-4a12-a97c-1c3a9a564b7c",
        "cursor": {
          "ref": "8b3c12ce-7aed-4a65-95ca-9f6da3b8c9e8",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "0c9a5143-3d0d-4422-ae4b-1a9338580f78"
        },
        "item": {
          "id": "4beec1df-6e79-4a12-a97c-1c3a9a564b7c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "53cbf879-e61a-44d1-8bc4-0479db84230e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a33573-d37a-4bec-9d4a-b06e816724f9",
        "cursor": {
          "ref": "9648f20c-2948-4a65-a3e7-cd4b0393b2b5",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9067ce1c-c4c3-4806-94b2-490c56668d0d"
        },
        "item": {
          "id": "d5a33573-d37a-4bec-9d4a-b06e816724f9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a3bd4461-c7cc-48fd-8640-fe8297a5ba56",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "176a5e81-167a-47b9-87b2-8cf8d7f45bc0",
        "cursor": {
          "ref": "c314bcfe-3f29-45b5-8c02-fbe9328b310c",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d1f437ae-500b-4830-b55c-dc33febfb5a8"
        },
        "item": {
          "id": "176a5e81-167a-47b9-87b2-8cf8d7f45bc0",
          "name": "identifiers"
        },
        "response": {
          "id": "bf9713c2-b4a2-4815-beeb-444a1b3a5987",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b92c93a-3f0a-45bc-a047-7fa0f6e02535",
        "cursor": {
          "ref": "198a8b0a-81d1-4466-8d8a-efcb7792afc8",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "37e672b3-15a2-442e-b7ba-eeb768d2544c"
        },
        "item": {
          "id": "7b92c93a-3f0a-45bc-a047-7fa0f6e02535",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "c61d5778-de1e-4fec-8e3d-2082de689526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aac72d2-ba2c-4658-a20c-857cfb08b57c",
        "cursor": {
          "ref": "dd97a59d-0773-4f43-b71e-8ecf0d229452",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2036e2a5-e5fb-432d-90ff-5f6552922a39"
        },
        "item": {
          "id": "9aac72d2-ba2c-4658-a20c-857cfb08b57c",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9ea7acd4-0909-438f-9b52-dd65e21866eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61cfbcd-af14-450c-80cf-3a898d4fc58c",
        "cursor": {
          "ref": "67343597-29fb-42bd-9761-12badf72df9e",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "f5a9671d-ab36-4aa8-b343-001749f547ea"
        },
        "item": {
          "id": "c61cfbcd-af14-450c-80cf-3a898d4fc58c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ca00fa32-bf23-4b12-b25c-3f7abe2630b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c0ce8e-ea08-4e83-8b0b-5e0f85c86f69",
        "cursor": {
          "ref": "fd6eaf98-9b99-405a-9392-64dbab1eb867",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6379c5f8-aab1-47f4-9463-b6d005ed0b97"
        },
        "item": {
          "id": "89c0ce8e-ea08-4e83-8b0b-5e0f85c86f69",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cbaee683-bc18-46cc-a3cc-eb6b74121a7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d219fd5-aec2-43af-afd4-46be4572ccf2",
        "cursor": {
          "ref": "b1b6ff3f-5e16-4b50-87ac-f51f10fe131f",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6208dabd-850b-4b95-bf46-e35b6a30c9e4"
        },
        "item": {
          "id": "9d219fd5-aec2-43af-afd4-46be4572ccf2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bdbf16ef-4821-4983-b178-5d73481e4ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd81bc47-407e-4f7e-8353-40477ce281f8",
        "cursor": {
          "ref": "d7a80bb5-ded1-47cb-a880-63dcf3b57a47",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8e79dd42-ceda-4bb7-9922-e05d52fecfb8"
        },
        "item": {
          "id": "bd81bc47-407e-4f7e-8353-40477ce281f8",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "575f5a27-5865-44a4-829f-66f9ce0988cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50ebea8-fd6b-4b1e-8c52-5d0aa28ea440",
        "cursor": {
          "ref": "25b74cad-99cb-4ab1-a590-605036d2280b",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a9fd39d1-97f7-497e-83b3-71a1f9229ca4"
        },
        "item": {
          "id": "a50ebea8-fd6b-4b1e-8c52-5d0aa28ea440",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "2cf7a1e7-beef-42ad-bf08-494c7c0b5d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bb9d4aa-74b5-485e-8778-dc66226a3387",
        "cursor": {
          "ref": "32383801-59d2-46b5-955a-6d90df99fa52",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8ec82d11-dd55-4407-b4ec-1195763cc322"
        },
        "item": {
          "id": "5bb9d4aa-74b5-485e-8778-dc66226a3387",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "533dd09a-ffd7-48c9-872c-7707837adbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fdeae92-77e2-4463-a9f8-525ee1482b71",
        "cursor": {
          "ref": "ef576b77-f2c7-4ccc-942c-2c39d08800aa",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "140bf775-d127-4c57-86fb-fe625fe6272c"
        },
        "item": {
          "id": "1fdeae92-77e2-4463-a9f8-525ee1482b71",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b6e887ac-1216-4071-b2da-99aaf59a29f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eac6f9e-2e39-4fd9-88d1-59157dc3090d",
        "cursor": {
          "ref": "e3e2cc6e-5ae8-4227-a8ad-6c41597d522d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9d15c41f-140b-4f0a-b69c-b2bffb0f6b90"
        },
        "item": {
          "id": "6eac6f9e-2e39-4fd9-88d1-59157dc3090d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "db9c39e4-a54d-4aff-a9dd-a2d4933f8ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "259ba039-0722-4d35-8244-948f84a6e452",
        "cursor": {
          "ref": "254f7f76-6d22-4ab1-a628-c3019d294e44",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2053bbb4-bd55-47c9-8ea3-f513af76edce"
        },
        "item": {
          "id": "259ba039-0722-4d35-8244-948f84a6e452",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "28f2521f-e505-4a9a-9da5-bc1bc9303bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d0c298a-42a9-4e6e-b112-7fa42afff42f",
        "cursor": {
          "ref": "ee031dee-150e-4ac0-8c2c-56496ad2bb73",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "52aa0b0b-aeef-4cbd-9710-13daac8081d6"
        },
        "item": {
          "id": "8d0c298a-42a9-4e6e-b112-7fa42afff42f",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2cd9023d-da7f-40ea-a00d-edd2405e025f",
          "status": "Created",
          "code": 201,
          "responseTime": 1406,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "87cf1e3d-b1ba-4043-bfb7-a101b492dd52",
        "cursor": {
          "ref": "a0806685-38b3-471b-8a7a-770f262d92ae",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "24ba3bf3-67fa-4ed9-91a0-ebf114d33d11"
        },
        "item": {
          "id": "87cf1e3d-b1ba-4043-bfb7-a101b492dd52",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "74ea2a73-d4d6-4166-8eec-996ba6400de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb8f4be-de3f-4723-910f-d55507d352e8",
        "cursor": {
          "ref": "64b0bdc4-a13f-4a40-bb08-63e6dccf426a",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "94691383-d662-4df0-aa4f-7c465b00db79"
        },
        "item": {
          "id": "8bb8f4be-de3f-4723-910f-d55507d352e8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "04c7415e-2fe2-4bdc-b2ec-7d6b1e0b39ab",
          "status": "Created",
          "code": 201,
          "responseTime": 6146,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "a730274f-0f2d-4ba8-912c-192cebd3ad0e",
        "cursor": {
          "ref": "dcf9babd-b5d1-4237-bfbf-32eb06383922",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "8f1893c9-7127-4056-add1-77f35109cdfc"
        },
        "item": {
          "id": "a730274f-0f2d-4ba8-912c-192cebd3ad0e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "b79056ff-7e5b-42bf-a6af-3c5340d618f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef5f996-66a5-4eaf-9525-6d1aeb03edb0",
        "cursor": {
          "ref": "25789d48-bd1d-4010-a124-fad33dd4f5db",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "be30a8c5-b853-42be-a594-eaad9a85e488"
        },
        "item": {
          "id": "1ef5f996-66a5-4eaf-9525-6d1aeb03edb0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d8166d1b-aa51-4368-9c36-e7dd7525bdc5",
          "status": "Created",
          "code": 201,
          "responseTime": 3505,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "09593bae-d6dc-46cb-b738-212ee9887dda",
        "cursor": {
          "ref": "697d3bbe-0d07-4878-b5e3-9f3d7c42f4b2",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6286aa19-b538-447d-a2b8-b5d24ebb2268"
        },
        "item": {
          "id": "09593bae-d6dc-46cb-b738-212ee9887dda",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "48e8cc9a-ae5c-47a3-864f-09ca0b41605b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d4adeb-0610-475f-ad94-f5d193925de8",
        "cursor": {
          "ref": "e50bfe5a-04ce-4f3b-b8f5-022d62d540e4",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0da293ad-5a88-4401-9461-d68ff630c451"
        },
        "item": {
          "id": "69d4adeb-0610-475f-ad94-f5d193925de8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "31658dbe-fe69-4fe1-8e3a-cc31f04e0e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5076bd-260f-46a6-a884-df0225a229a4",
        "cursor": {
          "ref": "365b4053-9908-443d-95e7-774962e0e56e",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "78626929-5e94-4fa4-8a77-4051ee5ec44d"
        },
        "item": {
          "id": "2e5076bd-260f-46a6-a884-df0225a229a4",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "bb2ad713-6857-4927-9caf-448b77692f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f466628-2f59-41fb-ac08-c2e2dfe4ea1c",
        "cursor": {
          "ref": "6d354021-3e83-4cff-aca2-81023103e2f8",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2f403d7c-36a3-4c3d-8b7f-5da2e4ededfc"
        },
        "item": {
          "id": "0f466628-2f59-41fb-ac08-c2e2dfe4ea1c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "5b8a0271-5165-46a9-ad63-cbc6c97e86b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10df571f-adab-421f-b3e3-5b8c33fc3ca2",
        "cursor": {
          "ref": "eb234c93-9602-4469-8ed2-152beb3fe873",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ab62fb80-ae01-4fbb-9887-28d8e2117324"
        },
        "item": {
          "id": "10df571f-adab-421f-b3e3-5b8c33fc3ca2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "46a6ab64-5af1-437c-b31f-a0cf4c7f5aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "086d9bd7-e314-4bdd-a615-2c924a68870b",
        "cursor": {
          "ref": "36251948-7f25-4ff6-bbef-6dbb8eb18b9d",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1a70a514-d948-4b29-80a1-1bac1c49100f"
        },
        "item": {
          "id": "086d9bd7-e314-4bdd-a615-2c924a68870b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b1939ca3-8f82-4ea3-aa6d-72096828de97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8cad2d-9618-4933-be9d-4a777da6a62a",
        "cursor": {
          "ref": "e78430e0-bee8-4c5b-bb78-e544daafbff4",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "41cbe8e1-717d-4250-8a64-07b5e1b47912"
        },
        "item": {
          "id": "8d8cad2d-9618-4933-be9d-4a777da6a62a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e2dca2ef-7857-4980-b83a-07a7ba2c62e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beeb73d6-672d-4495-bb6b-fd2f9575d5cb",
        "cursor": {
          "ref": "fe0a4cc5-6fef-48c5-9a26-b44829529f41",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "36244054-4c86-482e-a606-9f0a29705ad0"
        },
        "item": {
          "id": "beeb73d6-672d-4495-bb6b-fd2f9575d5cb",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9186489a-4a01-43e6-8234-83d7fb0f40b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df2acd6-784e-4332-8043-447bb29570a4",
        "cursor": {
          "ref": "6d58719f-7919-49f0-96e1-3c503620c1ed",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fecd6f18-a162-4857-a344-fbde13406b5d"
        },
        "item": {
          "id": "7df2acd6-784e-4332-8043-447bb29570a4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4a4f3873-de34-49b8-beea-ee666b96e39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b244e2-e121-41f9-b125-57aee903f879",
        "cursor": {
          "ref": "f0ff5bed-d5ad-40cd-bdc6-d84b650a4bf3",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e99f6f84-8543-4296-aa01-9d82d1306abe"
        },
        "item": {
          "id": "13b244e2-e121-41f9-b125-57aee903f879",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d85daa24-14c7-4aa8-bde2-546e9ca0e600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8e3bfa-e667-41f6-bd82-de6ecf65c33a",
        "cursor": {
          "ref": "b4954dd8-892c-4019-9b44-2ba6b59334e7",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "04f28b29-621c-4c6d-a0e1-1051f521b898"
        },
        "item": {
          "id": "2a8e3bfa-e667-41f6-bd82-de6ecf65c33a",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "f88089ca-f9af-4159-a2d4-36c653156e1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c95672b-1d5b-403d-85ce-a4bd03c8def4",
        "cursor": {
          "ref": "0152b78e-879e-42db-bb2d-9c36230fa3f4",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "172d1db6-f1bd-43b4-90a0-f96052496297"
        },
        "item": {
          "id": "1c95672b-1d5b-403d-85ce-a4bd03c8def4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "fade2aed-b3a3-415c-93f6-eb0ec92593fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9c674c-0f44-466d-97d4-79466970a2b9",
        "cursor": {
          "ref": "ce5e4b96-a052-4cf4-9443-7aae571ec58a",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "8876d7e4-0398-4d56-a6ef-40836b958daf"
        },
        "item": {
          "id": "ef9c674c-0f44-466d-97d4-79466970a2b9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1b09defd-7910-48e2-950b-1e8a0044de0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c409302-7ee2-4c6e-b1b2-df3e0c0db10c",
        "cursor": {
          "ref": "e9e85c75-53b2-4ea8-9065-c6d5571a4b43",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ad0d86f5-3394-4535-bc36-3752b352edf8"
        },
        "item": {
          "id": "8c409302-7ee2-4c6e-b1b2-df3e0c0db10c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1a61a307-e9d4-4409-bf72-4dc880aca70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "634aa747-00a4-4248-ac58-f94fc8b11f9e",
        "cursor": {
          "ref": "e9020653-24f8-47a2-9c4a-144699cf31c9",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b65bafef-c6da-4398-9df8-acc715990f00"
        },
        "item": {
          "id": "634aa747-00a4-4248-ac58-f94fc8b11f9e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a45ae5cc-1e40-4d70-a163-78b108a76ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c77a7b7-9970-488e-bb16-a4ce5e15dde4",
        "cursor": {
          "ref": "df1c6e71-fdd4-4e22-83fb-10f787f50089",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1ed8a10f-9397-471f-b550-b0322b5b16c2"
        },
        "item": {
          "id": "6c77a7b7-9970-488e-bb16-a4ce5e15dde4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3b7c13f5-f0ab-4e78-8b0a-66b3c079a0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6723605d-7016-4716-b39a-721a6835d4f6",
        "cursor": {
          "ref": "ed7e954f-3029-48aa-ab89-3f4c137b1748",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a86ca104-fe53-46d2-b940-b7179eca2032"
        },
        "item": {
          "id": "6723605d-7016-4716-b39a-721a6835d4f6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "455c5408-81dc-4f4f-91b3-cda96b59b8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb624dc-05a4-4dfe-a52c-3c6db46c8dee",
        "cursor": {
          "ref": "c1d1f18d-78a4-4ce6-8244-6ead634bbc81",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "373d229d-f63f-49e5-b371-e87db5831d49"
        },
        "item": {
          "id": "7cb624dc-05a4-4dfe-a52c-3c6db46c8dee",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9291b96c-3b36-49ca-a1a1-727007a6b1f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27644d6-0ff4-4aa1-944b-96e3d0590740",
        "cursor": {
          "ref": "398d0443-7b59-4a15-88d0-cef592b84d00",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c67eb643-3f04-4fc8-ba63-e72d1e2082dd"
        },
        "item": {
          "id": "b27644d6-0ff4-4aa1-944b-96e3d0590740",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "9bf427e3-97db-4fed-93ad-aaa7093cb168",
          "status": "Created",
          "code": 201,
          "responseTime": 2877,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "fc53d948-0a19-428a-8089-3b80d068c702",
        "cursor": {
          "ref": "5f6866f9-3123-4a03-b6c0-4ab7818fb9b7",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "59d6a1d5-4917-43eb-b9b5-0c077ff6eb35"
        },
        "item": {
          "id": "fc53d948-0a19-428a-8089-3b80d068c702",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1203a6bd-f94f-4ba5-a20d-b104b69e010f",
          "status": "Created",
          "code": 201,
          "responseTime": 2875,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "cdfa4995-9c1b-46ec-9ca3-2b99f7c27aeb",
        "cursor": {
          "ref": "3fe14eb1-0d77-4e63-a230-575870871089",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a06df379-fbee-4d77-b69c-f572fc490487"
        },
        "item": {
          "id": "cdfa4995-9c1b-46ec-9ca3-2b99f7c27aeb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c6bcfe9a-3560-4254-bd8f-caa933d9ebb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb06d5c-2ccb-4649-8455-8c19f542cde2",
        "cursor": {
          "ref": "640624f3-09ab-4b20-950f-bda8fa63c2cc",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "947662b7-0e1d-41fb-bf25-66a70ef8fa83"
        },
        "item": {
          "id": "5eb06d5c-2ccb-4649-8455-8c19f542cde2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a4a12e2c-5a92-41c5-b2b0-2f6f58635881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9947ff52-ab13-4414-8492-e82ebfc1c1e3",
        "cursor": {
          "ref": "388e6009-bf3f-408d-a505-e35cd4a8612d",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "71df64e5-76f9-4eb2-aa5d-dfd893d7ac25"
        },
        "item": {
          "id": "9947ff52-ab13-4414-8492-e82ebfc1c1e3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "535a75ff-f9e1-41be-adf8-b868fbc64b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b4ea3bf-ba43-4269-a723-166da91f0547",
        "cursor": {
          "ref": "8c55ebc6-5319-4f8e-b3b3-4616fd73cd7f",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "330e3e7f-d329-4661-bdd5-4e68ae3bbc55"
        },
        "item": {
          "id": "5b4ea3bf-ba43-4269-a723-166da91f0547",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9582a6ff-e682-464a-afa2-bfc061cb5636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360ab0f7-e5f3-4b81-b199-b08543453202",
        "cursor": {
          "ref": "fe5f1705-c490-48a0-a35b-dc4aa6c91231",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "76950a9f-5780-459e-8c25-5a8e5463a0d0"
        },
        "item": {
          "id": "360ab0f7-e5f3-4b81-b199-b08543453202",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bd5e8efd-be2e-4fba-89a8-b21c1f9467d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2509129-cd14-4e39-be5d-d360be2c86c1",
        "cursor": {
          "ref": "626b4c7a-9e74-4b18-8d8f-47a850d1885f",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5fa976fb-80c5-43ec-b3a2-d138894e5797"
        },
        "item": {
          "id": "d2509129-cd14-4e39-be5d-d360be2c86c1",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "07665e91-bebd-4bee-8f68-367ef061b2fa",
          "status": "Created",
          "code": 201,
          "responseTime": 2832,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5a931382-f4c8-4253-a409-ad19c67b0623",
        "cursor": {
          "ref": "dc935968-c1bf-46c2-9196-b152796f31d2",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fa22ca30-95c4-4833-b016-e94075f498f7"
        },
        "item": {
          "id": "5a931382-f4c8-4253-a409-ad19c67b0623",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1fbdfcde-b5c4-43a3-8d8f-4796e9bde0ab",
          "status": "Created",
          "code": 201,
          "responseTime": 2880,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "378bbcc2-179c-4680-a6b4-b6a2a12eb604",
        "cursor": {
          "ref": "0a52d8c0-10f7-4732-8a35-82c976a3a753",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "ff88aa8b-5b6d-4652-8d69-7ada43e588d7"
        },
        "item": {
          "id": "378bbcc2-179c-4680-a6b4-b6a2a12eb604",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "da9faeb9-bddb-4fe7-ada7-a1cc3797ad65",
          "status": "Created",
          "code": 201,
          "responseTime": 3047,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "ad02da52-db34-4f0b-849b-ad618cb807df",
        "cursor": {
          "ref": "8c08267c-3846-46be-9c2a-03240e6cf6cb",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5bb27083-cef2-45b6-8744-852d43fba49f"
        },
        "item": {
          "id": "ad02da52-db34-4f0b-849b-ad618cb807df",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e1759efe-8e6d-4e74-9c51-98006b6b61cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb86e31-fd22-48e2-a830-9ba21a616b75",
        "cursor": {
          "ref": "6674914a-4f9a-4f60-8cbe-e0f5cee3026b",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e79a4279-d065-4669-ba93-0c9ca3fd28f1"
        },
        "item": {
          "id": "3eb86e31-fd22-48e2-a830-9ba21a616b75",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f8d9533f-ad5b-4391-b5aa-c9508d63655e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e924b1b-22fa-4aa0-bfd4-5a0298a31a1b",
        "cursor": {
          "ref": "b030de66-3ac5-4162-8fb7-dbe48b0347da",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "45a1adb7-cf5c-4776-abe0-09c8cd6dee22"
        },
        "item": {
          "id": "9e924b1b-22fa-4aa0-bfd4-5a0298a31a1b",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f9ed6fa2-7478-4740-bc2b-c86d381147ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3dc515-9e00-4cf1-bf25-36e66ea7b79d",
        "cursor": {
          "ref": "a9ac6a08-a6c0-4dc5-8abe-24f12fbc01c4",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "28dc781d-8593-44f4-98c1-ef0a1ce3e9cc"
        },
        "item": {
          "id": "6b3dc515-9e00-4cf1-bf25-36e66ea7b79d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a7136c04-c0d4-4d35-9448-6cb63b1221f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21316845-64c3-4945-9b16-d3bac02d421a",
        "cursor": {
          "ref": "465dcb9d-3e4b-401e-a842-25fa936f9156",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "aa457cf5-bd4f-4011-94ad-e56441d23dbd"
        },
        "item": {
          "id": "21316845-64c3-4945-9b16-d3bac02d421a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "9c446207-5122-4c47-aed9-04a8b84e9b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "115fb1d6-712f-4581-9085-7364c1442cec",
        "cursor": {
          "ref": "74beb918-2c99-427a-a34b-432f138d2159",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "92e0bdde-d1d9-4688-870c-7cbbc12903ca"
        },
        "item": {
          "id": "115fb1d6-712f-4581-9085-7364c1442cec",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e92012cc-3217-4bb0-ac76-ab94fced9f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7b9987-b1b6-41b7-8f50-8bb0dc6a90dc",
        "cursor": {
          "ref": "175f66fa-425c-4bb2-b79f-a3fc67e829cd",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "9aaec976-d9fe-45fd-be9e-42720f8e3fec"
        },
        "item": {
          "id": "0c7b9987-b1b6-41b7-8f50-8bb0dc6a90dc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2ae7f8c9-40e6-41ad-b43a-8ca579f75752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "852bab5e-552c-40da-8db1-e55d36534c60",
        "cursor": {
          "ref": "cc4785e0-982b-4f5d-8658-d39fb817ac37",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "643be8c3-e0a1-476f-9df1-ff5627030f6a"
        },
        "item": {
          "id": "852bab5e-552c-40da-8db1-e55d36534c60",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "91ffd05f-1b03-4ff0-b671-c34e1255fd17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6002cb-d5c5-450c-a7e3-8708c4abd6fd",
        "cursor": {
          "ref": "f21195ae-1971-4b92-97cc-6623f0876bbc",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f7ad9770-b8e0-4b7e-8d4e-50d20d349da2"
        },
        "item": {
          "id": "2a6002cb-d5c5-450c-a7e3-8708c4abd6fd",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "09e844f9-2ba6-4fa6-a630-ca3c274ea373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ca51a9-5cc1-4dca-9d71-a172cdf91fbd",
        "cursor": {
          "ref": "276e24b4-700e-4936-addb-0aea18e68b92",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "28af3735-7fb5-425f-80e6-a0a1bcf79a31"
        },
        "item": {
          "id": "15ca51a9-5cc1-4dca-9d71-a172cdf91fbd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dcc2b61c-355d-4b94-8386-eebb208326c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968fe628-ae8b-4383-bc31-c4654bd383ad",
        "cursor": {
          "ref": "fd1b04ac-8aa3-42b6-9134-ba2d0b7f2894",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b8ce8c2a-9ea0-4eda-bcaf-7df0ff226339"
        },
        "item": {
          "id": "968fe628-ae8b-4383-bc31-c4654bd383ad",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b26a56fe-13ab-4a7d-8c2b-1d5865473e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72767810-4441-471f-a55b-529b46197752",
        "cursor": {
          "ref": "80f62b34-97f8-4bdb-8a93-5acefb7b83cb",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a2fc20cb-4ba6-402d-8b03-57e4ab078287"
        },
        "item": {
          "id": "72767810-4441-471f-a55b-529b46197752",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "aae831b9-f09f-4058-9257-0291203cd2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3371f4a9-b5ce-4ba5-af26-5b286d2a09b4",
        "cursor": {
          "ref": "7df86a01-f548-482c-a93c-71c66367f07f",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5e3e1c2c-d1a0-4d6f-ac53-8fc463893c26"
        },
        "item": {
          "id": "3371f4a9-b5ce-4ba5-af26-5b286d2a09b4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "fa27d57b-c349-4a69-96cd-e118d22a4cc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1389135e-4f4f-4001-879a-a2fdc0b8191f",
        "cursor": {
          "ref": "a572c85b-514a-44bb-b4e1-a49edab996b0",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "59d1b193-4f01-4ce3-8a79-05e6dedfc299"
        },
        "item": {
          "id": "1389135e-4f4f-4001-879a-a2fdc0b8191f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "763ca746-2d19-4f2d-a484-fe27ae1728f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98297b34-b359-494e-8e0a-e1537d2f5b5a",
        "cursor": {
          "ref": "5caf216c-82fa-44d4-8d1a-16d7c7c703e9",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ef2f035a-12e3-4180-82da-a36259e9e8d2"
        },
        "item": {
          "id": "98297b34-b359-494e-8e0a-e1537d2f5b5a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2da13745-ac23-4742-99fa-9d56a9b3b9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "489a509c-809f-4331-97b6-ccdea4389c74",
        "cursor": {
          "ref": "d62fdb22-ed02-49d7-b7c4-fbabe43da93e",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e8a2a5af-5657-4bd8-96c2-b358b2189e94"
        },
        "item": {
          "id": "489a509c-809f-4331-97b6-ccdea4389c74",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6ee952d8-b46d-4bb0-bd0c-ec3ec20cf92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aafe78e5-22f6-49ab-8e96-7d4f36f187d5",
        "cursor": {
          "ref": "28f6dea4-f60d-405a-8043-1e0c306b9ec8",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "5aea2113-86bf-4656-b40f-384357253f29"
        },
        "item": {
          "id": "aafe78e5-22f6-49ab-8e96-7d4f36f187d5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7afde500-abd7-4c70-9cbb-3fcc7ee90ea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e75c6f6-e6c8-4bce-9eee-488de0953ad7",
        "cursor": {
          "ref": "0b91b46a-dc15-4fd6-959a-97d9a5f3e9e4",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c7d1901d-128b-43a6-90c9-82a7d6c23393"
        },
        "item": {
          "id": "0e75c6f6-e6c8-4bce-9eee-488de0953ad7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0e406c21-54b0-4286-97b4-fd2b7e282ab3",
          "status": "Created",
          "code": 201,
          "responseTime": 3592,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "05ab90a1-450e-4498-a57b-408f310cf2aa",
        "cursor": {
          "ref": "ba5bb614-3702-4070-b4f2-7c542d139b60",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "0e85f230-acba-488f-b6ac-3be278e9a7c0"
        },
        "item": {
          "id": "05ab90a1-450e-4498-a57b-408f310cf2aa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "21712550-0a36-407f-9c8a-3d1853d440f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540e5e07-0f7c-446f-998a-50579d8e8e69",
        "cursor": {
          "ref": "c512d10f-7e27-4825-9693-96c63ce3cb67",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9d518c57-f0f4-4d40-af32-0194d318b37a"
        },
        "item": {
          "id": "540e5e07-0f7c-446f-998a-50579d8e8e69",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b73c82c4-4fec-4379-ae44-d3b963c333ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c684c7-7d1d-4da2-bb40-b13104fa0e8c",
        "cursor": {
          "ref": "ac60cf86-4370-4ba0-9495-17f155f783bb",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d6683316-bde2-4a3b-af9e-6613cf73844d"
        },
        "item": {
          "id": "82c684c7-7d1d-4da2-bb40-b13104fa0e8c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dc162281-dcb7-4c4c-8ccf-ff7aa06746e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477acc1e-9273-415c-9613-65440e866a02",
        "cursor": {
          "ref": "03b93fe3-e63b-4ba0-a3a3-16e7160a9abf",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "06e6cd2e-e155-458d-b646-ade04a638014"
        },
        "item": {
          "id": "477acc1e-9273-415c-9613-65440e866a02",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "587f51a3-e41f-4145-ab04-eb18c2a3e9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e318c3-20c4-453c-af42-efc018e5de02",
        "cursor": {
          "ref": "506910ba-507e-42b5-bbec-166a587fd66f",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6027dfbf-9b55-4e24-b9f1-2d3a7593ec41"
        },
        "item": {
          "id": "b8e318c3-20c4-453c-af42-efc018e5de02",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d66e8500-dcb2-408e-b22a-6246d2711509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3bd5a9-1c96-40e7-bc08-c37fedf8cd85",
        "cursor": {
          "ref": "196c1803-31d2-41e1-a331-870c368b5c82",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "70ea21fa-9ab9-4fb3-a9cc-657099b45245"
        },
        "item": {
          "id": "1c3bd5a9-1c96-40e7-bc08-c37fedf8cd85",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3e4e1da6-4599-461a-9003-b189be964015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b4f8ec-27d4-4f97-ac31-04ad17ad6f8b",
        "cursor": {
          "ref": "dd74265e-b94e-4329-9563-f551731147cf",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "54c65fbb-7014-4528-8af3-2a1249e2700d"
        },
        "item": {
          "id": "35b4f8ec-27d4-4f97-ac31-04ad17ad6f8b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "107a9f99-fa91-4f70-a715-6e9a9a07c071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9538afb-d743-4f71-90c6-dbfe84b7ddc9",
        "cursor": {
          "ref": "04006b11-5d1a-4254-8329-a4f60b5a237c",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "da3db123-ff2b-4a01-86b4-c885569b2715"
        },
        "item": {
          "id": "c9538afb-d743-4f71-90c6-dbfe84b7ddc9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2324a97c-dce5-4b7b-8268-c068f80d45bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219e4201-9a9c-4de4-992d-e1451a082d50",
        "cursor": {
          "ref": "1e4af462-898d-4961-85b2-5ac810ea963e",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "35799218-9594-4fc0-9786-c64aa7f3fa7e"
        },
        "item": {
          "id": "219e4201-9a9c-4de4-992d-e1451a082d50",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ba32b2e8-ec24-47c3-91e8-495c195af917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb3980de-7ce6-413a-9a51-ab0417e2eb20",
        "cursor": {
          "ref": "b9fe2761-fe5f-4e5c-b20c-8740a7687256",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "f80e383a-9b15-44b3-afc3-4527f28efbf1"
        },
        "item": {
          "id": "fb3980de-7ce6-413a-9a51-ab0417e2eb20",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fbc081da-1818-440d-8caf-6c1e4fbaee5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018e1f3b-3006-4a02-b68a-a7a4955b6a9d",
        "cursor": {
          "ref": "23b892be-7026-402e-b35d-2be09159910f",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "de4153c6-5883-4c9b-809b-a3351d7f89f5"
        },
        "item": {
          "id": "018e1f3b-3006-4a02-b68a-a7a4955b6a9d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a869706c-d380-484f-9401-816e3243f1be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0aa3ea8-2e5b-47d1-96db-5e96d1204854",
        "cursor": {
          "ref": "30e04278-e69a-4770-839b-ce45b21045c9",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "520efc79-c16b-4b39-aa9e-9e0d221a8f4b"
        },
        "item": {
          "id": "e0aa3ea8-2e5b-47d1-96db-5e96d1204854",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8031ad59-b990-4ce4-88e4-9e1a6b70925f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e02650da-7db4-43d6-b465-21c0f79002f4",
        "cursor": {
          "ref": "d8842370-5904-4a96-aac6-8b6c364093d0",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a9b3dc69-485d-4823-b1ed-a4b39b62e445"
        },
        "item": {
          "id": "e02650da-7db4-43d6-b465-21c0f79002f4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8d0b742b-90ac-4350-9b42-a9281057a4b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5d8ea14-7ab7-453f-b854-79e655ed1c3d",
        "cursor": {
          "ref": "88d40cf1-3f68-48d5-8d06-d9993b55aadd",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "df72c42e-531c-4f8b-bcf1-0cfdfa7684cd"
        },
        "item": {
          "id": "d5d8ea14-7ab7-453f-b854-79e655ed1c3d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "385146d1-14e1-48e2-ae9d-668ba6dab8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6706b4d9-f2f3-4795-b3c1-d6945055ca67",
        "cursor": {
          "ref": "a9561fc4-1f54-4e03-90a8-77209776562d",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "772d265b-6e15-4a4d-b65b-a6356f762576"
        },
        "item": {
          "id": "6706b4d9-f2f3-4795-b3c1-d6945055ca67",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bd84e331-2a28-4d45-9acf-cbf010858ef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0c579b-6807-469a-819c-9f955c5b2437",
        "cursor": {
          "ref": "158e6fd8-1040-4e4e-aaab-25b624ae108c",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2653a0ed-7d86-40be-85f7-e9886902814c"
        },
        "item": {
          "id": "4e0c579b-6807-469a-819c-9f955c5b2437",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "94f08697-6bf5-4383-9b1e-123934749b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ed6c13-caf6-4c96-8476-bb1d3b7095a2",
        "cursor": {
          "ref": "8b69fee8-9052-47ac-b8b9-573134048894",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "38244ab2-0967-498b-aa0b-d70d3db508ed"
        },
        "item": {
          "id": "38ed6c13-caf6-4c96-8476-bb1d3b7095a2",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8162d716-8ef9-4b45-af0f-606f63e2064a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0440cadb-717a-4363-8ebd-6a43603b079e",
        "cursor": {
          "ref": "4946195a-4ff7-462c-ba01-150d84780f46",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "00acd81a-2448-4afb-8ee5-8d4ce2595c45"
        },
        "item": {
          "id": "0440cadb-717a-4363-8ebd-6a43603b079e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "4f558c2f-24e4-4033-ad47-f40b1854ef11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e4bb70b-433d-4206-8ff2-f51f104312d7",
        "cursor": {
          "ref": "0cba640b-76c0-44ed-bb3c-fb1541850b8f",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "068a61b9-12de-4592-9eec-110f2a472e8c"
        },
        "item": {
          "id": "3e4bb70b-433d-4206-8ff2-f51f104312d7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "f7281728-9e74-419b-9788-44163c5943c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5b4e29-5add-4700-a86a-55998860ce83",
        "cursor": {
          "ref": "c039011a-519a-4774-8bfc-e82d20e66f3d",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "46031eae-7bc8-47a4-843e-c6c6e337bd50"
        },
        "item": {
          "id": "9e5b4e29-5add-4700-a86a-55998860ce83",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "54f31e4c-3567-469b-9ee3-9985aa18b3f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5777b997-7847-4052-8860-a76bd71917f6",
        "cursor": {
          "ref": "1b3d9462-99b9-429d-9349-1a5ee6ec23c9",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ee00a9e2-1d47-4c80-a37e-e635188adc58"
        },
        "item": {
          "id": "5777b997-7847-4052-8860-a76bd71917f6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8adb0a3e-08e7-497a-8566-277db9b4ce2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f26747f1-db06-49a2-8645-4f42a2102495",
        "cursor": {
          "ref": "e8b4f0d9-ba4e-40fe-8716-18f21784a0c3",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "24371d9f-78ed-4589-9c8d-238db9ffc6da"
        },
        "item": {
          "id": "f26747f1-db06-49a2-8645-4f42a2102495",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b174dd26-55c3-4892-a5b2-fa50573c63e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae3209d-d174-4712-bbbf-ef2a8b10efca",
        "cursor": {
          "ref": "2645d6b3-5121-41aa-867c-9e69dd4099b0",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "baedfc35-75c4-499c-a701-c043f2397703"
        },
        "item": {
          "id": "4ae3209d-d174-4712-bbbf-ef2a8b10efca",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ae1eca5d-5503-4f5d-a3c2-98636219e300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7860086e-fba6-49d7-b4ca-a69c4f6eec3f",
        "cursor": {
          "ref": "0634eabc-7201-47b0-8980-9994efe4f5e3",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8cb1c0f7-bd36-4c1e-a90a-1f74c961e6ce"
        },
        "item": {
          "id": "7860086e-fba6-49d7-b4ca-a69c4f6eec3f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "b18c021c-f41d-49f3-83b7-f07224678a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9838d009-4a89-40eb-8290-03275d2922f9",
        "cursor": {
          "ref": "1b88a1d0-4f5a-4c7b-84c6-a077d6323374",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6c1885fc-e388-4b2b-815f-5c38ed4e06c6"
        },
        "item": {
          "id": "9838d009-4a89-40eb-8290-03275d2922f9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c8f217c5-4dab-4fd4-8ffe-ad537cd18d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908651f2-5441-4675-bd65-b7dfebc8f52f",
        "cursor": {
          "ref": "cb7842e8-66bb-46be-afdf-e96fdfaa5034",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4a350276-c076-45be-9865-c06d46db8560"
        },
        "item": {
          "id": "908651f2-5441-4675-bd65-b7dfebc8f52f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "46d4a380-fcde-4e4c-83a1-6c891b2c24b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d76297-ac06-43d1-a979-807773940550",
        "cursor": {
          "ref": "89e46824-4328-4173-ab7b-71ab55c0c742",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a28a6faf-f062-4b8d-911b-88d9bbbd0a26"
        },
        "item": {
          "id": "10d76297-ac06-43d1-a979-807773940550",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "10d1f6f3-5236-4eb6-af16-d345b751a571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d4c346-6e27-4bef-a63a-2074ce57d88e",
        "cursor": {
          "ref": "e00035a4-510f-4df2-ac38-90e2fbb3003c",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d2fb6159-7038-4e56-b3a8-ddfddafcb1e5"
        },
        "item": {
          "id": "47d4c346-6e27-4bef-a63a-2074ce57d88e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "269824ab-e6c0-462f-9b7c-76c5cc3b139f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff037e2-71be-4d17-b7cc-8bc5f8852db1",
        "cursor": {
          "ref": "09cb8a3c-9cd6-4925-af43-339a63efecd8",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "884d3f00-319d-4f01-b891-9fbca346310e"
        },
        "item": {
          "id": "8ff037e2-71be-4d17-b7cc-8bc5f8852db1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "4db057f1-fdf0-485e-b3c9-508c20c433df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a9c0b88-ce64-4783-87ca-f04593b4e9ca",
        "cursor": {
          "ref": "52eb7215-3ef3-4f3a-806e-4fecdd565f31",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f23197f1-8c22-4f17-bb96-ddfdabf2e990"
        },
        "item": {
          "id": "1a9c0b88-ce64-4783-87ca-f04593b4e9ca",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "d12d7157-d224-40ad-9631-f1b0741966dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581e16db-ab5b-4e7a-89a5-3d1bbf7a2821",
        "cursor": {
          "ref": "a3753419-087c-4bdc-ae88-774f1978fbdc",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "fd9048dd-dab8-454d-a446-559ecad426a7"
        },
        "item": {
          "id": "581e16db-ab5b-4e7a-89a5-3d1bbf7a2821",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3ef80f9c-8fe8-4aa5-afc7-810899cb1a8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 50,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "59d97d1d-e3f0-47dc-9747-bfbf4a82ec6f",
        "cursor": {
          "ref": "c7fd82c3-0747-414b-92e5-26850f3a73ae",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a72deaeb-d6a8-47fa-89b0-8ad961d567f0"
        },
        "item": {
          "id": "59d97d1d-e3f0-47dc-9747-bfbf4a82ec6f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c95ead05-4768-473a-b9fd-cf3b58b136e5",
          "status": "Created",
          "code": 201,
          "responseTime": 2211,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b44d4de6-13e7-4d09-ab58-8fc3c7787367",
        "cursor": {
          "ref": "f120dc7c-88de-4ff7-b50d-d588895f80f9",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6c9136a7-1f97-4fac-a83f-c049dd16df86"
        },
        "item": {
          "id": "b44d4de6-13e7-4d09-ab58-8fc3c7787367",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "67aabf66-9fc8-47a1-be95-25f1689bbb17",
          "status": "Created",
          "code": 201,
          "responseTime": 2773,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01dfcc9-dfcf-4a97-bd0e-bb082133b81a",
        "cursor": {
          "ref": "aa03d54f-7c74-4d1b-ba17-992eaf785218",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8dd26497-09a5-45fd-98a8-3828b36a19ed"
        },
        "item": {
          "id": "c01dfcc9-dfcf-4a97-bd0e-bb082133b81a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "95db06f0-d375-4e33-bf7e-1fa386ca0537",
          "status": "Created",
          "code": 201,
          "responseTime": 2686,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac76b83-84fc-4df5-97b1-ee0790280a72",
        "cursor": {
          "ref": "52455e76-55a7-48fd-9c0d-2a04424b9ba7",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "8d14e6de-bf36-44d6-9692-e85dda661c28"
        },
        "item": {
          "id": "eac76b83-84fc-4df5-97b1-ee0790280a72",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "350ae606-f1e2-44d2-9347-0b35a92042f1",
          "status": "Created",
          "code": 201,
          "responseTime": 2989,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "83baa5c3-0724-48e0-9e43-92fb7b88d3a3",
        "cursor": {
          "ref": "d203a275-dcbe-4ede-91e3-e9788de1feb8",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d82c9d81-5838-41dd-858a-490e2cba7442"
        },
        "item": {
          "id": "83baa5c3-0724-48e0-9e43-92fb7b88d3a3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a6bb820e-a7a3-4b1f-94de-b3150f4d31ff",
          "status": "Created",
          "code": 201,
          "responseTime": 3010,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-09T00:53:11Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-09T00:53:11Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d6241b09-4165-48bd-839a-e942c78a9a0e",
        "cursor": {
          "ref": "e803415e-40dc-4f70-a3de-f656a1da5441",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "de5ae286-d5e8-4c99-bdb6-bb0d1c322b44"
        },
        "item": {
          "id": "d6241b09-4165-48bd-839a-e942c78a9a0e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bde4c9c5-9931-4341-8750-9b0bfadafbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 193,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "eb3c0bb4-9666-41db-b2b7-69c5c1f3e81b",
        "cursor": {
          "ref": "55082a83-2b1c-4a35-a3b2-334394dc0689",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "66134fa2-3851-4ea6-8ce1-4e7bb74f2784"
        },
        "item": {
          "id": "eb3c0bb4-9666-41db-b2b7-69c5c1f3e81b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fb5cc218-e239-4aae-a446-423fef04ff74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d99aed-e377-40af-8d59-fae1afce8105",
        "cursor": {
          "ref": "640f6b43-11ca-4716-a224-d4a7109904c3",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c62b7674-d508-4849-ac67-5e596de06deb"
        },
        "item": {
          "id": "f6d99aed-e377-40af-8d59-fae1afce8105",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "27f0baa1-b71f-4405-946c-48b48f7eb609",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c41ff974-32c8-4410-9d3c-0ede6bb65ada",
        "cursor": {
          "ref": "6e1aa044-c06f-4acd-8b0b-b3dd514f1591",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c133f6e1-890e-48f5-a3d5-0bff7a6e04cc"
        },
        "item": {
          "id": "c41ff974-32c8-4410-9d3c-0ede6bb65ada",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8ba646f8-41ed-486c-a58b-0451c9e9ccd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd96440c-8352-412c-85c7-8a71e30085b7",
        "cursor": {
          "ref": "db252282-e155-40b6-a8c4-12661e94661a",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c885ea2f-148c-4553-b17e-0e56099e4285"
        },
        "item": {
          "id": "fd96440c-8352-412c-85c7-8a71e30085b7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f88a55af-1e4d-4b1d-bdeb-42976287cad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7feaf34-b05f-4af1-8d77-72c3ee893c60",
        "cursor": {
          "ref": "6fa34072-cbe1-4f57-a9b7-b6db7ccfd139",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "37782d2b-5a2e-4a64-88c9-085b56ea7c5d"
        },
        "item": {
          "id": "d7feaf34-b05f-4af1-8d77-72c3ee893c60",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6162dfc6-46ef-4f21-9982-5ffc010b01e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "773b0eae-5998-4585-a069-f994ebd2b199",
        "cursor": {
          "ref": "aedd16c8-d2e1-4b8c-87c1-a7b0ea503172",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "066d42b8-ad21-4c02-9e4a-0e6879ce06e1"
        },
        "item": {
          "id": "773b0eae-5998-4585-a069-f994ebd2b199",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "837c972b-8694-4bc5-b651-172c778af316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed36d73-df78-444b-9ebc-22391f1a3746",
        "cursor": {
          "ref": "ac3ebd98-1ba5-4905-ab36-dc1a4d73dcd8",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1fea1250-309c-4b67-a918-01f7bc80fb18"
        },
        "item": {
          "id": "3ed36d73-df78-444b-9ebc-22391f1a3746",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1de9a160-127a-4a60-8075-a8a996a24282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad3ef3e-c54d-474c-8362-048a00b5a09b",
        "cursor": {
          "ref": "a13111b9-106d-4b57-b728-c22d80318766",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a2020db-b76e-4d47-98e5-9c3bb658c7d8"
        },
        "item": {
          "id": "dad3ef3e-c54d-474c-8362-048a00b5a09b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d7fddab7-8151-4277-8f26-b33756bbae3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e376bd-c1cd-4f0f-b548-b2c7bc1d3f2c",
        "cursor": {
          "ref": "9e314d38-57d6-4d88-8d2d-2f6b97a36220",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "742e74af-a4f0-43d5-b490-2b27bf459c8f"
        },
        "item": {
          "id": "05e376bd-c1cd-4f0f-b548-b2c7bc1d3f2c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9cc7efef-75e0-4cfc-a79a-c7d2d4a15642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4561bec-fb5d-4748-bf66-ad960f3d0be1",
        "cursor": {
          "ref": "04b640df-937a-4965-a319-dbc09d2f0af4",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3b5ee7eb-d38e-4b74-8ad3-c834ce81c1a2"
        },
        "item": {
          "id": "f4561bec-fb5d-4748-bf66-ad960f3d0be1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e6a49f24-8fac-47f6-98ee-13441bacbce2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 387,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fbb2af-91ff-473c-8663-3e515de2af6a",
        "cursor": {
          "ref": "0fb88cae-aad3-4857-a0c5-d85a9eb832bc",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "502df707-fd27-4506-a83f-0b8d25c1440c"
        },
        "item": {
          "id": "47fbb2af-91ff-473c-8663-3e515de2af6a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "99bc84af-4ccb-44c5-9238-85df0d052a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 241,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4001595-fd94-496e-8220-34e63726c9f9",
        "cursor": {
          "ref": "fd6f3f94-ab73-4f2c-9569-6210dc94e4f2",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4a33ee1f-4631-4d5f-83c6-675efc2ce9c6"
        },
        "item": {
          "id": "d4001595-fd94-496e-8220-34e63726c9f9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fd717909-6815-4d5c-9068-97407b6b946b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0c76f53-b431-4f12-a04a-e33fa8de81c9",
        "cursor": {
          "ref": "8a6ad32a-6328-4da7-8644-62bebcae57c6",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "20f97d13-22c7-4164-804e-639ea346cf9f"
        },
        "item": {
          "id": "a0c76f53-b431-4f12-a04a-e33fa8de81c9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a60771a2-62e9-4d1d-8660-3cc5951a830f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e961d0-4fd8-4baf-97a3-c541955452b2",
        "cursor": {
          "ref": "f2149aa4-a897-4d74-a3cf-311ed8e2585c",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e6b325f0-8b2c-4569-a7d2-402e01a9773c"
        },
        "item": {
          "id": "00e961d0-4fd8-4baf-97a3-c541955452b2",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c44e071f-14ca-4ef0-a2d2-35c5554ac2b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 846,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "241a9fc1-f475-4cfd-9ac3-914275d27ad4",
        "cursor": {
          "ref": "b255d30f-18c3-4da5-a4f3-454538e6b103",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "378c5b41-244c-47a2-b145-62f68d17ceb7"
        },
        "item": {
          "id": "241a9fc1-f475-4cfd-9ac3-914275d27ad4",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b89de97e-c936-4cd0-a7c9-be4c6f897c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecfae5df-5234-4d1e-9ce1-d91452659425",
        "cursor": {
          "ref": "604b5e45-35ba-4fb6-a482-fe12b0b1656f",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3825f745-cffd-4b51-8a51-c73055e876e1"
        },
        "item": {
          "id": "ecfae5df-5234-4d1e-9ce1-d91452659425",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "676de516-0afb-453d-9881-8c75ec9ef7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d85777-a7dd-4ff9-8780-b39f8239c413",
        "cursor": {
          "ref": "40e094bf-994a-4289-afab-538c60626d5e",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "ab4a0328-47c8-4d39-b9fa-eaf6f73bff04"
        },
        "item": {
          "id": "a5d85777-a7dd-4ff9-8780-b39f8239c413",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3587c4ab-a7c6-4e27-b864-b4f8bff02d2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 848,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfce502-44e9-4e64-b93c-f8a1ebeaee90",
        "cursor": {
          "ref": "5272e12e-ce2b-4a27-96d1-2dbd7c5906cb",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "22c4d4e5-6522-4626-a32a-3055a16a3688"
        },
        "item": {
          "id": "3dfce502-44e9-4e64-b93c-f8a1ebeaee90",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "446b8948-9fdd-4017-a4bc-6dfdaa5c0b82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 775,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f119c8-7579-4c3d-b17f-966c2147b7d2",
        "cursor": {
          "ref": "493cd5ad-40d8-4edc-aec5-cf64ed62b2ec",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "3c2dd26c-0bff-4401-aa46-bf01ef5ee03c"
        },
        "item": {
          "id": "b3f119c8-7579-4c3d-b17f-966c2147b7d2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9b094248-d5a2-4b3f-b1c1-c27a95e6fa8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 603,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84c1792c-2768-4f47-a119-60c841c10615",
        "cursor": {
          "ref": "cf963429-f239-4a5e-b19c-be4ad1330f1b",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5b678ee5-4098-4a00-8a95-dcbe3cc5569e"
        },
        "item": {
          "id": "84c1792c-2768-4f47-a119-60c841c10615",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "69f68787-e5a9-4d3c-b9e9-33a794d88181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 604,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162983e9-eeec-4665-9603-9e2b52f9b48c",
        "cursor": {
          "ref": "b4cdaf7a-7442-45e2-a2a3-2185f6e2a7d0",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8db2db12-5604-4056-a5f1-d57a81670aad"
        },
        "item": {
          "id": "162983e9-eeec-4665-9603-9e2b52f9b48c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1b33dbba-3dd7-49e1-9538-67130a5715c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 803,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3310d50-77a8-45fb-9c6d-6a731faebb3e",
        "cursor": {
          "ref": "7b686092-e8fc-4404-8ac3-02bde518c090",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3eb28190-1141-4ee7-830c-4f887d838b78"
        },
        "item": {
          "id": "a3310d50-77a8-45fb-9c6d-6a731faebb3e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3d0c7558-573f-4ae9-988f-d5208ccea724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 545,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "269d7688-7787-46ec-8a3c-e33c017da1af",
        "cursor": {
          "ref": "8b32d1d1-4af2-40cb-a3c6-bd4e299f2715",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "2fc33cd5-e3ee-45f6-a65b-6eceba169e40"
        },
        "item": {
          "id": "269d7688-7787-46ec-8a3c-e33c017da1af",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6ee8c698-f80c-4395-ba50-bec1b9e57691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3028,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40833d7-4fae-4591-8cb8-e62eda7add8c",
        "cursor": {
          "ref": "e38b4c29-f2e3-4c79-986b-6614cc522215",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6aaf9773-82b8-40cf-9162-fdb31950f273"
        },
        "item": {
          "id": "e40833d7-4fae-4591-8cb8-e62eda7add8c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b934963a-68be-45db-81ed-ec8110cc1557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1042,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e5d714-8105-4c70-bf37-6d6aec1b143e",
        "cursor": {
          "ref": "70a9b2ff-7c63-4f2a-bdb7-6a15a353b0f0",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "a71c748e-6337-4c8c-968b-f082aa6c78cf"
        },
        "item": {
          "id": "20e5d714-8105-4c70-bf37-6d6aec1b143e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3fc58044-2ab7-44d9-8566-9c7c8cb08fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d279607c-46de-4238-a268-51223893d0f2",
        "cursor": {
          "ref": "0cec07d5-6dbe-40c8-9fdf-a96ace474dd9",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "5491dfa5-468f-4f5b-9780-e0b957bfe49d"
        },
        "item": {
          "id": "d279607c-46de-4238-a268-51223893d0f2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "05d8bd77-4ee7-40f9-81c8-86997efb7914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "672bbb5b-18d6-4aad-8b81-dc3bc2d724e6",
        "cursor": {
          "ref": "d3c7e2d5-e989-4560-95a9-0b4319dcd486",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "63884113-bfe1-4b71-86c2-d5c0964ebe52"
        },
        "item": {
          "id": "672bbb5b-18d6-4aad-8b81-dc3bc2d724e6",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2d9f2ccc-f37b-4afe-912b-eef2bf8b5f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b43f46bc-79d2-471b-b90f-8a8d1f573c5f",
        "cursor": {
          "ref": "3db9e8cb-f030-4ea6-99e9-65d554272096",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e81acff5-54c6-4369-b730-eb3694152321"
        },
        "item": {
          "id": "b43f46bc-79d2-471b-b90f-8a8d1f573c5f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2458912d-eb19-4430-ba36-b8072b4bfa07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024b6252-f9bc-4303-9a8e-ccc471f83b05",
        "cursor": {
          "ref": "d02e180c-ed12-481c-9f2c-a758df463dcf",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "36d5c7ee-5af7-4679-9ff1-7ae97e19f92f"
        },
        "item": {
          "id": "024b6252-f9bc-4303-9a8e-ccc471f83b05",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "3f3a77ed-b49a-4055-b034-7af09e87b998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a4a45d8-8d36-44a7-89e9-a1745524ccc9",
        "cursor": {
          "ref": "2c21a54d-2046-46aa-a393-5f1dbe6cc7ae",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "886c5250-2fe3-43a5-b279-e30d3edc9477"
        },
        "item": {
          "id": "2a4a45d8-8d36-44a7-89e9-a1745524ccc9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2584c3b9-d2fb-4f17-8038-225521ec0b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c476a5aa-c5ad-4f1f-a207-04888342c802",
        "cursor": {
          "ref": "575241dd-3318-4e8f-81a6-49a789434f87",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "cabbdf31-6cd2-4adb-8ed9-5497d975186c"
        },
        "item": {
          "id": "c476a5aa-c5ad-4f1f-a207-04888342c802",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "72f099b3-3ca0-4818-96e0-d6a6b2af7495",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6e7039-298c-4498-beb9-bce6cb6c3098",
        "cursor": {
          "ref": "b5d03d47-d04b-4110-aecb-3e194f8842ae",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7d6cddcb-dc36-48a8-aba1-cde717ae7847"
        },
        "item": {
          "id": "fe6e7039-298c-4498-beb9-bce6cb6c3098",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "b3107869-d62b-4694-a631-21dda9ee4037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd257cd-a8b5-4182-adbb-ba6ec28d5d75",
        "cursor": {
          "ref": "c24d8d7e-7e76-43b2-9f5c-65fdd3d286c5",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1614c0fa-0f76-4bf0-9173-e9229e40065c"
        },
        "item": {
          "id": "8fd257cd-a8b5-4182-adbb-ba6ec28d5d75",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "4c7733bc-0fe6-4fc4-bf0c-bee8e4053066",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "533c69e0-3d5e-43e9-abfb-4ced7ead5e99",
        "cursor": {
          "ref": "f47d3541-a62b-4377-86c9-5b01b85afc12",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "59433ddf-79f6-4e14-adc0-48ed80d3f9c0"
        },
        "item": {
          "id": "533c69e0-3d5e-43e9-abfb-4ced7ead5e99",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9e2aff09-d55c-4cfe-b0f1-14e9a5d58811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac82f0f-4080-4398-a478-492211260e52",
        "cursor": {
          "ref": "ae40e757-cd08-472e-9b8f-f050f357f175",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "eb9485c8-27e3-44bc-8782-fec682f0ae5d"
        },
        "item": {
          "id": "0ac82f0f-4080-4398-a478-492211260e52",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f0ab7da6-07c0-4e2a-8852-327f8f3849e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca2d5a6-e35f-4ff7-b5a1-02b57b604576",
        "cursor": {
          "ref": "03a9f003-04a7-4931-8924-d2b24fbca357",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "e5a8309f-e120-4486-aa6e-c5a5c164e0f3"
        },
        "item": {
          "id": "2ca2d5a6-e35f-4ff7-b5a1-02b57b604576",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3caac7f1-f67d-4ed4-9716-2b322f5999d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fec01c5-3bff-4d61-bacd-a618cf7e02f4",
        "cursor": {
          "ref": "52170890-75fc-4de1-a4ee-903f10f8f6ec",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8a564738-419d-44b7-bab0-4da4f61728c8"
        },
        "item": {
          "id": "5fec01c5-3bff-4d61-bacd-a618cf7e02f4",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f1b68ecf-ff22-475a-9a5d-f0d58bd1dc1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6265e148-9c1d-4fe4-b64f-f506d8ca59bd",
        "cursor": {
          "ref": "b40dd89e-fe3f-452c-bfb7-403fc2af07ce",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3cfe7c62-9d0c-4ef8-b22c-a38eb5c6873d"
        },
        "item": {
          "id": "6265e148-9c1d-4fe4-b64f-f506d8ca59bd",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fb6d02ce-a62b-4956-82d8-3aa03e86c9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050d9b7b-eb99-483a-80a2-cc773f179ce7",
        "cursor": {
          "ref": "c0b49682-2ab4-442d-b44f-76514393d028",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "edd09910-c610-499d-9db8-e16df5a43d90"
        },
        "item": {
          "id": "050d9b7b-eb99-483a-80a2-cc773f179ce7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "45764fe2-7dc9-42a8-9dde-5965e756c611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "659b4c2f-7660-4daf-9341-f8fb9255eb5d",
        "cursor": {
          "ref": "130d1e07-4709-4826-bc0e-ffd88d17cb14",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "34ab9820-e8ef-47a4-855b-cf96476f3efc"
        },
        "item": {
          "id": "659b4c2f-7660-4daf-9341-f8fb9255eb5d",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b6dab74e-aa85-4598-b661-eca84add0bd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b8594fc-2a1b-4b68-b3f6-abc2c80ec237",
        "cursor": {
          "ref": "9642e35f-6625-40ac-95c0-33af5d203d40",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "eb18fc45-9cb2-401d-af63-138a2b18bd03"
        },
        "item": {
          "id": "1b8594fc-2a1b-4b68-b3f6-abc2c80ec237",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e0fe8791-4683-4f9f-b81f-e29048f47b76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59572729-79fd-44dd-bc0c-99c4f866d2c1",
        "cursor": {
          "ref": "81b78b17-9400-4b4e-b964-fc52894b907c",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e489ce88-2812-4842-a9d9-48d3e6c3d99f"
        },
        "item": {
          "id": "59572729-79fd-44dd-bc0c-99c4f866d2c1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1fb27b0c-c95e-4d7d-b290-62c231fa7dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c4df50-ec93-4a03-ad13-2192f4d106bd",
        "cursor": {
          "ref": "4b242cdc-5812-4588-8e2e-fbdaba3f066b",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "bcb027f2-0570-4b8e-9b05-a846622747e9"
        },
        "item": {
          "id": "45c4df50-ec93-4a03-ad13-2192f4d106bd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "ab00782b-276b-48fb-bc77-ca7ad9a6a4c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3edb76f-6c4f-4516-948e-733076068180",
        "cursor": {
          "ref": "9b6631a1-bb2c-4c17-a19a-780a2ac155af",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "24d07e35-a16a-4c94-85be-75d460ceeb84"
        },
        "item": {
          "id": "b3edb76f-6c4f-4516-948e-733076068180",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "058ed37f-9d3e-4d5e-bc03-6280f3fe806f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb482ac-bd0e-43ff-829b-da67c76252f7",
        "cursor": {
          "ref": "8bbc10e2-0b5b-42df-956c-bba0b97cdab5",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6e41f305-baf7-42ed-820f-ed316cf9bca6"
        },
        "item": {
          "id": "9eb482ac-bd0e-43ff-829b-da67c76252f7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "21814c40-c4ab-44ea-86a2-14d49bfc3ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73f8e502-07ac-49db-a9af-90a28a48d756",
        "cursor": {
          "ref": "211af84e-d139-48f1-86f1-bd5af5c28b20",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f26908a1-2c64-4c3b-b189-7ac7dbab21de"
        },
        "item": {
          "id": "73f8e502-07ac-49db-a9af-90a28a48d756",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3c5c6dbd-ef70-4cf2-8c51-4878853c8d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab57d80-61e4-41bd-a9a3-00f8a1a6377e",
        "cursor": {
          "ref": "258463f1-508f-4412-9e8a-af09cf158291",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "68a5d33d-8718-44d7-b1ee-e17793db9a9e"
        },
        "item": {
          "id": "3ab57d80-61e4-41bd-a9a3-00f8a1a6377e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7d61105d-6534-42b6-bf94-13c9325f3549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85a266e-71fe-4446-855c-25c171d8418d",
        "cursor": {
          "ref": "dcc2521c-24bf-4421-ad86-71a00d96ead7",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "79d38cc5-fc32-447c-8bd6-c7c694f34729"
        },
        "item": {
          "id": "b85a266e-71fe-4446-855c-25c171d8418d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2fc49ad0-7906-452a-b5c8-1e41482810dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "694418ca-3d52-4aa9-b942-c02131806410",
        "cursor": {
          "ref": "ce62464a-d881-4b83-ad87-229cb546876a",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2762c115-c711-45c9-a50a-c252eba1efa2"
        },
        "item": {
          "id": "694418ca-3d52-4aa9-b942-c02131806410",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "7a75f6bd-5b14-4526-adc7-aacb8d4cacfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25eee5ec-6448-4643-844a-e9ba2957f484",
        "cursor": {
          "ref": "b42b14a4-c46c-4caf-8e25-9861ce0d1001",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "634a4a68-036b-45f7-9e27-ef20d3762f60"
        },
        "item": {
          "id": "25eee5ec-6448-4643-844a-e9ba2957f484",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d9a4f1dd-cd9a-4064-af07-5e1fa36c8c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43a304c1-e477-4073-8ca9-a958717a7989",
        "cursor": {
          "ref": "d53fa06c-7cb8-4d28-82fd-054051759ff6",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ad61f738-0739-4886-8122-e7bab6fd2318"
        },
        "item": {
          "id": "43a304c1-e477-4073-8ca9-a958717a7989",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7d3d8f30-0460-41fd-a990-22665d7a2a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "734e348b-fac3-4c6e-9ad7-8977c89b2198",
        "cursor": {
          "ref": "6e8f7817-00a7-4764-9195-22460717365a",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "25b206a9-9fb0-4437-aa2c-87d41263eeb5"
        },
        "item": {
          "id": "734e348b-fac3-4c6e-9ad7-8977c89b2198",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e99906c3-f7e6-43a5-895b-128ca1e76698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a068c173-3ec2-4c72-8104-2869b94635f6",
        "cursor": {
          "ref": "4caa1782-7af4-4d9a-ac28-36baf5ab7d3e",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "66a6238c-223c-4a67-903a-e874879b5c87"
        },
        "item": {
          "id": "a068c173-3ec2-4c72-8104-2869b94635f6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3a44bd6d-0fad-4db4-8edd-5a6e76cae154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909dd3a8-159f-4aaf-8b2d-44731132f0f6",
        "cursor": {
          "ref": "fbc980ed-933a-4be7-82fb-2900394529f6",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f8f7685d-34ee-440e-b659-91cbc0db0a73"
        },
        "item": {
          "id": "909dd3a8-159f-4aaf-8b2d-44731132f0f6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1507809c-176d-45e8-8687-7245c062e3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "162c7d1d-962c-44a4-8e64-5bae8377fc1f",
        "cursor": {
          "ref": "903c3d75-7473-4ccf-880c-59a1ee50f76b",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5b1d8ad3-1bf0-4d76-9a87-8d1352162898"
        },
        "item": {
          "id": "162c7d1d-962c-44a4-8e64-5bae8377fc1f",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8d1decec-eeb7-4d58-9400-8a8eb748df24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cae742-00d6-447a-8bee-82fc0aa963e4",
        "cursor": {
          "ref": "7450e985-42a2-4f00-ac6c-395496a3685f",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "591aedf7-4cdf-497e-8370-90dde0e9b699"
        },
        "item": {
          "id": "34cae742-00d6-447a-8bee-82fc0aa963e4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "9f20635d-6542-4e7c-9a1b-223440f68dcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe327e60-e933-47e8-9e12-f9265dc03805",
        "cursor": {
          "ref": "83910218-d037-4859-beec-5b6b360b8dd5",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "21236fa6-eaba-40ba-9a7c-26a82833f133"
        },
        "item": {
          "id": "fe327e60-e933-47e8-9e12-f9265dc03805",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c0f67a63-0397-4a0f-97a5-3e4106961d86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0986da7-bc80-4c77-a658-b00af6541336",
        "cursor": {
          "ref": "3f0bfb55-1141-4800-895e-c0c370021eb3",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7b359de0-58a4-419d-a0e9-0c1abd08fd30"
        },
        "item": {
          "id": "a0986da7-bc80-4c77-a658-b00af6541336",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ec8f929b-1d08-4fab-b9ba-72b7951406a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5fecac-1c91-472d-8a68-203254e023be",
        "cursor": {
          "ref": "805b1ad9-bcd0-46e4-961c-2a1baf1822a7",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "050ce392-ce08-4071-b6f8-686076dfa9f7"
        },
        "item": {
          "id": "3f5fecac-1c91-472d-8a68-203254e023be",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c0054d77-2465-42e9-ac52-08979f7f11b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43a3d8b-de19-45ba-9d73-853f63db2311",
        "cursor": {
          "ref": "61898475-0ed9-4a28-a093-6afda0e2e616",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "84f7482f-aa8c-4180-96f9-7892907e5924"
        },
        "item": {
          "id": "c43a3d8b-de19-45ba-9d73-853f63db2311",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "26469433-11be-409c-8345-3aaf9bc1652b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329c1021-6614-439c-95af-ab12559e5448",
        "cursor": {
          "ref": "8eca35e4-9949-43c4-8b6c-4ff9554e5df0",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2174c830-61f3-46e3-8c43-8d3206e32f83"
        },
        "item": {
          "id": "329c1021-6614-439c-95af-ab12559e5448",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "11dc4b4a-0f26-4fc8-bb45-1faed5af557c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3fb0a5-51c2-4029-9ce4-e7d158339aec",
        "cursor": {
          "ref": "98c9630c-8c67-42ba-a96f-d6571a544c03",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "df3557d6-955d-4c7b-8020-b669ba570368"
        },
        "item": {
          "id": "7e3fb0a5-51c2-4029-9ce4-e7d158339aec",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fa343f92-0af7-4aed-a816-2a924ba3564f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d055ed-7f3a-4f42-aab5-c05d9dda1996",
        "cursor": {
          "ref": "992496c8-f995-44b2-bd9d-446851c43093",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "379c4986-e501-4803-b66e-ff49bf6d5fe8"
        },
        "item": {
          "id": "13d055ed-7f3a-4f42-aab5-c05d9dda1996",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "3b0466dc-a72c-4a69-aaf1-bd8ca68c20d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4f17025-0a0c-4815-ac57-7a477a57f64e",
        "cursor": {
          "ref": "c7cdbda0-79a6-43b8-8b86-4118e30c2096",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b36a746d-81cf-44ed-b98d-5c54a6e9e0fb"
        },
        "item": {
          "id": "c4f17025-0a0c-4815-ac57-7a477a57f64e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5228a60a-d3d1-499d-9d7a-f17140fb8c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec56de05-82e0-47bd-9aeb-d5a4013fcb04",
        "cursor": {
          "ref": "c695d3ed-07e9-44e4-b719-cd8b74c2b7e2",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9b6a655f-b691-4073-9261-9e3d439fa56c"
        },
        "item": {
          "id": "ec56de05-82e0-47bd-9aeb-d5a4013fcb04",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "ce514253-c01d-4047-87de-fb8640346c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a83019-7ecc-49f7-98ad-dbe5fb5fed67",
        "cursor": {
          "ref": "47feeb72-a0f1-4600-955d-fb7575720a99",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "b70a8891-16ad-4c32-827f-9f159f8b734d"
        },
        "item": {
          "id": "e4a83019-7ecc-49f7-98ad-dbe5fb5fed67",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f674b3f8-2216-422d-a247-ad159b6a7662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51663f75-ec77-4ba8-a9c4-16a6eb9a53b3",
        "cursor": {
          "ref": "de498e61-cfe7-4591-a0f7-eee43e3ef6ff",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0016a33c-acb0-4379-a47a-5bf00f864f2f"
        },
        "item": {
          "id": "51663f75-ec77-4ba8-a9c4-16a6eb9a53b3",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "1a8dbca8-6089-4473-8529-d504dfa5a171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2461413-00b8-4266-bd20-4a24eef45325",
        "cursor": {
          "ref": "8de2a734-7820-4ff2-8dbc-089648cfc1e3",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b3bb787c-0878-4482-9519-85de64dffab6"
        },
        "item": {
          "id": "d2461413-00b8-4266-bd20-4a24eef45325",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5057e467-a8c6-48fa-a3de-b0f15a05d0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70a325e-3a35-4c6d-9334-8705fb97cb76",
        "cursor": {
          "ref": "e3e1ebab-f8dc-46c3-911b-ba6dad0caf38",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b4d247f0-6683-4608-a118-4084afe8766c"
        },
        "item": {
          "id": "f70a325e-3a35-4c6d-9334-8705fb97cb76",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "674500cc-62df-4bb2-adb5-3ece67d83dbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c37123-a408-4083-ad51-c23fb515b4cd",
        "cursor": {
          "ref": "0fd33bc3-671e-4d42-830c-c0a2a250b602",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "febabdcf-c10f-400f-9cd6-c62dea295db6"
        },
        "item": {
          "id": "88c37123-a408-4083-ad51-c23fb515b4cd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "167aa088-8abd-4d23-b98d-6e025a340079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2a0924-1142-4952-9aca-1526ba243c40",
        "cursor": {
          "ref": "0b7b6f9d-41b3-478e-8175-3519a8ad1021",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "be054e33-a357-44aa-a08b-3689c3bf5125"
        },
        "item": {
          "id": "2f2a0924-1142-4952-9aca-1526ba243c40",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2daec37d-97e0-475d-bc76-18a3b66461f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 57,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f80feb86-32fd-40f0-88e1-09822c3745a8",
        "cursor": {
          "ref": "81b1f9fb-d38e-4f3e-98f1-46dc081341c6",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "97242038-a476-4983-ad59-7eaf858256cd"
        },
        "item": {
          "id": "f80feb86-32fd-40f0-88e1-09822c3745a8",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ef6ae8c4-1935-4d15-9022-37953034c232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fd2a38-876c-4057-901c-7b5525c8012f",
        "cursor": {
          "ref": "b0a7cae2-139e-426d-984b-ff450b0919f6",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0d48269a-370b-4895-9410-e505ab111aac"
        },
        "item": {
          "id": "16fd2a38-876c-4057-901c-7b5525c8012f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c62a857b-77e7-45dc-8cd9-8e14eabe87bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1051c314-0d24-4e78-8e43-92638cf0faa0",
        "cursor": {
          "ref": "86466813-1eab-4306-9eb3-5194060bf39e",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9e6c3935-742d-46e8-9b8b-6442fe75f7a3"
        },
        "item": {
          "id": "1051c314-0d24-4e78-8e43-92638cf0faa0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "354ecab3-f1ff-4d33-bf14-28085f788151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 749,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb06d28-04ec-4696-8622-f9bdc2146f77",
        "cursor": {
          "ref": "e4a7e280-760a-43cf-9414-92b897b70939",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "abc220ba-a12b-4beb-ae93-04df3abf49ad"
        },
        "item": {
          "id": "bcb06d28-04ec-4696-8622-f9bdc2146f77",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5325fd1c-f1f1-42c7-aa6d-40ccc7d62c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86788412-87b9-422e-88ad-fee50c7ff5f1",
        "cursor": {
          "ref": "79337493-6e21-473d-9467-b261a387adf5",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "01648b5b-0aee-461c-be38-745b66449628"
        },
        "item": {
          "id": "86788412-87b9-422e-88ad-fee50c7ff5f1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "10d1022b-6096-48af-a4d0-13f5ceaccc5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 180,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3a420b-c9b8-4706-80e5-cbd7ff973fe4",
        "cursor": {
          "ref": "cd19f26c-7a8a-434d-9302-7eb8e277fda2",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a937d580-1a8b-4b07-81e1-86e3cfc03535"
        },
        "item": {
          "id": "2b3a420b-c9b8-4706-80e5-cbd7ff973fe4",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "335ef5fb-6891-4ce1-9ce2-bcbcad9ed7d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf704d1-a50d-4144-90bf-2c7eb26eacdf",
        "cursor": {
          "ref": "ce11c569-1e70-421f-90e3-cbe1f085d032",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a7f2b290-a596-42cb-ba94-d8c2ffefb97a"
        },
        "item": {
          "id": "bcf704d1-a50d-4144-90bf-2c7eb26eacdf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "38451815-3fec-43a4-9eb2-0b3f776bf3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85ca8ed-9d6e-4e62-9e73-cf96fd70d022",
        "cursor": {
          "ref": "c8e32f3a-e3a4-4805-9d35-3bf7a5205e48",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8774de04-f5c9-4d2a-bea9-a36b4bc0046f"
        },
        "item": {
          "id": "a85ca8ed-9d6e-4e62-9e73-cf96fd70d022",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bc699bea-b2d0-4d34-809e-67f3aa4d279e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2b57f5-1492-42be-bc31-5d958e9691a6",
        "cursor": {
          "ref": "26013970-1b8d-46ca-85c4-ef71f579a808",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ee4585b8-3017-42fe-b9d9-803f374f2cc2"
        },
        "item": {
          "id": "0b2b57f5-1492-42be-bc31-5d958e9691a6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2d1926b6-4cec-4569-886f-604fcc3f3877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "766df71c-d1a7-4d4e-911a-3cc618d6c445",
        "cursor": {
          "ref": "895186ed-e95d-4d0b-9478-0ddc9a6d8a67",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3785ee36-9d0c-41db-9084-8422663f2474"
        },
        "item": {
          "id": "766df71c-d1a7-4d4e-911a-3cc618d6c445",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0b52a534-982d-490a-b158-97290319bb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 196,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cb90e4-4fef-4427-97c5-d72e195702cd",
        "cursor": {
          "ref": "7c0ab2d4-82ae-4f14-b0d9-94af52d12064",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c931bb09-9bb7-40f8-b939-7b203d9932c6"
        },
        "item": {
          "id": "66cb90e4-4fef-4427-97c5-d72e195702cd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "56be01d3-6fb0-4ea0-8d8b-7952c1cf619c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b4edb3-56a1-430e-8801-f359a6233d00",
        "cursor": {
          "ref": "1f0e09e0-7120-4d04-9640-782dd5a0de46",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c00f2e6c-bb95-4c6c-be42-931e3ec01cce"
        },
        "item": {
          "id": "59b4edb3-56a1-430e-8801-f359a6233d00",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9c2a30b0-6bc9-40e1-955e-2802d57b8582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ad7bf5-d9fb-454f-bd88-94f61deef109",
        "cursor": {
          "ref": "96c33a50-f13b-4206-8789-f6d117f73e6d",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c13418e2-5428-4a4c-b347-2d6469717d96"
        },
        "item": {
          "id": "40ad7bf5-d9fb-454f-bd88-94f61deef109",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d89675fa-82c6-497f-8312-e498a0004453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "593cd8d5-629f-4e76-9cd2-cbb5472bce76",
        "cursor": {
          "ref": "082f9b88-12be-41ba-8469-bdf9949e391a",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9926c82f-41ff-4501-bf80-a8b69e158b42"
        },
        "item": {
          "id": "593cd8d5-629f-4e76-9cd2-cbb5472bce76",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "91fbeada-9af3-4380-aa3c-d811879857b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea00bce-5a48-4ea3-bdb6-51d96f8e3cb4",
        "cursor": {
          "ref": "d9d2e851-3e7b-4704-82ac-11abfcd12508",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "217ee2c0-91d9-4453-8f6c-1522a55e8da9"
        },
        "item": {
          "id": "8ea00bce-5a48-4ea3-bdb6-51d96f8e3cb4",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9ce33f3c-ba5e-4366-badc-5c583277ca80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28950fab-73c5-41d0-8303-3f8e3c5af236",
        "cursor": {
          "ref": "882a268a-8ebc-4e8f-9239-2d0dc56950d4",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4f91055a-5a11-4c08-9b12-4f413e768c64"
        },
        "item": {
          "id": "28950fab-73c5-41d0-8303-3f8e3c5af236",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "b0847426-71c5-4f75-86de-46fcb7feb822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 159,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f3c2d1-393b-4e0f-a7cd-5cd013c186c5",
        "cursor": {
          "ref": "0ec86ff4-7fd5-4548-aff4-2fa7a058c910",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8ae5a5df-fbca-4d62-8548-193a6855b659"
        },
        "item": {
          "id": "78f3c2d1-393b-4e0f-a7cd-5cd013c186c5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fb32d459-3832-42fb-8e13-427232d04fd3",
          "status": "OK",
          "code": 200,
          "responseTime": 421,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "83549e94-bbae-4227-9a9c-6748f73eef6e",
        "cursor": {
          "ref": "409a58ec-7f1b-4263-bd78-d6c8733e3049",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "63cd22d6-88a7-4207-836b-a615705bdce5"
        },
        "item": {
          "id": "83549e94-bbae-4227-9a9c-6748f73eef6e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1b7d9267-cedf-49a9-b378-533c0c20a814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 121,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b11fa1-cf63-4c09-a3a4-3481f45a2ddd",
        "cursor": {
          "ref": "05ec38c4-9089-4814-91e8-e66b25c23f60",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0fd4bfa1-72e9-438a-b1aa-1da2a2b9b5db"
        },
        "item": {
          "id": "40b11fa1-cf63-4c09-a3a4-3481f45a2ddd",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4afe2cf9-435c-41ed-a066-21155c357fb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "140815ca-ae8b-4a37-8d4d-1acf1b3ffc83",
        "cursor": {
          "ref": "ef2e0489-2f92-49aa-8364-71dc739f5e62",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8651868f-905e-4177-bb6a-da30469bf680"
        },
        "item": {
          "id": "140815ca-ae8b-4a37-8d4d-1acf1b3ffc83",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2c3b18d7-762f-43e1-aa38-b1f859af8aa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9bfff9c-a588-4ef1-b408-8ca9fc6fd50e",
        "cursor": {
          "ref": "755aa9ad-87dc-4d48-b1fc-a9f24cf47c78",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c34a869a-04ce-48a8-84fe-c29543017d8a"
        },
        "item": {
          "id": "a9bfff9c-a588-4ef1-b408-8ca9fc6fd50e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "9ca11dcd-f420-4169-a73c-d03e2642901a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ee575a4-4707-4444-8787-bb0c65680685",
        "cursor": {
          "ref": "344bd46a-0466-4bbc-8066-07c69c09a91b",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "3d532608-6d37-4fe8-a853-3f9425cc904d"
        },
        "item": {
          "id": "3ee575a4-4707-4444-8787-bb0c65680685",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "79b2fac6-a9f8-45ea-b103-439b1f709cf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "068b240b-bcd0-40e8-987c-0c509f27bf73",
        "cursor": {
          "ref": "2091370a-870e-4668-8e7e-06a7131cc4ad",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a4d54589-d0ca-4514-b295-886c23a65742"
        },
        "item": {
          "id": "068b240b-bcd0-40e8-987c-0c509f27bf73",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b5ffaaf9-cb6a-4dbc-86a5-3820ffdbe448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b99ed2-67a0-4d1b-8250-608520e1712a",
        "cursor": {
          "ref": "3b0dc7e0-ea0c-46cc-8c84-353513fd94aa",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b42e2abb-6107-48ff-beaf-ce600853d79a"
        },
        "item": {
          "id": "74b99ed2-67a0-4d1b-8250-608520e1712a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "3871d59b-049e-4517-857b-ef31a38c2263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ba33f4-b1bf-4c3c-aad2-9902d96ec826",
        "cursor": {
          "ref": "c64ea5df-fa33-4579-b6a1-9384d14c02d2",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7fab886b-dd0e-4b93-aab0-fc78a3d8f9da"
        },
        "item": {
          "id": "44ba33f4-b1bf-4c3c-aad2-9902d96ec826",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "a4797658-3a8e-406a-b967-b4c0ae22109b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed1bc7b-51a1-4cf2-a431-0ab9cf0330a6",
        "cursor": {
          "ref": "69baba61-79e5-4d30-b99a-30d266982b71",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "0088a3ef-f1b3-4ea9-af4f-996a6bc6c481"
        },
        "item": {
          "id": "fed1bc7b-51a1-4cf2-a431-0ab9cf0330a6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9545eeb0-36ef-486a-bebb-3642d7f20a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49602691-ad3c-41d4-9372-c5a3891b197a",
        "cursor": {
          "ref": "4b5a5b38-0c73-4453-9f1d-ddbde037013b",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "35f37f0e-87ca-4a57-a831-39c031825f69"
        },
        "item": {
          "id": "49602691-ad3c-41d4-9372-c5a3891b197a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "aeec13de-d347-476b-9837-7c6b69001a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e3a8bd-5c7b-425a-8455-07d032f0c134",
        "cursor": {
          "ref": "52355412-5ee5-4b6a-9ddf-c467c912bb75",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d067461b-0687-4423-abb7-bec3bc95cdc8"
        },
        "item": {
          "id": "02e3a8bd-5c7b-425a-8455-07d032f0c134",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f7627f86-9e1c-429b-90f6-c71c4ae8e0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b4bf7c-9ac3-4a64-96bb-dc2ce76fbd0d",
        "cursor": {
          "ref": "b8271563-cec9-4d99-8b38-915850bcac66",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "c6ef0845-1d45-4e92-a30b-80b5273b09ab"
        },
        "item": {
          "id": "19b4bf7c-9ac3-4a64-96bb-dc2ce76fbd0d",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e7ddf017-ae9a-41af-a369-c8563a5deb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807dc7a7-f0cc-45a3-b276-c04968711ece",
        "cursor": {
          "ref": "127dc72b-226c-487a-a3e2-a5b18b4a6130",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ca01a130-54a9-4b04-b8be-ca35db5d827d"
        },
        "item": {
          "id": "807dc7a7-f0cc-45a3-b276-c04968711ece",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e063ff2e-5f76-41c8-934e-0ffb1b7d928a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c9ffd1-1b54-4872-9a22-9b7659e52c51",
        "cursor": {
          "ref": "1d77029d-7410-458e-b81c-a1ec59b4a6d9",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1aaab7f2-aa6a-48cf-9629-dda259da2d52"
        },
        "item": {
          "id": "a6c9ffd1-1b54-4872-9a22-9b7659e52c51",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9261ec3b-74da-4db0-acea-88c2c7cdbd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 246,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ee8e51-886a-4f57-9d15-0cfc572ac556",
        "cursor": {
          "ref": "b4b924d5-782a-437c-97bd-b8de24175598",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ef2ac612-98ec-482d-9053-b9b357205838"
        },
        "item": {
          "id": "d2ee8e51-886a-4f57-9d15-0cfc572ac556",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "3e497347-7c0b-4927-911d-e710556aa4b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37464db6-e56c-4a6c-bf50-476a273b6f80",
        "cursor": {
          "ref": "77991b5a-5684-40a9-8de6-1b49ca8dcf25",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b7ad0523-ff8d-4b5b-b5b2-db3ce4000796"
        },
        "item": {
          "id": "37464db6-e56c-4a6c-bf50-476a273b6f80",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "95259ef4-53eb-43cd-a0d5-e316ecfd31fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd92c2b8-aba8-4b78-b7f4-8ec435bbbf5e",
        "cursor": {
          "ref": "3370ae13-c538-4959-ac5e-882de28e26c4",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "42f5054c-b2c8-4cab-81c1-6b3faf51341d"
        },
        "item": {
          "id": "fd92c2b8-aba8-4b78-b7f4-8ec435bbbf5e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "30f8c1b6-9dce-4955-8fce-d16039a91446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14810e2-59de-4f48-b643-c696ed625e5d",
        "cursor": {
          "ref": "4d955e87-7b50-4931-9169-9e9bb77a3781",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "68dbc083-26b6-47a7-9442-2a8fecb85068"
        },
        "item": {
          "id": "a14810e2-59de-4f48-b643-c696ed625e5d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "7a23f25c-18ef-45ee-9ab0-2b924980c42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f03d29ba-e993-42b5-a03f-6365b76c3e95",
        "cursor": {
          "ref": "19a73e85-9e0f-43f2-8807-d8dbdf0bb46b",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3e4ce83d-c0c3-49e4-ac6f-25434d557b68"
        },
        "item": {
          "id": "f03d29ba-e993-42b5-a03f-6365b76c3e95",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5cba1979-7f72-42d0-8ce6-818f1031691c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d60d4a7-e7c5-4dae-96d2-f233def72f6d",
        "cursor": {
          "ref": "a305fbcf-8ce2-423c-bff6-284949c0303a",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "89202644-aad3-4720-a62b-a0012f4456ae"
        },
        "item": {
          "id": "7d60d4a7-e7c5-4dae-96d2-f233def72f6d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b58f7f59-2915-43fb-8ab4-057d8d622833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5078c960-6143-4cb9-b8e6-4b8a0ef75ce8",
        "cursor": {
          "ref": "0e5f785e-4da9-44f6-9937-6c8c8d42e3d1",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "51b74e1f-e11f-440f-999a-7da0a3c06c27"
        },
        "item": {
          "id": "5078c960-6143-4cb9-b8e6-4b8a0ef75ce8",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0035cd6d-17b9-4573-adc7-cfb507dd0333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae260c7-36a8-4947-bd4a-764f200dff08",
        "cursor": {
          "ref": "5271d9a3-59c7-4401-9352-3c821b11681c",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "efbcbb4f-19aa-4b30-8be0-440048cfb626"
        },
        "item": {
          "id": "eae260c7-36a8-4947-bd4a-764f200dff08",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "dd9ba1a5-df89-46c3-a9ea-8b5c43ae1cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35de762f-64e0-4f8a-b3e7-ac85921d45e1",
        "cursor": {
          "ref": "e7a2f008-38f6-4281-8c95-e0b97b2c34d0",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2395dbfa-de2a-41d7-96c9-615048ac8d62"
        },
        "item": {
          "id": "35de762f-64e0-4f8a-b3e7-ac85921d45e1",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1b7051f3-b14c-424d-8840-a51ab4a2d6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2d3146-0ce6-41eb-b742-e30cc690f45f",
        "cursor": {
          "ref": "6a6a6e81-0db3-40c7-9717-ed40237d128f",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e28ceff5-f4be-49b4-99ec-81e4253c35e5"
        },
        "item": {
          "id": "0e2d3146-0ce6-41eb-b742-e30cc690f45f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "80ca4e72-5a43-4094-850a-1672ecbd321c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d69847-a246-4b92-bd45-cf822d4b20db",
        "cursor": {
          "ref": "dc5b5112-9a1b-48bb-bdc6-fd7ad4f84240",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "eb5a39f8-1d1c-4ba5-bffa-c80b1b165f59"
        },
        "item": {
          "id": "c7d69847-a246-4b92-bd45-cf822d4b20db",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6afe0d19-30e2-45dd-9307-166cdab946c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a023a94-46e2-4e38-8c0f-dc93e37ee873",
        "cursor": {
          "ref": "e003641f-e473-4509-b41c-3cb4a1f00899",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "513b7118-6c5b-4055-aede-f7b1ae778b96"
        },
        "item": {
          "id": "2a023a94-46e2-4e38-8c0f-dc93e37ee873",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "21808bf6-b711-47d6-8812-4fb0c2267ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def86cf8-7a22-401d-9be4-8946baa96aaa",
        "cursor": {
          "ref": "e5ee7318-fa47-4df3-af30-d67c17e8c9c9",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ff51c89f-8863-47b2-9ad3-09fdb4462044"
        },
        "item": {
          "id": "def86cf8-7a22-401d-9be4-8946baa96aaa",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fd3f1fb0-570e-4a47-a014-4fa17ac3f9b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0122763-40db-478e-9c0f-89fbfbdaa2d3",
        "cursor": {
          "ref": "400203af-c701-443a-ab8d-b5110bacf803",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b5455fba-f2f2-4b77-8842-bbefc16219cd"
        },
        "item": {
          "id": "a0122763-40db-478e-9c0f-89fbfbdaa2d3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3d50cca3-5caf-4cd8-89b5-92d1439f58f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0e06eaf-1f95-4e79-a7b4-0a05bdf25380",
        "cursor": {
          "ref": "d00ba43e-88d9-47dd-8d24-452e16285786",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1af88c75-6183-4b46-b374-16b747d973a9"
        },
        "item": {
          "id": "e0e06eaf-1f95-4e79-a7b4-0a05bdf25380",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "51edfe3e-a7cc-4c8f-8190-7baf2078838a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b586807-73a7-4482-ac4a-a4b80a72c2c3",
        "cursor": {
          "ref": "9c92657d-886b-4b8d-9897-d9c56b1965c7",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ec3e5c8b-a125-4462-882c-af10eec936a2"
        },
        "item": {
          "id": "4b586807-73a7-4482-ac4a-a4b80a72c2c3",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7d629048-947d-4bbe-9930-1ca00d79698d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e973b383-b782-42ea-86cc-85db69bf2db8",
        "cursor": {
          "ref": "50e13eba-ba95-4a89-9e51-546dd2d1b38f",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "cc5a3809-a04f-4190-9cc7-740ea7eae66d"
        },
        "item": {
          "id": "e973b383-b782-42ea-86cc-85db69bf2db8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0b805dc2-244e-4e58-95e5-25edf7002812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ac8a6a7-e25a-4638-83be-7065a6eebf3d",
        "cursor": {
          "ref": "24e21941-cc13-4eba-8cbf-3e59544cd2fe",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "908d3411-c070-4bce-a3ba-a0989a036936"
        },
        "item": {
          "id": "6ac8a6a7-e25a-4638-83be-7065a6eebf3d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "28ed1da6-fd41-4ca6-8028-a16ddaaa2e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1ae33f-9c4b-41f8-804b-d7e0ed390fb4",
        "cursor": {
          "ref": "39896588-c57b-49a4-bd04-6458e1b3e5c4",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e2e87c8d-06c7-4b5f-9784-7160d0adf4b7"
        },
        "item": {
          "id": "4f1ae33f-9c4b-41f8-804b-d7e0ed390fb4",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "573a8f73-d635-44b3-b139-99a0a7f07545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60942d73-8755-457d-95ac-02326bb55a81",
        "cursor": {
          "ref": "357ced35-da1d-4672-937d-335ecdf0879a",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a6fd66cd-76e8-4ff6-899f-3e61e1e09dfc"
        },
        "item": {
          "id": "60942d73-8755-457d-95ac-02326bb55a81",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8e494464-a352-4210-9e7e-db762589f086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62b19e45-9688-4abe-9054-f5c53c66f4b5",
        "cursor": {
          "ref": "1c298df1-f035-4dda-97fe-b24d91963add",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c064808e-3e07-457d-a9c0-565e96e3c4a2"
        },
        "item": {
          "id": "62b19e45-9688-4abe-9054-f5c53c66f4b5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c1cd2ab6-6a56-429c-8746-09e6a7581573",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29eba26b-37a5-4d9d-ad17-53c750cc52dd",
        "cursor": {
          "ref": "1e15acf9-fc9a-4be0-a381-d02a4cab749a",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cf1ba1c0-7e06-432e-9b63-e4ee84162daa"
        },
        "item": {
          "id": "29eba26b-37a5-4d9d-ad17-53c750cc52dd",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5798b377-1298-4e99-82f6-93e082b46d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee53fc24-0c3e-4d02-b52a-6fa1ce86a09f",
        "cursor": {
          "ref": "64be952f-3bd5-4630-83c6-b5a607598eb1",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "20c2159e-7b9a-40e5-9efc-76c2e64b9a2d"
        },
        "item": {
          "id": "ee53fc24-0c3e-4d02-b52a-6fa1ce86a09f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "89ab30c1-94b0-41ff-bf8b-26640a5f0893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88e636a-c213-42dd-9783-a6a488d16011",
        "cursor": {
          "ref": "88252d0d-1bc5-4c35-a476-0ff321402ea7",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7cec5847-4ed3-443d-89ac-f5ce91225040"
        },
        "item": {
          "id": "a88e636a-c213-42dd-9783-a6a488d16011",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "96eb1266-241c-4c9f-8052-e7c105c36a6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f236c39-3e8c-4e8a-a7ed-23d68f0362bc",
        "cursor": {
          "ref": "0e0c38bb-6a6d-4972-a6a7-a6e39948cacb",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8c4d9880-a13c-4c6b-a5d1-d993e2747377"
        },
        "item": {
          "id": "0f236c39-3e8c-4e8a-a7ed-23d68f0362bc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ab483a1f-a37f-4858-a30f-ed924a17ff60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c200828-448d-4440-9eed-792609970af9",
        "cursor": {
          "ref": "51da1ca3-d7e4-479e-b79c-a0f705933b96",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "bb7191fd-21a0-4ad0-973f-1bede79583d3"
        },
        "item": {
          "id": "2c200828-448d-4440-9eed-792609970af9",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d33bcd1f-f756-4526-8beb-27de5c2ea603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb39f0b2-93df-4f8b-8353-320ed96b2ab9",
        "cursor": {
          "ref": "365d718d-8750-4cac-a889-b86df7fca8ff",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "728a1692-89c4-4520-9eda-6b3bb40fdb44"
        },
        "item": {
          "id": "fb39f0b2-93df-4f8b-8353-320ed96b2ab9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "12c71bbc-b8ae-441b-af28-51864e45d0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6c8583d-bc82-4868-8faa-eb84d0833d80",
        "cursor": {
          "ref": "9b2fc30b-e2b9-43b9-8893-6638bd7e6853",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c4a941b8-4664-4824-b14a-d6b5827744e8"
        },
        "item": {
          "id": "b6c8583d-bc82-4868-8faa-eb84d0833d80",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f35e20ed-e5a0-49ae-960a-00f495943918",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b708b26c-ac21-49eb-a591-486547f28b22",
        "cursor": {
          "ref": "b80d6a62-3984-4e57-83cc-e1ff341c2b66",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c2b0134a-538f-42dc-820a-5edb20a86055"
        },
        "item": {
          "id": "b708b26c-ac21-49eb-a591-486547f28b22",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "422d457b-4b27-4a6e-86ff-4427fe508907",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "512178e9-50f5-4f10-bc40-303f1e90ed1c",
        "cursor": {
          "ref": "804d57a6-7665-4e37-aa87-13a3a7387024",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ef6c94a9-82a8-4635-acc3-73c7facfed3a"
        },
        "item": {
          "id": "512178e9-50f5-4f10-bc40-303f1e90ed1c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "670fb9fe-7adf-4993-865f-f369db6de05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a5de6d4-77d5-4cd7-a195-d56bfba34dbe",
        "cursor": {
          "ref": "8cb73694-fbda-44a3-9fdd-d4b8a0205344",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f2857d03-3ad8-48dd-b873-bbd2fc7e799f"
        },
        "item": {
          "id": "0a5de6d4-77d5-4cd7-a195-d56bfba34dbe",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3b28c38d-d27b-4aca-8e0b-f01425f44d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4aa4ca-e696-4c3f-a1c1-c02aa392b019",
        "cursor": {
          "ref": "94e983d7-b2a1-456c-a29e-65eba06fc5af",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "39bcb2be-f492-4936-ba47-bad74a91c657"
        },
        "item": {
          "id": "5f4aa4ca-e696-4c3f-a1c1-c02aa392b019",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0acaee41-744e-4ea0-97b2-6048517dc14b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d29d43-def8-4210-9ed0-233c5e5b4ccc",
        "cursor": {
          "ref": "d8a01767-579d-42c6-948a-79a9dd5cf26d",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a5a1b5e7-5381-44b8-a75d-15fc631635b1"
        },
        "item": {
          "id": "c4d29d43-def8-4210-9ed0-233c5e5b4ccc",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a30db719-ae71-47e8-89cd-ae5d365584a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a6bd0c-62d9-47de-8d03-ce24277a970e",
        "cursor": {
          "ref": "6fa4172e-9a01-461d-be8e-1c5d50e9b24b",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9e07a740-d18d-4228-9fe4-45f2ffb632f9"
        },
        "item": {
          "id": "61a6bd0c-62d9-47de-8d03-ce24277a970e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "86acef2a-368f-41ef-9c0d-ff26f5490c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a59088-785a-43c3-9f25-529f419014ab",
        "cursor": {
          "ref": "ebc19462-d865-483d-b283-89d7d7baee1a",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "4c3a5590-7d00-496a-ac10-a7afdc2fe0f5"
        },
        "item": {
          "id": "88a59088-785a-43c3-9f25-529f419014ab",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bc747f55-d70b-46e5-94bc-3aefcac044ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1f75a4-e75b-4269-8bb5-e45dc134e6ab",
        "cursor": {
          "ref": "cba23913-abec-4adb-8f4e-3901c56550f3",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "6201b6c9-71ff-4084-95e1-da86c95f9d7d"
        },
        "item": {
          "id": "0f1f75a4-e75b-4269-8bb5-e45dc134e6ab",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3313fcb9-b068-4896-a764-302a103049b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99a35c80-dc1f-43d1-b9e4-0ccf48b5f79c",
        "cursor": {
          "ref": "a98220e3-a56d-4da6-8371-07f909e6f672",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7063b2b2-9282-4fa7-bad7-f160861f2659"
        },
        "item": {
          "id": "99a35c80-dc1f-43d1-b9e4-0ccf48b5f79c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ca3d864c-9896-4d2c-b15d-c65fce07aafd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4573b357-73b9-4c7f-a693-41051e18c5fc",
        "cursor": {
          "ref": "9d7b19b3-9361-4c45-a025-31e5e5b513d4",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b61ec396-8871-40ef-ae46-99133a28ba29"
        },
        "item": {
          "id": "4573b357-73b9-4c7f-a693-41051e18c5fc",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0b6c1f26-f59b-4ee7-8e73-6e438abdc507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17323240-61bd-45c0-9aad-d737c6bece69",
        "cursor": {
          "ref": "70828a94-acca-427b-bb88-b657fb12eb7e",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "d1208e6b-d3b5-4c63-8e2a-f0ff7a9d23ed"
        },
        "item": {
          "id": "17323240-61bd-45c0-9aad-d737c6bece69",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f61b938d-d422-4f40-a09e-49d9dac3beea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72025f11-fd2d-45bd-b215-f8537b2ae536",
        "cursor": {
          "ref": "d2b3456b-36ee-416e-93cb-f4d3f441c390",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0559a758-eacd-4000-ada9-ada587e4a4ba"
        },
        "item": {
          "id": "72025f11-fd2d-45bd-b215-f8537b2ae536",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ff5d14b3-a01e-4682-8e31-8d43e312a03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7694886c-4b17-4ce0-84c9-7e44f19cabf8",
        "cursor": {
          "ref": "f24fbcad-ae8f-4286-9987-a4e35eeab498",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "375e0208-7256-4003-903a-57096e5fa89f"
        },
        "item": {
          "id": "7694886c-4b17-4ce0-84c9-7e44f19cabf8",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "81d7603c-548c-4227-be7f-2d1c1202a77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4698053a-c248-4ec4-8812-5e32a7772d2d",
        "cursor": {
          "ref": "823972d2-8c2a-4889-976b-de4875d45cce",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "73fb6218-6fb2-46f3-b9d1-c9439fb9be96"
        },
        "item": {
          "id": "4698053a-c248-4ec4-8812-5e32a7772d2d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3ec39d5a-b1ea-4750-a0fe-26bab35b1e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7995f12-9fd4-425e-9212-40b7643f29ae",
        "cursor": {
          "ref": "030b388c-4134-4823-b273-42f25ced5ea4",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "67b6aa39-5b44-4b6b-8c2d-3c82cb2a6881"
        },
        "item": {
          "id": "b7995f12-9fd4-425e-9212-40b7643f29ae",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9c9e28d3-a01e-49e5-8b4d-31c71fd1b4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed11f5f1-2dac-4813-99a1-362020423980",
        "cursor": {
          "ref": "9ae40f3c-89bf-49b4-97fe-9424f5327166",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e818a1f4-bd5c-4d05-8a3d-40a09b9a3cfb"
        },
        "item": {
          "id": "ed11f5f1-2dac-4813-99a1-362020423980",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "7349db61-ac05-4adb-b27b-bc52f8b80c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1eb9e55-3db2-467c-b5a3-ea5bb8305546",
        "cursor": {
          "ref": "05151700-5f94-4aee-b3c6-dc796de7434e",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "84fa03c4-3083-4af0-bf3c-ab19f6a6429c"
        },
        "item": {
          "id": "d1eb9e55-3db2-467c-b5a3-ea5bb8305546",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "16352215-f8ef-4180-8057-a4fab01f3a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365c1a4c-1442-44d3-9b0d-ddd4231828b0",
        "cursor": {
          "ref": "1a07daf9-c599-41c7-a085-1d09834e4f9d",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "23c0abea-8e48-4361-9349-354d851d5136"
        },
        "item": {
          "id": "365c1a4c-1442-44d3-9b0d-ddd4231828b0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f3e3d0d0-6f65-44f6-acc3-275b8302a410",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "563d25dd-79fe-44fe-afeb-f5565ad4e4c2",
        "cursor": {
          "ref": "1745395a-e488-4b85-b19b-493f4bed24b7",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8f01ca26-d1b3-4a64-b47d-8befaf811c5a"
        },
        "item": {
          "id": "563d25dd-79fe-44fe-afeb-f5565ad4e4c2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "ebb1868a-385c-4614-bd0c-8774ed16324a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f264e6-7724-4e3f-9b0f-2804c7cacadd",
        "cursor": {
          "ref": "5f6cfb37-bb8e-4d53-9f66-4750e0e76ff6",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b7ba2e47-071a-49fc-b809-5c124f545758"
        },
        "item": {
          "id": "67f264e6-7724-4e3f-9b0f-2804c7cacadd",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a675e77e-179d-4261-a452-cbf3f41bd7ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032c56a3-aea8-4f04-991d-997356463c84",
        "cursor": {
          "ref": "d67f122a-12b2-439f-a8cf-92ed9f82fa2b",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c370788c-4036-4dcb-9d98-f3d910262bb0"
        },
        "item": {
          "id": "032c56a3-aea8-4f04-991d-997356463c84",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "5ab5e9fb-26a1-40bb-9c54-2a2e2c0545c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd4655d1-ee3d-4f09-8834-42940474b48b",
        "cursor": {
          "ref": "28ef6e27-a9a3-41dd-8656-503a4206bcc5",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "a2efe533-b0c9-4458-b202-8e04c0cbb85b"
        },
        "item": {
          "id": "dd4655d1-ee3d-4f09-8834-42940474b48b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cce6c81b-ceb1-40a4-bd36-cbe63d7d5072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6793d60-a9ba-49f0-84b4-aa6c77c6e6d7",
        "cursor": {
          "ref": "cb2aad34-fbf5-4f72-b1fa-8ed2b4f9ccb9",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "205daa96-1c68-4818-83c9-a763b26bc531"
        },
        "item": {
          "id": "b6793d60-a9ba-49f0-84b4-aa6c77c6e6d7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1bce50a9-3452-48fe-803a-56d6f5988a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c0f726-e065-4c58-8a63-b3299195ebee",
        "cursor": {
          "ref": "e8c4989b-bc8c-4cb9-9f92-86e89bf57f9a",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "c8dc3743-cd7d-4391-91c2-1ad875f8d1ba"
        },
        "item": {
          "id": "46c0f726-e065-4c58-8a63-b3299195ebee",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4572585d-0485-402d-a511-2615592d3248",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53dc22df-a39a-4e20-af0f-674a9f66f8e3",
        "cursor": {
          "ref": "5ac7c6cd-0443-4fb2-aa4c-a778c6281985",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "609b91ef-945c-4de3-8930-2a1a9f4cdfe1"
        },
        "item": {
          "id": "53dc22df-a39a-4e20-af0f-674a9f66f8e3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0e085292-3012-4e36-9816-0610f0a6d462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aae32a74-f148-4c4c-9391-cd7d0b63b0c8",
        "cursor": {
          "ref": "2b528e10-f84a-4973-94f3-f2c52bb5922a",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "148ab9cf-26e5-4962-9df4-f52e641426c4"
        },
        "item": {
          "id": "aae32a74-f148-4c4c-9391-cd7d0b63b0c8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b1467dba-431c-4535-87f9-0075af87cb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0a6804-56b1-4016-8732-01b4957e5f9a",
        "cursor": {
          "ref": "54469ea8-8e71-4d4d-bd4e-5d09f37c6648",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5fe56ea2-1260-4b9e-a8c1-d7ffdde2b8bd"
        },
        "item": {
          "id": "5d0a6804-56b1-4016-8732-01b4957e5f9a",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9e5acb77-891e-47a5-aa21-8905946dcfb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "644b5bff-b82c-4d98-b498-1fb9fb7863b5",
        "cursor": {
          "ref": "1dd068a8-7a30-469f-a7af-2ee1a8a6188f",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "613bd84a-0eea-43cc-8914-4bef3c8b4938"
        },
        "item": {
          "id": "644b5bff-b82c-4d98-b498-1fb9fb7863b5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "94c6644d-c624-4978-8171-150a047d2991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4659b144-81b1-4159-8e45-bc8642516640",
        "cursor": {
          "ref": "417dc9fe-ddaa-4ab8-8f6b-19e06348b46c",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "087b732f-de70-4365-9b17-4b0a5b215752"
        },
        "item": {
          "id": "4659b144-81b1-4159-8e45-bc8642516640",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a01aece4-1138-452f-be7b-88ceb9e6ee47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4708255-d3be-451f-a58e-87f700101dc4",
        "cursor": {
          "ref": "7c7e0f3f-b1f7-4dfb-8dd2-1baa39a59f7f",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "f3939d55-6368-4f53-86ce-e54410879ca7"
        },
        "item": {
          "id": "e4708255-d3be-451f-a58e-87f700101dc4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "59b19711-a972-43a9-9987-65c4ca2f9db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21074e58-1fa2-4601-8d69-4903b2972fe0",
        "cursor": {
          "ref": "7e72d255-93b9-4658-ac8d-8dd0be1f5cc1",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "af0cbc0c-624c-47bb-8bb2-deeed3c12747"
        },
        "item": {
          "id": "21074e58-1fa2-4601-8d69-4903b2972fe0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "06188d8d-5b25-47f2-a683-0506877d3f46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "306414c5-fcb6-49b9-8b1e-7821e2a02e33",
        "cursor": {
          "ref": "47607735-c9a1-42ce-af20-9a5445b6cad6",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "fea6b84b-5ecb-48a9-923c-f6977f6bb111"
        },
        "item": {
          "id": "306414c5-fcb6-49b9-8b1e-7821e2a02e33",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "ed6c92a2-3d2b-4f78-bbe1-0fb56ed2b3cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2029bb-d06d-4126-b0cd-689786ff346d",
        "cursor": {
          "ref": "4d9865ce-9e72-474d-a53c-e229555387c9",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f2765663-79a8-4ab8-9c1f-8316b21dbb2e"
        },
        "item": {
          "id": "2c2029bb-d06d-4126-b0cd-689786ff346d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "497c20c4-b136-4605-81b9-f3b9c2774715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2473e29f-2433-436a-918a-1ed1622cc9ec",
        "cursor": {
          "ref": "4c3f347a-51b0-4d61-acdf-07490cad4522",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "a3c7fdca-ddc5-4a9d-8a71-9df9a57d1013"
        },
        "item": {
          "id": "2473e29f-2433-436a-918a-1ed1622cc9ec",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "40c15f21-0007-4ab9-acb4-dad74b19ae6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d141b067-cecc-4941-acf2-f37890e58def",
        "cursor": {
          "ref": "09e2c287-090e-4237-aa09-f990a8d80cab",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "37ce0223-fc9b-4582-a816-8f4788baa5eb"
        },
        "item": {
          "id": "d141b067-cecc-4941-acf2-f37890e58def",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "171bc74b-0b96-486a-aa18-f43bf6e6b4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "334e046f-c403-47d5-983d-8599baa4c6a3",
        "cursor": {
          "ref": "d9ac90ac-8e11-483f-9e81-9a72e92da4ad",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "012c70f8-c122-4b5d-b913-b4da64169544"
        },
        "item": {
          "id": "334e046f-c403-47d5-983d-8599baa4c6a3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6d9a960c-3050-4596-a685-18dc326af19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 404,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbf82e5-f600-45c0-8c64-b9c5f30aebbd",
        "cursor": {
          "ref": "78912663-dc68-49e7-8b42-47133aa7a68f",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "9424fba5-7023-4d85-b6f2-8882e60bd3ef"
        },
        "item": {
          "id": "bbbf82e5-f600-45c0-8c64-b9c5f30aebbd",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "3f53943b-4115-4b7e-8ea9-8c74813d46cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfddebd0-b7be-4a06-823e-9f8159af6b9a",
        "cursor": {
          "ref": "0409b006-0d42-41a7-96d0-9ce1cd8d8114",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "66580b67-aaa4-494d-8c4d-2fa2e330c7ba"
        },
        "item": {
          "id": "cfddebd0-b7be-4a06-823e-9f8159af6b9a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "04894c5f-be08-4224-8adb-2d0db1f1413e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe36c5e4-b6ba-4944-87aa-6854fdfaf6f3",
        "cursor": {
          "ref": "d5eb28fb-7482-43a1-bdd7-7303d26a111a",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "ab1faef4-78a4-4ea7-b44a-388657d98aa6"
        },
        "item": {
          "id": "fe36c5e4-b6ba-4944-87aa-6854fdfaf6f3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0d6c4687-8773-4afe-8a8b-47b2d79cfd1e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "89d2fd1b-6220-4e5c-903f-89905c4a9de1",
        "cursor": {
          "ref": "38bf9a2b-ba76-406e-ad72-505dd188600e",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "a38bdf6d-f98e-4b99-bccd-7c7cb92d3ad3"
        },
        "item": {
          "id": "89d2fd1b-6220-4e5c-903f-89905c4a9de1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "aa4847fb-60c7-40b7-802a-ca88a588b207",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "af50a3c9-b383-4839-8a26-1c7e16635702",
        "cursor": {
          "ref": "e0d77b24-eb96-413d-a3a4-bdc3d4782654",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "133c1898-de0d-472b-a227-93c9af2befa9"
        },
        "item": {
          "id": "af50a3c9-b383-4839-8a26-1c7e16635702",
          "name": "credentials_verify"
        },
        "response": {
          "id": "1215f23a-076c-440d-bc9b-7e65cdd6a20b",
          "status": "OK",
          "code": 200,
          "responseTime": 2813,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8514a2e-2258-4595-86e1-d1d5d2de0cb3",
        "cursor": {
          "ref": "db0865ac-3b3d-46d2-bfde-364ae403a6b0",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "744d57c1-18cd-4d08-9cae-0ae0907743b5"
        },
        "item": {
          "id": "c8514a2e-2258-4595-86e1-d1d5d2de0cb3",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8a7fb488-8f69-40a5-a30a-0dc8cf3cca3f",
          "status": "OK",
          "code": 200,
          "responseTime": 2043,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf672d3a-9784-4249-9833-47cddbedf19c",
        "cursor": {
          "ref": "bbfc3616-ed0e-4025-ba28-83adb9e1323a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "27b0b93e-ae88-4d62-b13e-dfc1b09bbd6f"
        },
        "item": {
          "id": "cf672d3a-9784-4249-9833-47cddbedf19c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e49a82f-31f4-4e06-b603-a877c873e0f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "cf672d3a-9784-4249-9833-47cddbedf19c",
        "cursor": {
          "ref": "bbfc3616-ed0e-4025-ba28-83adb9e1323a",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "27b0b93e-ae88-4d62-b13e-dfc1b09bbd6f"
        },
        "item": {
          "id": "cf672d3a-9784-4249-9833-47cddbedf19c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "1e49a82f-31f4-4e06-b603-a877c873e0f9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "686dc565-0bc5-4082-b2ce-11fbced915e0",
        "cursor": {
          "ref": "40a1affc-2fdc-4683-bf8c-b3d40fdb8e0f",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "d36e1d55-c0b8-4888-a6e3-0c739dd3905b"
        },
        "item": {
          "id": "686dc565-0bc5-4082-b2ce-11fbced915e0",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "955c16d0-c703-432e-b934-14e753bd8814",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "b6be9d7c-57b3-4ce2-ad44-f789d82182d0",
        "cursor": {
          "ref": "7ddf420f-2c6f-41b3-91a9-25a4f1e9d8bf",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f976718a-8f85-4204-839e-5598fe9a8e49"
        },
        "item": {
          "id": "b6be9d7c-57b3-4ce2-ad44-f789d82182d0",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9cd318f1-c122-4c14-9302-58ab829ffe2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}