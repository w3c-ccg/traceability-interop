{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7eb5a7f2-2e9e-4c66-aa99-8b96a3a891a8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b732edd8-0ebe-48f1-a3d2-b99a91d79d19",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5376ac4-4931-42be-b9f5-00aae886ad6d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "79e517e8-b64d-4174-83b5-4bc196c7cd53"
                }
              }
            ]
          },
          {
            "id": "e6afe2b2-1dc8-4f53-a260-c70d8af3521a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3f6fafa5-5b44-4934-a6b0-ec8c5dcf4a19",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "80bfedde-764a-4300-9398-91748797b10d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c85e2fe8-ea0e-4922-b0da-72580873ab78",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "dcf6c3cb-17de-4e78-adbe-97bfad5db995",
            "name": "Positive Testing",
            "item": [
              {
                "id": "017df1e5-e4a9-4804-a69f-0872cc7348db",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b22a7da8-93a9-44c8-8aed-d3ecab35e560",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bcc461ba-7355-48f4-8130-c61559c73c7d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aaa93a4f-68e4-46fe-8e71-2fdb0fb806f0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b95b1c4-a180-48ab-8196-996f9210a6ed"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "60bebc80-1902-4abc-b58d-cd5f2ac5e3a2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2a63b44e-ba65-4c9b-b22a-765fabebc4fc"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d0179a0-787e-4a7e-bc80-d03662fe1613",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "be975c59-daab-4ae7-89db-aadb2d39aeed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c440455b-9ff0-40ca-b2e7-a24da07d79a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72b3493d-0f05-4921-9085-fcd5e14dc133"
            }
          }
        ]
      },
      {
        "id": "40be67f0-0a7b-439b-adea-9dcdbfd9f3cf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e8057e0f-198f-43f4-b343-ece584043a49",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3e4b7c6e-1279-450c-82fa-a32f5e9e103b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc46e07c-a2c1-49fa-8cc2-f073267957e9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4fbcf6-482b-4a83-89c0-d7c566fc8e08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7b3b679-6a63-4df0-9f63-6b013d4dc552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5a7984-3d39-4dd8-8a47-0eef87800e8b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19377d7e-88b6-4e5b-af43-48971806da0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af21f20c-fded-43ef-a92f-cad43110aa09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cb7998-34fe-434f-b982-2616b4e4151f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68a0f08-7f9e-4d6d-8efa-5a9f74fb5117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a6aa6dbd-a76e-413c-9242-18206e8ff7d1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b6afeb78-e8d2-4b87-b18a-7de198adac03",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f8a31312-3bcc-4c6a-8142-97e05e41dfd5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80449bec-1cf5-436a-a2a5-e7ac4b4e3392",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "604c8788-d86c-4d8e-a8d9-b0d723e1c8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce1ba9c-0e99-47e6-8c6f-62ece069f050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd409fb3-d3f6-440a-85f9-683b0ddff91a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "29410284-cfcd-48f9-9850-54650f05aca5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c75d9e91-2295-4efe-83b2-74d57c32bc8f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2530d4d7-ad97-48a1-b9c3-be9a53be2011",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "7be07f9f-c32a-493d-a32c-f83f4e0c136e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "35874be9-ab13-4a34-9965-4fe7a775408d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ca619d23-20ce-4de6-aa01-551f0aa0a40d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3747cd27-cf23-4b2a-aa38-9ddd7b9f92ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "32f6bcdf-9088-4e47-a884-97c16606bd01"
            }
          }
        ]
      },
      {
        "id": "9ae9491d-4a34-4268-af92-e63d74864948",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4322835e-7c67-4648-9d48-e6e15f0da5c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8278a4f9-0c71-4cf6-8aa8-81551f3853ad",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e92caaa3-66c3-47b8-8e21-4f69e50b2e86",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462588d2-7489-4c27-82af-5fe7847cdc25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23e7811-ed11-4775-b6f3-559027889ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b80b20b2-ceec-41c0-a00c-d45425800526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0858bb8-78e4-4c7e-83f6-41fe7d1dc381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e8db5f2-cda1-4c79-b175-c6666799fb79",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349b4c8f-32ac-4e8f-ae90-86f557a3204e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7fc55a2-594b-495a-ab0a-9bb4bdbb99a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97bb8f4-7482-46c2-82bc-34bd8122dc91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d93d46d2-7fa2-4290-880c-d9708f3b6c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "875e7c75-cc94-4a89-aceb-461136a97895",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "771575a0-f11a-40bb-ac06-bc96b391b645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f89c4a2-f24d-43c8-aee7-7727709d9173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0a08834-3380-4afb-a8c1-4f0f8a9b52c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "399db0c2-7077-42c6-ae52-071d1f880c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36221f2-62ab-4dac-918a-f765336cf9e1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494fb161-1a08-4786-91c3-2eb4c3f3e979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813b5102-a345-428d-8ab6-9fcfe46c9de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97a9edd0-8df4-4ba2-9e14-d8a986352b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a79f387e-f16d-4f07-a2d5-c0057e1cbed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f689952-fdab-4344-a537-5ec1b82d9958",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcfcb15-c069-4f77-aa7f-bbd12c554fb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9d4e871-ba31-4577-ad64-c602cf7529ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c83a11c-c137-434a-bd6b-294f6aed4fad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a35a6f95-fd5a-4cfb-8a0c-a6e2cce1e7ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0fd8e1-fa99-429c-b6a2-fe7c39ca342a",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1338ca12-6133-4c03-a78c-2766a3d21deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e18b42-fbd2-466b-8297-f5ad0f25e90c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "982ef9a8-7192-4321-a811-e8c37fb8eaa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f6e0de36-2382-43d0-93f2-ed16e541baf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea034fd-b715-4db6-b591-1c770199c111",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb5b4ef-f89d-46b6-b424-d2b4989fa730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d238b4b3-c9fb-4015-a20f-d264b0a49bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c9902e-6f57-495b-a7e9-d042197a8dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d32099db-bbfe-4298-847c-bbdf8793b07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f545a1-e084-4845-9e2e-bc0833f88ead",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24d0071d-500a-49be-b55b-731f1a54404c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48606b43-7073-4bd2-b1e8-f4fbd63cb572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3790ce2f-aef4-4d5a-950e-3415390b5364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee58966b-b19e-4553-99be-94c29756b9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca32547-fa19-4430-b0e1-7bff620bfd15",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ada860-087d-41ad-aec9-7bed4f38808e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98327647-e50a-47f4-b106-851ad265ad53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cbc70d3-1cd4-434c-8f42-7755fcf9362a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f1d68205-4f81-4753-8a5d-108838a35504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8a3b2e-4caa-4dd1-9e6c-36c02bf63fef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7938b0b0-3166-4e67-8279-96c789b4f2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7cbb33-2324-4bd6-84c3-17bef06b5652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa15fdd-2c00-46e5-9e12-7f6eb5fe4f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4cd6f24-2e49-4a18-be77-638e777c55a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99759be-6cec-4c2d-9269-ddc2a46eea15",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "813a2499-5eda-409a-8ee3-a3b5f434a312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bee4f40-bd3b-4e5c-80a9-11564701c14e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b631a19f-4547-4789-99a7-413829ea8f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6626d92f-235e-4e1a-a9c4-bed983e401a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b480ece-a04f-4037-bea6-d2751504b312",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32d6c67-ce48-4820-a0a4-0515320552e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3233fa-de8b-463b-a9a3-395924ec65bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe877584-4ff1-4da3-9419-2bed6e6d9672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "328cbb0c-6815-4925-aa52-c93bcb37f165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc9ca65-67d5-4b70-bffa-a8bd9b6ba530",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be11fb8d-35c9-4fb6-ad89-7b3aeb51ff69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be93d06-0128-4b37-b1a3-f32a776efb38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a4df2f-ba17-4103-933e-c94d427644ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90176014-99d8-4a88-af36-003b36173616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72080cb-156d-4681-9dad-4da96e9bd4fa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24900d02-2e3b-4d7b-88d5-4d903d196dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcc8a126-b06b-47fe-8b43-35bbd787b1e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490f174e-b383-46a0-94ca-8e6d5adaf6e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4263d0b-122e-4a20-982d-67bf206d4393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69091284-8241-4f2f-b718-6ee99d641325",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efcf2817-d051-471c-bfe2-630862b44d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03825ca-f6f5-4d1d-adf7-a122691300b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b0ee0d-259b-4836-9485-53e9ddfb68c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "56274f9c-e5dd-4b79-910e-73e045c78fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af296adf-4cce-4371-8037-f5ca45ce00c4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70112d0d-a2c3-41cf-9e0d-8211272b3dd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9424e6-acc4-421d-82b5-0d6b02c9878a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4dabd82-45f7-4615-a22a-0f0aa6a82532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b15e96ef-c832-481d-99c1-ba3140c30994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25320ad0-cdde-459b-8eaf-c47c8875d3fe",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52921a73-6c60-4688-8f3d-2adbce60dc4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f35ec653-e828-4f3e-9283-40b7bf64ce5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "208aa8cd-9f96-40ce-87e6-4a5c4670f687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a81f3161-1f0f-41c1-b1cc-59539f48a9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f65821-a4da-476c-874c-7ba7b7728546",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fa5b42a-8174-47e2-b64a-b7c60adfc9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450ad1b6-dfeb-4a5e-8a0d-4a5dd52ed2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefc539b-7b67-4b65-b54d-8127ad4fecc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4016b6-1cae-43d2-a146-cbef1c545961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ef364c-e23d-40cc-83e6-a1d73e371e7a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba29c7f-995f-4cfd-a126-fe95d95dc503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f58901d-d352-435a-9f41-e5862834e21b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc9d3649-7281-4d77-bc3c-647cd29ecb7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "957e06fa-732c-4b2a-ac7d-d3611ed93e75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1fe726-5281-4b22-a0e7-8a540284ed4a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df598a24-a9ee-4962-9ce6-63208bff6ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd9a2f5f-df9c-45b1-95b1-b68a94f95d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703703d1-7c3c-4fc8-9276-ec06d94926b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a34f29c-7cc1-4512-a1a5-f64bc5aa45b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae1f6712-6655-41b7-882e-e6b22c55b6cb",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6846bc98-9360-4f69-8d8b-16704c8cc87d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f4594b-9619-45b2-bcf6-7bd6bd169769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aff5fe6-cf20-4788-93f2-171682cc863d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e090ed79-b272-427a-9eb6-661cbd9e4b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8245b2e0-6d7a-4a95-9600-4ecf8499c032",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9561f536-fa68-4be7-92e2-2b140a2d5ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27e418d-319f-42fd-85f9-b7e156270b81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a6bf24-2f51-4fc1-948c-008c388ffd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed9d4ec8-d904-496f-9f6c-f7bc8ca2df95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b30c2f1-fc7e-4a62-b81b-578d59de5755",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00efd738-479f-4872-9a0a-d1757264cef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9263c7ad-0114-437c-9dbf-cc5d4612f418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f60156c7-01b4-4149-b96b-6b5eefe3ae5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7542bc-c4f6-44c1-aee9-6c207b1724c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7aeddde-a658-4d75-a64c-05c0acb634aa",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69e765c-97a0-4ce0-bee6-8acff87fe515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90504a26-3fa5-4836-a827-872350d7009d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0caa00-3c8d-4be9-b67e-ecff0fc4a2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d64674ae-215e-49f4-9a84-e017bf3ddc46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee600be-be75-4bd6-a1b5-ccb709c94dc2",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b34661-963f-4c5c-ae42-7813b7c1e86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20574cbe-3c5b-4b83-80fb-c6197fe992bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11365028-a168-49c5-8f22-cd498d7fadd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf91118b-5083-4ee0-ba29-b58aadb21cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2caa5280-bbed-43a9-9701-eebaf64bf089",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2339ca-5dd3-45eb-b581-867b974045cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8d57ce-4eaa-4f38-a853-8dd9c15f46fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61bd8ff9-aa49-4eb3-8507-6e244d4fda5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4d039a-6b7b-4cb6-ba03-a4b7953b575f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dda06a4-171d-4d7d-86dc-6d644eed1766",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ba7a51-8243-47b8-8ea2-9bd5d611f33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f4442c5-99b9-4e7c-aca4-f4985e0ab73b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c562b06-6bb8-427e-b8b8-cdb4450d598f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5615885d-235c-4b72-b44c-ee440b93f49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3242dbc7-6976-4180-8c96-7ed5defe3e9f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad60a5b1-a6da-48c9-bb5a-afd28768a1fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d426ac05-03e7-4403-b77a-df20232560d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a0d60f-999c-4ae2-adfc-7723c7f59f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3e81814-d3b0-40fa-b647-00809d9cb717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b324467a-b584-4643-bbcc-08cb3e2dd453",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024934ab-cb8a-4ce6-8ede-12e97b75df50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848cc0ef-08a9-4999-9e26-bf40a688793f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a89f79-e3dd-4821-ba83-946516a0924a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83675e8c-675c-4ffd-bcf6-832e709bc4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d89745-843e-4a20-b5c6-49c2c2618674",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b56ac8-1244-4621-9e6a-cd2a3376c7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d813bb7-113a-4948-bd59-2c32ace60a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f408c1-3438-4ed2-b48c-957caf71aaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "12283fea-65f2-430d-936a-d8b6227544c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730dff8f-6d8c-4833-a967-747cbc7d1c46",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee4f908-f288-405a-ae78-be017d5ac851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f739991a-eefd-4936-987e-803718a9c408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb125654-1afc-4e57-8506-138b9e445cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "41d68082-2d1b-423e-8475-7c8bccc0baad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f4de5a-81b5-466c-8fcf-02518a3bec24",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892604e4-3345-4fde-8ad0-c7aedaa88ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc73d5d5-7e64-44f4-b571-294e8d9d7d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e325be-df40-486a-83d8-c2fbc3cf727d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61d6daca-7a79-4342-9a10-6976095ec21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bedc96-e73f-4d0c-ad17-1576440baed6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2129e181-86f6-4325-ae82-f1d54535cb7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "325ad6d3-7cc7-42df-aa9e-7d03b7b95356"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e0ef71-99bd-4f02-8775-8c70fd6eae91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91bef6c4-977c-4654-9fdf-9f21d2fac78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71734216-17c3-461c-bfca-b89ead24d9f8",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d257e3b6-2948-4c7e-852c-43bacce2f109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0505a64-6040-4109-ae25-66b1a8751772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be8c7972-ea52-42a7-8942-9eba2c463957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a12ebfe9-4ae6-4bc6-a823-8d306e047aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d669bc2e-680a-4354-9242-ec000a52f27d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3ae98b-72b1-47c5-b188-084d67a0473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ab71079-0ea9-4a2e-93f6-8689ba5f5d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805419e3-f84a-4b4d-b224-2bc82bd04707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "bf63c82b-b8e4-4c84-85c4-c1f0fa71f9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951db79f-50cc-4a39-b991-f0e48ab8de6b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17b6bfa3-95a9-4edc-8b05-48b339425120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9afc83b4-43e2-4594-be01-1432d5a40185"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf270ae0-4b6a-454d-84f8-ba29e05956bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ec907f68-17b3-4e11-900e-381d96ba2893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3da1d0-3cc0-4762-be3d-bbd37b853932",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d34be11-9c0d-453d-a2aa-e4fa7d95669f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e85e1e-bdc3-4dd2-9db4-5a7feaf25206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d45804e-5113-45ad-a3ed-407e6113f4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebb9da30-1138-4923-ae7a-0cd3365a01a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "704273f1-b467-4a12-aed0-57d6a15b699c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d5498e9-d6e5-40e9-b221-03ef1b46d3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc8fb96-b752-4531-ad5c-ba3916653b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d9db111-57ff-4865-9e2b-31f57189da78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "11bee018-a4f7-43ba-9cb2-d09f44ff057e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59e9f06d-34d1-4794-b637-438a63cdd2b3",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbbdd99-87c5-4fe0-aa78-c5a640bc6a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a604b07-b44a-4391-89ba-0807f9b4ceb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83055f0-3aec-48f8-819d-007e5ebd79ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5001e37b-bf2c-4323-a690-8ab055445a80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fef883c2-1c34-4dc1-b019-3808a68e9475",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f896209d-a785-42f1-8f42-3cbc4b12b9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a471d764-ae18-4527-bc56-4e278ab57e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0b1f10-e0c0-4d20-a0ab-52bd64fe6258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6eea9fdf-4627-46ff-9c75-5c137013b8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11362216-f7b0-4d18-a91b-06ba6d1b7d75",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71918684-a39c-4aa2-93a9-fdbd153c491a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d7d9c8b-57f8-43d4-bd98-a97c87e4072c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b52503-8830-4ca9-a278-42a142137a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b14b8e27-3280-4cd1-bebe-53699361a5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b19bf2b-1fff-4dbe-81cd-40d70f31299f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c67d655-d3f8-4c66-9df6-b43d905d4de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea0b751-5d07-4f68-ab47-cf9ce17f7cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9e1a49-2d73-4b95-b2b7-e4152ce76fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fc38e0b5-4af2-4485-9cf8-3aa3e7fc874d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162042a3-359f-4227-9382-f308521c3f37",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff065736-040f-4cc5-9988-d9baeda23583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a84d597-cbbc-4a15-806d-ec0d755324f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90bfa07-f63a-4ec0-bda5-eceae96474fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0d862292-57a6-482e-8fe5-eab6b2cd1400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5ccee4-5e5d-4a54-9486-22c6dc9a2208",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6ee74e5-af2e-4110-9e91-d4e257fec83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf95123-f705-43d9-a78c-7ca3aa87a677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "292520f1-e693-4e59-8538-9e114fef4d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c23ca17-dfa3-4975-9d11-9c05ec9a4325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad84d70b-f62f-49a1-a071-5c615bb01bcb",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffa3004-b33f-45e6-8053-8a597aaa5a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b535f24-d297-41db-9f06-8b9b45bf22c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53532bcf-bc98-4c54-9738-3adad81b2461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7ce965b-b0a0-4a7a-ab31-96a79243f7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a4de08-4b7c-48b4-aa7e-57da7a44c8b7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e131f36-4773-435e-aadc-4606e528f65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "607ae2e2-f593-423a-a6f5-56600255a6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5171927d-8db7-4ab1-97c0-56e126cd1b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2acdcd47-8420-40f5-bf74-73ab359565fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a1e7e9-ff6b-4f18-ac1b-009c0e650ad9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28de054d-1050-49bb-ac17-067eda1f6897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed1fb7c-e15b-4e5f-93e3-95a9f37d4114"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb226a7-751d-4b59-bd9a-4b57ffc5ef3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c36425a-b938-4d79-9bb9-3d702b5d2b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75289219-f443-4ce2-bd93-57b1a699c51a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5ce6c3-163a-43c9-be54-7adeb7327778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba810958-56c5-4841-8fe3-b7b643d99aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a4f6988-711b-4245-a792-b363fb505422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb83e935-bcda-4985-a27c-ee2311ab2035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab429765-c749-4ab5-93f0-1c2b57939102",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5756d750-67c0-4e1e-aa46-95a30a345775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c2f5dcd-75ef-4b94-b85e-88c6412fddfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6daf7644-1c76-4834-a7cb-b576428477ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1e7913e6-d38b-4079-920d-ec4a0dcb3b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd44e158-f3f2-4864-beef-901cf010e4ca",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c44a083-7a27-4908-b831-51acd20f97e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92c4666-110d-44ad-aa09-b228b44fb940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34b913b-73aa-4297-92b2-4da99bdf67d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4afcb929-c4da-42ff-b131-227a5963097e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1996b167-b128-4fe8-9e0f-0b6c7b0efe3e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "544b1982-01f9-42da-98b4-c9aae1c97b17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97faea68-481f-4f4c-90af-2d2ee824f410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfcda570-aa0c-48d4-85f1-00808c96b530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcf7403-68af-4f7c-a174-482354adcfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c31b1f5-e235-4c84-b7ee-127d48cedbd6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87e1835a-2ce0-4ca9-afbb-98c2bdf6bed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da27e5e8-3149-4964-86d0-bad26d77537e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0637ed1-4c64-4cab-9bc5-0067e77c33a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c760ef2-ef57-4f80-802b-62eeb1c65a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12843ea4-1480-412d-b384-5bbb1315f6ce",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "071a5b2d-cadc-4027-98d0-deae539b37e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e755e51-6992-4297-a50b-f2dc7df36374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bca4287-4ba0-4c4d-b2c9-5fd55466712b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "519de611-c84f-42f4-8fa2-7d325ec5a2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0ed679-a4d4-456d-97f8-1b5145e3dfea",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745b8df9-d5f4-4faa-8f3c-c4e2a72b5dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17c3df18-441b-44b1-b64d-131476814d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2003a0a4-70c5-49f3-b185-40582043301d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cdebb3b9-e4f7-40ef-9c2a-fb913c8ee014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3382f6-8fa7-4614-ac6c-8d8ffbe013ba",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853bd64e-f501-4091-8489-696bee7d4424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16fa9ba7-e315-49a8-b842-9babea07f604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d581ef0e-216e-4223-a58c-396bddb3b0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "093d9946-cae8-4a02-b20c-c640a140135a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c15aa6-329e-4efa-9499-0ea5e604fa57",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548198db-6f9a-445f-bcb6-f5de256b8e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96b561e-10eb-438b-843a-f022ffd46566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df343d5-7cb0-4f0d-a170-8734e0923e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "79b371c2-4fef-4a7e-8ba2-900722baac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6500c79b-97f0-4636-acf9-c3006c424878",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5514cd4c-187e-4f7a-a67d-3b466ba01097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9adcaf2-cb5a-4fb9-8cba-634ba92dd216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ecf69e-50f7-443b-b972-82e2f4839488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bedb4d88-a6ae-4a11-b3b4-91c7aabebeb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529e46d2-3578-49d9-85d5-c7b48862a2a6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e9a1c0-2ca4-43e5-9176-be41f6eb2fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c56444d2-cf52-40de-8225-de689f2b375c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31dbcaa-953b-4806-b179-ed81932805f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3242dead-624f-4375-b9d8-49d38d688232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9fd0f4f-e4d7-4a4e-8a1f-3435ab03f97d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b8e5a6-04c8-4952-954f-e406bba30224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3042c13-75c3-4cae-b73b-767f5ec1e0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47b9c70-b5d5-44f2-b068-ead2fc644294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6956f5b-f7b5-4345-81e4-5b5aa487b063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e22b72c-1cbd-41d0-b62a-0d4c4ff9fd65",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac43df3-e78f-45ce-b7f0-321f88e882a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05de3d4f-d305-43d4-b74a-512decca4779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ad76c6-aeb6-45bd-9a6e-1ddc87079c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "41a05e97-81ad-478a-b00b-12940cdaa9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2fff0c-afde-4e0f-810f-927cd4a2289b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b315256e-81cb-4259-bff3-60e3d8ef8f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58d79948-327d-4b36-9849-51c93bb5fda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911a99b8-3fcb-486f-afb4-779e6eb101f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0bc34a0-3a8b-4992-a438-dd91ccb7f3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43df8a16-5220-4ddf-b21a-671589a89b2b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8c2bbfc-6ec7-4341-a6d9-779e8c6a9e65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1205374f-b401-4caf-b44d-1e8bfbeed49b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce8496a-6d25-4c9e-879f-01486cc4e6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d4d968c-fbf3-43a8-8187-858aeec240a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6c8cff7-4311-434d-8029-ca415e04522e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dabac0f-00b4-4627-a8ef-b3282f598713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e960e7a4-31b3-4ef8-94c2-69e56018faf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c86725-afaa-4bbd-988d-29a1d0dc5a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bffe4d96-c503-45ce-8295-239db76a299f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2193651-de8d-4234-af20-4e9280145c26",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa6d318-0522-4ffa-8abe-3290e3cc374d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32fa45d8-61be-408e-8800-6475f4e2719f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec0b6ae-4b71-4502-a564-c9bdc9af17cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "97e7b3b3-9f3b-49a1-b70a-9073468c4b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717f7695-c4dc-4c8f-9f75-849ad1c13e13",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956274a9-c3fa-430f-9d30-1db237df3867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7121433-5647-4410-90a1-db11a2b94d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee3c048-d7e7-4591-834b-064256e396f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d83233-0a68-4284-9091-a13c5561db8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8565fa-9591-4bb3-b7ed-a6196f2d7793",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fc798a-858a-41d5-9a24-c1963910690b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397c63e8-1860-43cb-9eb9-5c1106cbf9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ab6934-bbb6-4d29-a3a5-f46cb0d1d045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "089aff5d-943a-4dfc-88ff-41655f7f1e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3922894a-83dd-4915-82ed-c3c0feda701e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0237b07-1014-42d0-a428-fb59754bd275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afece46a-d3d7-41da-8004-91f68ee5a88d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09be81fd-d9fe-4140-a8af-9420b1ef9731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9b4e76d-c550-40ae-985d-db0448e6aaaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fda0ca95-81e8-4767-8f1c-4cc809b81053",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67534c19-1888-4e1d-9450-06f768b12b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c01cac-1f02-407b-87fc-fa0aa4f39e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42abee8-a0e4-4d19-aff6-72c1c7d0b880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d376fec6-3910-4a8c-9e07-12ac2602d13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583dbaa5-ce20-4881-b89a-e444d121ba4d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ff566a-e373-45d5-884b-70b5c18882d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab8953ff-18c1-4f33-ac51-f924574549e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b6a70f-52f6-470d-8d77-fcceee18c627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "80afcf00-2045-4a94-91f2-ac2a2930c02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e56e7a-9b41-452c-874f-d755787ca8ec",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3426551f-1e22-419a-b4dc-7626d86707ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99abda46-5462-4104-80ef-b8700c73e302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df826d74-868b-4482-a8a3-c2174e714ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed4b63e-1ba4-42f2-aac5-51e2308f6a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55614103-e581-4e74-a048-72e5311db5d7",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be6544a-9b57-45ad-9434-32c3e6c90775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84359996-5c72-420a-8073-20e3a952ebcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb68694-7ab8-4965-aeaf-c92ef3e6cad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d4d135f-e590-4c3b-ae81-55dad55c393e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3911c8-65e8-4fd1-8c9a-4d4692725113",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5964b60-dca5-4bd0-992f-98b7eabddd68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b338cfe4-493c-4385-a46a-548d4d832280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1ed1c3-8f63-41be-9c48-302e281dff64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f28998c-e1d2-43d0-b208-a1908deb9e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e206bc2-6c13-4fae-bafd-e8ac411b408a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faa4aea2-429b-4aa0-8691-20368d35d9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6751308-746a-4ddc-bfc1-92fa84688604"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89140267-08fb-4578-a7fc-88041475ac2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "39512849-8636-41c2-9554-c2777c1f9a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec35862b-250b-41f8-a672-9519fd2e7904",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9445fdbb-8793-4805-8d9d-8597e18d78e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328bd6e4-de50-49b2-9dcf-25e8a4fad0b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac91f18a-158f-4798-b638-0f19acd98864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e9f851f-2afe-46f7-a8ae-54b438943421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f58628cf-ca45-4741-9869-64b44c189aef",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e96c307-023d-4e04-9062-d627274f5c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3053b0fd-1498-45d8-aa97-c5c865470f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e43df7a-9766-4f73-9c0b-39a12922c3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50a685e-4938-4761-a5a8-36cb25062e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f9d987-d871-40e0-98cb-79a49a02836a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3442e1-7d39-4d8a-a6dc-986f095e2469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7fb71d-e80f-4657-94b1-dc9696aeaa78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b265e36-a6b6-445f-b848-dade71209e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "20c7be6e-3f68-443e-9dee-85d3093c60fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36d720b-5816-4b8a-8497-fb736895f52b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef61a411-8198-4433-93b4-86917d613e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26db982f-44de-4988-9248-5208ae829107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46170b12-28d9-4a49-bb64-56a7fe7be5b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9fd81f3-9221-4b5d-b753-e460d1e4dbb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96964d40-eef1-47c5-9ed2-04aff977e43e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0aa515-c1cf-4209-b584-daf711debbee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632f3049-57d7-49c0-a32c-55627026bb9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7ca84de-6140-4a7c-8c37-41e9f69e479f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f871a75-95d3-4bef-a432-b139e211890d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c0604a-1a7a-4007-aba3-40ee7f3fba83",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045ae89f-8585-4f1e-b819-58404cc71c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c77229b-5e5f-4d88-9c87-e83a674385e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef266131-f480-4706-a99e-f6734b557633",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "baca8d4f-84c7-47f8-bdbd-4e7bb3b20c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4835207-89a4-4231-bb01-c744e1ace113",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5691dcf3-c7b7-4fc3-a23c-12861a5110c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d91b7b97-d8f1-43ac-a7c6-b31bcc99a9fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5472bb7-9ce2-471a-9587-89882d687d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a65f4ed4-b6b6-49c6-ac60-e04dc4fc3ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18af26c2-2655-4e09-9015-9adc9ae70e8a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3dfee1-1690-4b15-816c-ced6cb67badd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0027d4e4-5dcf-405c-9a84-af038e69221c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2aabf8-0d7e-4b68-a60d-16fd82195c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0ff60f5-caf8-4b91-a786-e6fc68dba513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ee1f36-057a-484b-8d77-e87ab8611b75",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2493bd6-bcf7-4106-ae67-76ae6538dfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7f32f2-4d21-4234-bfa6-c7b5ccdb1bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990d4c29-8e67-4fd7-8db3-413cc2b77304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62390386-318d-423b-9977-45e3127a5232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ee0497-b08c-485f-a8fa-b9927a141ca2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d6d63d-75d2-4923-a5f7-e13a16ccef11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7957c7b-1c9a-49f8-85b4-58405e4e8a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0294ef3e-34a3-4329-a477-f8e3ab417fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e4a5e2c-619b-4e56-ae50-a90a664ec059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf99399d-0a25-4dca-8054-955bc145e51d",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e47d473a-bda6-4948-a51d-f65d551cf469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef10e524-2149-426e-a68a-9880167a2346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8bfb0d-26f6-4a27-af0b-0272ebb1b1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "feb58b25-84dc-4787-bfaf-fa4def397141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b96b87-e500-4897-b20a-4950c2cd40ad",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cb3a9cd-656a-44a7-ae50-1cc87041b5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3641a9-81f5-4c49-a2d7-8a88cf8ba3be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f753e4-1706-4639-876b-c8fe8d4177cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c579a7e-fb65-47cc-b533-91b32edc1673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001d7fa1-c336-4665-a3cb-5827ac3be34a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42b61501-559a-449d-9b6c-6e5148877987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a3f7f7-3435-4229-aec4-debeda163d40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c6e8baf-abab-4fe8-b144-c39431a7937b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc7f5c7-796e-47e7-85d9-d1badc43db7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07fbfc6a-76a0-4ffe-98cd-0170ff3579b7",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af83675-0e3d-47c7-a3a2-4acdfa0b82d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dee1a8d-af05-4b5c-9c76-55293ffb2c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b61a2d-0762-46c6-834c-b28eaaaa6ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "387267ec-15c1-4473-a28c-7dd6c17d043a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b74b4b2-5503-4adb-b6d1-45ee156ced85",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e029f7e7-2be6-44b0-9578-b524a4a019a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54533180-24b9-4dd3-b5ce-fddadb051179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca52f2d-ae22-4f86-bfb1-140389bdede6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e67b7b1a-2ce7-475b-8ca6-b2c349a92466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87722c8b-5ba5-4521-9194-c3bde6a07a1d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f94d89b-a51a-4262-a0ec-66ac4ecd1f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b73855a4-aaff-4efe-87f5-de8028bd7846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa740ee-7733-4b0d-8188-cab2568093db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ec8c9b1-dfdb-4275-baa1-4ecaafc947ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f22afcb5-6958-4175-bcc9-5b71eec978dc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "550cdb87-b886-4014-a922-52991a2cfaa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0faf9a66-c6a3-438d-a64a-5eb600e4a9c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e21a8c-ce7f-4497-873c-72429519a306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b29103b7-9b0e-431e-88ee-ea830947bef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d124c12-1e76-40db-b498-c7e4332f3b35",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c0cc93-5e8b-40be-9f83-97e4791f8090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "626665a7-4f60-4e2e-9421-9520eed57e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7392977-f3db-47e8-a2f9-95cd458c9b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ebd04aa8-68d9-4449-82f6-400f9e7a15c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60941eb-0b43-4a06-a8c6-509f43f51b37",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7900a56a-4fb9-4dde-a3a0-4f14ff21e8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "39aed028-7426-4921-978b-88d1481b1e81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5dd941-a920-44d6-9969-1f4764476c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e88e7389-a872-45b4-bee2-143f8c54b891"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b908fe9-5083-49af-a517-96ab469e836e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "db73581d-8f94-4de8-b60e-b7f33d28d06b",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb9397e1-a579-4a94-85f5-d5c8641c078f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "734ff963-d90a-49f5-93e3-654945fe2dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5553f45-05ad-42a5-b336-e5aa07d4e75f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e3212764-35c4-41f5-adf4-da8869c3c760"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4cf98707-b1c6-4c51-8883-467b8f806c59",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "055c3ca2-7e41-4dd8-b03a-34ee5a839f80"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e18870e7-5220-4d7e-bd36-6198d4db925f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c3b360c-d767-477a-a63c-bb567407d956"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fb1dcfcf-41b4-4130-b33c-3848deda8b3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "dd0a348b-961a-42a6-a249-c0f394dac486"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f64400bb-cf46-42c4-a1bd-3af87527126c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00dc2221-2654-4603-9046-2bf5f7d0d841"
                }
              }
            ]
          },
          {
            "id": "acbff1f3-6ff7-45c0-b09a-4296e50eae30",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1ed2b0b1-d9fb-485b-be88-aa2450cbf07a",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5664de65-bd0f-4632-91c9-758662a7430e",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "942a010e-2b98-49aa-be5f-802ded7725f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2fc6f08a-9d15-4d6c-b10d-594bd07c3fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c084a80-8683-4971-8105-8648ebefc859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c8262e-7b99-4f25-85c3-1a48fbd928a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5876ad00-69f4-4922-afa1-a7b7d28e5ada",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "89062989-bf84-4300-89d4-97b2d9be25a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a605038-5fa4-4c44-a2f0-a7918b39115e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efaa4af5-2fb2-42d2-9a9f-568213cb5559",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce811a23-f16e-41ef-bd6b-09d1fde66a72"
                    }
                  }
                ]
              },
              {
                "id": "8c8c0173-50d9-42ec-8854-f8fd5a573d2c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36dab0b2-cd44-4f0d-9b23-4fa718c6a7c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8dd51a44-9182-4d41-b6a6-061a16e772e4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a9b456a-ef7b-45de-b97c-4fe6802afa43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53425d36-5e1a-4315-88ec-e368d1977373"
                    }
                  }
                ]
              },
              {
                "id": "c3f3738f-8b9f-46d7-9505-bfab53feec39",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ad06f7a-0475-41ad-a53b-699886e306d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70cd9b21-f0ab-4120-b4b5-9e1aad0444aa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83d8811a-18e3-49d7-a56e-cad944d63098",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4a564e2d-566c-47d7-bf2b-a863cd48f58d"
                    }
                  }
                ]
              },
              {
                "id": "69efe29a-a2ab-4cda-892d-00584914e8fe",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "740a8323-b969-491a-807a-2e31d4da26fa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9d2a142-8600-44e7-acdf-a7f9b7725bee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4df1ca28-3aaf-49c1-ae26-30926fb36ef3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6d5ac88d-1451-4588-af87-a1a21316852f"
                    }
                  }
                ]
              },
              {
                "id": "4776207c-f862-4dc7-8664-a9e43c00829c",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a76afcbb-98f8-4cdd-91b3-eb39cd01d5f2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "606761d8-f749-4421-9686-c2b451e57e6c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a4933e6-de48-4af1-a81a-389067df0a80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ae9fea1e-df29-4345-87c9-b29232e8c4b1"
                    }
                  }
                ]
              },
              {
                "id": "dcfdba1c-7072-40c4-a0bd-1fe58cf489b4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff06787b-fc6e-4d18-845d-159f424ffb5f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a3c59d7-4e41-4a01-9691-9f315df195d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35907c70-ac2b-4c35-8b5e-3360c2faded4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8254b2fd-c1bb-47d0-84c3-f9ef1c5a5a46"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "13a30c6b-368e-4f13-8cdf-5a3ecd1f947c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ce2ade68-3af6-41f5-a7ac-3df04146e0b0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a09a3597-6962-4892-96a4-05999bca5d37",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5d5c3d39-e967-4943-9582-db35a4d88962"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06bc94f5-6a9f-4525-95af-e3fe1a1510e5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "416a4e6e-0d8a-4fa3-8d76-8fa17d4529b2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0626dd30-e908-4a65-a28c-83b4003aa3eb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ebc54eb4-6dc1-43ea-9437-10f0d5bff270"
            }
          }
        ]
      },
      {
        "id": "43c72374-0c03-44cd-83ff-25652ebe139e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c26b0de2-65d6-4044-b8d4-7d345382a867",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2c140a5d-515d-4176-a8c0-e52c41b32132",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b13e470c-1bf5-49dd-b287-8ba030b86168",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2402332a-0d65-4e87-9aab-df4433671591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a714a20a-c0df-4c6e-82c2-5c63f49d8ebf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e942c86e-2120-40cd-9d4b-2bbd400aa515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fafe517-4066-4a4b-ad6e-8908dc1af668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7c980d-83f3-4789-a65c-8beb75c7599b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30e98389-578f-48a8-87f1-a971b434f9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76eb2ef9-7a8d-4b9d-9d20-adf87e7df983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66731237-ee09-453c-a488-fce2113e20cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6fd1eaab-d350-4c1d-87eb-d2b7884bdc43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c0f530b-db09-436d-a8e5-2ccbb65a789a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ee7846-5938-4e95-9d77-d838a41a4db8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95376878-6b5f-457a-8e6e-09f55edb3762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723bf873-5ace-4b1c-ac0c-9f87aa2ffad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8290b3a4-49ac-4e84-a2a5-112a549b0615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df9097d3-dd5f-4298-9398-b8ce15c04ea5",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40462a3b-da5e-4b58-a904-d0e82fd9c69b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b751478d-ab29-49c2-8ce5-b17e36cb99e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "accc7917-92f4-4e44-a66c-2a1147506c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e5b8386-bb3b-46fc-a097-5dd276a28a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108b9535-f88a-4c62-819b-c6b8a74bc48e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572672bc-e6b9-4e49-8a8c-f0c1ac103bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b2299f-317f-4203-9990-bc552e846612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6c3268-5783-4804-8b81-83eac141d532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d0b245e-6c03-4202-a653-91ef6b4ce3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0dd4ca2-4a01-449b-81ce-db5b2f37bdcb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a596f3-a33a-404e-a460-4168272a3638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0de175a7-8fb6-44ff-b594-350c0babc7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "334dd0e4-ca3f-488c-865e-28bca73f3840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1ab959-f0fa-43d6-bbd5-7921943c0657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f30befb-7607-4b83-b46d-cb5580e5e11b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6ad803-324b-435a-9465-67db06732b76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5ed69f-b6f5-4cd1-ad7b-078afb3d8254"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90534715-cd9c-476b-a82b-a5f1d1bd3129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0530c14-a8f7-4bda-9d6c-d751e7dbb5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5500bcab-a725-4d72-ae38-0b0acfba16ad",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b76157-e5f5-4f53-8a96-8a63df498016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ead9efb8-cd12-4dfe-97d9-227c84b72eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af6d0c84-080c-4024-b8dc-f55d259004fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "96942578-87da-4aa2-82e0-9e83afb78380"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9c7659-89bd-49dd-965d-cfeea18c342d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "babeacd8-4eb3-4256-8767-2f7d3c6a8f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95b3453-80d0-4d87-8156-fb5949bb1ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a892e1a-2608-4296-acb2-26f609c3efcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8ed86e5-cab6-4212-9654-612582c8f37d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c7a9d9-6a7d-4c9d-b48e-27cb416f95d1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4684e6c7-dfbc-4cdc-9663-b2a67afa5521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b66817-6548-4e46-911d-0ca8b306fdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4511721d-485e-4786-8644-95839da21138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ada80d10-6f2a-4299-a7c8-e5d34dfa6feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f07f35d-ef1c-4b3d-88cd-1aaf300b95be",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efb14fd-32a5-4f00-9560-fd81153e5ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfaea6f9-4efa-43ef-b17c-9ff403081200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362d5ce7-8bf6-4b16-a633-6691da54b741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f278c49d-eaff-441c-93a1-e076ecd7d16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06e7afa-089e-4b43-9fa0-4071c24c8a61",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c845dda8-23e4-4845-8e63-cca935ca35d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2845112f-94e6-4f8f-824c-385fba92b126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a15f5960-86d4-4d64-b4cf-d8f95f134c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea0793f-0848-412d-88eb-515aff6536fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6c2a126-8ebb-4b1e-b084-5efa956b411e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba6d8ca8-8b8f-4a85-be82-a5799f3f5e5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01917cb-abab-413e-bc80-293af494ceca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3837388-80aa-474e-b64f-ddbc036bac54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bf9d287-f40a-469e-9332-7e3d87ea5484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c028f11e-fb59-4006-bac2-41c3ce184a89",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd20a602-0d5a-4d77-92b8-02009627b3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c680366-529f-41b4-a83f-68f1326174e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09df80e1-8dfa-43e0-a53d-ff20ef14281d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1be85b-b0e0-4d3c-ad64-7b2ca7f5fd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69f3992-961f-4cf9-bbf8-6b9d997e5855",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b16fd85b-3749-469a-8e6a-cdae7dc75998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f25aedc-0646-4fe8-9f1b-f6e8650c2954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b941020-9c6f-48c3-804a-01194a36024e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e179d70-3aac-47d5-a87d-6993b6876caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c73896-33c8-406f-9c00-708ccd11224d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d5f320-ae31-4ca7-8b6a-bf8cebc46db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b17757-ff9f-4e4b-968e-7ab0ea0384fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b70a9cb8-55ce-4db4-ad47-7c62aa480474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0190e394-4441-4116-a3ee-ac563269c2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89b62bb-0226-42a5-8666-dd8b06be94ce",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "283ebb38-e3d2-44b5-9e0c-2a16d8a24b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5946f579-100d-457f-9fc0-668cd5dc0e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae1b438-c370-41f0-aaaf-7d9d5f027e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "051c910b-b468-4787-9f88-b3e21d3cb7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66e5d71-b4d8-4937-8029-2a423d643d6e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae9361f-c21f-4061-9eff-a16a8aa746bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb0e0e5d-d404-4079-a061-b65cc30a924b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4f136a3-4f1b-4401-b868-1030ad88786c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc609f90-d786-4c09-83e0-4515015bee5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab2a4a5-a04b-4d56-917a-237b7552f140",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cd7c7c-f46a-40e8-acb7-4b0ed39c6913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "201c601c-4472-4aac-9b72-2c4fd498b16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a35233b-f617-45ad-9aaa-7f2e5fe559ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6fc59a-a610-4010-8ada-42e91ae89565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c1a5f0-1f93-40b8-94e1-eb9362257d66",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2901fd9-4032-407c-b893-3f39eb195563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f647f86c-dddb-45ab-820d-0897959c95e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd578b5-c777-4d68-ad43-43440a9bd217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75186482-60d5-4fc7-886e-13fad735010a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06e1486-7476-4a30-871d-19f5e435c456",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0556742c-2021-41d3-b4f3-10de81e8fec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94732585-f353-43d0-b2ff-856e19a9a9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f935ad-1f79-4ec6-9231-e115cfec9670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c2c2dec-029d-4f6e-bf55-e2d9938c31a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7aaa73-f557-4d02-afc5-42e4793eaff5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9793e945-d300-4074-9ce5-118c1b04e263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e533470-20ef-45dd-b4f1-ea07ccd62b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47e539d0-663f-440c-b395-b00dab54b3c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "287384f1-f492-44ff-8a0e-b8815bc75105"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e32ee4-d175-46f5-a83a-6585ef980f21",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71623b7d-9501-4a58-860f-3e034c7d7328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669748e4-12a6-4061-aabc-b7a1b3743992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16872a29-25b4-4a47-921a-74dcbb175c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8524650e-eeac-4d63-9d51-c6b61d08d577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ba508c-7656-498f-a0b6-56d2cc42bb81",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77e01e6f-9acb-44fc-8a31-0f113fde9457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b5fc92-3c21-47a0-9b3a-1eabb2decc48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe64978-d4eb-4b0b-8415-7767136e4f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27061956-95ad-47c3-b94a-ebf22c0031eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55b70dc-9d44-43e4-a3ee-a080c9dfb347",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67801bb3-fc74-4a54-98ab-c17f4784bdd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac7a842-b22b-47c5-b9ee-76cbb83010f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130f2fee-8455-4bcc-9696-6016fd0eb798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "601e0b8d-34e2-4547-98b7-fc52e01842a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8a9a48-013a-4f77-890a-b201374cf037",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef888aba-4537-47e6-8998-20dd1c390f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af83ddc7-a300-4198-bf89-5d1cce894b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad74960-7bb2-4957-8a1c-36f2a53b33f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7baf7f-f614-4cda-814a-61ce965a8204"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e10fe3-48de-4bc0-b85d-933ea4cd4390",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90704795-5a7d-4505-bca8-45bf697cc5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "968b1854-326d-47c8-a349-a2c3ebc9755f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ffebed-8d21-4e7b-9d1c-b01f6ee339ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e62a5ff-7e17-45e3-90eb-f4f456683d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6da941-efec-4984-8a9d-6ff69563a507",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817db899-a857-42fe-869e-6973923d2a96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcecd8ac-290f-4f41-8451-a856335b04d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37801fa1-fcdc-47ae-87be-eda11584ae3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3bf16e8-5ce2-4d41-a2cd-4af678c9bd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dff2057-7782-4820-adcd-5e02312ff2d0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701d8f6d-712d-45bc-8c52-8f47149c25d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f27023-2d7b-4ae3-804c-90b31ec6e9d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c73b411-21e0-4c27-a3ba-ba982cd9d4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "066ad294-8e2f-4332-a3ca-142e38487cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e807a88b-7a97-4087-8702-668cc66e164c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a93f04a-99d1-44cd-9753-1d28dd526b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c391a6b-93da-4f76-b4fa-5886661321b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12865f6f-88fe-4f29-9ef5-c530d7bee50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13e29b91-a90f-4be3-bf78-191666b9137a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d49d21ad-085c-4285-b871-4396204f962f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf7f3ac-f5e4-4616-9d4d-db08f853bc00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a48eedb5-32d8-4ba2-8fc6-9705ed922d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50f47bd4-458d-46b8-99e2-f5e506a09bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3649575-6a3f-427d-9f15-da53c88c9ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6581e9d-5843-48c7-9cd6-f2101e7118be",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cf1439-57eb-4ffb-9017-7fb84686cc74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd2ffd4-e284-46c3-bd30-ff72b9e9ca8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6ec638-1fd7-4534-9ad6-57892f4efadf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e5fc62e-bb03-4ac0-aa85-52c249866a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666d07b3-919d-47a8-bbc0-32b4514b265d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccace96-9e82-4ca9-a061-835d4f1d89dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d35bbac-f8f6-4576-a715-94225f158d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d156e8-43a5-4762-8fb0-2e9cc8d3c308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7542ca53-fb4b-4e8f-9c22-5fe25207b3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a86453e-f999-4e77-b7cb-0f3ad4a91bcb",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1929bf9f-6e2e-41ce-949a-e3d8b7b22a93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4df481e-0c6f-4339-8c24-1d5891ae9194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847fdcf5-d688-407e-9979-f0c7bb8e060c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "462c655f-267a-407e-8b60-803c8c1dde62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32644d5-128b-4090-891c-90ff1e64fca9",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73580c0-ad37-4a7e-bd2a-0e16f6f61b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4523c0b3-3e23-4973-86e4-81898dba91bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f048c22-84e3-482e-af80-eba05d12170f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae32ba0-6ddc-41e2-8e04-1dd59054e1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83598ce-c26c-4ddb-a692-6ca8fff1313a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb44e2d5-7bde-4f8a-989b-66dccdf7f7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b9856b-e350-4417-909f-026f59c1c1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e7bbfd9-b15f-4ce0-b103-c8d8e76f9f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1995eb99-0edc-4bc3-b7c5-c21d9bed14d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7828c7a-ebfe-44e0-bb2d-69b1ca34febc",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d578fc47-c7cd-464f-b4c2-83256aadda87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd7980be-fe27-4689-8fcd-c5e507905b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f366f6-da5a-497b-b0d2-9446ca71762b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ef786dc4-79e6-4520-8125-289332f0d484"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "644efb4d-898c-4b49-9127-db16c45d4737",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdf03879-22c2-466b-83cd-14d741ba9466",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "359ad841-5066-4abc-ba34-f44e0e70c2e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b07e2a2a-4e81-4e2e-9355-47dc7f0aac8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e50973-00a3-480f-9f66-5456df2361c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0faa963-ba4c-443d-84d2-3a1217d3a28f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7bef0433-2115-47d5-8740-d7adca6cac6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5d350df-695f-435d-94c2-0e149cc72987"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8224325-dde9-4ae4-9b7d-7da0c286a09a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97eb03d7-02de-4816-a301-23a6ddf1a020"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46201d1a-0769-4441-a4cf-df3fb8c8f85f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dc27ba01-0f1c-4484-b73c-01b167c8af72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "278999f8-e6d8-4bb0-a0cb-09e24fe87bbf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "38ca78e3-21e8-476b-b082-ab81350a8978"
            }
          }
        ]
      },
      {
        "id": "4497a413-ebcd-4fa9-8924-365b356f7d27",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "928bd97a-d416-4433-a4a2-d843b2b1d139",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1cc89ae7-7f46-46a1-9eaf-94f2931ca795",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "502f7bee-843b-41d4-b8ce-bb2614df2ba6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3292781-b566-4b8b-a469-ccc5a3bc1a64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac89fd2-4a6c-4ac5-83df-8db2886e871b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a300cdf-2acf-48a3-9197-0c1e09c1a96a",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c17d8a9-cd44-48c1-80c3-226ec3c913d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bad28f3-4963-40de-9e9e-9a033ccf50b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a2bf98-2c9e-49a9-a8b5-15058ff85586",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96b485f3-5f73-4684-8e0a-787fc1d5c1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acff729-9c46-4662-b76e-7d985892867a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470d0cd9-e8b2-4f93-b0dd-a2d6a2ca6c9c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a4d83a-333e-46ab-9673-0f15fcc2cc6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "794e98fd-4dce-4c3e-af5b-1b084cf36ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb348f5-d944-4570-b780-1adf9b551dc1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9366df0-08d5-4e33-8cb9-e60b51b37144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc327e4-dcc4-4bf4-9f9e-4b96dc1c7568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e4de7f5-011e-439d-854d-28db7153bc1d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9df4998-3873-4aa6-a615-1a96259a1c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d43fe7-dc69-4b08-9609-658ab33acb2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00301ef7-3e9f-4dd0-94e2-f5519a6b4296",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273523df-b25b-4413-b1b6-bb0ea14d7f9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc7483d-c7bd-469a-935a-f73f94d79244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d82c6b-1189-4ce0-a085-1a6987e32275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9e2c89-a8ce-443c-9c1c-4ab3a123609d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18264d21-d084-4ae2-a416-71bf9b2eb1b7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfb3a58-bb8f-4506-91da-28ba4fd04f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1ba39c4-9590-471d-ac31-9667aa2eb374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56bb6e2d-4ec6-406b-931b-b9081b62bb54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18ad1605-8740-414c-a5cc-3ac960a54f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b0919c-ee7e-42e0-8254-e650d04a125e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2de9df-2217-4dab-bb6f-d05f642cbd69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2420609-28ed-43f1-8f0b-19660b7cf0e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70bd480-fbc7-4cad-9109-de7e3e199bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d93146e0-9c98-42ff-b1c8-96404524efa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30df9e87-9b2b-42c8-93a0-f0b5cafaf71b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfe737ff-8545-47a8-a6d6-0f55a503c5f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "310c664c-1a91-4c4e-896f-0cb896f4b0b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed28a0e6-ccba-4652-b924-cd5c0d412acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6f9354-b928-4f65-8ade-f4ed9f4dc7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ffc94d-3507-4c3a-a7b6-4cc9261c6237",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d7a846c-9918-4d86-9fe4-9eff4640f84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a18321c-690c-45fe-ba69-6780cd66a222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18626d69-1c11-4b5a-a8c2-37fb2e0366da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b897ae19-ae48-473e-8ae3-e0beafc3597c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a673e99a-f54a-480b-bbf1-f270368060cc",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f963b9e-3632-4617-ab32-f91fab1add8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "265f1888-9ff8-46b8-be33-0bb7f1c12c39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb03758-35de-4fe0-a48c-5849b432e0c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92b40bc-4a4b-4f7c-bf5b-170f57b9fe48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "797d6515-6c90-44c2-bb3c-7f275a18f228",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6924f2b6-07fc-4f65-9c63-56f9055d2288",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bd962e8-1971-40e2-bf5b-27b81fd03007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd9ff17-9655-4f42-8fda-f85c304b0527",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2043a54-5f2a-4f0b-8444-b44a13349652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c414f28-8d80-4c91-b05b-ee3f111bf763",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99c3b7e-c3b5-40c4-a459-305c1c584094",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bcd3533-e11d-4cf9-a6f0-494f228ad072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d0f636c-b02b-4f54-b969-132e25853b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0a7ebec-611d-43ad-8156-a2963752b56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e69e86-9928-438a-9e33-9f90e74ea8ba",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695dea01-348f-4624-be02-dfdf0bfc0393",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9cf65eb4-7438-4d5e-8fcd-ee89a7134d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5069e385-98d2-4fe4-9cb0-a3de18bc7606",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a783ecca-afe1-4c0f-915e-b42dd610a491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a97fdbc-aeb0-467b-be56-59e5f238bd26",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c72087ef-ede3-483d-89aa-405dd80208fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdecff70-678c-4f7f-a029-81db7ad5b41a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d29fd44-4f84-45f2-bd70-53bb7a63199e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "953466ed-11bc-4694-8c17-1643bdd11cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0542a9d-b07d-4c14-83ff-4468c22a1746",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e250bc0-daa6-47f2-8ef9-bc528f3cec9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d2696e-545b-4a37-a965-dcf5953364c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6732b071-c9de-4a34-9490-1c0dfaf9f570",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e9cd8d-54ef-4e8c-8dfd-4f06b62f88f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3061853-e5d8-485c-9509-e9cb13fe58ff",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3592d1f7-ef65-4ba8-a1dd-a2fd3e36bb35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12805bf1-47bd-44ed-95e5-b3d80da78908"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6907cb36-bc04-403b-9275-a6b3e0128eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1644caf9-ac0a-40f6-8e2e-8f086b9dc059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e551fcb4-1dd9-497a-9126-7ab66953173e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd0378e1-1e39-4e04-bebd-1a822f03837e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c35fe9-b2f1-44b9-a52d-15ff1e79d191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d6777d-0241-4fcb-a988-f4957cf02592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c4fd22a-9af5-49b2-a7c3-bd76c6f1ef74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ea6c40-cddd-4a4a-b1bb-e59365a024e1",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3427cf5f-e56e-4db4-973e-f73497aad680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a790a33-5b61-438d-9a9c-0addca0e1e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dd46a3-a549-46bc-8c00-90f94e8c673d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9f85ea-cf2f-4088-9617-c8bc31395ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d038410b-a954-474d-9843-0f9a85775616",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545074d4-668d-4dd4-867b-6386c73ce887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f1d20f5-b4b8-4e98-a3ac-1dd27b16fc02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb96421-4c65-42f2-ac4a-1695f7427e46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3bc166-29a0-4156-b02c-085136640040"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7941878-0049-4139-962d-161e84d0c207",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b121cb94-f1ce-4527-bfa7-e8a5181f53d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfff122-f8b5-495f-8a01-a000a44432be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b7feb8d-9f95-4b09-bb14-6444235e44e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d85eba5-4930-48fa-b154-bbc319730da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad8e39f6-577f-45a9-a6e8-d04768968281",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc63860-6e9e-4f69-a42c-aadeb752a844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e29166-ccb2-407a-8a9f-0d74854c31a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc07c2c-b3f8-4ad2-80d3-40e0e2b2747b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8f460d-13cd-4f2a-8ec5-5e2456175df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae43ef73-d65a-42e7-9572-41389344eb8b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2ab8b4-02ad-47e0-8732-5193670b9700",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "671c4bf9-0acd-4fc0-b978-606617efa5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffc1140-ce1a-4094-b9f4-925cb06a0614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1144154-42ad-4b37-aa32-fcb512d25308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eed7807-2b84-4b1d-8652-94b6063a0867",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5390b4ff-db39-49db-9afe-db6551ad6412",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1262ec18-63f1-4e8a-a555-33f48c6715af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee792c72-3be5-40f1-9203-d09eb541bcd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a4ee8f-2157-48f2-8ea7-dc2f9ae1164d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebf58da-e8de-4643-9b18-4c9d9f4344af",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7dc425a-31b4-4a1f-bc33-d635f4b1aad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4b61a7c-fb8d-4bab-8b56-ea53495902b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38acb9cb-7117-4035-af99-168461976cbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a446c4c1-c1f0-49fb-b30b-f7879838ba82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b3f962-8240-45d0-85b4-d9eeb29fbb9c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ec054d-ef04-4e9f-a842-55ee144082f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eff86333-b079-4cb6-a08f-08ae8bcb973a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0763bd5b-72de-4b91-94f2-0d66119640d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fccf86dd-4b01-4c83-b84f-9c7d00db4496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6d158bc-5ff1-4bba-9ea9-ba734fa80012",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb4fda6-71cc-4c26-bd4e-b4786dec6f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319de256-c68a-4552-9b9e-a82ef9fc8090"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d325c567-a706-47c2-a5c9-53d4617cae24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9bf2204-5665-418f-9686-9be2a966e53e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f81a7c50-d383-49e7-8c56-f855d2b31b3c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec8f632-cacc-4f0b-aebb-47f325a4ebae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f45441e-fda8-4b7d-836d-f4b9668d7649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2df2b8-f8cf-4807-804c-a206f34e3cbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68628f62-959a-4d20-88f8-443be97faec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61bbd1c-e431-4885-8591-4ec73806a9db",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cc1731-519d-4228-b7ff-88840c451506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0d77294-2daa-418b-bc51-bce4fbd7717e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e825c59-ab0b-4c03-bbb4-ee341c21323e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0827446-ca01-400b-aeaa-76a6aadae10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c3f2d3-9bfc-4dbb-a412-33ce3b777c4d",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5422ce17-527c-4690-9d11-c2ab5df6260d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37330817-5879-491a-b911-49615dc1d5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d45933-2bd5-4920-9386-8b2461f667a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25a8077-765c-4342-9499-067e39a08f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794f2a20-a8ee-470c-81dc-321e7c725322",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00ccfe59-d970-49ca-9d26-fbd3fabe5543",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54c7a247-b8da-48e8-ac99-f8e8c5b9ba13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08cbd3ea-a5f1-4f3e-80aa-89d27531eba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2b6b05-3e8d-4a61-98f0-07489af1c565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d67953-de63-41ff-887e-4546f8c912e9",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edcde271-59de-4efa-8b46-7a0c86bf753d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ab5e599-aef1-486a-b8bc-7876b32475db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8826f8-f908-4a4d-a51e-b36fb911380c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c0efd6-e355-45a8-a1a3-f7b440d2acd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65e255a-92ff-40f2-a634-62463c1d6dbd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a142469-bd51-4967-9686-54b5ad18d60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ccd3b95-d7e9-4f63-b6eb-6c80ef2e1373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32af5d39-c87b-45c0-8be9-d4770ee0b756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd947c16-5da8-465c-9835-10ff01e3f069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbedee41-5744-43e0-925d-cc927c41b5da",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f518aa0d-16e2-40f4-86c6-87d965fb541b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d0bae1-87d5-4aac-a376-d292229d4502"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f0af44-683e-42c2-bf55-f79412ce3801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68dc99c8-1fe6-4438-ae2a-17ceaf249472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d65847-7689-44ec-bfae-7a423c0a1832",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e860c35-efef-43ca-8080-8fe8b632f33b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3439ff41-faf7-426b-bd96-28b69dfcdd87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4196ab6c-ffea-4173-902b-615d04431272",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "720067fd-5b94-40a0-b431-80afc94887c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507db0b1-cd64-4942-9835-2045053bfaec",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bb5c13f-a0e6-485c-9db2-d71bc0ff328f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edbdcc2-085d-4e9e-9e61-b1881905d771"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d302b6b-7de5-47ae-afee-d6af092e1303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a51782-dbdc-4f89-97a0-4efde6517bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb3ee4f-3425-4a49-b108-35e184485d9f",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e559a22b-fc16-44be-b284-635497582dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1c7eae-14e3-4974-8013-ff8281e2a9ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10c3e9d2-72d1-4724-9128-a4842e61f750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb7ad13-93b7-4164-9fd0-64b8d9a87f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d91e5d-571a-4416-bad2-12e337dce4c7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3330f501-2381-40f0-8ac9-dcd860057d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1a2ac60-ee02-414e-a8d3-2948b1256b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d944dee0-1b93-4554-975d-7656a7bb76b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21a16043-e560-41a6-bd06-16da79041b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8fe30c-9bb0-4d29-be98-36adb62478e5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce2ff65-bc10-489b-b43f-123ac90f1c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4053356-03da-44d8-96a7-35680e2da273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bfdd7f-6e72-4146-9f3c-6c0874c9387a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3738f8d5-6389-43a0-9928-90d05c388148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a49d2d1-983c-45ed-86e6-1628bef2287c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22b5bf1-bb41-4807-a55d-702f9af0bf06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9d6defc-5d46-4f3b-b9ed-c44d2ff6bb8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b6f259-f66b-4519-99f7-0baf4ddc5728",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38811da0-981d-4792-b3fd-0678f85d4965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ad66696-0a89-4b79-b6dc-676c06176692",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57067fce-b0a6-4825-ba9c-493a275e4955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a80d12-94d3-40c0-91c3-b4f87af9b1bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7106f2c7-0291-4917-b0c7-334298f80840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8963dd41-d7cb-4f0d-a89f-db6e079b8b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a5ebf68-3120-4386-a640-5a4514811dfc",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2578b47b-cfb7-4e7c-891d-c4e09c6cad11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17daed6f-0620-45dd-bca2-83f6f061b6bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "149d9af6-e357-4999-8b6c-9a9f37719dfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccef6d2a-c6a8-44ac-a208-7971925c49dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3c12e1-91e2-4b5c-ac22-df86e5e31656",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abf450e-f0ff-4e33-9c61-ce5f9b5bb847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "452e46a7-d1f8-4104-9c90-0f0b99d1bcae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb05b1d-f40e-495f-adc5-101f0921ed34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66dc216f-73a4-4191-a797-caaae3235b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb821ac2-7caf-47dd-94f4-4e864343f758",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e49af31e-abfe-4ec4-9779-83849b71fa79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecfe03cd-0666-4bb6-80aa-342940b9db1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e5e93a-6852-4dab-9bed-3bf37e2382c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a41fd6-79a5-4621-a2dc-082d1b6ed53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bd525ab-0f6b-41c7-a15e-aff4816af98f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c960edfe-9a55-4789-a60f-fec1a198c0b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880347eb-ea45-4c21-b60f-76ed7a23de46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dcb163-aef9-43db-9570-c717c88c79e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee2b9c7-321c-4506-a9e7-a46c8fea714c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc96c6c-ee34-45fa-b9dd-99215102a327",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aec5777-7524-44b2-93c7-5d704bd08ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbc4012-c5dd-423c-a47c-fee8cdd34c25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3c7aba-2acd-4af9-9f8e-a735dec4c5d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b4858d7-553e-478d-b7a7-2efa6ce5448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a324ce8-f89c-4fac-8d5a-044852f68615",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e04880-6d6a-421d-abca-aa4a01974cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bc9cbd8-f735-4b1d-bb87-7a0efa610da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0757649c-80e2-4fea-8366-561e5f9c17cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0ca667-e0fd-4d17-966c-14f488c9a280"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41192369-60a2-4f53-9bd4-836490693cc3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dfb2afc-197e-4e31-9246-0b988b9085c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f503cda6-1181-4c6c-9f11-584234863191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70c854d-2463-4d36-86ed-78075fec047c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b145005d-f7e4-479f-bdb4-eb1c63362d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb637a27-7ebc-484e-902a-e87754089027",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15ddcc1-a41d-4b64-b38c-063995245e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73cdc7c1-e72f-4a0c-8bfa-14c67dd769fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49aa8657-4f2b-4b44-8a93-a5cc5f5e8c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81e91928-0ffe-498f-9e67-3c7bf4099d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c4d5d0-56fa-46ce-bbd1-ca2dabf3c38c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2a1bb4-3419-42f1-8ab3-52847fefc7fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd00b6bc-3290-49aa-a95c-d0b533bec289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935f5afc-69e4-47bf-8d7d-9baa9ef08b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d21115a-6023-42bd-8ed1-9bc7454b5297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d3c4d0-fa74-4198-ba61-88857899bc7d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf0e26b-61b3-4a8b-9940-674ae2b79033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cd35520-9542-4301-930f-43ffb067e62b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00d2a70-bad6-4b05-8e32-55cad0f17b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a787e6b-c4b2-4d62-9e27-045c1defda58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160164df-81dc-45ca-91a7-6fc6b0d2a039",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31dd313-ef6a-4ed3-b68d-d5056fc07c2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3363a9-6c0e-4ea1-a61a-5c6a0f5a4777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e591499-b3d1-4396-be4b-6fbd441f4020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5cc98c-ec29-4a96-b5bd-711379b2115b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8fbe4c9-226d-4c78-b617-1122008ce688",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b87f9a-f52a-4c76-8b5c-0d1cb2cf2eed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ec2a2c8-577d-4a30-b6c3-909253e4c191"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c58d406-d9f1-488e-8a49-69e3aa80aa8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46ca4a9-82c3-446c-a19a-215f7ddd2342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8515fab6-60da-4346-b2d7-5beb5834d7ce",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e5747b6-0cf3-4999-9b35-2f7d0d571901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11084e7d-b83f-4ebb-8be2-ef7ddb664bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c155a42-c413-4a39-b386-02763bdd3fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcf8bab-90f8-4589-a74a-5db4dd82b627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848ede05-d5f1-45ff-99db-eba5fa8ff67b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97dbca5-785b-4f90-83a3-445ffd572119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37b5ce7-7748-4e92-88e1-751476e4d1f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c4df04-953f-42dd-8117-98ddf7a09296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a26d5ca-741e-4cd5-b8d3-45619ebf5018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1cd0f5a-554c-4c53-82f1-f684d4b3908f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754fbf73-cac6-4d9c-a42f-2a78db06f5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef73c984-1312-4658-b4a9-3f607f066626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e5e879-5441-4be7-9616-3b4d7e57c651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c995b99-1027-49a4-a627-7805fc5e7d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb9422f-8ffc-4bed-8f75-8a01b703d0dc",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2aa5b1-af6f-4670-a075-6211ebe1162f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88036983-ec5e-45a9-8255-ece289ea77e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2ba14e-b041-442c-9883-9d2a0706fe29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f70947ed-6ab3-4d96-9ec7-4828b43c0eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3194ca-9527-40fb-ab60-9556aa737843",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551a61a6-1800-4ec4-884f-ddc10401f3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daa8c3f0-f5a9-4450-a6a2-50155c125d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a94b83a-ed65-4ffa-8c68-342edb84534c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1bff6d-a7aa-49ba-aaf1-e911f2a50170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e8d0d9a-2811-4df9-96a1-0bc52fc5fc63",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d2615d-7198-48ba-987b-4c2214f84747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a63d380-a340-4e25-a45e-c17c62660c0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3b58ef0-5d62-4839-93a7-095932bf18f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "831a9230-d0f8-498f-b66b-510c88f0f881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca7da5f-8173-43ed-88f7-71d12b2b7855",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "759d2f8d-953d-4892-99a8-9aa61588de18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16698ea-12cc-4015-991a-7ec6876b6885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "648f338d-7701-4688-b8aa-aab3234625b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "043cdbcb-9531-40bc-b822-ba4f41935b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b43f4b4-6f1f-4f83-9d23-f91a2d9f1f4f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03661c44-81a4-4dff-9c6d-8754ad18cd70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab673ddf-0650-4087-87a8-f5085d64d4a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52525165-e2d2-4034-b876-fd4d5b539427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3efbd3f3-51d7-4820-963d-df2d7777e304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46d0c55a-0b87-4806-8b84-8b47a9061c8c",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4e2267-a00f-4285-b856-09092a26517c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb95396-62c5-4017-83a8-276f22f004d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df4b24af-3e13-4e88-b885-3c83121f43fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca5bfb9-0be4-4df4-aa54-d372ab161c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb20161c-e54c-4187-a1bf-456d493b4106",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af101895-adec-4f70-8e49-4a7ebf623c82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70082944-512d-4e69-be43-be0f039cf98d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eec1816-af45-40d0-9829-777c77949693",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cdf6ed-91e8-46ef-a90d-1719e1396cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea24eb68-ef08-41b4-9e14-8c3012f2da21",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38a5183e-5d65-4f72-b248-15da0917eeb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2a529ea6-a8a3-42e7-9b0a-d222b05f75c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c5b3ce4-42dc-4090-8739-52c736fb1191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6231507-5e9f-454b-a9cd-7e3256d03718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b5eaa5-65e6-4c25-a0c3-0957e5140013",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81ab8bf-c48b-414e-a6d5-084cb660e40a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "091030b8-08b8-45d3-9b9d-9dd1a267243b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b797a7-d727-42df-85ab-982f2edd5cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b621ef01-106a-4c71-a00c-ee71a4013911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a4b0af-bc39-4a11-992b-1d31c1e64cbb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7860f608-7f7d-40af-b00f-ce577de2c85a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c645cc8-b527-4f54-9fdf-12563c230b79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8197630a-2dec-455c-aae3-1bf8bd109881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da30cbc9-bc29-4e48-9a21-20c0a8e6286e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409370a4-870e-4588-99a7-2622c4d8fa8d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03795158-a620-4c4b-ae3c-4605209c8e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff019279-3a49-4c88-b0bb-8f2deee052be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52059593-9f2b-4cce-a387-9720861544a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e18149c-95e2-438d-aa07-7b922d4436ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78e7322-da9a-4d1a-9bb9-ef1d24e05a6f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f53a384-2e24-4229-8469-1c56d804aa4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "809de289-4d4c-4cca-a857-f3c94a132942"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d3f3d5-5d67-4785-a1e4-44b8c3ce3a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ca300da-94c6-40fa-8053-3f226f0588d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72fd843f-8d03-4603-99dc-a6831670a6b1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67920edf-b9b4-41ef-aa93-69e04e0d19e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c86657b-b2db-4adb-85d7-758d9d722cb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "842b31f7-741e-4805-bb35-5726388e2eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1452b8cc-e649-42ff-8874-70c482ea7d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c0c400-3e10-41ba-8fd7-62ab7bd98ad2",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ddc218-2840-4e18-ae2f-ec47459e59c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4092625-22f6-4d80-bbd5-191d784a425f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ee0261-8b51-4dea-b2b4-a4cbe4e9067e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b71da88-69de-45e0-bedb-56f6fc35ef2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc5e0e2-24bf-4a61-8b94-cc8e63b85895",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b4c974-5085-4eab-ba1c-e77469d3cfee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f02d06dd-93d6-477b-a9f1-d058cbb461a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44f13ad-ffd7-461a-ae5a-c9da29eca0ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa112b10-ab7a-4c23-9830-4202865d52b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53f8a09c-2bb3-4bf0-99d6-08b270b84a50",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf906ad9-73ad-43ac-a0d2-b11e455f86ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9d511b2-3509-4b97-9baa-fb5a80d5b87c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "065dfa62-a762-4b11-8a7c-8f5d6d9f2aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88a20675-eb00-4477-adbd-6e0eca721de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28fbf4a-a819-412a-b18c-f38ad5974a9c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4dfaeca-fcf6-47d1-baaa-6f1f61e08d7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdd7db02-6f6f-40f6-bfd7-580a7335cc69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ced088-6fa3-4bf2-b53e-4c94d300947d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc0ceac0-ae8a-4d20-b3a7-8548746526f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108930ca-7ea1-408b-8309-89c77cd79bad",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50cad5d9-41a5-4f7c-a9a5-86f6a1e69493",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c5a3de4-a4d8-4d1b-82c8-bf4723fb1588"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a204fc-2257-48e3-b532-476883d784f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77db917d-f225-4018-832f-1edd51dfa987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b9e0eb-9d8f-48b6-898c-cf97b06eccc3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e04d53-547f-479e-b86d-ccbff9e66901",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5856a3c2-2253-405d-878f-a7efedfe4e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22fda145-9686-494c-b63f-09825b3012c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f173d72-dc76-4c20-945f-ded8b8acc7c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a89e7ad0-2f94-454f-9cce-3c5e30c07d4e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8427c50d-97e8-4f02-9a4e-6695946259af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f063f0ac-84de-4b7f-af12-358683d2d6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889ca2bb-50a5-4ec9-b34a-a4a396dd1258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a79fbe-9061-44dc-a60f-0940b813bc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2768852f-7670-4235-af43-83345006545e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b9784a-d017-4f27-8b03-826111bf8825",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f9eb756-5049-468f-be33-040a94dbd008"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b101591-8b6e-49be-8933-27217a36c108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b703b726-f9b1-4033-b915-b18525a3e3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20d71eb-1e5f-42c0-add0-ad3f791427c7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e72bef90-ada3-414b-9980-64bf3acee6b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68317eed-86a4-4adf-a67a-6cd1cd6e768e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11d4a335-5b35-4d57-a47d-7c6516e8ac02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c24cbc30-587b-4494-aceb-7a7e6ee46b96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69161f77-324f-4e03-91c7-39bb7c5601e3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47b02f2-1714-448f-b847-d3112402b767",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fbbc11f-e924-4836-b7da-8041384a1ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a046d0c6-5717-43ad-9b09-8de9ef331c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0078ce1-9d99-404f-bcf6-8ab1b2669736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c47b855-17e6-4010-8d67-40efe8af05d4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cad760-6500-4371-9f2b-6032c4f0273b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a11df561-59b5-4ae8-a77d-33d7ccf5a31e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8e181a-98e6-4838-8599-d2d9f48bc93f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08702c1-afb2-4864-a404-87e1663119f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32655b22-b638-4a7d-808f-d013db933f93",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d338d933-bbac-4201-b5f5-92c5f18308b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "668e28b7-587b-4123-90cd-03ca297d4a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec60390d-52f0-453e-9956-3b68ab474ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42669ca9-d932-40c4-aec3-0318bfee3baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3e3a77-c3d8-4f20-814a-3ce6f823a9b9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6a2369-5b4c-4060-a7c1-988c8d9895d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c862bff8-9cda-4f19-8316-68f91705dc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7403214f-d9f9-4caa-8bc3-9038e7be6076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61e8aef-b982-469c-89e7-54fd50405dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f364b79-9698-4690-9cde-7e15d7272c52",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71300004-2fb9-41cd-9b59-aaa33b842bdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "527cd076-0808-451b-9df9-cd95ab9dce84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7855ac1-b497-4f8a-811f-9a7041993799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e1c2f1-41c8-4be1-b8f1-476c37c0afe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f115feac-c4a3-40a8-bb64-13b45f6a6cfd",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b71c34d-d733-4092-b9ee-3c94326f3f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c13a10c-35b0-4df7-a249-9136f0e46c65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5d3be59-52c2-4a5b-8e13-ce4a5ffe4168",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a94730f-1cf2-4296-a444-dea0443aa752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a901cb6f-bc0b-43a1-a4ff-b7fb42aa137f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705c8408-2505-4606-9191-d273028f391d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d66917db-c251-4510-833b-409ee78eff0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cfae53c-6593-4835-9746-bf6efb1b9013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1e700a2-9a7e-4461-970a-e50877a85c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66278637-fc07-49f9-ac5e-091203f2d82b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f1bbd95-56de-481a-833e-67aa7c9bc6c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9e0be5d5-d1bb-41b5-a225-bb2090caae70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb33f83-8abc-49b3-b8f2-69de9198bde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc76a0ad-039a-40cc-b749-0a2a1b7e3b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88df4aa-14f8-408f-9e77-9aef86d4e455",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e869e7-f0ba-4749-bf16-0a9c899848ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d6e7f92-9d4e-44d3-96f9-5408e95e1aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1b62bd4-4e1e-4057-b0f4-e353c718d210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a515fb5b-e1fc-43be-b012-76f3a460549e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3661173-9725-4e1c-bb36-69dd9ebbeea1",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b60a9af3-0d28-4174-ac48-efe1e23b8378",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a8671f0-3ea3-4d31-a8e8-a31f90a228eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dc8d65-629d-4002-8430-87f6e420239c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "189aeaa4-1698-48de-a210-a1cbf26e2882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba2eebd-926f-4a91-bb9d-b398c03e17cb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29acdfec-73ac-4155-9db7-796b14369ce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a42d2ea-5f16-4cc4-bbfe-6c15eaaaefb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "363d172b-c08a-4423-a563-25c329ecdf51",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85fb0aab-422d-453b-a6d4-e192c4298de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874b0733-32df-457c-8b85-cd0730e1ba03",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93301c69-c836-43e0-8e9e-bd0bd4503c23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "710382f6-92ee-4749-89ae-a7d977cc79f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a3f461-f146-4d6b-b02e-a03bf3e251f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f5dac2-4c72-480a-8700-b898461d2621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d33f16-6599-4f48-805d-43084d8e8918",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7de9632-c079-4cae-9069-9787faaaf7f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd30c1a8-046e-4fbe-b355-4e8bb5f5f380"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b28439-9529-4029-a18a-0b77fff56e91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5bdae3-71a7-43dd-bc9d-cc0f0ac760dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fbd664a-97ea-496d-84e8-1a1266ce981b",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4c9ea1-e62f-435a-b499-5585b9b2c101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e50d742-6696-483e-9fe7-8522b862c83b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5af42ef-73ad-40ad-80fd-7b94fc9f9fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a87c476-bed6-4813-88e7-d645969ceb4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88f4f0c-ba19-4a1c-a159-79b942dd1b9c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c0a2c7-44fe-4a1a-b181-599dd19a61ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c9dfb9-49ed-4eff-88b4-41aea39f1925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e589a392-184e-4a8f-afd3-ec9911eba98e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e18955c8-9f06-4d91-951d-9bbac3b7371d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732ac566-effb-41d5-8b0e-914e216e2e62",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f027626-9df2-4e46-a066-466fd287608e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d176ff-d89f-4656-93f4-f384663b9524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "460c072f-83fd-47c3-b90d-e3aeb4082557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19456c44-2247-4fb4-a6db-8c28e237dd7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4081ec-21ec-400f-a537-4c00134a3695",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e961155-81ab-4b90-880d-9a52e7f0e812",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98413057-7fcc-4308-822a-f88032623267"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ad0d14-a589-44b2-9e4e-5f3fe36058c2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c235abe-be03-409a-a8ec-32e4ee7ef935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb88c00a-02fd-4e9b-8aec-e9366b19bd2d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f9c207d-e56f-416a-a96b-adbb259578e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16e2a965-bc4b-46f6-bdb7-92d39fdff97e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "987bb346-af34-42d9-a63a-6321e46a752a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a39dc5-5d59-419b-8dc7-ea101d001e06"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4f8d3740-629f-4e09-a698-d5e9b50898f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4be2d78a-3d90-4794-9b2e-67c43dc12fdf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "698e32b0-110d-4f3b-8369-bdc2a505207e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2bd0d36e-67f9-4676-8a47-d56f8b26bd7c"
                    }
                  }
                ]
              },
              {
                "id": "2fffc8a4-6cd3-40f2-85ff-42df0864926a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "315ce3f8-f187-4f0f-bca2-67c23ee09e22",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45f0df62-4c61-40ba-a4ab-a5d6062d750e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "94934b75-31eb-48ed-b7d7-f909630b0547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4869eec2-86c8-49b4-9d33-e6d8a4b3d2d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5c2968b-23b2-424b-9391-0ae8c525c97a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff27ebbb-773d-4467-97e2-af291ee68c6c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50c38f67-0962-428b-aa50-629b92c646c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6b8a35d-85b7-4eb7-8357-6ec8dbce9af6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d54c801-1599-4a15-80ae-9422dcd8ea16"
                    }
                  }
                ]
              },
              {
                "id": "7a8c3320-5b49-47eb-8e0e-b3cb610b5774",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2f33b2ab-050b-46c7-91fa-67968d39cf3e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dff4660-e402-446a-b67e-d8fa4d7e5a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "86c33bc0-03f5-4a76-885d-7bc6429080fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0e0993c-66b0-4353-8f37-f876d970fdf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d6e5072-48e9-45c4-a836-af927f4ab548"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c144a5ef-7e65-4e87-a305-7eab10bca7c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "41503cc9-766d-4e76-b212-75b1bb2fe1f4",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0546b5b-1ab1-4659-86d4-6c786e3fce09",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bfa543a1-f261-45ea-bab9-68b786f78e1c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c808a4dc-a6d8-48cf-8b09-150ad08608ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1384f6ed-1bf4-48df-a811-3dcd589d9b04"
                    }
                  }
                ]
              },
              {
                "id": "e3c69dec-ced4-42b2-b703-b8e9f69cd9c2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1a20efb-4e1f-4084-a47b-4cb48f7dcea9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e357c397-4d9b-4539-9166-23b20eb213be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c5c1192-0937-4f26-adac-5bccb44301ec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7d77954a-918b-43aa-a710-17efa899b86b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9af462c-31a9-4861-8139-97bfaa80512c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cede2e82-8269-448a-8f5f-c3312fd4886b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7387308c-cd6b-46af-b976-491331f53650",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "710a1cc7-a35c-4f5e-93f4-6be1d640d540"
            }
          }
        ]
      },
      {
        "id": "1b0c4c59-58ab-45b3-88ba-f382d91a07e5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8cba9fe1-1038-4ea0-a7bb-a3d1a6695ff4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0dad844c-1e0f-40ab-b683-c6d5b364bb55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fdefd71a-da2e-4156-a866-1d16a2274015",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ceb7f71-feb0-4857-83eb-1daa2cc8c5b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "48006d77-6c71-4b53-8bbd-a1a8bcbee39f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9520f3e-d29f-4eea-bdeb-83038bf52bde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b0bd881b-3ee4-4e6a-9982-e18a31b43297"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6674323-8f4b-4f54-8592-ab35a9ec31a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e73aeaa1-0e67-41f7-8077-6cf9ea33b62a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "244bc5ea-292a-4185-b9cc-afbb2cb442fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ff6837e-4a1a-4967-bd06-ceef5c557f6f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b660947-e318-4662-9d35-7a966be49c4c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "39bbc0cf-fc4f-4079-9015-c91a8887d18e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ce245df-4c5e-4f1b-b7a0-c63659f4a54d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "586f46fd-c382-44f7-bf88-59cdc1b147c9"
            }
          }
        ]
      },
      {
        "id": "d9720373-d183-4352-8a7a-db924b9cab96",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "25e5edc9-4192-4774-9201-12ba1e5a69ed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5de3aa8-f3b5-4876-b7b6-1fdcdf025b2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "670285e0-0505-4395-b92e-bd08c3192ded",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c363bc7-1e50-4230-8b71-cfd83e5cbfb4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fbb4902-486b-42ae-95c5-bd88b62eafed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a91278b-9a66-4d1c-9872-e526f71f6a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5bb2088-4182-4643-9a22-1a073515fdc4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05a56eac-2fd5-4ac8-a909-44d2f976925a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "842d296a-40be-45c1-b8be-9e0ddf1e420d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e466d340-74e4-4a31-938b-8f64086af135",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7bc52c63-eb52-4f1e-9da5-be2e2cdd7353"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b1e28bf-ff14-4f18-bb90-9ffa1c0d2f42",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ceb95730-b80b-4d7f-9f39-bdf8ce90576a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "81dafaa4-7643-40a3-adf2-83fbdb239f16",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f89d8a4d-ad31-46da-b658-ec51f4f3ab09"
            }
          }
        ]
      },
      {
        "id": "ae86c310-3367-4058-8965-c470831462b7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "723c12d4-3683-42c3-8631-0a427366552e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4adfd53-5481-48b1-b2c0-e28c8fa9a02b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "13ab5321-7b60-4603-9750-4c0d4aa16e1c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7b58fd9-5232-4804-b292-0b406a6d04f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f365c2c8-8c51-4921-879c-f552d3574018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "240b27bb-cae9-4879-aad6-901d3e032a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7d216dd-1b14-49a7-bca0-1ec35ec4cb6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6945bb87-9512-472d-9a3f-50349db2612c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bbd8f07-c314-4de7-b5af-34f66880a370"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a70439e-1888-48bd-9e8a-4d037c50a775",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0262e648-e37a-4c1c-9b65-53a1d56fea7e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0fe66edd-4fff-420a-83c4-2451f6b4d28f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "07fb7c87-18f1-40ae-9dc3-e0573d41f8e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "31c93569-0a35-45b5-83c2-b2b2bf98f262",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b7e6931-cd58-459d-b8ab-9b649d92a3ff"
            }
          }
        ]
      },
      {
        "id": "1304e5e8-8855-46d5-8494-40843b8bfc80",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4231556e-bb25-4006-8fb8-9bb1cc4c2179",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "900fc792-ce13-4b90-adb3-c534129bcd65",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7aafab1f-1a99-4548-a187-85c4d7c03641",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8cbe6ea0-66c4-4a13-9333-25cc7a83b2f2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eefdae90-97b9-4969-bb12-edb317ae25eb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.083333333333286,
      "responseMin": 7,
      "responseMax": 664,
      "responseSd": 84.57224886319253,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717807087637,
      "completed": 1717807111808
    },
    "executions": [
      {
        "id": "b732edd8-0ebe-48f1-a3d2-b99a91d79d19",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "266b0f5f-962b-40e4-a928-ff969feae664",
          "httpRequestId": "f92daadb-0a9b-4956-bf36-bd3e95125a8b"
        },
        "item": {
          "id": "b732edd8-0ebe-48f1-a3d2-b99a91d79d19",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "2c6f0c0c-128b-4e76-91d2-ae85f5936d73",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 0
        }
      },
      {
        "id": "e6afe2b2-1dc8-4f53-a260-c70d8af3521a",
        "cursor": {
          "ref": "4358bf40-fe85-46b2-94f4-77937d09a7c5",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "0a1a0133-fd07-4a74-9a80-0a26e66a8e09"
        },
        "item": {
          "id": "e6afe2b2-1dc8-4f53-a260-c70d8af3521a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5cd97990-c0b5-48e0-b02e-c3a609d1d12c",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "017df1e5-e4a9-4804-a69f-0872cc7348db",
        "cursor": {
          "ref": "b2e819b2-502f-42b9-908c-2fbe26165033",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c642e4ac-a5eb-4af0-9fff-b6866a011d83"
        },
        "item": {
          "id": "017df1e5-e4a9-4804-a69f-0872cc7348db",
          "name": "did_json"
        },
        "response": {
          "id": "729f057a-5bcf-4808-b9ae-608b36397f4d",
          "status": "OK",
          "code": 200,
          "responseTime": 410,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc46e07c-a2c1-49fa-8cc2-f073267957e9",
        "cursor": {
          "ref": "761031d7-97e9-4bf2-967a-4c20202326da",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "32f63f62-3ff6-423b-ad03-080f11a5116a"
        },
        "item": {
          "id": "cc46e07c-a2c1-49fa-8cc2-f073267957e9",
          "name": "did:invalid"
        },
        "response": {
          "id": "1542844c-2775-43e2-a143-1e3206b49ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc46e07c-a2c1-49fa-8cc2-f073267957e9",
        "cursor": {
          "ref": "761031d7-97e9-4bf2-967a-4c20202326da",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "32f63f62-3ff6-423b-ad03-080f11a5116a"
        },
        "item": {
          "id": "cc46e07c-a2c1-49fa-8cc2-f073267957e9",
          "name": "did:invalid"
        },
        "response": {
          "id": "1542844c-2775-43e2-a143-1e3206b49ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5a7984-3d39-4dd8-8a47-0eef87800e8b",
        "cursor": {
          "ref": "68eed4b8-0194-4b28-8b2b-185b9477c64d",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d469996e-900c-493d-bcfc-c9d0937bd0d0"
        },
        "item": {
          "id": "5f5a7984-3d39-4dd8-8a47-0eef87800e8b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "20fe2949-1811-4683-882a-45c522fbf12d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 156,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cb7998-34fe-434f-b982-2616b4e4151f",
        "cursor": {
          "ref": "3b4e73eb-6d1c-4921-a4ac-7f00849adda5",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5b2c3e2c-fb3c-4d7f-af3f-7c137eba692b"
        },
        "item": {
          "id": "53cb7998-34fe-434f-b982-2616b4e4151f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "48145bd6-969e-4193-ac81-70460dc376fb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a31312-3bcc-4c6a-8142-97e05e41dfd5",
        "cursor": {
          "ref": "13c52823-64d9-411d-9642-8c7091140a40",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e6669ae2-c40a-453f-81a3-86e970105fca"
        },
        "item": {
          "id": "f8a31312-3bcc-4c6a-8142-97e05e41dfd5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b54c6363-03e4-4c24-8b6a-cea1919be342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75d9e91-2295-4efe-83b2-74d57c32bc8f",
        "cursor": {
          "ref": "6477deee-7bbc-4479-b8de-ed5834c85241",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "18688180-a638-4673-bbb3-c06824d7aa6d"
        },
        "item": {
          "id": "c75d9e91-2295-4efe-83b2-74d57c32bc8f",
          "name": "identifiers"
        },
        "response": {
          "id": "0ba7b267-ad49-4af4-9610-cc920cb94e9d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92caaa3-66c3-47b8-8e21-4f69e50b2e86",
        "cursor": {
          "ref": "4ca43286-1e19-443b-99a5-7406daaa2df0",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ed1c1470-306c-4ca4-991a-252afe51f67a"
        },
        "item": {
          "id": "e92caaa3-66c3-47b8-8e21-4f69e50b2e86",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2abb70f0-ac53-431b-8739-85d63d278f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e8db5f2-cda1-4c79-b175-c6666799fb79",
        "cursor": {
          "ref": "520a3d0a-20af-4581-ae26-bc5522159646",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a0b77f8f-f3fd-4466-9619-57f0d1b3f2e1"
        },
        "item": {
          "id": "1e8db5f2-cda1-4c79-b175-c6666799fb79",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "15df34fe-7086-4f6f-b6f1-5fa2fe49ee6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "875e7c75-cc94-4a89-aceb-461136a97895",
        "cursor": {
          "ref": "153cef94-577f-422b-adf0-097c72c8cb73",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5e7c45be-f1ae-45b7-a742-c38413ec8586"
        },
        "item": {
          "id": "875e7c75-cc94-4a89-aceb-461136a97895",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7274dbc5-8360-4336-b3ce-ecde15bc6998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36221f2-62ab-4dac-918a-f765336cf9e1",
        "cursor": {
          "ref": "5862bf7f-6e9e-4a37-987b-54eb320d814c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6768507c-0086-477d-8076-932a8559fc39"
        },
        "item": {
          "id": "e36221f2-62ab-4dac-918a-f765336cf9e1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3685d56b-a544-44ed-bc8b-b858bd974fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f689952-fdab-4344-a537-5ec1b82d9958",
        "cursor": {
          "ref": "3763cf67-fd42-4d0a-a767-124ea90a163a",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6df683e6-630f-4350-9022-6dbc29a10cfd"
        },
        "item": {
          "id": "6f689952-fdab-4344-a537-5ec1b82d9958",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fbd15357-7c3f-430e-8550-97982fc112f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0fd8e1-fa99-429c-b6a2-fe7c39ca342a",
        "cursor": {
          "ref": "dec0893e-e3be-4228-8ca1-646b08992f18",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dbb7a1a3-6421-43b2-80ca-b5a95d3cd7f2"
        },
        "item": {
          "id": "9b0fd8e1-fa99-429c-b6a2-fe7c39ca342a",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "365fd2bf-7ac7-4752-ac34-8419290cea98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea034fd-b715-4db6-b591-1c770199c111",
        "cursor": {
          "ref": "a765c362-5b50-4bcf-a140-124837824731",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "613b2992-702d-4d08-977d-e942ec8ad056"
        },
        "item": {
          "id": "dea034fd-b715-4db6-b591-1c770199c111",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5b88cbad-e6f2-4b94-86d8-7e6e362c24fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f545a1-e084-4845-9e2e-bc0833f88ead",
        "cursor": {
          "ref": "f2ae245d-0383-493f-8710-65a25f971cc0",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b60aeb6a-b000-4fbc-8654-33b604a814b5"
        },
        "item": {
          "id": "83f545a1-e084-4845-9e2e-bc0833f88ead",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "23d19f95-29aa-447c-b1e4-715b2d70b0f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca32547-fa19-4430-b0e1-7bff620bfd15",
        "cursor": {
          "ref": "debb0822-6d6a-4b90-bbd0-ecb2bab16951",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a086a4fd-3daf-415e-bf61-01385a9fed7b"
        },
        "item": {
          "id": "3ca32547-fa19-4430-b0e1-7bff620bfd15",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "762ce0af-3931-4979-b99d-9973f85dada2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8a3b2e-4caa-4dd1-9e6c-36c02bf63fef",
        "cursor": {
          "ref": "4097b69c-9a2c-4499-830c-9de44ded4419",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "074c7a82-a5a1-434f-a80a-37defa063df0"
        },
        "item": {
          "id": "8e8a3b2e-4caa-4dd1-9e6c-36c02bf63fef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "17039c86-4a1d-437c-ae17-d6ac2d83ae36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99759be-6cec-4c2d-9269-ddc2a46eea15",
        "cursor": {
          "ref": "1d12516e-8f29-444d-ad06-9b898515ae8d",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "851d4350-b518-415c-b06f-0760daa0c7bf"
        },
        "item": {
          "id": "c99759be-6cec-4c2d-9269-ddc2a46eea15",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b8f0dcd8-6039-44f5-9ad0-6f37f1d29787",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b480ece-a04f-4037-bea6-d2751504b312",
        "cursor": {
          "ref": "00adf94b-666e-409e-964f-50b6b6a1f108",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "65a2d3d0-1dac-498b-8dc0-d8793a4cd769"
        },
        "item": {
          "id": "9b480ece-a04f-4037-bea6-d2751504b312",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ef55816e-fd6a-485d-ad83-e5cfc86a3868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc9ca65-67d5-4b70-bffa-a8bd9b6ba530",
        "cursor": {
          "ref": "490c1f8a-243e-4428-a58d-f96e3c2a8404",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a0778de9-a47a-4771-9aed-7e6690bc91f4"
        },
        "item": {
          "id": "7cc9ca65-67d5-4b70-bffa-a8bd9b6ba530",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "1a63f7b5-7c8c-493d-a159-238fff62762a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72080cb-156d-4681-9dad-4da96e9bd4fa",
        "cursor": {
          "ref": "04560139-654c-4210-9852-504660ce87c8",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "9f0e41ae-d013-4743-ab7a-d14c7f572db7"
        },
        "item": {
          "id": "b72080cb-156d-4681-9dad-4da96e9bd4fa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5d662c7f-aeec-4614-9cca-3df704d143b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69091284-8241-4f2f-b718-6ee99d641325",
        "cursor": {
          "ref": "c7ea8a5f-ca6e-492e-af23-53c5a9ebb5a9",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5c63b9e6-8e01-4486-a1f2-a49b6875af66"
        },
        "item": {
          "id": "69091284-8241-4f2f-b718-6ee99d641325",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "3b43fb22-15b4-49cb-adaa-074780547331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af296adf-4cce-4371-8037-f5ca45ce00c4",
        "cursor": {
          "ref": "a00ebfa4-6d53-4613-b6e3-f8b7c3ca8538",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "cd46fb98-b626-43d0-bd2d-72d83a94a105"
        },
        "item": {
          "id": "af296adf-4cce-4371-8037-f5ca45ce00c4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6aae9cd5-c4ab-4db2-bd97-561965f55c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25320ad0-cdde-459b-8eaf-c47c8875d3fe",
        "cursor": {
          "ref": "5f522092-2ed6-4ef3-b032-7567f753e0f5",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "92a4698b-75f7-4d47-a1be-6fa19c9c6db9"
        },
        "item": {
          "id": "25320ad0-cdde-459b-8eaf-c47c8875d3fe",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "db511b8d-c178-4d58-92f3-7b41598d8f98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f65821-a4da-476c-874c-7ba7b7728546",
        "cursor": {
          "ref": "47a4cf5b-38f7-4073-a8db-1b743973675b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "43f90b65-38f6-42a4-a14b-985415164ea1"
        },
        "item": {
          "id": "80f65821-a4da-476c-874c-7ba7b7728546",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cdbba95d-d430-482e-a748-cf04d77c87d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ef364c-e23d-40cc-83e6-a1d73e371e7a",
        "cursor": {
          "ref": "ed6fb040-07e0-4ac9-acc1-ca0b6c796b6b",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4f39d6c7-3578-4432-b823-e7501cb6bec2"
        },
        "item": {
          "id": "78ef364c-e23d-40cc-83e6-a1d73e371e7a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "f884e5e4-fa94-49c5-abda-de60f5f60b83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1fe726-5281-4b22-a0e7-8a540284ed4a",
        "cursor": {
          "ref": "d4d57970-b73a-4283-8cad-2dd7d02a5f46",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0d11794e-18a2-4ac2-84cc-c4a9f6761c5f"
        },
        "item": {
          "id": "4a1fe726-5281-4b22-a0e7-8a540284ed4a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cafa9284-bd07-4900-8db5-f3d4282d9f3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1f6712-6655-41b7-882e-e6b22c55b6cb",
        "cursor": {
          "ref": "2160c681-83ee-4daf-ae5f-4f373d11a38d",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "460caeb1-2928-4ebb-872d-96da6e28cffa"
        },
        "item": {
          "id": "ae1f6712-6655-41b7-882e-e6b22c55b6cb",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "04e1302c-bfd0-490f-ad4f-8fcff7ea4187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8245b2e0-6d7a-4a95-9600-4ecf8499c032",
        "cursor": {
          "ref": "20f976c7-0688-492b-bfbc-d618c0e5f303",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e5c1d5b2-43c5-4f90-b84b-0ed5c64ae7d5"
        },
        "item": {
          "id": "8245b2e0-6d7a-4a95-9600-4ecf8499c032",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "066c1903-e480-45ec-9b52-05891185de64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b30c2f1-fc7e-4a62-b81b-578d59de5755",
        "cursor": {
          "ref": "fdd15a3d-a8b1-4654-8ed2-fd38db46d02d",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "086820a1-26e2-4683-aba9-91c846ae7f4a"
        },
        "item": {
          "id": "6b30c2f1-fc7e-4a62-b81b-578d59de5755",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e4378ddc-bab1-4150-bb6a-35fec8ca4e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7aeddde-a658-4d75-a64c-05c0acb634aa",
        "cursor": {
          "ref": "81224d33-f50c-428a-b3fb-500cadb7ebb8",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f99969e0-57fd-452a-bdda-ec30df89cb2e"
        },
        "item": {
          "id": "a7aeddde-a658-4d75-a64c-05c0acb634aa",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8e6272cf-5bdb-4cd3-ae93-57668128a2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee600be-be75-4bd6-a1b5-ccb709c94dc2",
        "cursor": {
          "ref": "f1b52ee7-37d5-4a08-82e4-2c0992b4ba3d",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "67f397aa-590d-4220-8080-a9998f209fbc"
        },
        "item": {
          "id": "7ee600be-be75-4bd6-a1b5-ccb709c94dc2",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "abb62465-6434-4cf6-bd9c-e2ac6dc2d01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2caa5280-bbed-43a9-9701-eebaf64bf089",
        "cursor": {
          "ref": "a741600d-6e8a-4095-be4d-d581281cb175",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5633a887-0ebf-4d71-8193-a4ccc2d1bb35"
        },
        "item": {
          "id": "2caa5280-bbed-43a9-9701-eebaf64bf089",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "551105f1-2840-4f2a-87f1-ee9bb8895bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dda06a4-171d-4d7d-86dc-6d644eed1766",
        "cursor": {
          "ref": "b198d8e7-fd76-4063-9b3d-356834f7add2",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "90463e5e-2d9b-4fad-8e3b-b1f26270f18a"
        },
        "item": {
          "id": "3dda06a4-171d-4d7d-86dc-6d644eed1766",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "74a0cadb-e96f-491e-a7fb-e618fc87b0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3242dbc7-6976-4180-8c96-7ed5defe3e9f",
        "cursor": {
          "ref": "f4cc4fbb-92cd-4e58-bf27-04e79a8373a7",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ebef2cd5-a3e8-482b-8d24-13ed22da15a7"
        },
        "item": {
          "id": "3242dbc7-6976-4180-8c96-7ed5defe3e9f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4abf7b86-a4f1-47e9-8ed0-a8b464905eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b324467a-b584-4643-bbcc-08cb3e2dd453",
        "cursor": {
          "ref": "41dbaec3-1cab-4d46-af5c-b20a1d6624d2",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c894adb5-efea-44a6-910b-4d64041b6eef"
        },
        "item": {
          "id": "b324467a-b584-4643-bbcc-08cb3e2dd453",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d402def4-c3ff-43d2-bc03-5c9f68cbe5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00d89745-843e-4a20-b5c6-49c2c2618674",
        "cursor": {
          "ref": "fed46327-6b32-4e3b-ba7e-bfcab6c2a02f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f20f9d9e-a5e0-4993-99ab-593d90efa280"
        },
        "item": {
          "id": "00d89745-843e-4a20-b5c6-49c2c2618674",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "402ee620-e5de-475f-b42c-bd2c99fd9a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730dff8f-6d8c-4833-a967-747cbc7d1c46",
        "cursor": {
          "ref": "74b14ed2-90e5-4c17-ad3a-7e7732f8ac3e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "df5366fe-6249-476c-9e13-cd22b94b67b5"
        },
        "item": {
          "id": "730dff8f-6d8c-4833-a967-747cbc7d1c46",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e0fd709f-d67b-4864-9b0d-464333fce08e",
          "status": "Created",
          "code": 201,
          "responseTime": 664,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "97f4de5a-81b5-466c-8fcf-02518a3bec24",
        "cursor": {
          "ref": "6f7358c5-3d86-47e1-8979-275f6d5f8293",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8923aab1-feb0-4278-94e6-dec834363857"
        },
        "item": {
          "id": "97f4de5a-81b5-466c-8fcf-02518a3bec24",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "543472af-ac2e-407f-a5b9-8f4eed87fef9",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "96bedc96-e73f-4d0c-ad17-1576440baed6",
        "cursor": {
          "ref": "a512ee50-65cc-48ef-9db3-23939f15627c",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d16aeb61-b165-45f6-9f8c-850a1be2eb71"
        },
        "item": {
          "id": "96bedc96-e73f-4d0c-ad17-1576440baed6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8b482cb1-0d40-498c-b7b2-f17addd74eaa",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "71734216-17c3-461c-bfca-b89ead24d9f8",
        "cursor": {
          "ref": "62b5096f-4e75-41c1-9bd3-9a0472fea606",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d9863a3b-6a24-4b32-ab2c-f61f74d089e9"
        },
        "item": {
          "id": "71734216-17c3-461c-bfca-b89ead24d9f8",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e61229f6-8de7-48ee-a54f-62b1e2c2302d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d669bc2e-680a-4354-9242-ec000a52f27d",
        "cursor": {
          "ref": "ae05eccc-d9b2-4745-9330-de848a97ccf1",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a4d6d0ae-dc1c-43d0-9728-12a3c1e108b0"
        },
        "item": {
          "id": "d669bc2e-680a-4354-9242-ec000a52f27d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ba4e6c69-8479-440d-be92-a527d209eac2",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "951db79f-50cc-4a39-b991-f0e48ab8de6b",
        "cursor": {
          "ref": "fef98e85-64af-40cb-a175-b16ad30ecba3",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "09315a58-effc-4e46-8f14-19f325cd3ffb"
        },
        "item": {
          "id": "951db79f-50cc-4a39-b991-f0e48ab8de6b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bb571d9d-0951-47c9-8a19-43f09a39450b",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9d3da1d0-3cc0-4762-be3d-bbd37b853932",
        "cursor": {
          "ref": "d3e177b7-6268-4f20-bb49-21e7c74533be",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "118aaccf-ca60-40ba-81c8-0307aa4fd350"
        },
        "item": {
          "id": "9d3da1d0-3cc0-4762-be3d-bbd37b853932",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "3200058f-a0f0-4af8-82e2-9a08c4653818",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "704273f1-b467-4a12-aed0-57d6a15b699c",
        "cursor": {
          "ref": "8ab3a17f-28d7-44fa-afc8-960e72a5873f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e30708a6-1dd9-4986-88d7-da6850f7c949"
        },
        "item": {
          "id": "704273f1-b467-4a12-aed0-57d6a15b699c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fa1421d6-63b7-4acb-8367-c542f33922a6",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "59e9f06d-34d1-4794-b637-438a63cdd2b3",
        "cursor": {
          "ref": "cde186d5-f868-4996-9723-22d1242a687f",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5f7521b1-c16d-47f3-b5bd-f74bd95eae16"
        },
        "item": {
          "id": "59e9f06d-34d1-4794-b637-438a63cdd2b3",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "377d6ac1-b984-4961-a247-10729a45e58b",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "fef883c2-1c34-4dc1-b019-3808a68e9475",
        "cursor": {
          "ref": "d1a031ee-66c1-4ceb-9131-c7fd2e02e02a",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "871ededc-9103-498b-91b3-7a29b24ecf4e"
        },
        "item": {
          "id": "fef883c2-1c34-4dc1-b019-3808a68e9475",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f4ca21a9-0ec0-4980-a593-07968ba71621",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "11362216-f7b0-4d18-a91b-06ba6d1b7d75",
        "cursor": {
          "ref": "9a96d6f1-6d3b-4069-9838-9936dd4134ca",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "070ff662-4a98-43ef-9195-98de24b3ce4b"
        },
        "item": {
          "id": "11362216-f7b0-4d18-a91b-06ba6d1b7d75",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d8046b3a-6adc-496f-946f-0f50eb089fd0",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4b19bf2b-1fff-4dbe-81cd-40d70f31299f",
        "cursor": {
          "ref": "5de62301-4f51-4d36-90c7-895e01225925",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "475e21c7-284d-47a7-9174-58db34c1f536"
        },
        "item": {
          "id": "4b19bf2b-1fff-4dbe-81cd-40d70f31299f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b204cfac-11fa-4705-989d-ae15d7bb3287",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "162042a3-359f-4227-9382-f308521c3f37",
        "cursor": {
          "ref": "730d43e8-607c-4cb0-bf42-849b89dde34d",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "83a76668-075c-43b5-8957-07b15e064bc2"
        },
        "item": {
          "id": "162042a3-359f-4227-9382-f308521c3f37",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "985fa60e-e48f-4e79-8809-06d789d04512",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "8b5ccee4-5e5d-4a54-9486-22c6dc9a2208",
        "cursor": {
          "ref": "b6b2179e-c407-45cf-ab31-7e816f0a0c8d",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8c26254d-9a91-448c-acdb-ff25686f4ac8"
        },
        "item": {
          "id": "8b5ccee4-5e5d-4a54-9486-22c6dc9a2208",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ae76322b-452d-4804-ad8b-3e6292e293c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad84d70b-f62f-49a1-a071-5c615bb01bcb",
        "cursor": {
          "ref": "4afabb1b-02e3-4667-88a5-386cabca0b53",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "af8f550e-ffc1-47ab-82a2-596d906375b0"
        },
        "item": {
          "id": "ad84d70b-f62f-49a1-a071-5c615bb01bcb",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "78937b91-28e2-4b66-a795-4c22f984f5ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a4de08-4b7c-48b4-aa7e-57da7a44c8b7",
        "cursor": {
          "ref": "8d0b8193-ed4f-485b-9536-e8d5c7109dd3",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5bafb252-2c42-428c-bce4-3e95b27df6d9"
        },
        "item": {
          "id": "63a4de08-4b7c-48b4-aa7e-57da7a44c8b7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9aadf31e-67de-4b0b-929f-5c15c7a58150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a1e7e9-ff6b-4f18-ac1b-009c0e650ad9",
        "cursor": {
          "ref": "abe87153-ced1-443a-9321-0856e43c8bd3",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "32adb531-e15e-4c5b-96b4-90dc74e16e74"
        },
        "item": {
          "id": "95a1e7e9-ff6b-4f18-ac1b-009c0e650ad9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "cbb1ad09-6436-4319-ad21-4c0d963e0e46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75289219-f443-4ce2-bd93-57b1a699c51a",
        "cursor": {
          "ref": "53f3cc3b-683a-4203-9618-40d7ab4b23d5",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "58813889-bc28-49d1-bbdc-328239cc0cc4"
        },
        "item": {
          "id": "75289219-f443-4ce2-bd93-57b1a699c51a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8feeb293-e7a2-49eb-b244-182d2e8087ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab429765-c749-4ab5-93f0-1c2b57939102",
        "cursor": {
          "ref": "c1bf9e43-4137-47e9-b348-dd0d2e731b07",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "f4b8981b-5d51-4602-8e85-7f1214c73202"
        },
        "item": {
          "id": "ab429765-c749-4ab5-93f0-1c2b57939102",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7f732e3b-4762-47b9-bbd7-0f5f732dda47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd44e158-f3f2-4864-beef-901cf010e4ca",
        "cursor": {
          "ref": "2008c77a-0c86-4dce-8bc7-60d1f0a58c5d",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "05f713fd-316b-46f4-ab15-6d78a00d0a0e"
        },
        "item": {
          "id": "fd44e158-f3f2-4864-beef-901cf010e4ca",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8e9d7228-5419-4fe7-85d1-030da6938fc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1996b167-b128-4fe8-9e0f-0b6c7b0efe3e",
        "cursor": {
          "ref": "966658e0-abc7-4466-8ad0-a3cdfb579b26",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a71a2660-493a-4b6b-b367-a64998a2492e"
        },
        "item": {
          "id": "1996b167-b128-4fe8-9e0f-0b6c7b0efe3e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "7a5a966f-a702-47f1-bc64-4e2f154ae4c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c31b1f5-e235-4c84-b7ee-127d48cedbd6",
        "cursor": {
          "ref": "60866537-ba78-4ab8-a9b8-9d954c25d9d3",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9d71f1f5-81e3-40b6-90f8-6712d365e21f"
        },
        "item": {
          "id": "5c31b1f5-e235-4c84-b7ee-127d48cedbd6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "8dae6323-351d-4040-9b48-a25f13aa502f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12843ea4-1480-412d-b384-5bbb1315f6ce",
        "cursor": {
          "ref": "ec9eb51c-8b64-4e7e-b86e-d0fe3009ebac",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f34426ff-dcea-41f3-b40d-f4210c9d8187"
        },
        "item": {
          "id": "12843ea4-1480-412d-b384-5bbb1315f6ce",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5007da8b-bbec-44f5-9575-c6bef7cbe1e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0ed679-a4d4-456d-97f8-1b5145e3dfea",
        "cursor": {
          "ref": "e2ff3a3e-c8ff-4fdb-9043-cc1a056fc9ea",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "77426427-e082-4a8f-aac5-36112be23947"
        },
        "item": {
          "id": "1e0ed679-a4d4-456d-97f8-1b5145e3dfea",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "50a0cd62-871e-49e1-9738-509822633863",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3382f6-8fa7-4614-ac6c-8d8ffbe013ba",
        "cursor": {
          "ref": "bbf278aa-52a8-4457-8942-10c1706cbd29",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b36a4758-9e61-402d-889e-79272dfa3a68"
        },
        "item": {
          "id": "9b3382f6-8fa7-4614-ac6c-8d8ffbe013ba",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d08dbdb6-24a1-4bd3-9e2c-4df96e113517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c15aa6-329e-4efa-9499-0ea5e604fa57",
        "cursor": {
          "ref": "ecec9451-fd65-4f59-bbb5-8f874544ef9c",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "d776d9b2-fa75-4f7c-9d23-6a1f7e242f16"
        },
        "item": {
          "id": "89c15aa6-329e-4efa-9499-0ea5e604fa57",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1d98500a-3c64-4cfd-a422-7a98aec8a1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6500c79b-97f0-4636-acf9-c3006c424878",
        "cursor": {
          "ref": "b3b4e62a-7dbc-4374-9d4d-9c4f91fdfeca",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e9749353-aacc-4131-9ee8-40bfcc6a5cd5"
        },
        "item": {
          "id": "6500c79b-97f0-4636-acf9-c3006c424878",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d473ab1a-3761-451b-bde6-f6c8f783d6ab",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "529e46d2-3578-49d9-85d5-c7b48862a2a6",
        "cursor": {
          "ref": "af3a4d7a-9c52-40a3-a079-38a5b0465306",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d83e7801-aee8-40e8-9a31-6c2194eaaa7d"
        },
        "item": {
          "id": "529e46d2-3578-49d9-85d5-c7b48862a2a6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e0a0ff94-a94a-414f-9a7d-469484badf49",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e9fd0f4f-e4d7-4a4e-8a1f-3435ab03f97d",
        "cursor": {
          "ref": "69670892-025a-404b-89d3-aba7b7178acb",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "836b6c0b-3642-44d7-8195-26acd745cf7f"
        },
        "item": {
          "id": "e9fd0f4f-e4d7-4a4e-8a1f-3435ab03f97d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ff0efc8e-5c37-418a-a7b6-1ec0574b66ff",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2e22b72c-1cbd-41d0-b62a-0d4c4ff9fd65",
        "cursor": {
          "ref": "d1bf7ab1-f9ec-42ad-941c-a1ab7d0ecc5b",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6ca78edf-30e2-4e2f-a823-d7151dee59f2"
        },
        "item": {
          "id": "2e22b72c-1cbd-41d0-b62a-0d4c4ff9fd65",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d982c7ff-692e-49a9-be49-3109bc8733f9",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "1a2fff0c-afde-4e0f-810f-927cd4a2289b",
        "cursor": {
          "ref": "b2790084-0ede-4b33-8858-cf8c61d449c3",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ee69257a-135a-4879-a62c-168c70e80866"
        },
        "item": {
          "id": "1a2fff0c-afde-4e0f-810f-927cd4a2289b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5d6026f4-bbb7-41c3-8cbb-f04d73c09313",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "43df8a16-5220-4ddf-b21a-671589a89b2b",
        "cursor": {
          "ref": "2f2f40f6-6534-4c7b-bc9a-e6e699f7a2a3",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "05527984-2798-4ef3-a28e-57f2af2a7a72"
        },
        "item": {
          "id": "43df8a16-5220-4ddf-b21a-671589a89b2b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c04f1654-d17c-4270-b6b2-22f1f4245e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6c8cff7-4311-434d-8029-ca415e04522e",
        "cursor": {
          "ref": "cd39dfb2-b834-4588-96b6-730118597296",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c11476d1-9c26-4c38-aaf2-7183bb510759"
        },
        "item": {
          "id": "c6c8cff7-4311-434d-8029-ca415e04522e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "faae1bde-af93-4579-9583-f2b422183bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2193651-de8d-4234-af20-4e9280145c26",
        "cursor": {
          "ref": "ddd80b76-4f4d-464e-b5f5-798a6ca57709",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "688ebf8c-5b66-499a-b428-1c7169b76182"
        },
        "item": {
          "id": "c2193651-de8d-4234-af20-4e9280145c26",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "69799350-193b-4c27-a5ed-f16ff5576155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717f7695-c4dc-4c8f-9f75-849ad1c13e13",
        "cursor": {
          "ref": "36e02c13-1f2e-45ce-a7c2-f07c2f90709d",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "20b801e9-b7d6-45c2-8a6c-8bba7971be8a"
        },
        "item": {
          "id": "717f7695-c4dc-4c8f-9f75-849ad1c13e13",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "05f615c2-4eae-4f4c-b6b4-8ad60c77b1ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8565fa-9591-4bb3-b7ed-a6196f2d7793",
        "cursor": {
          "ref": "4755ab27-e05f-4cf0-a40d-ca9274750d11",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b9cb2cfa-e631-4120-ab3b-6cd422928c79"
        },
        "item": {
          "id": "cd8565fa-9591-4bb3-b7ed-a6196f2d7793",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "019eb441-3a26-49b8-9ce4-00a78f08dd14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3922894a-83dd-4915-82ed-c3c0feda701e",
        "cursor": {
          "ref": "a4787ffa-ba5a-477b-8e92-5c9c8c971a33",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "69a1657c-c927-41a1-be52-5793411a6bc9"
        },
        "item": {
          "id": "3922894a-83dd-4915-82ed-c3c0feda701e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "47e861a2-c8d9-45c0-85af-4bbcc5ac039e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fda0ca95-81e8-4767-8f1c-4cc809b81053",
        "cursor": {
          "ref": "0954e228-0d38-475b-b684-a58647fd49a2",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2660e6d7-df54-4615-a163-c6cd1081401d"
        },
        "item": {
          "id": "fda0ca95-81e8-4767-8f1c-4cc809b81053",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "30262518-37e2-427e-b843-b0150cc3e4ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583dbaa5-ce20-4881-b89a-e444d121ba4d",
        "cursor": {
          "ref": "d3878c12-707c-4e9b-a665-e8d455507782",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ffc5b167-7afd-4c31-93ab-12dbf4dfe8c0"
        },
        "item": {
          "id": "583dbaa5-ce20-4881-b89a-e444d121ba4d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f49860af-0210-447a-8a78-9a2f2cbdd34c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e56e7a-9b41-452c-874f-d755787ca8ec",
        "cursor": {
          "ref": "ee1553e5-bcb7-4509-aab3-4db2aba4bf0e",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bbc463a3-7e52-40d9-904b-38c8bbd8db64"
        },
        "item": {
          "id": "e2e56e7a-9b41-452c-874f-d755787ca8ec",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d20b79f2-7df8-4e47-b938-a821db25ab63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55614103-e581-4e74-a048-72e5311db5d7",
        "cursor": {
          "ref": "65496e6f-f295-4c48-adf7-09ef58800a4c",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "14d2de4d-0414-4ba2-919d-a5b356670e70"
        },
        "item": {
          "id": "55614103-e581-4e74-a048-72e5311db5d7",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "ad6006ee-9138-4e5e-9ef6-73ed1353da36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db3911c8-65e8-4fd1-8c9a-4d4692725113",
        "cursor": {
          "ref": "abadef39-1adc-4d4b-85eb-012e13f4e603",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "28f61169-68c3-4983-9e05-e71d41942308"
        },
        "item": {
          "id": "db3911c8-65e8-4fd1-8c9a-4d4692725113",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c5da086c-fba2-4f5a-9f41-babe82d100a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e206bc2-6c13-4fae-bafd-e8ac411b408a",
        "cursor": {
          "ref": "e2bacfe9-82e7-458d-b394-c08517801c2c",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "05a6313d-4e29-4334-94c4-57a3a91055a8"
        },
        "item": {
          "id": "4e206bc2-6c13-4fae-bafd-e8ac411b408a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "51aecfb2-1fb5-4a8a-b749-33a3a13cda3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec35862b-250b-41f8-a672-9519fd2e7904",
        "cursor": {
          "ref": "5a43431c-a61b-4ae3-a0f2-fbfca2321468",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b329d092-88e4-4d5c-84b3-c40c0ee0fdec"
        },
        "item": {
          "id": "ec35862b-250b-41f8-a672-9519fd2e7904",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "90ec227e-d47a-472c-989c-54cae0d097b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58628cf-ca45-4741-9869-64b44c189aef",
        "cursor": {
          "ref": "bc8ed1cd-6e4d-4bd6-9ba6-3215b4ac4109",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "12e6b936-b24a-4709-84f4-01aacc4c4c36"
        },
        "item": {
          "id": "f58628cf-ca45-4741-9869-64b44c189aef",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9188139e-4e8d-4d4a-b28a-38c78d0a923a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5f9d987-d871-40e0-98cb-79a49a02836a",
        "cursor": {
          "ref": "320237bb-aa71-4ab1-90a8-677d13ae1cc2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1d20a105-b812-4a12-812e-b564a793ec98"
        },
        "item": {
          "id": "e5f9d987-d871-40e0-98cb-79a49a02836a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c30b221f-ab6a-4408-9390-f879e997d642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36d720b-5816-4b8a-8497-fb736895f52b",
        "cursor": {
          "ref": "961e6f2b-fb41-4094-90ea-729ecc563941",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "65b43144-dac6-4150-a955-67c9335247b6"
        },
        "item": {
          "id": "a36d720b-5816-4b8a-8497-fb736895f52b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f1fce025-869b-4f74-82f1-e40ef5afd93d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96964d40-eef1-47c5-9ed2-04aff977e43e",
        "cursor": {
          "ref": "485f61a8-aaff-4d0f-b5a0-7470b3d188dd",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "232d0758-26be-4218-9623-f9e615489ef5"
        },
        "item": {
          "id": "96964d40-eef1-47c5-9ed2-04aff977e43e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "4d79bfe6-b155-46f3-aed6-c37f8e138aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c0604a-1a7a-4007-aba3-40ee7f3fba83",
        "cursor": {
          "ref": "1118007f-192d-4158-abed-65b6a082271f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e5a1faec-de68-424b-949b-c3a1f64e3a94"
        },
        "item": {
          "id": "61c0604a-1a7a-4007-aba3-40ee7f3fba83",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ba8798a3-bbf1-46c6-9dd7-2ddb9367c88c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4835207-89a4-4231-bb01-c744e1ace113",
        "cursor": {
          "ref": "26da2d9c-354c-48f8-9ad3-46c4691c07f2",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "efbdf896-d480-4242-8753-9fd02158b8cb"
        },
        "item": {
          "id": "c4835207-89a4-4231-bb01-c744e1ace113",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "654cf183-ce23-431d-b6b4-7b7eef12ef90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18af26c2-2655-4e09-9015-9adc9ae70e8a",
        "cursor": {
          "ref": "7bbe2bbc-14ac-4fe1-8752-82c3b409e5cf",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "22a066ed-2ad3-46b9-8900-57370202aa7b"
        },
        "item": {
          "id": "18af26c2-2655-4e09-9015-9adc9ae70e8a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "7d478743-001b-4cf1-8b56-0cc18a74b637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ee1f36-057a-484b-8d77-e87ab8611b75",
        "cursor": {
          "ref": "d5d52dd9-2916-4028-a215-475e35e1db28",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "51c1cbe4-8846-4c32-a3c1-6efc88249a07"
        },
        "item": {
          "id": "13ee1f36-057a-484b-8d77-e87ab8611b75",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3e8cfe5a-7cc5-4eae-a940-9687a63a7f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ee0497-b08c-485f-a8fa-b9927a141ca2",
        "cursor": {
          "ref": "5504102c-231d-47e2-9957-24edd311ad24",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "41d3b0c0-450f-4c14-8365-227d3108f09b"
        },
        "item": {
          "id": "51ee0497-b08c-485f-a8fa-b9927a141ca2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "43b6d6c8-6d4b-493a-98fb-9f7be016c6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf99399d-0a25-4dca-8054-955bc145e51d",
        "cursor": {
          "ref": "1e28a785-64df-45c6-b26e-dc65f1e95de7",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8057549b-d8cd-4045-bc5c-b0f472fccda4"
        },
        "item": {
          "id": "cf99399d-0a25-4dca-8054-955bc145e51d",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2114e9c2-a653-4efc-95fe-acc92ba50758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b96b87-e500-4897-b20a-4950c2cd40ad",
        "cursor": {
          "ref": "f474127b-13be-409e-b145-df066053f9ac",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7311a221-3e04-4bbe-8f27-73de4da07c19"
        },
        "item": {
          "id": "c4b96b87-e500-4897-b20a-4950c2cd40ad",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f1ff2a7d-1def-4ec7-90dc-88d5f9e09b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001d7fa1-c336-4665-a3cb-5827ac3be34a",
        "cursor": {
          "ref": "db5fa318-c9b5-4970-9a62-193f2def79a5",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "59b09355-4db5-4fd8-a958-2ba496ac0533"
        },
        "item": {
          "id": "001d7fa1-c336-4665-a3cb-5827ac3be34a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "494cb7f5-a90d-4b67-b1a1-fdd503eea338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07fbfc6a-76a0-4ffe-98cd-0170ff3579b7",
        "cursor": {
          "ref": "7a1bfec7-85f2-44df-8840-d44b21252b84",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6171c78b-3cb8-4fa3-a8aa-966f0eab2ce1"
        },
        "item": {
          "id": "07fbfc6a-76a0-4ffe-98cd-0170ff3579b7",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f161f5b2-e3c9-4756-9b3e-64a20edbbe62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b74b4b2-5503-4adb-b6d1-45ee156ced85",
        "cursor": {
          "ref": "c65e8dc5-91e3-4dff-8fd0-800dab527dd8",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ef6ddb7d-655a-4ded-9ae1-cfa4be8cf6cf"
        },
        "item": {
          "id": "5b74b4b2-5503-4adb-b6d1-45ee156ced85",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b268fbdc-8fbb-4381-870e-dc6aef5ed867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87722c8b-5ba5-4521-9194-c3bde6a07a1d",
        "cursor": {
          "ref": "3ad9869c-7337-4418-8749-ca4272411751",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5aaa8de3-9a2e-49ab-a100-51678838b1ec"
        },
        "item": {
          "id": "87722c8b-5ba5-4521-9194-c3bde6a07a1d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e9a280ad-29ef-45ea-a3e0-cda3aa9d88c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f22afcb5-6958-4175-bcc9-5b71eec978dc",
        "cursor": {
          "ref": "7e1a4dc4-565d-4abd-9261-bd7831ca41d0",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7454308a-b008-44b0-84c3-2ba6f16c1a50"
        },
        "item": {
          "id": "f22afcb5-6958-4175-bcc9-5b71eec978dc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "8c2b0c34-8a61-4f18-b904-a937fd768b5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d124c12-1e76-40db-b498-c7e4332f3b35",
        "cursor": {
          "ref": "a229a187-80ce-4962-9d55-729a45388b4c",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "32ffba74-361d-40ab-84ae-aff0f315560a"
        },
        "item": {
          "id": "9d124c12-1e76-40db-b498-c7e4332f3b35",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "64800c5b-b4f4-455b-8c9c-064610a6595d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60941eb-0b43-4a06-a8c6-509f43f51b37",
        "cursor": {
          "ref": "d9610774-f40d-4724-8f77-f17939527c44",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f107a25d-0c65-4665-84e5-6d847310c3ad"
        },
        "item": {
          "id": "d60941eb-0b43-4a06-a8c6-509f43f51b37",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "29974c07-5ba8-4027-9ea5-c3e202be5c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db73581d-8f94-4de8-b60e-b7f33d28d06b",
        "cursor": {
          "ref": "9c6c9138-e1a6-4334-a9ad-90b065d8c694",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bbab7073-584a-4dc4-aaea-d37d7879c1f7"
        },
        "item": {
          "id": "db73581d-8f94-4de8-b60e-b7f33d28d06b",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "3b85ff9f-e869-471b-b58f-64033fff9177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5664de65-bd0f-4632-91c9-758662a7430e",
        "cursor": {
          "ref": "9c96c234-a50e-42d2-8ad6-8621dcc2451c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eb010272-990a-4af5-a972-1a48a306ebeb"
        },
        "item": {
          "id": "5664de65-bd0f-4632-91c9-758662a7430e",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "c9933080-6908-464a-a58e-0462a8384084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "5876ad00-69f4-4922-afa1-a7b7d28e5ada",
        "cursor": {
          "ref": "d8b2ad25-bbba-4421-958d-49f2eebf367e",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "5a689ef3-acb5-4902-9a9e-8f948bf198b8"
        },
        "item": {
          "id": "5876ad00-69f4-4922-afa1-a7b7d28e5ada",
          "name": "credentials_issue"
        },
        "response": {
          "id": "40e14d19-36cd-4674-a1bd-aa967d36f355",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8c0173-50d9-42ec-8854-f8fd5a573d2c",
        "cursor": {
          "ref": "29204810-6e6a-450b-9e2d-e5a557f47136",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7532137a-bccb-40fb-9fc9-f7484fb79cb2"
        },
        "item": {
          "id": "8c8c0173-50d9-42ec-8854-f8fd5a573d2c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b02b10f8-6b98-4c2c-be06-429347dc29fa",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f3738f-8b9f-46d7-9505-bfab53feec39",
        "cursor": {
          "ref": "3f7a6632-df53-40d8-8583-18de9f2f636a",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f4c0d79b-a3f2-4faa-a9f2-b07ca70449c9"
        },
        "item": {
          "id": "c3f3738f-8b9f-46d7-9505-bfab53feec39",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f391f615-d4e5-436e-b36c-efdf2abe834b",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "69efe29a-a2ab-4cda-892d-00584914e8fe",
        "cursor": {
          "ref": "cfc01c2d-61a0-4cf5-b34d-4dbf41480777",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0aa453cc-f284-48dd-84f7-da3c0a04f405"
        },
        "item": {
          "id": "69efe29a-a2ab-4cda-892d-00584914e8fe",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1df1cbc2-6e83-49d8-9aa5-94a9c707c142",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4776207c-f862-4dc7-8664-a9e43c00829c",
        "cursor": {
          "ref": "3b2f9b09-234a-48d6-8582-60094b09bbca",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "cb2af79d-66e7-43cb-a3cc-3983d77e2d91"
        },
        "item": {
          "id": "4776207c-f862-4dc7-8664-a9e43c00829c",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "4484aab7-b9ad-43e9-8440-4a1b15342a47",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-06-08T00:38:21.517Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-06-08T00:38:21.517Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "dcfdba1c-7072-40c4-a0bd-1fe58cf489b4",
        "cursor": {
          "ref": "c7325f28-07b4-4115-ad21-24ca74c818fd",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7c8a55c9-2e74-4a04-b59d-cf78e30132a5"
        },
        "item": {
          "id": "dcfdba1c-7072-40c4-a0bd-1fe58cf489b4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "82610a13-8d2a-454e-8b8b-ccd4f9be966f",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13e470c-1bf5-49dd-b287-8ba030b86168",
        "cursor": {
          "ref": "80a657df-aaac-4346-8944-51a7c5e70543",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "99a76e80-6461-4ae5-9376-2916b702fd1a"
        },
        "item": {
          "id": "b13e470c-1bf5-49dd-b287-8ba030b86168",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "fbd03014-0b5d-4bb3-961b-f4c9f91a0f53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7c980d-83f3-4789-a65c-8beb75c7599b",
        "cursor": {
          "ref": "6ad076ff-921b-4cf4-9233-381e01587064",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "6c444848-daf3-4575-a7eb-053b4bf88b15"
        },
        "item": {
          "id": "dd7c980d-83f3-4789-a65c-8beb75c7599b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "640f7ee5-a510-4676-b1dd-12c26016b5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c0f530b-db09-436d-a8e5-2ccbb65a789a",
        "cursor": {
          "ref": "a13faf5d-3ee3-4182-969e-849b24e3fa1d",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "da30eeca-0375-4558-af3e-ec6c3f9f6e77"
        },
        "item": {
          "id": "3c0f530b-db09-436d-a8e5-2ccbb65a789a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1c308b42-6cac-457e-84a9-7c47a9a227a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df9097d3-dd5f-4298-9398-b8ce15c04ea5",
        "cursor": {
          "ref": "02d009c6-415a-4f76-a831-8c087dbfc36c",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b233d275-d093-4ffc-9626-6b59d884352b"
        },
        "item": {
          "id": "df9097d3-dd5f-4298-9398-b8ce15c04ea5",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3678c198-db1c-4a74-a536-453ec5a63cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108b9535-f88a-4c62-819b-c6b8a74bc48e",
        "cursor": {
          "ref": "7142da1a-db07-413d-92d2-6caad9ea2fe7",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "7978a71d-8062-4506-bca3-0aca5823b181"
        },
        "item": {
          "id": "108b9535-f88a-4c62-819b-c6b8a74bc48e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "d9d7ece6-0c2f-4f48-a6e1-cdc08e12e118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0dd4ca2-4a01-449b-81ce-db5b2f37bdcb",
        "cursor": {
          "ref": "61bf3114-a4c4-48a1-8a55-c986269b25d9",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3dad8901-8469-4d3f-8254-564b6dca2eba"
        },
        "item": {
          "id": "c0dd4ca2-4a01-449b-81ce-db5b2f37bdcb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "94388d20-5f84-4ee9-b75e-a16bc27a8e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f30befb-7607-4b83-b46d-cb5580e5e11b",
        "cursor": {
          "ref": "05fb38ba-b433-46bd-b35c-40a9281987a3",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "54808e68-0b1a-4195-860a-35ddca400a25"
        },
        "item": {
          "id": "7f30befb-7607-4b83-b46d-cb5580e5e11b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2fa66739-9fed-41ab-bb2b-38290f1cf486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5500bcab-a725-4d72-ae38-0b0acfba16ad",
        "cursor": {
          "ref": "4b1520d9-fd30-4be3-93a4-905ab0d1ec68",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1fe49671-e7a9-4ab7-8b2c-850dacbde4e8"
        },
        "item": {
          "id": "5500bcab-a725-4d72-ae38-0b0acfba16ad",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ff9f405a-4ebf-499e-817f-658f802d9a16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9c7659-89bd-49dd-965d-cfeea18c342d",
        "cursor": {
          "ref": "3ffb3ef3-b64e-4b17-bb9e-e50152f15b35",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d8e7d5c4-3c7f-4511-be18-ff4aa212486e"
        },
        "item": {
          "id": "2c9c7659-89bd-49dd-965d-cfeea18c342d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c7866b87-3dca-4b60-98f7-edbe067bbd94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c7a9d9-6a7d-4c9d-b48e-27cb416f95d1",
        "cursor": {
          "ref": "29bf1923-67ec-4cc4-b366-a8284cd6c60b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "054d7e19-ba93-4da5-b718-d8afd5648d93"
        },
        "item": {
          "id": "e4c7a9d9-6a7d-4c9d-b48e-27cb416f95d1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6c1bfd06-6248-4df5-af86-fc397757761a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f07f35d-ef1c-4b3d-88cd-1aaf300b95be",
        "cursor": {
          "ref": "aef17efe-71d8-430a-afd4-4e84c416cec9",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "fed4d237-8591-4dcd-a5f5-d2eb58941a30"
        },
        "item": {
          "id": "4f07f35d-ef1c-4b3d-88cd-1aaf300b95be",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "838a2175-3809-475c-b587-e33de939fdeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06e7afa-089e-4b43-9fa0-4071c24c8a61",
        "cursor": {
          "ref": "a22ae92d-56c2-49f5-ab70-2077c6b7de16",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "1505a11c-80bb-470c-bb40-89ad9a9b0277"
        },
        "item": {
          "id": "c06e7afa-089e-4b43-9fa0-4071c24c8a61",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b82c957b-30ef-42ad-9958-0fed782a6ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6c2a126-8ebb-4b1e-b084-5efa956b411e",
        "cursor": {
          "ref": "02e11728-d5bd-4e83-abda-b4d145daaebf",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "842a029d-1fe2-428d-b91e-c58ce4773163"
        },
        "item": {
          "id": "a6c2a126-8ebb-4b1e-b084-5efa956b411e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "daad73a6-9afe-4d34-abb8-6d1d54b75af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c028f11e-fb59-4006-bac2-41c3ce184a89",
        "cursor": {
          "ref": "99c0fe44-76a7-4e5e-a974-c60c97f75349",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0acb6880-012d-4dea-b4d1-43ccd2cca551"
        },
        "item": {
          "id": "c028f11e-fb59-4006-bac2-41c3ce184a89",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "a5e119dc-f742-49fc-b770-287b0590c15d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e69f3992-961f-4cf9-bbf8-6b9d997e5855",
        "cursor": {
          "ref": "ad5a721b-0c79-4faf-b61d-5ebf818d6422",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "c8b7ff79-ec48-4fea-9d7f-bb5aec99b984"
        },
        "item": {
          "id": "e69f3992-961f-4cf9-bbf8-6b9d997e5855",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c78a2f79-3204-484a-adc4-f7f97a41015d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c73896-33c8-406f-9c00-708ccd11224d",
        "cursor": {
          "ref": "f6f1dfac-c240-4996-93bc-c355e920541e",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "df976c1d-4f85-4bbf-aa34-0954bb4bc986"
        },
        "item": {
          "id": "e5c73896-33c8-406f-9c00-708ccd11224d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c3dc504f-f11a-4201-85e3-532ccd654a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89b62bb-0226-42a5-8666-dd8b06be94ce",
        "cursor": {
          "ref": "54f5f428-1961-420f-89dc-36b87efb8fff",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2740a53e-589f-4572-adc9-49b31d32a2dc"
        },
        "item": {
          "id": "c89b62bb-0226-42a5-8666-dd8b06be94ce",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c2ffbc88-14c9-4aab-8bab-d985b25045c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66e5d71-b4d8-4937-8029-2a423d643d6e",
        "cursor": {
          "ref": "17b114c9-c5fb-4136-997f-437ec0027bfb",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9bed6350-ee64-42ed-b162-ebad7efddbbc"
        },
        "item": {
          "id": "e66e5d71-b4d8-4937-8029-2a423d643d6e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8d179ba6-daa7-4237-a16b-dcd34858ee80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab2a4a5-a04b-4d56-917a-237b7552f140",
        "cursor": {
          "ref": "c911018b-1944-473a-87b7-4633e106c246",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2559b286-9197-47e8-927f-5d718a1f3543"
        },
        "item": {
          "id": "5ab2a4a5-a04b-4d56-917a-237b7552f140",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "19edef7e-5ec6-45b8-af53-8c9e7476c133",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9c1a5f0-1f93-40b8-94e1-eb9362257d66",
        "cursor": {
          "ref": "d4a8ca00-05a4-4668-bd9d-4b5435fecf1d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7e679af0-3d46-4790-9851-7a38fb0bac71"
        },
        "item": {
          "id": "e9c1a5f0-1f93-40b8-94e1-eb9362257d66",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6922abbd-7b71-412a-a352-3e8a40b7f6d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a06e1486-7476-4a30-871d-19f5e435c456",
        "cursor": {
          "ref": "1a3cfb53-1bb9-4a50-b2fa-9fc20fbb2f4c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7b966bed-244a-49a2-938c-327ea102fb80"
        },
        "item": {
          "id": "a06e1486-7476-4a30-871d-19f5e435c456",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9fe18a94-0f22-4ef3-8f02-31f761496d5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c7aaa73-f557-4d02-afc5-42e4793eaff5",
        "cursor": {
          "ref": "e7e8ee0c-6867-4a66-81f6-be5ce1f347be",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "81963352-8f2f-4dad-b774-9c7afa7a81d9"
        },
        "item": {
          "id": "8c7aaa73-f557-4d02-afc5-42e4793eaff5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "61c1bc5a-b09f-4a74-8eb5-4e1c35b01552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e32ee4-d175-46f5-a83a-6585ef980f21",
        "cursor": {
          "ref": "31c79407-ee07-460e-a6a4-127fa8368352",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f25fe244-27c6-47b3-9f34-b01be6f74504"
        },
        "item": {
          "id": "26e32ee4-d175-46f5-a83a-6585ef980f21",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2a7291fa-c10d-41be-94d8-e62aa925f4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ba508c-7656-498f-a0b6-56d2cc42bb81",
        "cursor": {
          "ref": "90755245-a9bc-4ded-9fc3-e54ac8797d5c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "fec81ca8-135e-4163-9b13-182f383c961d"
        },
        "item": {
          "id": "b1ba508c-7656-498f-a0b6-56d2cc42bb81",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2ff62a9d-ef34-4d03-a295-112f47c82286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55b70dc-9d44-43e4-a3ee-a080c9dfb347",
        "cursor": {
          "ref": "7d4975ad-39a8-4a96-b930-4599828ed064",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6872d7a4-4212-4c62-963f-ec85b74fa817"
        },
        "item": {
          "id": "a55b70dc-9d44-43e4-a3ee-a080c9dfb347",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d4804679-62ef-41cc-aa01-384c8a307a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8a9a48-013a-4f77-890a-b201374cf037",
        "cursor": {
          "ref": "ae9ab076-d891-4553-a653-c6d92417f9ec",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "af5cd5b2-0cb4-40d6-918b-e68eeab6d72d"
        },
        "item": {
          "id": "4b8a9a48-013a-4f77-890a-b201374cf037",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "97af7d88-3b62-4456-8a67-8a2536fbc08e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e10fe3-48de-4bc0-b85d-933ea4cd4390",
        "cursor": {
          "ref": "09a6aa93-ae08-4b81-8786-a408613a9679",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9124cf75-a472-45cf-84d2-13703c968df9"
        },
        "item": {
          "id": "d8e10fe3-48de-4bc0-b85d-933ea4cd4390",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "08933e19-c03f-4f60-9338-bdb2642a7e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6da941-efec-4984-8a9d-6ff69563a507",
        "cursor": {
          "ref": "00fa1d44-0037-4200-a266-a1b95eaaeaad",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "123a6376-1e9b-4321-9e6f-5d030426e0a8"
        },
        "item": {
          "id": "4f6da941-efec-4984-8a9d-6ff69563a507",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "044c660e-3468-4c16-b2af-511892b543db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dff2057-7782-4820-adcd-5e02312ff2d0",
        "cursor": {
          "ref": "db7aaf29-fb14-4363-8a80-a8f852d6ba14",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9c63684d-68b6-42cb-b7b9-caaf03e14c55"
        },
        "item": {
          "id": "0dff2057-7782-4820-adcd-5e02312ff2d0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bea260cf-9dc2-4330-9c93-217c35a6fc4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e807a88b-7a97-4087-8702-668cc66e164c",
        "cursor": {
          "ref": "d0efd273-9f53-4fc7-85fb-86adbacb670e",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d71283fa-9969-481c-988b-e5aae930bca8"
        },
        "item": {
          "id": "e807a88b-7a97-4087-8702-668cc66e164c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "7b1a3ba0-aaa3-4cad-b4e1-8bdcdfc7b46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d49d21ad-085c-4285-b871-4396204f962f",
        "cursor": {
          "ref": "c22bc85d-f470-43ee-9350-2588523e3b14",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "66a5a890-1312-4397-bc58-fde542d8ea47"
        },
        "item": {
          "id": "d49d21ad-085c-4285-b871-4396204f962f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "5eebb5cc-2a94-41dc-9a9f-0b9640e72079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6581e9d-5843-48c7-9cd6-f2101e7118be",
        "cursor": {
          "ref": "0247cb6b-8300-421e-a6d8-8f6c13698ca1",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0707ca2d-ea3a-42c8-beea-2be4b254fd8b"
        },
        "item": {
          "id": "c6581e9d-5843-48c7-9cd6-f2101e7118be",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "c28d40da-5c14-4bbd-ac86-05fb872110ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666d07b3-919d-47a8-bbc0-32b4514b265d",
        "cursor": {
          "ref": "f1444bea-39da-45c8-84eb-cb7e01257a2c",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "8101e442-e334-43b6-b891-1a343b83a8ad"
        },
        "item": {
          "id": "666d07b3-919d-47a8-bbc0-32b4514b265d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b2f58ad5-a71b-4d09-ab8a-683faf059965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a86453e-f999-4e77-b7cb-0f3ad4a91bcb",
        "cursor": {
          "ref": "14f1bcef-1df3-4ad3-a90e-9ae988044dae",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "810a50ad-368b-4bc3-9e52-000ac315871a"
        },
        "item": {
          "id": "3a86453e-f999-4e77-b7cb-0f3ad4a91bcb",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cb5eac25-42a5-4ffd-a661-f93c7f609e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32644d5-128b-4090-891c-90ff1e64fca9",
        "cursor": {
          "ref": "e0796097-3859-413f-ae43-e8e7496ba310",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6c47e98b-fe30-42cf-9d10-e7c5c6937241"
        },
        "item": {
          "id": "e32644d5-128b-4090-891c-90ff1e64fca9",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "40ed95f7-bf8c-4b08-aa7e-7612efdaa6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83598ce-c26c-4ddb-a692-6ca8fff1313a",
        "cursor": {
          "ref": "5b3253fb-1462-4f8a-a78f-fe2abde094d1",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2cbd4b65-cb96-4a1d-a83a-67f7a16cbad8"
        },
        "item": {
          "id": "d83598ce-c26c-4ddb-a692-6ca8fff1313a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "02c67a92-9308-42b0-b2bb-9d95cdfbd2f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7828c7a-ebfe-44e0-bb2d-69b1ca34febc",
        "cursor": {
          "ref": "cc89a41a-406f-4dd1-8ae3-c2e74a11f5bb",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "73b3e4f9-594a-4c5c-8596-a7a1fccd4898"
        },
        "item": {
          "id": "f7828c7a-ebfe-44e0-bb2d-69b1ca34febc",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "6659f6b7-6c7d-4dce-8b59-b7b80c0024b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdf03879-22c2-466b-83cd-14d741ba9466",
        "cursor": {
          "ref": "d84021fe-ef28-4cc8-b467-7e019dd1c734",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f26eff68-7579-4696-bb2c-ab6fb0cbfb29"
        },
        "item": {
          "id": "bdf03879-22c2-466b-83cd-14d741ba9466",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "18e297ed-7def-4db4-9f1c-70641b886551",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "502f7bee-843b-41d4-b8ce-bb2614df2ba6",
        "cursor": {
          "ref": "04d5f149-d547-4083-aa2e-c93d9a295e59",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "8eddd11c-4a21-42a3-8fe6-9ff4bb0e82eb"
        },
        "item": {
          "id": "502f7bee-843b-41d4-b8ce-bb2614df2ba6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "72bdb1a7-f058-416d-aa4a-b622a0dbb837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a300cdf-2acf-48a3-9197-0c1e09c1a96a",
        "cursor": {
          "ref": "e82ef2eb-981f-4048-9fa3-f40469947398",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "97a1ec51-2849-4684-a460-1fc4fa66c687"
        },
        "item": {
          "id": "4a300cdf-2acf-48a3-9197-0c1e09c1a96a",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "20217847-7f27-4d56-a8ef-34ccc1f5a7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a2bf98-2c9e-49a9-a8b5-15058ff85586",
        "cursor": {
          "ref": "4cdf8ea6-0326-4559-99fe-e0ab6b89b8b4",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1576bbef-5011-459d-904f-cf4a0e99fa4b"
        },
        "item": {
          "id": "27a2bf98-2c9e-49a9-a8b5-15058ff85586",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "02322f6d-289d-489d-9d20-88b66002bf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470d0cd9-e8b2-4f93-b0dd-a2d6a2ca6c9c",
        "cursor": {
          "ref": "8d9c4db8-613c-4ef2-adf1-31e35d32a3a1",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0f7f266e-9739-4333-9691-4f84e2b20dd4"
        },
        "item": {
          "id": "470d0cd9-e8b2-4f93-b0dd-a2d6a2ca6c9c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "933a52b8-c1b2-424a-be82-57e354a8b929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb348f5-d944-4570-b780-1adf9b551dc1",
        "cursor": {
          "ref": "658eb079-565e-47e6-9f84-5853445087f0",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d7fa8e07-9ccc-48a4-954d-b07f1db833d4"
        },
        "item": {
          "id": "1cb348f5-d944-4570-b780-1adf9b551dc1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "a78a4103-f8e7-46b2-ae0f-a90f0d754dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e4de7f5-011e-439d-854d-28db7153bc1d",
        "cursor": {
          "ref": "6514c8f5-1cd4-4e38-9125-30777cb29eb9",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "237d3a4d-c05e-4b5c-8bef-b6dd1e5354dd"
        },
        "item": {
          "id": "9e4de7f5-011e-439d-854d-28db7153bc1d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2cf40d59-b74c-4e96-9293-90f910ee493c",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "00301ef7-3e9f-4dd0-94e2-f5519a6b4296",
        "cursor": {
          "ref": "2042087f-3ca8-4eb3-bef9-78d3da0d4c58",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b48c5ff2-ea24-4461-aa07-360787fd6d57"
        },
        "item": {
          "id": "00301ef7-3e9f-4dd0-94e2-f5519a6b4296",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "36973079-e728-49e5-8d03-43b64fb2484e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18264d21-d084-4ae2-a416-71bf9b2eb1b7",
        "cursor": {
          "ref": "f04f89bc-19bc-40a4-ba1f-831b9f950199",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "eb0592f0-6613-4529-94dc-9e21b24ef3d6"
        },
        "item": {
          "id": "18264d21-d084-4ae2-a416-71bf9b2eb1b7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0549c8e7-2667-4a66-a0fe-62c4450b9b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b0919c-ee7e-42e0-8254-e650d04a125e",
        "cursor": {
          "ref": "15ea845e-cdd5-44cd-b19f-52bd4ae2bc68",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fc58a336-9994-4cb7-a4c0-80c95fd53508"
        },
        "item": {
          "id": "06b0919c-ee7e-42e0-8254-e650d04a125e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8b7229cf-3e2f-431f-ab6b-927b78b3fd76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30df9e87-9b2b-42c8-93a0-f0b5cafaf71b",
        "cursor": {
          "ref": "2ba5f3cc-779d-4b74-8e89-79259a422a3c",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "65c842a3-142e-46f8-aa9e-605ce5fb1a91"
        },
        "item": {
          "id": "30df9e87-9b2b-42c8-93a0-f0b5cafaf71b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "db0b8ee2-0d47-4bf2-93b8-99d15c10400e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ffc94d-3507-4c3a-a7b6-4cc9261c6237",
        "cursor": {
          "ref": "e053f038-5c65-4f72-a044-eb343b25a7f5",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "3ff460d7-270e-4f71-8257-e55d15c9404a"
        },
        "item": {
          "id": "35ffc94d-3507-4c3a-a7b6-4cc9261c6237",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8430bab0-464e-4566-961d-1948db8b02b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a673e99a-f54a-480b-bbf1-f270368060cc",
        "cursor": {
          "ref": "2338281e-5547-48d3-92c0-1d108bc62871",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "2f6de998-3f61-43df-b003-16654cfbb239"
        },
        "item": {
          "id": "a673e99a-f54a-480b-bbf1-f270368060cc",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f30847c7-143d-4c38-908d-be3e1ad7cec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "797d6515-6c90-44c2-bb3c-7f275a18f228",
        "cursor": {
          "ref": "d860fbc5-c715-453b-91dd-273e86dc8b37",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "510b081f-0506-460b-a94e-91e297b95dcd"
        },
        "item": {
          "id": "797d6515-6c90-44c2-bb3c-7f275a18f228",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ade75c3c-aed2-4094-adb9-06bc14c74d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c414f28-8d80-4c91-b05b-ee3f111bf763",
        "cursor": {
          "ref": "a2d97987-a596-47c3-bf4f-673d349ca83f",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a91b6f31-a13f-47f8-9b2f-70f6935133d1"
        },
        "item": {
          "id": "1c414f28-8d80-4c91-b05b-ee3f111bf763",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "16255b04-3cac-4e9b-b395-dc40bfae58b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e69e86-9928-438a-9e33-9f90e74ea8ba",
        "cursor": {
          "ref": "413e94cc-cddd-418c-9de1-48534cec9dfc",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d935b2a3-04ad-4d36-9924-0906d30afda3"
        },
        "item": {
          "id": "a0e69e86-9928-438a-9e33-9f90e74ea8ba",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "879946fb-c771-49ae-8f43-474fddfedd52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a97fdbc-aeb0-467b-be56-59e5f238bd26",
        "cursor": {
          "ref": "a84c9c43-4889-4915-a323-a227f9270a57",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "449106f8-6599-4aac-90f8-ef795bcbe7b8"
        },
        "item": {
          "id": "0a97fdbc-aeb0-467b-be56-59e5f238bd26",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "9a21c1c5-f9da-4fc5-946b-dc7aa6bd7136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0542a9d-b07d-4c14-83ff-4468c22a1746",
        "cursor": {
          "ref": "d810a27a-db90-40c2-8622-69fc25863f1b",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "bc4da77c-4ff5-40aa-a86e-ae9753c27eb9"
        },
        "item": {
          "id": "f0542a9d-b07d-4c14-83ff-4468c22a1746",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d46b2153-07c6-4aa1-b710-e313a37cbded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3061853-e5d8-485c-9509-e9cb13fe58ff",
        "cursor": {
          "ref": "9bc96a63-e87e-4a1d-ae1d-e8714a5386fa",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "405634f6-5bfd-4984-9068-0d9db6b9c63f"
        },
        "item": {
          "id": "f3061853-e5d8-485c-9509-e9cb13fe58ff",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a4a7b20e-5826-4ecb-8ba5-4a1865719629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e551fcb4-1dd9-497a-9126-7ab66953173e",
        "cursor": {
          "ref": "235227b5-edfb-46e9-96ea-af441d8ad64d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c4ff720b-621e-4362-904b-b623a4b6e6f8"
        },
        "item": {
          "id": "e551fcb4-1dd9-497a-9126-7ab66953173e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "308241d9-2ffe-41d7-bdb9-4b55985cef89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ea6c40-cddd-4a4a-b1bb-e59365a024e1",
        "cursor": {
          "ref": "28a30835-7aae-465e-99e9-d7a6194ba515",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b4566c91-9c72-47e5-8fd2-8c79c85d74f5"
        },
        "item": {
          "id": "f8ea6c40-cddd-4a4a-b1bb-e59365a024e1",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b3684322-5582-472c-91af-f5f6f8750cc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d038410b-a954-474d-9843-0f9a85775616",
        "cursor": {
          "ref": "ec7958de-4588-4bf1-8d5c-273773865960",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "16ce59e5-994e-445a-b73c-fbc0c21ab2a7"
        },
        "item": {
          "id": "d038410b-a954-474d-9843-0f9a85775616",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "532b67e9-03ef-4b36-a025-3240174c3cb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7941878-0049-4139-962d-161e84d0c207",
        "cursor": {
          "ref": "f866ca5b-45e3-4e7a-a8cb-bac2ab1315d0",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "dad74bc6-b091-454f-9e84-9775342c77ea"
        },
        "item": {
          "id": "f7941878-0049-4139-962d-161e84d0c207",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c5034276-6064-49c0-b6d3-6994d5207818",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8e39f6-577f-45a9-a6e8-d04768968281",
        "cursor": {
          "ref": "e55bb4b5-3e61-40ad-a6b4-00b61859741c",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "1d9d43a6-0d54-4099-9654-91b6982493d7"
        },
        "item": {
          "id": "ad8e39f6-577f-45a9-a6e8-d04768968281",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c7a9da22-41bf-411a-b676-dd1da49f3f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae43ef73-d65a-42e7-9572-41389344eb8b",
        "cursor": {
          "ref": "e958b1f6-8ac9-45bd-95dc-3f9ef6f82fe0",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5f720522-b8d5-4c5c-9278-f17536b83f6e"
        },
        "item": {
          "id": "ae43ef73-d65a-42e7-9572-41389344eb8b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c1b10f67-7618-4d85-a158-c68f454074a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eed7807-2b84-4b1d-8652-94b6063a0867",
        "cursor": {
          "ref": "697768a9-4ca0-406e-a981-b83d385a930c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e722bd6c-0345-49cc-b566-348cbaf215c5"
        },
        "item": {
          "id": "2eed7807-2b84-4b1d-8652-94b6063a0867",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f64494c9-46a6-48dc-a3a1-3aa83d3ea028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebf58da-e8de-4643-9b18-4c9d9f4344af",
        "cursor": {
          "ref": "6743f8a6-d73a-429b-8a0d-5f36a845aa66",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "86607e6a-7661-4ef3-b805-44c46114f5c2"
        },
        "item": {
          "id": "cebf58da-e8de-4643-9b18-4c9d9f4344af",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "4ed7af25-e534-43d8-ac47-c45c7ed95d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b3f962-8240-45d0-85b4-d9eeb29fbb9c",
        "cursor": {
          "ref": "564d3768-9252-496a-a889-dc5ff7dfa194",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1a6b90ba-eae2-4aa5-b164-dde6e8e3c574"
        },
        "item": {
          "id": "51b3f962-8240-45d0-85b4-d9eeb29fbb9c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cf88e250-e086-4ce1-9fb5-bd2f69a1fa05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6d158bc-5ff1-4bba-9ea9-ba734fa80012",
        "cursor": {
          "ref": "312bf63c-44cb-4658-ba68-efddbaba35b5",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c46d224f-0a28-472b-a91f-412292527892"
        },
        "item": {
          "id": "c6d158bc-5ff1-4bba-9ea9-ba734fa80012",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c3882506-2af1-49f8-bf9e-fb9246af2b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f81a7c50-d383-49e7-8c56-f855d2b31b3c",
        "cursor": {
          "ref": "d8024fcd-c553-4d4d-bcd7-34afac5d74fd",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "67d0704d-2374-4cf3-8fde-a28d863a5ae8"
        },
        "item": {
          "id": "f81a7c50-d383-49e7-8c56-f855d2b31b3c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "b1179a70-064b-4e08-8581-556bbedf15c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61bbd1c-e431-4885-8591-4ec73806a9db",
        "cursor": {
          "ref": "56cd23dd-2541-4d38-aa48-6501190f409c",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "fee90a10-7e49-4dc3-96a6-a93d03e1f1ca"
        },
        "item": {
          "id": "b61bbd1c-e431-4885-8591-4ec73806a9db",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "72402197-60e0-4cdf-81ff-0618182d6201",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c3f2d3-9bfc-4dbb-a412-33ce3b777c4d",
        "cursor": {
          "ref": "46caed64-41ed-4d8a-b561-24cc19116e5c",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fe5387d7-0423-4730-ba08-dfae20493cfd"
        },
        "item": {
          "id": "48c3f2d3-9bfc-4dbb-a412-33ce3b777c4d",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bc00f8c4-a6ec-4baa-9e19-23d42df015df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794f2a20-a8ee-470c-81dc-321e7c725322",
        "cursor": {
          "ref": "d6bb5a5a-a4d2-4a90-814b-164392a34b92",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "1705c76f-f258-4024-acb1-bcc22626a0f1"
        },
        "item": {
          "id": "794f2a20-a8ee-470c-81dc-321e7c725322",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "abe55788-758b-4466-b6d1-3be0c5b32222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d67953-de63-41ff-887e-4546f8c912e9",
        "cursor": {
          "ref": "9a934ec8-d4ab-484c-9d61-487baed9bb08",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f8185c21-794f-4f34-afe4-5c833e0d57af"
        },
        "item": {
          "id": "d1d67953-de63-41ff-887e-4546f8c912e9",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "19d716a8-0801-46c7-9bbc-5c628c074fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65e255a-92ff-40f2-a634-62463c1d6dbd",
        "cursor": {
          "ref": "405a7bc6-373d-40f7-8702-abe56391edb0",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f9ac077d-ca3d-48a3-ba54-c879701a0716"
        },
        "item": {
          "id": "f65e255a-92ff-40f2-a634-62463c1d6dbd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c105b21e-8c75-47ea-ac9f-aa2c867d13a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbedee41-5744-43e0-925d-cc927c41b5da",
        "cursor": {
          "ref": "ccfc7530-4ed3-4927-a48e-008e0ef4d770",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d0bd4fba-7278-4f82-9d02-73de636969db"
        },
        "item": {
          "id": "cbedee41-5744-43e0-925d-cc927c41b5da",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b36dfeae-957b-40e5-8cb1-8ff32706de0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d65847-7689-44ec-bfae-7a423c0a1832",
        "cursor": {
          "ref": "04f4f763-9cb5-4b89-8688-708dc6bab500",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "553926dd-d3ee-44f7-be71-57542f348e37"
        },
        "item": {
          "id": "23d65847-7689-44ec-bfae-7a423c0a1832",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1a1f9fbb-de27-4649-ab66-8eb027ac0fd7",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "507db0b1-cd64-4942-9835-2045053bfaec",
        "cursor": {
          "ref": "ff31463c-09ba-4747-9a58-effad2ae8c6a",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "5329b68c-c079-4a66-8518-c8bcad14482c"
        },
        "item": {
          "id": "507db0b1-cd64-4942-9835-2045053bfaec",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6df5288d-716a-46d4-b35b-e5dfd7a37607",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "6cb3ee4f-3425-4a49-b108-35e184485d9f",
        "cursor": {
          "ref": "8f671135-4e65-482f-9b23-d8040d6e75f7",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fed70117-659d-4893-b0f2-b14140b00245"
        },
        "item": {
          "id": "6cb3ee4f-3425-4a49-b108-35e184485d9f",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "25adbac7-30b2-485b-b33b-506d1c1e3376",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c0d91e5d-571a-4416-bad2-12e337dce4c7",
        "cursor": {
          "ref": "58d00ccd-84fc-4ad7-8527-2e7da03adc69",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "799c77e8-58ba-4d60-97ea-a6e2986a69e5"
        },
        "item": {
          "id": "c0d91e5d-571a-4416-bad2-12e337dce4c7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0ade4236-d0bf-4c63-a8fa-83efead92f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8fe30c-9bb0-4d29-be98-36adb62478e5",
        "cursor": {
          "ref": "97945089-bb5c-4276-8bac-46974e963621",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8450ae79-b12e-4590-b3f2-608786503ae0"
        },
        "item": {
          "id": "9a8fe30c-9bb0-4d29-be98-36adb62478e5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "f305601e-91d6-4d67-8d9e-395f89c0855d",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "5a49d2d1-983c-45ed-86e6-1628bef2287c",
        "cursor": {
          "ref": "f3d681b5-aa14-460a-b380-a971f2aef298",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "118bc8b4-7d9f-4ad5-a29a-60c63df788ab"
        },
        "item": {
          "id": "5a49d2d1-983c-45ed-86e6-1628bef2287c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "2f307638-0c5f-4376-88dc-28176caab07e",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "2ad66696-0a89-4b79-b6dc-676c06176692",
        "cursor": {
          "ref": "2e169ef8-8522-4ba2-a194-4da9ff09ef08",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c20678c6-5d89-4316-a224-665f94a0d7bf"
        },
        "item": {
          "id": "2ad66696-0a89-4b79-b6dc-676c06176692",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "02d57de8-510e-4245-95db-5795dd7194d0",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "0a5ebf68-3120-4386-a640-5a4514811dfc",
        "cursor": {
          "ref": "260bb4ab-8d06-493d-bc8e-e6f0187959c1",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2e419dff-66f9-4b33-9e34-e279cb2dbc73"
        },
        "item": {
          "id": "0a5ebf68-3120-4386-a640-5a4514811dfc",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "d923754e-23a1-41bc-bcbc-02a8fc99cc83",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "cc3c12e1-91e2-4b5c-ac22-df86e5e31656",
        "cursor": {
          "ref": "4cf0dbea-a6dc-4636-a18b-729706ffeb6b",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1fbfccdb-e8bc-43e7-a37f-ba55ace4155f"
        },
        "item": {
          "id": "cc3c12e1-91e2-4b5c-ac22-df86e5e31656",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e849e865-bc81-46c0-9fb2-701e8b866a16",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "bb821ac2-7caf-47dd-94f4-4e864343f758",
        "cursor": {
          "ref": "1f6b12d5-04e9-44a5-8d2b-06776628f9f6",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "b730d075-ace5-419e-81fa-d5262f64a0e1"
        },
        "item": {
          "id": "bb821ac2-7caf-47dd-94f4-4e864343f758",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f3d89097-8061-49c0-8a07-bee078621ddd",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3bd525ab-0f6b-41c7-a15e-aff4816af98f",
        "cursor": {
          "ref": "828aa15f-6adb-4fda-a481-8f1a5b762ac8",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "057e7a83-4308-4032-a15d-0d4da7070fcb"
        },
        "item": {
          "id": "3bd525ab-0f6b-41c7-a15e-aff4816af98f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "eef2ce5c-74b2-47a3-a038-dda33e0e67ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc96c6c-ee34-45fa-b9dd-99215102a327",
        "cursor": {
          "ref": "455f44c0-960d-42e1-8e4d-738995e37a5e",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "084f8206-7480-4a64-ab6d-238cc438aaf1"
        },
        "item": {
          "id": "efc96c6c-ee34-45fa-b9dd-99215102a327",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5dc12e67-e48d-4adc-8669-243e965de3fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a324ce8-f89c-4fac-8d5a-044852f68615",
        "cursor": {
          "ref": "c3465c1e-72ef-46a9-9a75-209e775066ab",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7cdcd598-fa0a-4a43-bedb-b39e7cbcc650"
        },
        "item": {
          "id": "7a324ce8-f89c-4fac-8d5a-044852f68615",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "1892f895-f5d5-4b8b-ad00-72bffc4d0baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41192369-60a2-4f53-9bd4-836490693cc3",
        "cursor": {
          "ref": "0c79b966-40cf-4254-a285-55cdf90adb2b",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2332c7d7-6730-4387-89a9-2a8a674825aa"
        },
        "item": {
          "id": "41192369-60a2-4f53-9bd4-836490693cc3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "43d631f7-5ba0-4b06-ba85-b8cdb6f1dda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb637a27-7ebc-484e-902a-e87754089027",
        "cursor": {
          "ref": "37e0042c-e748-47d5-a3ea-d403aabc1495",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "28831ee8-cf1f-4532-a704-e350b4b0acc2"
        },
        "item": {
          "id": "eb637a27-7ebc-484e-902a-e87754089027",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eb0d32db-4e43-4333-a5f4-b64ef788d658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58c4d5d0-56fa-46ce-bbd1-ca2dabf3c38c",
        "cursor": {
          "ref": "9f27b17c-3e0e-4ab9-a3e7-626b168cf8e6",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "92271e69-dbe4-430a-9672-2dd24a815407"
        },
        "item": {
          "id": "58c4d5d0-56fa-46ce-bbd1-ca2dabf3c38c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "96ed2b0f-464e-490d-af37-187ef85d1018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d3c4d0-fa74-4198-ba61-88857899bc7d",
        "cursor": {
          "ref": "bd9a4379-7a5b-4781-a605-539bc0f2da42",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e4381cfa-ecc2-469c-8956-65258ff5e7ed"
        },
        "item": {
          "id": "e3d3c4d0-fa74-4198-ba61-88857899bc7d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cc951f9a-0716-46e0-b13d-c2bf2e1423b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160164df-81dc-45ca-91a7-6fc6b0d2a039",
        "cursor": {
          "ref": "2d55077b-70da-469e-9dea-13dbda9035ce",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ce16890e-2e35-4974-b526-46bcb063175e"
        },
        "item": {
          "id": "160164df-81dc-45ca-91a7-6fc6b0d2a039",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6952b860-372d-4149-b701-5ed2c927dfd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fbe4c9-226d-4c78-b617-1122008ce688",
        "cursor": {
          "ref": "d77325d0-9852-470c-8e75-f64dccc4fa08",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "89f4ebc1-8eb2-4828-b44c-9352cb21d774"
        },
        "item": {
          "id": "c8fbe4c9-226d-4c78-b617-1122008ce688",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "6a534b89-5b93-4855-8e14-b99f93557cb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8515fab6-60da-4346-b2d7-5beb5834d7ce",
        "cursor": {
          "ref": "c865e8fc-cf6f-4ab9-89dd-4745c1a7f753",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7ca902bd-fcd3-43de-b525-1204733dab68"
        },
        "item": {
          "id": "8515fab6-60da-4346-b2d7-5beb5834d7ce",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "967326a3-df73-4bcb-b9e2-bcc5690c6f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848ede05-d5f1-45ff-99db-eba5fa8ff67b",
        "cursor": {
          "ref": "cb16a5a8-ab39-4042-a2c0-a719f960a40c",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b1ff0902-99bf-4516-9990-e2298549484c"
        },
        "item": {
          "id": "848ede05-d5f1-45ff-99db-eba5fa8ff67b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e7d55340-45ae-4784-8efb-ef8ff1c3a23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1cd0f5a-554c-4c53-82f1-f684d4b3908f",
        "cursor": {
          "ref": "6845ac11-8778-4df6-81c4-3dad590c6e7c",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e20b042f-91ae-4cdc-87d5-8e01b0b0e736"
        },
        "item": {
          "id": "a1cd0f5a-554c-4c53-82f1-f684d4b3908f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b88cf9e3-c164-4926-8dc6-7283a03d8c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfb9422f-8ffc-4bed-8f75-8a01b703d0dc",
        "cursor": {
          "ref": "118460d0-30a8-48dd-8914-8d692427b28a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d56dc49b-35f6-40f7-8037-8e3e4fc33241"
        },
        "item": {
          "id": "dfb9422f-8ffc-4bed-8f75-8a01b703d0dc",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f780d437-0b16-4c9d-a8d3-0228bbb808a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3194ca-9527-40fb-ab60-9556aa737843",
        "cursor": {
          "ref": "f7829555-de1e-4689-9212-5b1b7237ea0c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9e1c4685-6c05-4c0d-b84d-cd977d6294ed"
        },
        "item": {
          "id": "3e3194ca-9527-40fb-ab60-9556aa737843",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "35c5a4a7-d081-4787-afd0-bae6617ba201",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "3e8d0d9a-2811-4df9-96a1-0bc52fc5fc63",
        "cursor": {
          "ref": "0ddc0b59-ff78-4dad-99a0-58cc16178a9c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "664f3467-27a3-48b7-8ed0-7f21343a84d8"
        },
        "item": {
          "id": "3e8d0d9a-2811-4df9-96a1-0bc52fc5fc63",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9d3c097b-d966-4c86-a32f-39f841496f8e",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "eca7da5f-8173-43ed-88f7-71d12b2b7855",
        "cursor": {
          "ref": "22d5fcd8-72df-402a-8a54-c9e9cdeb45bb",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e3300319-d294-44f3-90e7-83f19e95790c"
        },
        "item": {
          "id": "eca7da5f-8173-43ed-88f7-71d12b2b7855",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "443677cc-b999-4e7c-ad7c-9c8c32c3bfe0",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "8b43f4b4-6f1f-4f83-9d23-f91a2d9f1f4f",
        "cursor": {
          "ref": "31c0fff0-9e95-49ae-b253-ddd3073055e7",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "24ff1d5d-355b-4655-9331-ab3f32766726"
        },
        "item": {
          "id": "8b43f4b4-6f1f-4f83-9d23-f91a2d9f1f4f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ed8cefc2-86f5-4edf-902e-eed4ca43a7c9",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "46d0c55a-0b87-4806-8b84-8b47a9061c8c",
        "cursor": {
          "ref": "861d644d-0d35-47a1-b3a0-7af36757c136",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4c5d0112-c9bc-4af7-9f19-b47c17e3d3a2"
        },
        "item": {
          "id": "46d0c55a-0b87-4806-8b84-8b47a9061c8c",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b189e111-e629-4126-a4fe-0dab2aa77eb4",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "cb20161c-e54c-4187-a1bf-456d493b4106",
        "cursor": {
          "ref": "b1bb9779-93e3-4d41-8393-9f5c4f52df07",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3d07c248-d3b9-4084-83f6-256be72cee7f"
        },
        "item": {
          "id": "cb20161c-e54c-4187-a1bf-456d493b4106",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "817295ba-7f9c-4571-8b6a-cdf1bdf1a0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea24eb68-ef08-41b4-9e14-8c3012f2da21",
        "cursor": {
          "ref": "09ac440b-9c13-4d6c-8ba6-d9f230c16555",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a06aa219-3eef-4131-8cbc-b7557ecaee80"
        },
        "item": {
          "id": "ea24eb68-ef08-41b4-9e14-8c3012f2da21",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4fb4a7c5-a541-4795-996d-5347f130c7ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b5eaa5-65e6-4c25-a0c3-0957e5140013",
        "cursor": {
          "ref": "d901ceeb-0999-4783-99c7-00b459b8e763",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f728fff7-262d-40f4-b2e0-c9fd5893c2af"
        },
        "item": {
          "id": "36b5eaa5-65e6-4c25-a0c3-0957e5140013",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "16248429-47d1-4eea-bd90-91cda69496fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a4b0af-bc39-4a11-992b-1d31c1e64cbb",
        "cursor": {
          "ref": "e3269d4c-0b84-4b04-b2ab-b01ff7a6d088",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7b97357e-70dd-4821-80fa-79a070892149"
        },
        "item": {
          "id": "e6a4b0af-bc39-4a11-992b-1d31c1e64cbb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "02f273d8-84e5-4fa2-82bb-73d38d394587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409370a4-870e-4588-99a7-2622c4d8fa8d",
        "cursor": {
          "ref": "3cfd7430-709c-4f4a-9472-827f0f75090b",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8d340e13-a9f6-4107-a83b-798f0ed6e47a"
        },
        "item": {
          "id": "409370a4-870e-4588-99a7-2622c4d8fa8d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6e4d516f-8db5-4a6c-aa06-457f5866a19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78e7322-da9a-4d1a-9bb9-ef1d24e05a6f",
        "cursor": {
          "ref": "ef6cbd00-46cb-4589-8b70-604896642d97",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "aa63dfeb-f076-4326-aa6e-b734357ad472"
        },
        "item": {
          "id": "b78e7322-da9a-4d1a-9bb9-ef1d24e05a6f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "6fd46e76-91c9-4b74-8e8d-5e4f93cd9225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72fd843f-8d03-4603-99dc-a6831670a6b1",
        "cursor": {
          "ref": "fc35e588-28bb-42bf-a6c5-99c5f4edbec1",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "7ad26672-0ce4-4339-8483-64ef17580397"
        },
        "item": {
          "id": "72fd843f-8d03-4603-99dc-a6831670a6b1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d50bf6c5-baf3-4e30-ac48-63a3b2b7a9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c0c400-3e10-41ba-8fd7-62ab7bd98ad2",
        "cursor": {
          "ref": "2b11fe84-b5c4-476e-978c-81057e6f98bf",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0c9e3b99-a4d6-4eef-abe7-c442f142a7ea"
        },
        "item": {
          "id": "27c0c400-3e10-41ba-8fd7-62ab7bd98ad2",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "299f0ecc-749b-4fbe-a3d1-0b77c2ba5a50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abc5e0e2-24bf-4a61-8b94-cc8e63b85895",
        "cursor": {
          "ref": "dac1ba7a-0a49-4821-afae-f3581acbdd1b",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6dd4f5b6-b7ce-48e5-9f63-6615175a4272"
        },
        "item": {
          "id": "abc5e0e2-24bf-4a61-8b94-cc8e63b85895",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "34e2c9c7-1c5b-4230-a3f3-3490038c61f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53f8a09c-2bb3-4bf0-99d6-08b270b84a50",
        "cursor": {
          "ref": "b360eaae-0652-4e7c-a637-4f47c43991aa",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "bf06494a-e86b-418e-a02b-ec014b03660d"
        },
        "item": {
          "id": "53f8a09c-2bb3-4bf0-99d6-08b270b84a50",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fa7d593d-1c14-4d1e-a5b1-89dd8ab7d8c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28fbf4a-a819-412a-b18c-f38ad5974a9c",
        "cursor": {
          "ref": "7787580b-d7c9-48be-8921-f65f2f4bdd73",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "92858722-b0b9-4c3d-8239-88c37a5ec023"
        },
        "item": {
          "id": "e28fbf4a-a819-412a-b18c-f38ad5974a9c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "b2cf9e0e-2a28-4e01-97d7-8128098bbabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "108930ca-7ea1-408b-8309-89c77cd79bad",
        "cursor": {
          "ref": "d728ff45-ac04-45fb-939e-826e3d17d721",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fad8464f-85a4-4f41-9513-3f8124efbe8e"
        },
        "item": {
          "id": "108930ca-7ea1-408b-8309-89c77cd79bad",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b9bf2d86-1928-4e96-bae5-eac57d53eef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b9e0eb-9d8f-48b6-898c-cf97b06eccc3",
        "cursor": {
          "ref": "75adc3e5-6ed4-4c3d-8195-3e69815a87cf",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "01362d4e-44f8-472c-8903-2d4742a7e6fa"
        },
        "item": {
          "id": "67b9e0eb-9d8f-48b6-898c-cf97b06eccc3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "adeb3240-807f-4764-8773-7b967520070a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a89e7ad0-2f94-454f-9cce-3c5e30c07d4e",
        "cursor": {
          "ref": "7aacfd52-13a1-4e1e-bac9-33b1b47fc0fe",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "042b88fa-2dc0-46eb-b9c7-10be0ecf1966"
        },
        "item": {
          "id": "a89e7ad0-2f94-454f-9cce-3c5e30c07d4e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "52a3f986-ce64-4d9f-91e8-1bf6fbfdcbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2768852f-7670-4235-af43-83345006545e",
        "cursor": {
          "ref": "e0baf2ba-869c-4d6a-a334-a3f4d92af5b8",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fcac10ab-f40a-43fb-bcec-e2c6947a3fbc"
        },
        "item": {
          "id": "2768852f-7670-4235-af43-83345006545e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "28b6b8db-a608-4c92-9f0b-7fccfdc8525d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20d71eb-1e5f-42c0-add0-ad3f791427c7",
        "cursor": {
          "ref": "5088dc11-7894-4a62-be25-840652b2899c",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "7e9eb78a-f8bd-4348-ae01-3dde1539f56f"
        },
        "item": {
          "id": "e20d71eb-1e5f-42c0-add0-ad3f791427c7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "aa6833e5-89e9-47d0-9e7b-00ba1e251a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69161f77-324f-4e03-91c7-39bb7c5601e3",
        "cursor": {
          "ref": "166f4067-e49b-4728-a595-8b224d8ee46c",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "95096de4-fdb8-40ad-b8c6-b588384c1f51"
        },
        "item": {
          "id": "69161f77-324f-4e03-91c7-39bb7c5601e3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "f2598b5c-8f1f-4f04-9271-49ccb6c30982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c47b855-17e6-4010-8d67-40efe8af05d4",
        "cursor": {
          "ref": "bbc88e32-d364-41e2-9191-8856338c1816",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b4b54275-acba-4988-86ed-90e8abed0b98"
        },
        "item": {
          "id": "6c47b855-17e6-4010-8d67-40efe8af05d4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c6e124ea-31a2-473b-986a-ace6a9971ae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32655b22-b638-4a7d-808f-d013db933f93",
        "cursor": {
          "ref": "bfbe89c1-d64e-45cc-b270-8a0b04229e21",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a87bef5b-bcb5-4206-a454-007306c455b9"
        },
        "item": {
          "id": "32655b22-b638-4a7d-808f-d013db933f93",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d5f4e9f2-d919-4098-93c1-16bdcae705d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3e3a77-c3d8-4f20-814a-3ce6f823a9b9",
        "cursor": {
          "ref": "d4f6f156-b6e1-4805-b693-7d969d61b5b7",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "7d8c6ac0-6a04-4892-b778-f90269322d3b"
        },
        "item": {
          "id": "0c3e3a77-c3d8-4f20-814a-3ce6f823a9b9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "19a8911a-5a69-4a6b-b327-c823be3758f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f364b79-9698-4690-9cde-7e15d7272c52",
        "cursor": {
          "ref": "31f19230-0ab6-4bd0-8701-6d76599be000",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e9b744e1-c002-4120-8eaa-0ca3e1c7e134"
        },
        "item": {
          "id": "7f364b79-9698-4690-9cde-7e15d7272c52",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c993cfa3-11b5-4204-bc75-f84f318f4ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f115feac-c4a3-40a8-bb64-13b45f6a6cfd",
        "cursor": {
          "ref": "d8f778b9-2ad7-4ae2-a5a7-65dd233e1758",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6d1caa69-d5cc-4524-93cc-351712030939"
        },
        "item": {
          "id": "f115feac-c4a3-40a8-bb64-13b45f6a6cfd",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "49d8f4a1-2b74-4ad0-a986-2f81fdd288c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a901cb6f-bc0b-43a1-a4ff-b7fb42aa137f",
        "cursor": {
          "ref": "ac1f57b3-4817-4d30-9848-f7639ee42348",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "355800ef-fb01-4100-a107-b39f084b7774"
        },
        "item": {
          "id": "a901cb6f-bc0b-43a1-a4ff-b7fb42aa137f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "60cd6dc4-7239-45ad-b5ec-f7bbcb665420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66278637-fc07-49f9-ac5e-091203f2d82b",
        "cursor": {
          "ref": "07383799-ad40-4eaf-8c44-de23b43f18e1",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a5747b34-2eeb-453e-b753-2a09eb5f05f7"
        },
        "item": {
          "id": "66278637-fc07-49f9-ac5e-091203f2d82b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "488c96c4-b6c6-4b84-86bc-015ce2060409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88df4aa-14f8-408f-9e77-9aef86d4e455",
        "cursor": {
          "ref": "1679c50d-2a99-4350-bc64-1e6a4b7b5670",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "92c9d807-de6e-4c25-93bc-dae5c4e235cd"
        },
        "item": {
          "id": "e88df4aa-14f8-408f-9e77-9aef86d4e455",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "01d575cd-93a1-49ef-97e8-70f842caa149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3661173-9725-4e1c-bb36-69dd9ebbeea1",
        "cursor": {
          "ref": "55f9a176-5e05-44d2-86bc-d914df4ddf61",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "5f1112db-0379-4aac-b977-f4cc0b685ee4"
        },
        "item": {
          "id": "b3661173-9725-4e1c-bb36-69dd9ebbeea1",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "26f383a4-62d9-42a4-8d3f-1437327fd800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba2eebd-926f-4a91-bb9d-b398c03e17cb",
        "cursor": {
          "ref": "52d2d373-4093-47c4-9fec-c330d5a888d6",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "93125c73-651e-4e16-a75c-ad1ba0f322f9"
        },
        "item": {
          "id": "aba2eebd-926f-4a91-bb9d-b398c03e17cb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8e936731-a204-41fc-9e2d-792940933a2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874b0733-32df-457c-8b85-cd0730e1ba03",
        "cursor": {
          "ref": "d9249120-925b-4361-b028-5e707fac5303",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5516f6a6-1c05-480a-a21c-ba075246bbb7"
        },
        "item": {
          "id": "874b0733-32df-457c-8b85-cd0730e1ba03",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b5fca759-c16a-47ff-b41d-eafbbcc04fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50d33f16-6599-4f48-805d-43084d8e8918",
        "cursor": {
          "ref": "30fc81f6-a09d-49ee-b7e6-b29625d34d00",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "56d8a749-d9bc-42b3-8a66-e2f6b7456d39"
        },
        "item": {
          "id": "50d33f16-6599-4f48-805d-43084d8e8918",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "a5bfac3b-551b-4478-a480-29becab1346c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fbd664a-97ea-496d-84e8-1a1266ce981b",
        "cursor": {
          "ref": "5ea2a98f-e7d9-4479-b27e-9528076f39fc",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "fbc6eca2-5436-4c3a-9dc1-3c808d44bb7a"
        },
        "item": {
          "id": "2fbd664a-97ea-496d-84e8-1a1266ce981b",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "d4724528-e2e4-4d82-bc21-e3e30e902203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88f4f0c-ba19-4a1c-a159-79b942dd1b9c",
        "cursor": {
          "ref": "a020cf42-e8c1-4a83-a559-b3f70a368401",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "fbf0f92b-a2c9-4c89-8839-faccc9dadd42"
        },
        "item": {
          "id": "e88f4f0c-ba19-4a1c-a159-79b942dd1b9c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2fcc1616-b0d5-4c5a-957d-d4aa531b2598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732ac566-effb-41d5-8b0e-914e216e2e62",
        "cursor": {
          "ref": "cd0d5617-db16-404a-830a-d6e8c1369011",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c1089ab5-e040-4826-9fa2-4504fbca6515"
        },
        "item": {
          "id": "732ac566-effb-41d5-8b0e-914e216e2e62",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8a2cd570-7f97-493c-8ef6-c25f20eb2e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a4081ec-21ec-400f-a537-4c00134a3695",
        "cursor": {
          "ref": "995174c0-15d1-43a6-bf66-4d9468b36ba4",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8e8bc3f9-b8c0-481f-842a-97e23a6cd15d"
        },
        "item": {
          "id": "1a4081ec-21ec-400f-a537-4c00134a3695",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4fef1112-0b77-4c27-9571-20a14ebf3cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb88c00a-02fd-4e9b-8aec-e9366b19bd2d",
        "cursor": {
          "ref": "03c243c4-2786-495c-9281-f5e5bc48f464",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "bb68b186-aac9-4565-a50c-7b162f7d704b"
        },
        "item": {
          "id": "bb88c00a-02fd-4e9b-8aec-e9366b19bd2d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "701b6462-ab35-48eb-8ea4-baedec6213ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "315ce3f8-f187-4f0f-bca2-67c23ee09e22",
        "cursor": {
          "ref": "8b294df1-6d12-4981-9e7e-ea60aba35fc2",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "db270ba4-91a6-4ab9-97d6-a44226ad58ec"
        },
        "item": {
          "id": "315ce3f8-f187-4f0f-bca2-67c23ee09e22",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6f89ed74-af42-4f97-94a3-d4c2c68392ff",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f33b2ab-050b-46c7-91fa-67968d39cf3e",
        "cursor": {
          "ref": "6fa9fa40-17ef-4dce-8cb8-bbe8fb228c8d",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0ebfc69f-ecc7-454d-86ec-fb7c2add1ecd"
        },
        "item": {
          "id": "2f33b2ab-050b-46c7-91fa-67968d39cf3e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "444fab73-c605-4786-9918-d79d755bd56a",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "41503cc9-766d-4e76-b212-75b1bb2fe1f4",
        "cursor": {
          "ref": "65d293c5-0d75-4735-a6ad-ce3cd03f479f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9514efba-6f94-42e4-92e5-1f7c608ff823"
        },
        "item": {
          "id": "41503cc9-766d-4e76-b212-75b1bb2fe1f4",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e4794bf3-3817-4f69-97a7-79f451f226f5",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c69dec-ced4-42b2-b703-b8e9f69cd9c2",
        "cursor": {
          "ref": "f1ada922-b2c0-46ea-a3d6-b218aac20c0b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7c029424-b6fa-4c4c-b13d-046e007ea7bd"
        },
        "item": {
          "id": "e3c69dec-ced4-42b2-b703-b8e9f69cd9c2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8e609bbb-e091-4565-af02-8053f11a0e5f",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdefd71a-da2e-4156-a866-1d16a2274015",
        "cursor": {
          "ref": "de2a6095-17ea-4e57-911b-6d485829cff6",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e388c07c-413c-4de1-9afe-a64c2fd3abce"
        },
        "item": {
          "id": "fdefd71a-da2e-4156-a866-1d16a2274015",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20b0b6dd-ff37-4001-82ae-cf2161a30478",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdefd71a-da2e-4156-a866-1d16a2274015",
        "cursor": {
          "ref": "de2a6095-17ea-4e57-911b-6d485829cff6",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e388c07c-413c-4de1-9afe-a64c2fd3abce"
        },
        "item": {
          "id": "fdefd71a-da2e-4156-a866-1d16a2274015",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "20b0b6dd-ff37-4001-82ae-cf2161a30478",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670285e0-0505-4395-b92e-bd08c3192ded",
        "cursor": {
          "ref": "d1f76d39-67f4-47b7-a8fd-5ab5d8a83889",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "fd6ae21b-b4c6-45f7-9768-63596f01070d"
        },
        "item": {
          "id": "670285e0-0505-4395-b92e-bd08c3192ded",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6b219ec9-c875-4e02-a194-5dc3de590e9c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ab5321-7b60-4603-9750-4c0d4aa16e1c",
        "cursor": {
          "ref": "f038cede-0c18-4c54-b053-28f6ce58a2d7",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4a052478-2144-49b8-875c-2124c2f264d3"
        },
        "item": {
          "id": "13ab5321-7b60-4603-9750-4c0d4aa16e1c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "35408a0c-275f-4952-bf19-11777141b379",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}