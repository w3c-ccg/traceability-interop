{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6349d618-b0a9-467e-b3b6-bde59e03baa2",
        "name": "Clear Cache",
        "item": [
          {
            "id": "366c84cc-7982-4a34-ae7c-a6f3eb267ac5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1dd31b0a-76b9-40cc-b591-00c06492d115",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "62b08300-48cc-4178-9d5b-499393cad542"
                }
              }
            ]
          },
          {
            "id": "9d0f8adf-6909-4df9-ab08-68b158b43efa",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f729dca8-2080-4446-b1a9-b9502cc8c11c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "98381764-f114-4ce9-915a-5ffac4428344"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a7e95813-a5a0-40ef-bb50-bcf0521972c9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0f833940-6a6b-4e34-a344-90e2682ec057",
            "name": "Positive Testing",
            "item": [
              {
                "id": "80ce48de-a280-47ea-ac53-d98ab5da73b4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9604e304-b276-4315-a8c4-6d5f7a6f7aac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb03a944-e8ae-4db8-8adb-45ae65f46327"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "703f2b30-877b-421f-a6f1-24c6184e8499",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2c58b852-90a9-4bdb-9483-b6679083ef7d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9bf83dfe-b171-4d66-ab36-f55031e9875f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fc0f5ea6-a59d-49e2-a042-c4bdc7e36131"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "213a32bd-d11d-421c-83e3-3abcd6f0fff5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7a9cf563-fe46-495f-9978-b34f899febdc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86c2a3cd-c23a-4427-ba08-19cfe0d03939",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "112ad18d-2097-41cc-80f7-0127372ff038"
            }
          }
        ]
      },
      {
        "id": "091df372-1d8f-4be4-bf05-fb44457274f0",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bc85f061-eeb1-4e41-acbc-db03c81987c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c02e9e3c-d960-459d-aa14-461d3a76cd83",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5b8030a3-f76d-4734-a184-0526aeed35b9",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "902c03ed-5561-43fd-960c-8372c21b0fa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37b9447d-0098-435e-ae3b-ab8af9c69055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c543681-8642-465c-bbd1-5bc426253cb8",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4ef50f-19db-4539-920b-80e52f650e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a16977ac-5637-46a6-8779-d4f7c8d7e136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47140c64-d290-4305-81fc-bf5bc6a97fbc",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "357f9d00-0c78-42df-abbf-0239b2e77186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15f0ed7f-0bb9-4c54-8cff-5fa66eb5c09b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a302b59e-2114-4ce9-9823-2834382cdbca",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "990b2177-d2c3-4e51-bd80-9200acde54a1",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe717bf8-d137-4c93-a6cd-ba60d785ad1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d70433ea-1d26-46cb-8f85-8a46b983177e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65a12f8-7cb6-47ef-a674-1f37ad1797d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2aa582-6563-476a-8d20-e47a22de2d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a54984e-d394-4a6a-8747-d94d27e8c257",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5b22f7-c0a5-405a-ab2f-82e014d2db1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3725374a-25f8-4c07-930b-ba0bc348bc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924d2eda-d927-4509-89e2-97768f7167b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "ce362681-a8d8-424f-aa74-d4d1773dad6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "045d6a02-55c0-4bed-8ed1-a7acad5c9406",
            "name": "Positive Testing",
            "item": [
              {
                "id": "70819f3a-2228-4193-bbc3-4bb49549b7f0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f54c3ad-37eb-4e10-b7e2-5a3e8b269e37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4b95658a-7893-4539-b6a7-c8fc6c5b46db"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df7e4b11-ca28-4786-aa10-e51e88e1d419",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "df12cb0d-2df8-4452-bafc-50d0376ade79"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "246acd0f-2f7d-4b0a-a2d4-f7d62733ee7f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "afb6b3da-6337-407b-92a4-847440570b0a"
            }
          }
        ]
      },
      {
        "id": "f7e4f7f8-2d30-4121-9286-88a2e6e7decc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "21e772fc-bc98-4a86-af8d-8d0635591781",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c32ad124-9f69-464e-bb38-6baa1a09c208",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "70094cbc-402e-45b8-9805-920d26b0b1b7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a8cc45-7ac4-4014-a14c-679e5cb03df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ffda716-a45b-4865-b039-a7c07a77df74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77e76a0-a52e-499b-b8c1-7860416788e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "159374bd-45aa-4cbd-a17e-5ca5509b2ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51491cb3-d6cf-40b4-8a90-1557a831f25d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9725ad3-1e63-48a3-88ef-00a1c4b677e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "413450cc-09ed-402d-8b24-610ba66f9efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5f3e3fd-eb65-4763-bfee-70b7e02842d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "577b7b13-c74d-408c-9e1f-cb3dfab71215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4860cb6-7206-4e45-85ab-edfe177efb30",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dde9faa-b634-41c5-810f-131222efef77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f7be9f-8cd9-4625-8eaa-02713dd1145c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e192bd-6086-440c-803b-dde2178c225b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2483be8-19a2-4d0e-afbf-2261eae0f08e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68fa2c57-5e8a-458a-a5f4-ce29fc24d1ec",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15be5230-226b-4ed9-ac4d-aad78d9c67af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9829a05-7adf-4b9c-be48-ff90fb9a2a5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358dc70a-0897-4795-a2bc-cc45558942a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93e47736-d4b1-4f63-bd21-5e849985492e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b79135e-6a89-4c2b-b9c2-4736e180e347",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d65c72-359e-4135-b9e8-fc80001cf278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "868cd4e8-dff8-4749-9489-18ec1bd0003c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d40f3a-9721-439b-905c-1050cbf3e112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81eafccf-b236-4599-b6be-4a431bb80bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d8da62-ee5c-4fd2-8496-7ead99bbdc1e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed4ec589-b099-43f4-9c60-1ae8a05a2ce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf133d79-ec54-406d-8f72-4b297824e674"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f2cc62-747d-4dd7-8078-ad278ac9790a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f705a6de-d6ff-4037-a32e-aa51b2ec3c4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef7f657-6fcc-498b-8b0d-97f5ca96cee4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515c069c-d067-43e5-a4f8-0cac347943d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d1a67f-06bd-49ed-bbdf-8eed80e1870d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b72a08-dea4-4055-862c-56ee78d66159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26c855aa-b610-45c2-a967-e301a4513ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5a2a8c-e22c-4324-bed2-8bd2faecd632",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a70b930-ed48-4bb2-aefb-c803744f940e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f780034-ffdc-448c-a71d-d8d4f1ead4c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041d5ea7-ac9c-4f6c-9ade-7dd356850fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75c9f5ec-a84a-423a-b0f6-ea66a4a232c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65330bec-6673-434d-948d-651bb7374d37",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634b96aa-2e94-4f39-be1b-dcce617b2b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d4eb8b-d66f-4ac6-b50b-7c28308f7b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565f66d7-ec80-4f36-bf5f-2455850d140a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aceb34a3-4140-4f11-b7bd-c201bffe4086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b4ee525-988c-4a52-9b42-bbc7bddbe4da",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbba96c9-ae8a-450d-aba0-640123c3dd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d274b9-5903-4ba9-99b6-92ee1c86ad04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2358a5-3b52-4553-9390-d93f298d2304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4fbca0b-8ad3-47ab-a241-dc4cdaa1f8a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61f552f-be09-4c17-adf1-fcbb9e80702c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b585fe13-b918-4cec-abc8-ed38e48e730d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2446067-92d1-40a0-883c-dc27f3e37bfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a39c3cd-3c8c-411a-8665-581cd3b6906a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abd47044-ae9a-478f-a3ba-8873d01d6111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac9d1dd-836f-4abe-bd60-d868055956c9",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042543bb-f119-4085-9ca3-11e82a736c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da15bb8-6de0-4156-b01f-88b891692a7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9772b82a-743c-4757-9642-9a3224878c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55fd1462-7d6a-40ee-9704-1dc600ee6bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c052d78-bc2b-4ed2-b954-a56b99b4e077",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32827a6-9e5d-47a6-afc1-873d5649de92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3edb45cb-deb7-467a-ad73-cad28304199b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bebca70-01cc-4657-90aa-18f95d8c585d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e9a3ea2-f046-4055-ba42-64e266334a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eced893-9e3a-40bb-b869-076be37c3462",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c73d5631-dfa1-48b1-99b5-051cd2a6f9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec517ac-d131-49fc-b0dd-59506688d8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4684788c-128c-425b-8f28-0972ad9550f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "476ff0dc-7f69-4f38-9684-b953daf44099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968b29c7-78a2-41e8-b430-dedad19a9c6a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5286fe05-26f0-42f6-915d-ed6d96728ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d79f008-dd59-403b-9136-be6d0a97ada2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6ed528-1fd1-4bef-b2ac-cab58c484202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "095b7f5d-ba87-4315-bb47-72995ac89cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9546522-a9a6-4004-85bc-08aea804d3a4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "883dd846-88d6-494d-a989-01743c1ec1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee175a3-97ed-4a28-bc14-d4b8042aea35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ce8655-056b-43d4-83f9-9e98de674102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "209e0184-8d32-46af-8890-b08cffe9240e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95d83e2-7f02-4a6c-8fa1-44ab7adf0fe2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1148303e-6591-431a-aaaf-d305e854ddee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aecc222-6bf0-4968-a4d5-19740e4e4580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d947b73a-5809-4353-ac13-83015f987869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e8a0792-a636-45e3-a8f9-d43bfe88e82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9be6df-21fb-4cb4-8575-d95482e54688",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e56268-4194-49df-8e79-7e23a4ef9c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a71cba05-de8b-41da-8672-347b65c6006e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd7b9b6-58cc-4603-b617-0a4b08f9b253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "464d10ca-04a8-4d70-a771-f52e3d09b73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50be5dda-5614-44b1-b88d-8bf98c92ced9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2646f28f-38dc-4407-87b7-255048fbf9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7e69ae-1c32-42ce-b260-d697c2749564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b7e774-6ef5-4b6e-9016-1de1100ba06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b48aa7da-d2fe-4c67-a385-af45175b1483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0d857a-8a50-48da-adf1-ad73c26f33bf",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dee5f2-4900-404e-b6b2-fdeb1184a01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309d28cd-88d9-4b76-b35d-4df0a865b771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442562ad-0110-40a3-aa09-8d43afcdbf34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0eca6cce-f80f-4e52-81fb-26a386befdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b669bb30-b14d-4fe9-8c02-8b7b61207ee1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "116a3f9f-1ec8-4ab6-aff0-195edf042d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4213e5d-8360-4d9f-972f-93c8f3ca4c35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d50047-61e3-4f47-ac04-cfa84aa996fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8f246c-7b4e-4c1a-8997-6d79ea878246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e885a21f-15e4-49f4-ba74-c984c7037bda",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1b4767-f72a-41ba-b07f-1e6bb260eb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0634f498-d336-4d39-a5a2-c1d84e477e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3861ebbe-6ce0-453e-aceb-f7f5a6888899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "27e446f9-d204-4e58-896b-b196470ba85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895bdd90-ff6f-4765-905a-820605e26cf2",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e00c1a1-b623-488e-8c1e-6d011a667162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8618474f-66cb-4b99-a527-23977659fae3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a8fd37-1c28-420b-89b1-c65e20c0439f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38100adc-4fb8-435b-a38d-e8dcb4a11866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4caa898-a050-4141-91da-51447dcaced8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfea111-27f8-4bdb-aec2-6d4a3eb811d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe06e067-3ba8-4e4e-bcb4-9528ba51df3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe500443-00ea-4395-9d9d-8284c9be6734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd4050f-b4d8-4804-8ec9-bf23a5f50959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a88692-392f-46db-9799-c92e091884e3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d048ff64-4838-48e2-9c9a-95035b13857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb089a6-326b-4fa6-bf2a-7049abd8ee05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e04153f-0215-4556-8145-b2ed95df2a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "767202bb-0218-4c82-bc02-b510925519b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06152f32-713c-4754-afc8-e2382e5ecaa3",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4345b4-6614-4bb6-9267-6536ab034e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad75ed2e-c25f-4c6f-a93f-77e7b3604df2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b955c75b-37ba-4567-be24-177b11611fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ec71f51-a5f2-45c9-a871-0d7222f29587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c67785-31b0-437a-8768-28bf89fbb6e6",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10652fc5-4192-44ec-af92-39e05b280315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81130b80-773c-4550-83fe-6418962c68e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c26b4934-bd66-45ab-ab9a-6c792de2cfeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "053b868b-5c32-491a-89a9-6a56387e29cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9031b9ea-6fe0-407c-8c8d-aa06bb0eb946",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8286b1d4-b407-48bc-9ec2-871afc995959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d805770-3053-4ca3-9b1a-6ca475959b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "170b44d9-92a2-4944-a17e-0c9d1efddb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fe47e2d-5cfc-4141-b080-5f8b41b6443e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615d9abb-4dd1-4b64-aba7-5df3ad5d9254",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605dd1b6-955d-4dad-9f38-700bc6e46d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90411d94-da6c-4441-83c6-01bebb502e6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c144df8-196a-4d1a-bb53-39f5e66c3639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f891ebd-7ca5-489c-b2d0-b157f63a11bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348b03ff-6efc-46ae-be00-72ade3f6c319",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4f7ceb-3240-49d3-9f0d-7b38ba62edc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ce06ce8-fdbf-451a-accc-4f7b17e92e8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c2faa8-c819-46bb-a23a-b2b0e5206f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "476d10b0-ec52-4012-8f3a-8b9edfb8bbfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4a0766-98a9-4024-b1d1-41ba2d46fdbe",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67087930-5bec-4d8b-8f00-02a48da7871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d58945-39ff-46a0-b23d-a08d7be20454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb579bf3-5000-4544-92a4-d9124cd3ae75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a91a8ca-9fd3-4faf-b9a9-42ba812d0ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c74d4a1-0037-4e7a-91df-5d72c60bcf61",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acce03ec-aef5-419d-8e9a-c7eaea45a878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03227536-1e76-4b3d-b68f-a128a3eb6805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86978dbe-f790-417a-935d-f8cb1837c64b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "11afc28d-515d-4a8b-abd2-fe8b83ee3505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c630f7-da6d-4142-a964-6b8500d72077",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474d46db-d8cc-430d-ac2a-092919d69cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141a53ab-60bb-40de-8e35-1bed5f607ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d9d86ac-d792-4d3e-a7b9-9cd107786fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40e11fdf-d810-4dd4-b709-a874af02556c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c0bd9f-bd0f-4f25-a42e-4557795b8629",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43a04d6-74ee-4aed-a739-056ec2609da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06461013-3c02-46bb-a8ca-bd701d1d0787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83b56e1b-8779-4539-844c-d8ad46b51d52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f312b37-4000-4c34-87e8-a7ed4e6f0413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc35a2c-5880-4a65-bf9f-457a67078a6f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f48608d-bc67-4d3b-b5bf-5ee0625fc1f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d253fae-9a56-44f1-85d6-6d79ff78ba2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b15921b-5edf-4694-aa1f-50b1faad6b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "28039727-d649-46be-8c3b-1577759e52c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05036931-5116-4561-9355-b041514b3f38",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5b2c24-92c8-46d3-af6f-4ed059300096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6ed4c00e-6407-4815-b161-c9696eeff41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151924e2-10be-44e3-b955-83eab5dc4f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "60661400-d09b-4281-8900-01ec24b1e2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee08ef37-a042-49e1-a9ec-a89f5c92f8c2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ce9327-f55d-481f-8027-53211dbe626b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb754fa-0eec-4a71-9c4d-ae5c07965b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8376616-e8a8-48a6-a1df-fa813e3211fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00e3fbdc-cb09-4c60-8ae0-5ee05ac69bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66cfab0b-0b85-44a5-868c-127c633d9f16",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15a8f0a-5168-43b9-8f66-9db1920dc722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83bf4bd-a11c-4625-91a8-ce2af71e7a29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a431fcc6-dfc5-412e-90c0-31536f516919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d77661e0-dff5-4339-ba7b-96d38e6ce72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dadc6fed-8f76-40d5-bfce-72034da5e09e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36735f64-9df4-4aa6-8723-d089e91afe0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c89b387d-919b-4c9f-b549-9fd4184b4f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe0daf9-c6d7-454d-883d-8eb83dc6d5b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd568388-cc97-4e1b-923b-531c823188d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3093e056-fc83-4af1-b9c7-18d9d2ec0c4b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5259129-8640-465d-9384-b5a4a8eead46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312698c6-f52f-410b-8211-cf6da2ef05c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452a971f-0b41-4850-8123-ea667939e4d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "767a0ba3-c52a-4ef2-a049-0431e9e80fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2912978-0ff6-4ee0-8cf7-38d5f9a9bef3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93adef52-7a66-4452-b455-eb587ad16218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be33bd9e-f9f2-45fe-8ee3-e90b72705579"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62789416-61bb-4b38-82ea-648fd806b8b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1d782ce2-73a5-4086-8b4e-51ed7aa79c75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82115f83-13be-4096-8f58-020f6a87af7d",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7caafa9-cda5-49df-8a68-7e300c2cf3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e98e557e-0554-49e8-b4c7-fc479063c102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd2f183-962d-4c0a-8b36-a5e4d9a21b10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1ac2797a-5e67-41dc-9519-9e620c88b019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809a7fc0-1fff-4c99-8be5-c0249df2110e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd441a9-60dc-4997-88aa-87e6b0e38144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f33b06-1b9d-499a-9095-ea19e8a976c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a01840e-707e-44f3-a6e1-4514cd8c9876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "31656b64-eab0-46e4-95c5-4f14c1c459fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794c3cd1-8b38-4f3f-9ffe-89dd51f91b06",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e851973f-2da0-462b-96b0-de8e4fe88319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11c0c9d-8cf2-4ffe-a7dc-cb8649564745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f19b40e-f17d-469b-a433-b37c3a26bfad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "66486ea2-9f64-4a1b-b376-4805a87df918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2602e1a2-3093-4e0d-ba62-2860384beeb6",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a675987f-6b89-47bb-9bee-d317eea77ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247af16b-d01d-40de-bae3-17e130180f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6829c042-3078-4fc8-83b7-29650a577df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "17530821-979f-4238-a727-878a72450899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca718a7-b4b9-4356-9189-74c5c272061e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fdefce-510e-46b8-8804-50c346c8fb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fecc3e4-eed9-4efd-a20f-830213c6e587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7658fd30-4def-49e7-988a-0c31f8383ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "926bc0af-2a74-46c1-a4cd-0dd5856eb607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1373e81-ebe2-4d11-b086-e00bd6a090b4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e95bf52e-31e5-4ede-958a-94edb8b476e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcbd8e02-0f1d-4962-81e5-2f40c45d4bdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6e6a5b-68b2-434d-952a-ed1ed1f65434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b1bc12-7aee-4b93-bf53-b6b0dab74238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a83f3e-0ab0-4406-ba90-fee8c435fcd5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ff24a3-7d26-48f3-98fc-2aee19ffd6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cf0d47c-4cb2-4473-98c2-266e2c06740e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e41938ea-e9dd-4127-b333-8f55d68dc74e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ecb0bc4-8379-430a-8dd8-9189049b45cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6e9de7-cfb9-410a-9af6-7433057597cd",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51ddbc7-747a-4390-b001-319a1fd3cb44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb10818-d379-437b-bb95-0005f7d9316a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "126c51dc-1e14-41ef-8dfa-803942fd5e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a0465b-c5a4-4e4f-beab-42cdff90c77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed44c6e-0d76-4eb6-b337-908db49f6c3d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8959b00-81ee-4f0d-b7f3-54d81f42b5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661a7c3a-5b3b-4e63-9b6e-c1f78398206a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d507bc-a3bc-467d-9d25-e1f20c342a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b68c054-3d3a-4517-9835-d394bc5ff71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2b3e7b-8d46-416f-ab56-2b44eba5d53c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "183ece7c-d411-4c2e-9431-43e2bbd74195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c019080b-8093-4d31-9206-e5a447053bde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbcc8723-ede4-47ab-81f0-eac6d085de2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "34cbe69d-1e85-4e78-b721-cc2c0f586a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c545bf59-45e7-4e56-99ad-17850ba5dc7e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16a8ede-83f9-4a70-923d-453c865881df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8733c63f-a651-4ddc-885c-015f46b600a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7b14717-e4bf-422e-87bb-91a8d50202a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed39ef91-d4f6-4f4f-9851-3f7867a089a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75cd7c5-b143-4bb4-86ff-0d45de665819",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd125f9-007f-4d19-bcaa-1d1d50be6935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7356062-d125-430c-a8a0-066cdb3d3b44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76d4a3a-1883-4c3e-a096-5891cf919e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "281225bc-8916-413f-b30f-8d03a6adca1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaeb8deb-708c-42f7-8159-1bf703741158",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24cbf4d6-b5a8-4999-a6c9-0c5d8ddaaa50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80567f73-58b9-4829-a34e-f11f061cb00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e190ca66-3151-4e51-b42e-47e4ebaab59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d115c59-6c5c-4e51-a40a-b9a54bf03ef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34708812-b953-4dd1-8c9a-8da3c9ba928c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e3ae4e-d831-474d-9d53-5a3d18b45bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8fa85f1-c7f4-43d3-b7e3-1ee4d997dfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58377656-f671-4a73-acbf-f0160889b25d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "209de405-1f1b-4ec5-adc2-3e01c49cf60a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a49d7c3-1169-4d59-aeda-d4549d738da9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9595c7c2-6619-485d-b181-7155b509f45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a623b13-0dd6-4fec-b2a6-1ed08a0f9cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0a0386-2826-4b8f-969d-24683f5ee5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "79809bdb-d498-482d-b98a-2de2321f6776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61653b8b-f55e-452b-b58c-cda8e1df522a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78aff1b-f6ae-4b66-9670-a7634bd95f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb54322-a4b7-40e8-b6c8-099f0bf2abc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0a86a36-bfd0-4a0f-9595-30e93f945c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e3c0c6-7905-4f5c-bbd1-e2d996a87392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "863caf76-c7fb-4edf-8367-e5e250e73eff",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "346e0013-d325-4cc6-8425-e050b2128907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e96fb13-1379-4e43-88d8-ed2e33bcac47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e77ac47-ea71-4702-9009-a25025b6e6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "aae09919-27ab-438f-b9ca-a16d835dfe33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09876f32-5a88-45cf-8f6a-048b6eddb23f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1256d2c5-3d4a-4dfe-83c8-47da1ed4af1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c6627ca-4495-46e4-9ca2-c73611bac745"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c645ad60-d1c0-4f4f-a07a-5d62124f5b7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee895a40-a99c-458a-9f53-20acd1bb34cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17e3d4f-a5af-4e9c-bb01-8de63caf21f7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342c45fb-2fd6-4671-a947-fe0b5ddfe669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516a2389-b59c-4592-94b3-f958d2a22a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd9dcdc-00a0-439d-8648-3cef4d2d65df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "76bcdc25-c759-4ea5-9792-638493d9d3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc4d888-de08-4808-9fd2-99551873e8b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62d922d7-9cc3-410e-8ac4-95fc29f5f25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680f977a-0b7c-44a1-a048-303b98e28afd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8df7a6-5733-4123-b434-5a5e6d6ef976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc4ae39-7034-46e3-a26d-489f5463671a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0b6370-44b1-4b8a-a070-b2ceb67feeeb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a483aa9-8d37-4644-a790-a5cd3c41904e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e60efa-d50c-4b52-a278-6e321987d274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a021a3-4e80-4471-a8d7-109bb33d3586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d10db03-061f-4bf5-aed9-be6f33c4023f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e20110-0b85-476f-b277-eec8579001c7",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15de0c06-b5bd-4c42-bc3c-90176e8a0a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c65f0e6-97bb-4fba-9856-f2259cf460c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a06a601-dbfe-41a0-8500-5685420edafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fee6fa8-0eb4-4ee3-8cbe-2cccd95f0431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c75041-5fb6-4632-8f0a-434f45691b63",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aed43b-412f-4c6d-b214-2a71d2ffff4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec6da45-4a4a-4902-9010-2705ce42f1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ea3a97-a99d-49db-bb85-8c231793cdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b179b6a-6e35-4d27-b48a-61b03096a8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1a6fdf-ef67-4aea-aaca-c19600964786",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d47fc2f-4fe2-49b0-b403-6bdc81b6ba30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace8536b-a626-478a-97ca-7097b3ab9a9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f680e2e4-d33b-4453-a4fe-42eb6d58c1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a10e8611-c390-46e3-a482-198ba20090ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21e71bbb-8d54-423c-b215-58bc12b803c0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0791d33e-db1e-417f-a409-4e51dc756d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261ab18b-ef51-4d0e-8c9c-bb69997ce2fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b447ae73-24f4-4db5-ac71-0ca68181c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "170ba364-841a-41b3-8a2f-abb99c84d7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1dbf19b-680e-458f-b87e-1ecdfd5bafc0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0047c41-3b1e-4459-91c0-6b4de3703bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35fbcd90-459b-43bd-9ae6-905a5706aa51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d68dff3-ec18-4ae9-94d8-6ba1b25d3e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d4e220f3-197e-477c-8ced-bd88667ceb7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdab354-6e53-40e5-a178-e96f635edc21",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20eaa41d-b2a4-4fc0-b6d3-8a7e3e2d72cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010657c5-c523-479e-8b7e-efcae2359404"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c944199d-ee05-4a72-96a3-9af9527a93be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1404d714-bbc7-4896-882e-c60f20955b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "034c9202-56b5-444e-b3b7-48500968e988",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f134cc7f-0e10-4cb0-8432-9f80544e6d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "234f6d90-45eb-4d83-b59c-6537965d7bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9545f83a-323d-495f-9d7c-e91550b22621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6af0625-399f-4c68-a4d6-718f3dbc9a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f16cf9-851a-49a3-8c4e-d68e914f89cb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ca38c0-4ac2-4eee-b03d-59e435577c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec9b6adc-1104-43c6-a7cc-ead3bbba51e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee81e8c8-a65b-4829-8ad2-d6167d7f413a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "110234c8-d8a6-484d-b615-bd38c1301338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518332b6-f459-47bb-9ec8-68bc167c6e1f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe01bc77-c2e1-477a-b11a-3a118dfe7e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc20c313-66f3-478e-b31d-21d6522ab45d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c57df2-90bf-48a4-8a0a-4eb05f6eeb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c68d2b5c-544b-4be3-a6c3-1d6bca780e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d69b527-98ee-4dce-81c9-42126dabf97c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a27d9d-bab8-4a44-889f-933637f8ca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa915c1e-93ab-4ba6-9b28-e38a49f9b64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0951764c-c8b1-40cd-ad57-78e314a9f33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a19ffca-b1b8-4b71-9eb5-a5eb06ac3e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97306471-ace8-4d6d-a481-8f5f5dd51212",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00d6024-091d-4e99-8e8c-3ab0c96bf07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0239c241-d883-4924-bcca-6e203aee287b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a800f1df-2d8c-415d-a6d4-077d05e67e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df9386d5-3d76-4013-aeb8-53500ccd9da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942d253f-ed9b-4a58-bf74-ba4e521f070e",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4216c000-3e27-4ce3-9239-0bf40f889aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e90198-3a71-4ac9-b6e9-00a18e2eecda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8749a589-bbb2-41d9-8d64-b460b7ad591c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "667a70e0-825a-478a-acc3-fe22acc5c4e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eca93f8c-351c-4085-9873-c4b7bea8c40c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d99e32d-6c2d-467d-a190-98144fbe5a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646f321c-9c5b-4937-8874-ac1ac5f440c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75898c3-119b-4b8d-9e2a-871a8b1d2bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2164c99-fb33-43c6-879c-88251305a218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96788d91-e707-4319-8b63-0d3bd29d7909",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd9134f-6a75-458d-9ca9-be7c9241aa45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5946f72c-e041-4487-b27e-874bf64690d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9801cbd1-2be4-4729-94e9-45e70a84af3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec0a35b9-1e1c-4bf4-a102-9c0e5c37a253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019c5ae9-bef1-4016-8fb7-03739fdaecc9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edef3ec2-ab17-41e4-bec4-8bf8d18c17e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faaadcf4-5e42-4070-b01b-f70e2a730cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a341b63-cc5d-4a22-aa07-3b7cc4ee9b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cbc902-887b-4235-aff6-57f63110aabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925dc736-a3f8-4d60-88f1-662b9ffbde90",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb0ba9f-8bc3-4651-ba37-a2f4159f6184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270e8941-67be-476a-8cc4-557e96928668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "890dce98-3f18-4690-a3a0-2c50b92d41fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0d27b81-3a64-4fb1-904b-c20a536c2cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6a860c-44ae-47d6-afb9-219476d06098",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91dbf151-c6b1-4033-8577-eca2a657fc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fa8477-6243-4d49-a152-ddca83b06ff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed24a078-f11a-440a-a237-52a1a223ce98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "35313e2d-bdb8-44ea-b3c9-42129b49a1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e308535-b35b-4302-8336-69c65af61efb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5988d1d5-3e9d-49c4-ab6b-d605e97c106e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b90ed6a6-5ea0-4dd5-ad26-e635d076570c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9de434-5e4d-4192-9afb-5c6fed81e293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1897452c-494e-4d71-a7af-cd651602560d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772c4318-b1a4-478e-a5d5-646d596ffc8d",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac64747c-031a-49f8-ac80-63006a8c0311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64bc2dac-f5f3-4b64-8da8-48633feab67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "448e6101-3531-4ddf-9f03-ee2a4d6f9042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae6e18e-c786-4c17-addf-dee31e8cddfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab380f71-677c-4461-94c2-72ccfd893d87",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de13e15-1602-4627-97ed-13c025d8e81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02947cd0-899d-4ee2-b39a-b2ec1f39614b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8ef19f-1cb9-4f45-b719-9acd4ea2804f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc2224e6-dc5e-42e5-9db9-d8ceb7baf6e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb98f534-3866-4957-bd3c-2982cdedbe01",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bd0e61-d199-4a40-8446-353e78c319b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d1b641-be0f-4d71-9ceb-988011687ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68213f8-a078-4e45-b44b-9be16b9e15c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "04d2b92d-0789-4d9f-b57f-0545030d3987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f0a413-c4ef-4ea2-9b70-adc1703f194e",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e19e89c-13c3-4c7c-88ed-29bbfdb8bf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19f877bd-9ef0-485d-8bc7-023a487d914e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2c77f1-2c6a-4322-b399-408a1d37c12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c416ef30-c224-4cb9-8be9-fae11a69b5e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198d3207-5a5c-4db0-bb75-857db74492f0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf46e53-af78-4d79-a21a-26eea91210b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f9c2f6f-41ef-4cd1-b332-20a4e40e0feb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8547840-15fe-4786-8f5b-b5e33654dd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6618bf68-a493-4aad-91b8-b5ddea3b2cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f9e8a6-f772-4992-a184-0e616743bd7b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f657d16-63d0-48ff-b6d7-180e2192a477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dc2d41f-8ed0-45e5-9082-1069f669365d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93a282ac-954d-4088-a26a-8eacf0d12319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4d2df17-b84e-466a-a19d-e5a89b6ab82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b17461-bca6-47fe-95de-4b984dd844b2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8164ce07-dcd7-4249-a68c-cef5dce89a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc685344-2655-4e60-a7e5-ae4ffa3e1ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c023a52-bfb3-4e01-b7fc-c054f2e08135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0a62e79-e565-4ef4-beb5-4f14dbf1591e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79979b3b-d0e5-4ba2-a2ad-3f1ea20cb4e0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50449508-0934-42ff-9499-2772b7ad5f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a90bcfdb-fcbe-4619-9f07-acecf506d4e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b06ebc-6518-493a-ae91-3c258b77cd76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "98d694aa-162a-4743-a16d-c1eccd4dee6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648d5f86-38dd-4d3f-9d90-1e3c9aec5cc4",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe91acc4-d5c8-4bcf-a1bf-56c9f27c8942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e50bf90-e07f-4de4-9e3f-88a65572ffec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a68b901-26f4-41e0-af0d-77e7de1875a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "384069ad-7a4b-47e3-b955-f39471e87654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10379602-f04d-4515-b0a0-651f80689093",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4395c7de-8c42-4602-a1e5-9d0bb885c272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a37c519-f07a-4941-a6d0-db389d2a4ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a256fe-84e2-4d18-82da-85863bdf2190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "16856641-2af9-4892-b793-02409609646f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221efd6b-cb46-42bf-8b65-2033403767bf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf8a5bb-619f-447a-9c0b-45e856cf4167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149e4a9d-2e6d-4a8d-a8a8-cad4ce57f8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f40c050-0fe3-43aa-beba-1cd1b3e76bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b852e44a-63f2-4809-a4b8-873ad5ccc647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b430ad0-a5be-40d0-8749-1cab50ff2e01",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e19ab55-d735-46b0-af30-f13033bae9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fbd5f115-e74e-44c4-b753-af10e0e29fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe79aba-ed6b-4e35-869e-c9af555b516a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "21f596e2-6f43-4b1d-95a4-dc808af3fb10"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1fc607c3-7eda-42bb-8da1-169c439b3379",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8aef9664-333b-4148-b45c-429766232e43",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5cf4bd-0168-4e19-a16e-678389309b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e129a9c-804c-419f-93b8-3a402fc64baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76af24b5-5355-4618-9be5-4b8f8e3b1d6e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "767532cc-ad32-41c5-bea5-ab84ee182ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec4d426-1155-4bc8-b329-fbded4ef822c",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a076f4c6-42d6-4215-a767-b79cfe0ec3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e812a12-6365-49da-a7a5-b70a5ad61773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcddcdc1-709b-4f73-9aff-d08ecb5df507",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dcecba23-59ca-4aac-9d99-ccb025853ad8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e0eccfdf-695e-4e2d-b96e-1a37da9cd5b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0566beea-e77e-47cc-b635-70cc531dafd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e607fb7-6669-4cb5-b005-55d696f509b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "983711a1-f1b6-4452-bcaf-bb0653a9514d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "982c4d61-5472-435b-bcd7-5e3507e38e87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1079a3cf-6e3a-4823-a3cf-9a1a39fbdfe0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f42a9535-782f-4345-962f-b482466e0179",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1a30bb6c-70d9-4f6a-933b-ae7a478dcf84"
                }
              }
            ]
          },
          {
            "id": "14dcf2c6-d9fd-4ea0-9f71-d201840414a8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f4de439-8380-4408-9e58-eced50823607",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68da2da1-f597-4735-be1a-616b871082ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82fe62d4-3808-4a7b-b179-0ec35d8e2f16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4077b66-b7ec-4d67-994b-b43cc6d5e2a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce2a371a-cb01-4d3b-8b61-e3f896510e7d"
                    }
                  }
                ]
              },
              {
                "id": "fee58b99-5d49-4542-9e7d-7a728627ec54",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f2b2309f-b5ae-4abe-bf72-ba315478e9ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97e2d49c-aba5-43a0-9a92-8786daf528c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f51b5881-7842-4577-b775-550d38548a25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6f92cc2-561c-4ca5-b79d-9c9aad292526"
                    }
                  }
                ]
              },
              {
                "id": "efb26a50-75e2-4d0c-98b2-6f8d9a8110ca",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eac7dd0f-2625-438d-901b-4ddbd1dcbe7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d0c5210-d918-460b-af2d-be3f7cdc3c26"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "20930725-e17d-4b08-a9ef-56b9bc72a950",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9b6d4f12-24c6-4c09-9b55-0e7d79fb30e7"
                    }
                  }
                ]
              },
              {
                "id": "e39d9bbb-4fb6-4aa9-b1af-c48c7eaa3e1d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a7a48b0-6e14-4297-8158-fdd9bba04ecb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e84eccdb-581c-4167-ba23-cc72a1890b0b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d8b7c0a-1c97-49ce-92fc-b950349b9c02",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dedb0749-9aab-4e78-bfdb-280f399a86d8"
                    }
                  }
                ]
              },
              {
                "id": "78f560c0-e1a5-4007-8b01-bcbadeb06864",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "029e923d-6886-4b20-b99d-e5c3374e3c36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e13822a-7b46-4a00-a846-1ae0ac57082f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b3b9134-2f10-41f6-9829-8ba7799a0ccc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "b156bbf2-4b79-4df4-b64e-023589906b4f"
                    }
                  }
                ]
              },
              {
                "id": "48bf0ada-c34c-4fef-a4c8-23de38aac6de",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a05e9a7-3e5b-4018-8039-4c03fb67b03e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "66eeae28-d91b-47b2-ad3e-839aee561b28"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cf29b699-fd93-4389-a388-fb0563928837",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a6a3bad4-cdd9-4a95-ab7f-5cc2a8777ed1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "be8dbc51-2ad7-4139-825b-ebd01aff97df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "67247cdb-36a8-4a5c-95dd-e28a66c3ba6a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4cf6f787-010d-40e0-988e-7995c780d715",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc28cb66-8437-45f4-8570-9e71e776c6bf"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50c10edf-b7a7-449c-843d-a4da9702f798",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1081a586-fcb0-4a16-a53b-cfdb80cbee8a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae56e295-03e4-4714-9ffc-cf681aebf21b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a91fe1c-d318-44d6-8cc6-a29fe511c6d8"
            }
          }
        ]
      },
      {
        "id": "93f4d2a2-8edb-4c32-a751-fb8f97791d4e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "700b71a6-eb1a-4663-ada1-b4934dc43374",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7916b374-d0ac-4ab3-a549-91fe4dfc674b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "78db6497-8ed2-43a1-9d02-cd3d55f58201",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c8bd6d-5210-404d-97e3-bc651dbb85e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f25c0c00-5d7e-4a26-81a9-e6b42770f4aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a91062-cba7-47ac-93f1-29a4bd8a0353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "754d2cbf-73c4-4b54-8bee-6abbe2020d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb0136e-2191-457c-bbaf-5b37835b9f38",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74888063-982f-40d1-8b1d-87cd6a1ec09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6be322-9d3f-4cd3-be67-ee19280acc9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81e4d95-aa05-4756-9227-5d0701cefa1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "20fc46de-b275-47cf-b493-670da315ecbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a60781-cb8c-4bdb-8de5-a779927ba1e9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd23c452-58eb-4cab-bcbb-9a5c2f0c1225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462c5248-e8f0-4797-b377-5fff6a63bd88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d624269-55f8-447b-a809-a4659527c3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a4978ce-01fc-4596-84a2-bcf618346162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "187acfd4-4a25-49cf-99fd-f377705c907d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2538e0b7-7cb0-4d8d-8cd0-d73875106a44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c680b8-8321-4e19-84c7-772dd911e4bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a223ea78-00f8-4bb6-a227-9ea4fea84201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64ebb2b8-fe70-43d3-a7b6-55399e40e332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc624c75-ae04-48a0-a0cd-71e912a7b70b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac47529-79c9-40f5-a931-b95e3696fb00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c27e804f-7a8b-4769-80ed-eaf8568766be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7eab6b3-9425-4581-8d53-f6f3147dccec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63ce7014-afa1-4eb8-b385-1f27388e8d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce358ed-a794-485b-8775-411230495ca9",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28e198d-1649-4414-895b-cd6509376181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3759317c-132b-4c2f-9181-e87623ef3015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3157c2ab-3fa7-40dd-858d-ea59c5c00359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03c0ed0e-d275-452f-bce8-0722581f8231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52ddd21b-3e3d-4b8c-ba93-3c0a3b9c02bb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182f2e33-9504-4c66-9f56-4c598ffa7e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e0d993-d66e-406d-8126-b0478b542651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdcc1266-e963-4e2b-9c19-2c43ddad2c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "75ef47a2-a1de-4dc2-85fc-ad150852c804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e674c7c5-ea17-4157-bae0-727807d99266",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64603fd-2190-4452-b822-9562b41f658e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d65dcdf5-53a1-4fbe-8a5a-7fdb5b402461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "763bf461-1e81-4591-b515-4d417a88859a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e71e1f7c-66c0-4f01-94ad-a83d9fdee494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed75f948-d564-4380-982c-dbb768810e19",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10140fe-5525-407c-b050-bb736cc0f7d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72037c02-5227-4ae1-a807-8ccd398b0bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38dca8a2-8071-48a8-8b43-0b74e7464ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db9b550c-cb35-46dd-97a4-44c0e6eed810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de19d61-4383-4afe-8522-a699b4f5caf8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "205dbc32-6d29-48c4-bc39-1c2b1600b38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08206797-6b9c-4da3-80b4-bbcda7af35f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a3b122-bf49-4632-86ae-fac1b76e2615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd360334-321a-4963-b59c-d1c5337251f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360ecc40-95dc-4e83-88a8-33999af47a84",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d8230a-6ce3-4896-adf6-dd1ae6d93e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9253164b-d3da-43f3-a728-7a6cdc5a0802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401bafd7-e7f1-4b1b-95a7-f1082be32cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ed126a3e-532d-4fce-9644-8ac9c350d6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74325f7-4e35-48a4-9389-21ffb69ef680",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92b980a-1660-4b75-97a1-3cd9739eeeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c0ff59-c97a-4ab0-84ac-bc34bdb54f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322980cb-cf56-4d83-8216-e6876928709e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6689ea8-5dc7-4631-bd55-8dcc7dd71481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8dbc06-54d0-4a4a-bd25-f93a79e7f4dc",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595bf11f-e8a6-4f11-bd89-298ffae63d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94db6f02-e7e0-4e9f-9c22-8e93bbc2197c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d87b3451-d73c-41c7-bd34-0a4c9f3db7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ef735a9-aa69-49e5-92fa-5d1219b514d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fac8de1-6a0d-460a-a9b4-8bbfebb3cb0a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4b9087-7360-4009-bd5e-5a7f73f47947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1c5100-6cd5-4190-8e53-26b92d1d3ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee8512c7-944b-47ec-a135-f4d88e973753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "659edede-ccbb-416f-93ab-cea6cb8ad162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1399243d-bc4d-4240-a21e-cd6ef2251578",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9141003c-a6bd-4d6b-8c40-bacc23612df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b17b055-0149-41b5-8b0a-a1b98815cc9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7223e7-b35e-4e40-96ae-f7f3496f12e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d84fbb36-aec9-4cf0-9542-fdaeff71fb51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc30099d-f25a-4a94-91eb-7b3fe2144fd0",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f65991-f93b-4875-b43a-e9808b3979b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6a15cc-89ae-4f46-9f96-e706269f2126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889bda44-3caf-48dd-a056-b4b556d7cd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a51b810-ae40-4f02-814e-b306a2526a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e6ea121-49ee-433d-b1ae-e51ed06f28ab",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a491ec1-c694-42d7-bb9f-00b18b5e8a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70db8114-ca44-4dad-abdf-0ed4f5560493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d13d1c9d-898a-4f2c-b828-d5c2787efc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c83e83c-e670-430f-945a-af925c5e9f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da666bd7-62ef-4c2d-92e3-d897124d642d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d163c7e-5e8c-405f-a4ea-3c2d046131d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5050ab7b-6c78-407c-8755-88760d25e119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca48154-2818-4c13-80cf-73aed1a40212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d29d57de-1a0b-4b57-8f6a-2b8ca03eec08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e574a6a-ed9e-4126-bd63-25f7d99b9e53",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13e78fe6-f86d-451d-a2e3-7ffedacd0f3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81dad035-25a7-4f07-83a0-a29f159554e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fa89ce-3636-42d7-8f7b-8a13436c335b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0de3e64-a029-415a-b15f-ba8c41b6d8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeed3c84-5699-4c5a-b3fa-6c2e8f016ec4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aff9eb5e-0919-4a29-b322-079d8a83433d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d582251-5a01-40bf-8965-d2d50b7d824b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c45f79-db96-430e-855f-106693049908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5a2df7-0c6b-48cb-be70-9be83799d6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1337c228-30a3-456a-8611-0c9cc2eed27d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37a8412-efa9-46a3-bbb2-7d70b927e84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5a6e0f-f013-48a3-81ec-e8befe633f24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da46d1a5-3c77-43a3-9793-befea756d274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce22db6c-115c-4e63-b266-2ecceda8fabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9658a0a-1c13-4ae0-90a0-c862a9c8f601",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cf5369-6a5e-49b1-9e3b-b3744fee20f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ec93d1-4202-4d45-b90e-ed54214ba80c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a002bf86-60bc-4d73-90cc-06707c97fa40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc319e0f-925f-4afa-bfbc-1acdcc21ec54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88900122-9d6b-4734-ae08-8f4f9815a93f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91310717-8f73-4839-a880-d264e77c5c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75600aa-fe47-464f-abb5-c5f7b5397766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12638f2d-b36d-485a-8dc6-3e27f7c5c2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4520e381-24c6-4572-a9c0-8251fe42afda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d2865d-135e-4c7b-b205-fbd8c7c6083b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def267f4-9c79-4316-b4f7-d9c60f5db48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0530642-d302-4f06-8418-82e6c0ce5e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7866a4-39a7-480d-bea4-622526159920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00a330a7-612e-4975-8e9d-4f3744f6c561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c122b16-945a-4390-99ea-82f7c4a8daec",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20167b7-7c30-43af-876f-8f2fd63aaf6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d19f5b-0420-4806-8ef3-733687398f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dd439f8-f37d-448c-b73b-f8a85f36f472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1a95d9-ad62-43cf-b8e2-a9b931694886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "547e50c3-84be-4149-81d5-2c5e2cb59842",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbcaa90c-b345-436b-af52-a76b5b14fcc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c3a4a2-16bd-4daf-b6e7-fb95a5d2360e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6c70f0-ba3a-4752-a72c-4c43e6fdc14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ef4d8f-4e86-49ce-b04c-7ef0f8a8827b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9459af18-1fcd-4234-a7c7-6fbbb5a60617",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18f5e549-0276-4352-b960-c45714f113c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd2df8df-0d1f-431a-8a02-71f1f30110ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a1c4fd-3a5c-44f1-b7a4-f55df8130d23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3c1324-29f7-4e58-a817-6715d5693355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2859d20-7dc3-40a6-9d59-d172d25237a9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e13c12-f0fe-4639-9219-fb392f20da46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684a2298-43d8-41f7-8a2c-68eedee2c864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5817c88f-304a-4be7-bb20-944553f27b68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2a2d95-aa64-4b44-9443-3c64be449171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693ebd4c-9df0-4fd6-802e-cb86b48f00eb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6827b57-babc-40b2-b1a9-560254a4b103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95c01a49-2fa9-438b-afea-6e4131492012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e6719c5-145e-4751-bae1-2b5b05e1662c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75cb211d-68e6-4b8c-b07f-650de4cb8534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b68964-e20a-47e0-ad68-981c1db0371a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92f95c0-2498-4fd2-86ed-fb3860fc2d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fbceba-9fe1-4e31-8318-817025b51af7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d7a070-685d-46d8-b8f6-36280706d764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "283def43-d20b-4b1f-9a5f-158748ca7d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82d84f5-8d0b-4f30-af4e-01545d2e8caf",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0226ad1-facf-4d8b-9422-264824726fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff39819e-d036-4ffe-8fa5-a893954e5d9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "904b03bd-bf29-49d0-a15c-166949c477fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebed555-41b0-41df-a6a0-82f079f75e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e07815c-f6c0-44f9-9a2b-653c6037ab0d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa22e58b-aab7-4530-b7c4-9b1db4ff59dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eaa09f3-6355-4838-b101-92cf3c156b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16eabded-5e4d-402c-8007-70834c96beb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd5d6e80-3e4a-49cd-b6b9-e41581e1ddc0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1101aed2-09f1-42bb-8b16-76f5458ddbda",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b67e77cd-bc93-4118-bf3e-c2aea9804510",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30d76b8-7097-477b-ae81-6260ddfec3d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d5e85f71-42eb-4a6f-afdc-4433d8022f57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6be75f-3837-4368-a70b-37383ebb1a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "91e0c285-6425-42d3-bee1-d8ae15f70078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471f1062-9084-44c9-a168-54ef1326cd37",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac77690-683e-4403-b013-a08ce8c16b48",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ac1086b2-b331-4516-993b-bee784a26222"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56dfc748-08e6-4587-97e9-d02aa6ac2c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e207efbb-a38b-41a1-95c2-64da934e338a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "474890db-f65c-44f2-9e3e-b3a865a89df5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9301b601-9ba5-47a2-abfb-1ffdd4ae671e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20c67a7a-840b-4dbc-b11b-4034937a2f4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb8fbd9c-21f1-4552-8fda-13989f8e7921"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b24380e8-c03c-42a6-88ec-af2c78c4e4c1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7b6a10a4-fc06-4203-9994-1f4237184635"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a4e24a49-427e-4c74-a61a-35de7d8e65af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15eff1f2-14b6-4897-bb22-96b55d0b6028"
            }
          }
        ]
      },
      {
        "id": "a632de01-d856-4529-a93b-e444d510c31c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "bc52244c-9023-4bbf-882a-dba68767a4c0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c06dbd60-b0dd-4546-8cd3-e866c87d8a91",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0c473f58-e96e-4882-a17c-5a7ca39c6f9e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3479566-957d-4dfe-add5-ceb9961d193c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260d20c5-76e4-4502-a2d7-c6ff3b24a8ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a521d9ee-fcdb-4799-886b-3f7d8f24c21c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a3359d-57b5-404c-8033-e84c43a622ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4be445-3a55-4a34-8698-383486fc9e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67295782-2dd0-4bf5-8d1f-135a034f0b2f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad8a0ae-115d-4b43-adc3-0cd479eb1ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8782ee1b-92eb-401f-9b80-0a371207426b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b68bd1d-c48f-4061-8845-7c58301e1600",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473918e0-1980-4dc0-a920-2abc9a14bd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "008d1672-c6fd-43ed-b12c-87c66ed97a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3eef6e9-6795-453c-a797-9754ce23bdfd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8b7422-da81-4ba6-883b-cd326760a9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1a4fa2-af64-4bd5-862d-696d40c986f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca081646-c75b-4dbf-8767-b76c3527f2a6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "963758f1-9624-44a7-b2c1-5730d1557cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6931724b-b54c-4797-bc75-19fa86d5be91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67d98aa-6d4c-4fa1-8be3-1a2c624a5280",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64294e56-d9fa-4e19-9a3d-fac42f239b83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a06dcde6-7096-4663-8991-d33a4c143e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7ef303-56aa-44c1-ae2d-2b8206896f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2e6c75-752c-49cc-a15b-c52961ed7ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452cc1cd-ebcf-40fa-a979-b75f4de74677",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5b235f-7444-4421-84c9-b9c4e9133ec0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36b05b91-8e7b-49f9-8f63-5efc8422d307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c503e24-71e3-48db-9326-f639151808a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8da9954c-afe7-4753-b8dc-3c9ec48a3f02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561810b4-cd82-45bd-8cd3-212951558a44",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f9b6f4-9816-476d-91fc-380e71918c83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e8a22b7-c88e-4505-936c-ad7584f70117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb9c7f3-48d7-444b-975b-a3d93cc91b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d102345e-74e7-4aa1-8cda-ef9ccb590f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e36c31a-7cc5-42d5-86bb-f7870ffa901f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff490ce-0d67-4c1d-a0fe-7d977a827787",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3dadaf2-8fb3-4947-84bf-e525d85824c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3494f5de-b2d4-49c6-bf3e-df6f5345737b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79607271-121f-4ed3-9e3f-59b65fb89136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef02b231-1fc5-4c37-965b-62228486137f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd5d6abd-b813-4775-902b-f0443c92a7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d386e362-76ab-47c8-9eda-5579dd7f6db3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6577949-b606-4f28-8119-af7377f0db8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d804018-43e9-448d-87bc-07937d28761f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cb8b060-0108-42d9-bdd0-0dc8c526ac14",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfa41ee-0a68-4e20-a3f3-4c866e804cee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fedf4d1-8e7e-4b66-8d66-2a7e05db2960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39b6884-b575-4797-84d9-42ac650128cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a4075d-ef9b-4b13-90f8-b6ecd73df101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c83b9254-95c2-4816-abd4-402d0886d010",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621d4d31-6744-4a98-9a44-7107c4f58ec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf87f162-020c-4d1e-b168-2baa0f6edc23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "256f6567-d898-4af0-a702-20d3063a9bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d36b88-eae0-4346-ac8a-854cb022a4fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d67daef-8071-4523-9bcd-ab4376b75892",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5c3ff7-e4bd-4704-b762-72a4f5c476f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c11eb54-cf90-495f-8994-0e109dc80269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd4f1d9-ce02-46cc-b8a8-1d4f33d99243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48229483-2b7b-404f-b2e0-2da91c7d677f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af39ee5f-3d73-442a-9a5b-d16c69c992cc",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d293742-ff30-4796-89af-3756976c38f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3113f151-eaee-489c-9948-8904f7dc9c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e485a25-c964-49ca-bb25-47e97689e0cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c1543d-0819-4340-86a1-d29e08be3b69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bde6537-76b6-4cb2-834b-17113ba2abd9",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88024ac6-42af-42d8-9ae7-819d02c006d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0382c88-bcbd-471e-a99d-6e4143826465"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a10bea-dd1c-4e01-aaea-70e36aa462e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a80ecdc-2f15-4530-bb7f-291053b35614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d435c08f-4129-4db5-81a2-815ebe4144f3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171bfda4-ad68-4d13-bb73-0b7d4e923831",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aca745e-1b63-4f69-8468-62f78f06b375"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb744dd6-e582-483c-a4f3-ec058d9c52d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f324417c-e8b5-4a5e-93ef-1c7195aa09bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a78ec07-e60f-4b44-a033-c66597731257",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d90dd166-ffed-4522-978d-6ae58f669b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a2f42f3-28a6-42b8-9fb9-0789683e75b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd3aa22-f947-4a81-81b1-6a3085623fa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d9642b-8f89-4a2d-ad60-19017e6987e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaf81ae-6b1e-4019-b1d2-70a405d1acec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219ff511-8ef2-4023-81db-1a4a37a947a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a526dd27-2ebc-40fd-9b9f-036268b1beb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbab2eed-349a-450d-b981-432e2fd802b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219f40d6-3088-420a-960c-a29ba632e675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9bb430-1b48-4d91-ba18-83d776872509",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddf14b4-c404-4fb8-a013-04c146137124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01a1a7de-de57-4d52-9812-ef51e3c5198a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0feb51-787d-4da9-a77f-ca4a6224e441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c95984e-ae95-4680-a23e-ab3df653d625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80776514-5d29-4d33-b0ff-69216cff6ad6",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc6bd3f-fbe2-4a88-8783-258c48a2a930",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81b98ec3-a3b8-45e6-8536-b6bb64b593d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adf3d3eb-5f8f-4cf2-903b-4a97081cfcf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2be0168-d401-4299-a6d9-c588b67d17dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21abfe0a-d736-4a54-a885-db9bd80ec516",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbc70bb-9428-4d3e-84cc-32f3b222d2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944ea821-0b42-455e-b197-b09acf1782c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f183d8-25c0-4963-988f-6e8571f9bd57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e925b8d6-92cb-46c9-97ff-0026efbd9189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d8ebf1-ede9-4520-a2c7-ff097026e31f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28eec0a9-19f0-4fdb-95ff-b09bdac80013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66558bb8-73b2-4286-beb4-147835bd405a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f486325-e097-46af-b0e8-78497ffb442b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58bfb7ee-6662-48e8-82b8-d9eeb4c479b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd62103-f0be-4ae0-b031-916f2d17d4f4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed6e760-0915-46d6-a6d4-602b177e23fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25b12b25-c9d4-4ca5-918f-34a64387385e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3149824-d83a-4f26-ae34-99477afac885",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d875055-bc9f-4fac-ad88-b09c5a33289e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "948bdd31-174e-4e52-b4dc-1d24e8e291f3",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c776fa4-e909-4c69-88be-9ac8b3bead4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecdc4c8a-4287-41ea-84e7-fc8d015f3ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bf4d35-f209-4834-8540-364ae5c758fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0e58ae7-71d8-49bc-a209-dc0e79170455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "629cb4be-e763-4436-8662-a927787165ee",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a36157a-537f-49a4-b323-a31300ab426b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "817c5580-eaa2-475b-8f46-41ec5d220420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15b3946-8779-4de7-bb2c-759bb2bd7e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd74826-b213-4aa7-a6a3-e1dad8eb3b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98832171-96b5-4098-9daf-a1c5bb0cc7e3",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bc6b38-a077-4b75-982b-8e0b1b1e68ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41a3d085-770d-4c20-bd83-28e5d35099e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f620c967-8616-4e25-9d5a-4e5587205a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2adb4981-754e-466c-8bb4-484b3ad69281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af35bb90-eb71-4efa-b185-82537782609f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e79b213-badc-4931-ae18-054f79c0e7a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44b77944-04bd-417b-b2b4-384936904e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44df5c00-f2c2-40ce-b78b-0f397ac181c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd151ce4-f979-44b5-875f-a7d5667a28d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cef9cb4-b428-42e6-a042-b906c55a730b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b3320b-b51b-4f45-86ff-907d24869e84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beb0a483-bde4-43e7-b293-d2b5f7a19390"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5683f56-9c9b-45ca-85db-9f4f62967d7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3299a3a8-ccba-4b07-b3e8-c54d05fbc269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44e0d0d-85ba-409f-abb0-586eb3b3e5ce",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b484b662-bdad-4a5e-8cb4-b37c6e10ac76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd58b1be-43a8-44f3-add1-4dc4ecb2bd91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7cf171-0565-4b84-83d7-0ef0548d0e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0004d1e-fc82-4052-800f-12db22da40d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8eb3557-07ec-47ec-8f40-81c4b01c66d1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a47793-17a5-4bc0-bf2e-bcf231336779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f613ab55-1ad3-417e-b567-8accc8fdb6e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56bf68d-773f-4cef-a921-697132f2d9a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeceef5f-af5d-4435-8252-4622a7e4311b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d5f3f4-f331-497d-bd39-c11a8dd244bb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc5a4dd-23b0-41fc-b57d-2848dd316235",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "836e3de6-16a4-46c4-a25b-00c592f01b09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b365bc2-a634-47ea-a307-152548e6f302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9c8b62-7351-48d3-94a4-a50f58e1471e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f89ddf-0148-41b8-bc94-02b682b0270b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad55591c-db89-4a70-ba1d-cc513bfe798a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fe066ee-5cf5-401d-9ec7-cc7fa7d0531b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff25ab94-97ae-4dc5-b82b-e7b7f75d0d3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58485f22-8770-4878-bc62-10311deb614f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed803ce5-f3d2-4232-9fa1-5f38e0ab656e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb5be6e-6fa6-4953-b3e9-6a2887d24417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff608bfd-56b4-48c1-a00b-fb877b747d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7906233b-8822-4154-9d25-ee1ff30ae7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9005d0-ccff-4f61-9eb9-3bfb75a076ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b47b401-59d1-43e6-b9dd-de9ce10286a3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d876e000-9611-4395-b8cd-8fb7a3c45922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0246e51f-8849-4149-b073-03a2c508b8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856e2c14-00e6-4980-aedd-4add35339883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd0bb4b-4af6-47eb-a3f3-37fc3a83a562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea28fc4-b82c-4f67-b5fa-60a11c2e503d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41633cad-3f94-4b06-b9af-8d6d6947c57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2763a2f-2aaf-4a9c-b01a-6a23de936cbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8105121b-e12a-4f4e-b0ab-7f111557407d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5c67c0-7485-46b9-933c-28bb40e8b291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dd8b99-fc8d-42f0-91ae-6fea6d7edba9",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1290a11c-d439-4a47-9818-870e62820c04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24ce043d-b8b4-42ec-abbd-46f843db5444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8543573-0071-4050-8ecf-f32e3cf5c9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9126f7-0eeb-4273-b23b-70dcc95e8492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f2f43e-f2e9-4cd2-b306-adca46f18aa5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f5a32d-93bd-4f3a-b8f6-50ff684de05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e838deb-fc7c-4e0a-91c9-94a10881ba43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a2b6cf-8cac-4d55-8067-63ef92180f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2eb0663-27c7-4fd6-a127-374a81d7da3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5054da-e42d-4fa1-a018-3b62378e117c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac4f4c62-a900-4427-87eb-bc9daf8d59bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fd56a5a-818f-46d3-864b-0cbb02246d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85542b76-f915-4bba-8019-c79f4b4e0bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c80323f-8c7e-4465-bd4a-6efb6f8424e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c91c659-9742-42b1-a3f4-125f0ef0aca3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d89a6e-f3b6-4467-911e-7f9efe362241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30eecb2b-c317-4133-8d12-ff3e229353e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a88225-ea02-4afc-9fd0-b754c47efb6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149d6183-7592-4a2c-98f0-0329aade95eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "805fc120-efab-429c-9595-98b74b92ccb6",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c90a30f3-f1b0-4455-8a50-f3e1c80f252c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8ffd44-e694-4cb6-873d-9f2e5a418b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bb837c-8187-4d64-9349-3c5209782f15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb9d0bd7-d400-4de3-82ef-037d7196852e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346d86e8-ce4e-4158-9090-99fab7281ff1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da3f353-28cc-49cc-833c-ea6fc1056dca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbaeefc-23f4-42ba-87c4-f8ca7c84fd4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5dae3d-f00b-4218-967f-0203de596a06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6652512c-741e-4e53-8c02-f13213c6578e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5a7329-6139-4dfe-bba8-07323f05d3e8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869ef443-e957-41ea-ba8d-f68536b79ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d85e167-cacb-40c7-979f-977ffa6d0bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e2c50e5-3aee-4776-843e-a97feb9a3931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2e4bf5-ce7a-467d-ae26-159a03ccca98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a34b28f-2069-4a68-8ca1-0bdecc63a23f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca10fa75-d027-459b-a604-a3c2e84d0776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e17f0cf-b1ff-4f26-8503-94ce635485f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3bffcb-779f-4833-832b-20eb59a8b6ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "418e91be-b3c9-4d1a-9c0e-0d72c9097765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7094b5-e539-47f8-a593-69aca36ac266",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fdb147-1785-4128-a6a4-fd1837e54926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f19f9f3-5d58-4397-aaf4-5329d958e9d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77099818-7ae7-4f0e-93ec-f3293723f38c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9958e213-5de3-4401-b3c2-8aae0fb4588e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53191b6-1423-47f8-8261-7117a0eacebc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceaf836e-47d9-4744-a5ad-e857bc2993e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc9f02c-89d6-47a5-941e-7174521552b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0383a89-912b-41e0-b8b9-5d6d9be04eb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f872cd53-9cb6-4ac5-9524-11939af44ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af70a3c6-9a76-4a73-9e7e-f20fceddcbe8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5828b12-7d2e-490b-a5d1-b347cf9e42c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72ead246-90dd-4768-a699-fdeab4492f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8469d87d-9f7b-46fb-88e1-9325a248627b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529e6f50-147d-4b0f-92dd-0f76e4b14dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90804b1-53bc-4f57-8c83-915f0e36bc74",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb2636c-caa9-4874-8c1c-17113c29c787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e816ae4-c592-438b-8ed9-1842b30908be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c89c79-c546-4c9c-a085-b0a2561305e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6241ee84-830a-4c09-90e4-5981ba00a7c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33a9dede-a7a3-4d60-beae-0f079f9282bf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6295578b-63cf-4718-b759-961bcf1cdc77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "deecf155-5fa6-4c4d-8e4a-808c6b873723"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f390a917-71e2-4f23-bab8-3f7db7d9d828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72e670b9-1394-4f14-bc9a-70900d808716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4b92ad2-9442-4362-8f2d-1d789960eba9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc267474-4302-4245-b111-7b215d5e3fac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53e6c2e6-e63e-40b2-a03c-e8f075d6044a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62755d5-3f94-4d0e-8aa8-f3b56bce33c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d56ce01-4313-4e8b-a503-1ee3e7024250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6cc9ab-be83-406a-8ed9-d5283c764d58",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2183afef-5658-44c1-a588-d9604362b714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fdd2b69-0b3e-4ad5-876d-556847ae39df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d04d940-dca0-4c70-b208-6531a30ece91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d6be66-647c-4b2d-8656-9a979046d610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73707d82-751b-4973-b7e0-31ec15c7180d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbc8283-20b6-4e0a-9c44-c365b80f01c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81120e36-9348-45f3-86ea-3efaea4d46a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b9e092-8e15-4470-a9a4-b009d5b3062e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9291616-c53a-4c3e-9387-d19e3901c001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfb8817-3296-4daf-b765-c077947bc22f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c70d079-4ab4-4887-b7c4-b58e9705d366",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75d42662-ecdd-45e1-a1d8-e34af9732452"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff09516c-76b1-4819-b4b8-e3932282eb53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04cbf5a-9b74-497d-98c1-02e1281ae926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89088df-6086-4e5a-b623-7826f0bc8cdf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "881495c1-6588-41ad-b474-623e84bc2fcc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8adff514-3e5d-4bb2-b99b-974c0d9a4d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95fef0a7-285d-40ea-a5b5-4f54a4054db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2228cd6c-512f-4cf4-93cc-da105569359f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c187f2ec-723e-4c37-9229-504da3a3efdb",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44fd1d2f-be35-4f34-9231-7f4be9ef56ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840dae29-4036-4877-8ba0-b339ded2d7de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399c24c4-78d5-4406-9ac8-5f361514ca31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30445999-fe1a-4b96-9187-d1d47c5abf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d43b90a5-589e-443d-a0c4-1feb352c0d69",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f56938-f4b1-48f4-a5ca-f47659601755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22eec46-eb37-4597-bdac-e61cc43dd8d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8ca559-a1e7-47c1-856e-2c2545a7b8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c308a76-4497-42c3-beff-b231ea5e4bce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e583ff4-017d-4ca9-aa27-727a3e4862da",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095fa756-f88d-4aef-8485-8a40c4ac2000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ec9fa7-0ee6-4548-a97a-69d4b060e4f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8bf91e-ee66-4ba3-8481-1b3875cfd3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab17e0e-cbd9-4fe7-ad14-e24135017d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1b3d7a-3736-42bf-bf1b-b0d61b57161f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760bd038-18c2-4b5e-8cf4-2657400009d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e9c71e-1c81-4a68-85b0-fadddf962292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c500500f-4c16-445a-9136-495162b429b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7740dc4f-85b9-4946-b5d8-8729086e5510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add86adf-c92a-4d82-8fa0-0c7063ca1e23",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2111faf9-fef0-4aa5-b15d-4d2fad5e2ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c4ef4f-d414-42d3-8735-f60637682217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bad0825-eb52-42cd-a64c-455ed34b44e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3b957c5-a9ca-4f9f-a8d3-038b994cc724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fe54d9b-c1e7-43ca-828d-25bcff2c0cbc",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb2dfcb-d569-468d-8eb6-b1c6d8741d6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6622360a-08a9-4365-a604-05516d11ba91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fac0e93-ddf1-4b37-a706-991703d4860b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b572c6-1519-4eb2-9c4d-3f45d68684ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66ad34b-ffe8-4ec7-9ab4-b64609abb2f4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ea3221-12a1-4689-acab-7d4a6a508344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcba2099-5961-4a89-bfa9-680494546551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c37b1c-872f-4ab6-b136-2f810f1377c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46822106-0e93-467f-8d70-48032ea67722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30542802-f7fd-4735-91e2-66dc35840e11",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ee38c0-064c-4ee5-8674-97c796f2cb60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9826f8a1-508e-4b5b-bf79-2f0f2eee178e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152c1860-70fd-4aa7-9192-29145f3fb24a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281cde0e-678c-4a2a-b9ff-31b3e456b5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed8f705-6744-489f-9e9d-27cab1ed1291",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672c01cb-5e03-4996-88c7-a94a88cfd279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398cbe14-4a47-4fff-8a60-94408968beef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0995f9-37bf-4ffa-9551-1da9121250a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d30758-1216-415e-b67f-c33f0b80d6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8636e700-a1c1-4b67-8e08-4e7067cda604",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46d59ad4-1d40-4e17-952c-751abcf5f846",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37a85131-1da8-4a23-b4f1-a1abcfdbc8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0842bec0-ef3c-47bb-a3c4-d3356eef469e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35c9f35-7235-4d07-84a1-9014be816e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6bedf9-156d-4af9-b794-d6963e3e956c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "117866f7-2d39-4539-a467-bc9965b46a60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80264553-552a-4055-981f-32e7c9d8d2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f26ca1-1893-4281-b286-f60d19130c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7de47d3-f8d6-4cd3-8a73-39c6641ef859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf913fd-874e-442d-8692-ba3a3fe1c37b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5360b7db-db92-4f02-a214-5447f12db55f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fcb80d2-fd93-4455-aadb-c1b8f00e3bc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcb6335-037b-41b5-bf6b-bc43a1abcc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca20c71b-d5b4-4902-ac8b-b879b587f2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ed768f-f550-4ab8-9b9a-410a90056317",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "802fdb13-74f9-4f61-ad49-9c15dce96dab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c874b91a-1be4-49d6-8ab5-e656c81893ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6750ae-61f2-4157-ad40-54c6e8c244d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f52bfd87-2e29-44a1-9cfc-2a6204cc0934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66555395-551f-4dd0-8873-5717be7f367e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852e9c25-0768-4df8-8330-c1ca755c097f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "334c688a-fc52-4a23-8abd-679f1c020ec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c37184-18eb-4e62-a6e4-b380219cdfd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62786815-e79b-44b0-9798-8c2fe60ed24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7154e54-b889-4ca5-bd38-2ed65f3f650d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3942f7f7-4055-41ff-bea2-166468ff65e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b27773f6-bd04-4087-a809-c415be5abc7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87f7f719-97fa-45ba-ac47-1428fcde3e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b302eac7-144b-483d-bbfe-1a0052f6bd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62176bf-12af-4909-bbe0-fa16edbab654",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c00c04-22f8-4531-b130-d93a181c2d10",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b15713d1-2cb6-404b-bf70-d9312d0250fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f65e80-3522-4f3d-9bd9-1c0323ce7cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74fc0a0-5d99-4d13-83ea-faca9cc94969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f5e294-1a91-40f1-bbf2-39edf68a32b5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36dff7f0-8769-4f7b-ae25-9d1ff5ff2e50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e76504e-3ba2-4342-998a-d9757c36c755"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa10a29e-fa09-4920-84fc-f764f0bf4d98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a818e69a-433b-4426-b531-684bbf7c44de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4907d07e-9d6d-49f2-b6b5-9ee1d9cfad59",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ded6fb-d30b-4df0-8330-7dbff51ae778",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "581600f6-0163-4b42-a079-45c3045bbfd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb717937-232e-4e06-b46b-f641c998c60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9cdb322-dd80-42cd-8760-a019a1d5ba99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36749516-38d1-4003-8649-91e0c664be0a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aab48447-dda8-4802-a91d-7833c013b46e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e32c7da-e2b2-4a38-9fe0-760a8d61ed8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72851133-d2e9-493e-ad5d-941e2d6f71ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d3ebdc-3f4a-498b-8063-891b2797a193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b4f2d7-0d3e-4f65-be57-f2b5b134eee8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a858ff2e-01f1-487d-99e1-e9099645e6c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "523f55c4-2ba2-4944-bc47-6a510c57926a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a999687-9b18-40fc-bfdd-57d54df85aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd15b61-6720-47a1-a0b6-a5a33f92f7fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15842ff1-e84c-47a5-9b06-cf439722aa80",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bef8eb-cd60-4cdb-8527-1f86af578c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0c2a9c-7319-4351-b0a3-bbe33e3271a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f60272a-5bb2-40c4-88a3-eb7ce594e741",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab3680d-00de-4b40-afc1-f90b47a11d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c476bcf8-8c66-4bd3-a4d1-25e3ad071686",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb8468e-e156-4792-bf58-77569569653b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c636995-c523-498f-8fc3-57831c40a8db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5361c633-de3e-477d-a8c0-7fb8e98e2ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddf530c2-8b69-467b-b269-65d11e0c62c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad216c37-c771-484a-8f13-f54b4082b858",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff96076-df61-4c51-ad34-7603784e65fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d818ecef-9b76-4075-9ed4-19a586f6b947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402414f0-bb96-4c94-88cc-33d77a8d3533",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59a54d5-70bf-45b3-8330-59e23d203e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ec6951-68e9-4b77-8576-2aab9318c7f6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2330154-93ae-4743-8f7b-d15536e87d2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "944c9672-7c9e-47df-9565-bd1fc09b69c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d96d988-62c2-4806-92d2-b2e86dead353",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b75f6a9-dd71-4920-be11-d8bcb22b70e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec81541-6fb9-45ef-9c56-44daba9bf117",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8093da0f-420a-478c-ad1a-2a5356130ef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6abb281d-e905-48f8-a55a-4f3fd592b1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d03bea4-7736-4b76-be8e-2dad3f152038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65b807b-5a1a-494e-94d1-0eb1485a2e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d59092d-3521-44bd-8900-8867bb48872d",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572fde6f-20bc-4768-bc11-f5ae6b1330ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f5af05f-ffb6-412c-9b50-5596484055e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd97f42-b99e-46c2-a174-ec4f2899c38a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf3c023-fcd9-4f11-9d5a-42e63d833f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae4b131-3acb-4df3-9161-468a4405469c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467d0c9b-0b85-4f2b-8920-aaf6793b3270",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "257ab657-1c76-474d-8d0a-56babaa05152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "763d6da3-0327-4dba-a0e5-61899a5e6fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5136b337-e46c-47d3-a524-007d8f5cbeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2c1de1-ed1d-4ad7-98be-96ec57092047",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad15795-c725-4a3a-a609-706f30b55284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d4a3b55-5375-447f-b30f-4ac3c844317f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e589b3df-1189-4a74-af3b-497c5a5724d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e8015b-91e2-4d16-a10c-1bd88978c5f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff05e11-9371-4079-bb65-14f5382841b7",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762a0df3-c4af-4226-a0f5-a5ee4fc39d96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c03b7d56-ea22-4434-bd5c-7977dd492f46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77bb8cfd-e028-40f2-bcd8-b22e24930811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e684f6-c6da-4d52-922c-68d5bd6e8c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348cc3a8-6b09-4138-a4c2-43f8e2c6e51d",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b756296-0deb-4879-94a6-13533a722a9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "185f41c6-dd4b-48f0-b47c-3acdbba476d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca6fde8-da72-4bac-bc89-bcf46d431ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f6ca81-da9a-44c0-bc4b-89827b7b1e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee79de07-1cfc-4f66-ac9b-2237f378cd2e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a011b700-109a-43aa-9dbe-98434c00c979",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd6f516e-12fa-47fd-b78e-71e4656b9826"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec32417-2348-4285-9bca-50fe41a1c33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ba0c26e-1fc9-4a09-acd9-4b7982eaf5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfbf228-9182-49f8-aacd-25032abe285f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "916639fe-361c-41f2-aa29-6ed6cea58bc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e307e212-cf9c-4022-b721-cc75668e6d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47019829-5997-4017-843b-f80e7aa58c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e120f5-0941-4eed-ad1b-77a4c409e96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddcb108-73a4-4e8d-80ca-3dab6cfacbd3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b5eb50-9a1a-46f5-bd00-4d06889a8484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9b0320a-ebcf-413c-8533-a93e5c9612e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa83895-00f1-4bcb-abdc-d28970d5e903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57b73343-5b0c-401f-b747-48a6a6d8a699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cbdf3e-c353-42cc-99cd-dbe090591bc6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "851c2b50-ce2e-4795-80eb-93f904872fa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a97860bf-d9f2-4d25-b111-c0ecb56829e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4224bb0e-f425-4238-9c74-ad18b05a0488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68038d1b-db35-4211-b2bc-f60c8abc4fc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e051d513-e93d-468c-afae-65b289ae55b8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3fee746-a40e-45f0-87e5-2d72262d5ee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf56c74-c39a-4534-8651-e41819772b5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b157c9-2085-4237-a21c-9d7a7dd314fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa1623e-1b6a-4777-8e8e-4afe5de113d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9538a266-756e-47b6-9cdb-d85e033c0fae",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc5dd92-a915-4740-aeb3-dc95a1df49be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7110632-c9b5-4457-bc13-3a9c6be22a77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34ae9400-fa1c-4c85-92ce-b03c65bc87bb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1ca905f-e87a-4f1b-9847-12c70f4a9945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6185e60-ff45-4347-86e2-79e3f183912a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c505c488-7886-4b48-ac0c-fb13afa065e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52459445-2df0-48d2-b32d-a48a38171ec4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "870ebbd4-367c-4e31-a7b3-331d8073bad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e9ac83-108e-4f48-b516-b70c0c82cb3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1437028a-554e-45b9-a3b7-9010b9f81c34",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1edc0dc-bb8d-496a-9566-2acf17b5bb97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "762090c9-1811-47fc-a1de-16e547f2a214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6411ad8a-a351-40a5-ac5b-da6c3bb93605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8d19253-132c-46af-bb1e-acab802ee8ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18823ef-dfb9-4a68-863f-33e0ace48757",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735e4e6e-b978-42b5-b2b6-0bd7a116601a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f29b605-c59b-42ee-862b-755f43bb8278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f752005-7b35-41e8-9f76-06c292a85359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cf96a6e-f7ba-4eb2-bded-dffad69e2891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366358d6-989e-422e-bb48-f5962069cf8d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f696705-9eb6-4b92-b43f-ce40fdf8fefe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9f6a871-39dd-4a97-8528-a9ed0239d876"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7261f60-159a-4f88-84fc-ae3a725ac76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78debf76-f21f-47c6-b1fe-414e5d602e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb41c9f-8d00-4bc5-accf-9de4b1e83faf",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea6ad6ad-0d93-4416-b05e-663693a695c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e29ed9-9e3d-4b11-80bc-816c235a9961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30919295-abd1-4eb9-8292-24ca35b3c5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db6bcdea-2fc7-4850-b1c2-c202ea614190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7eb6e2-99b8-4f91-b7d9-87264917cfb4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e134b79d-c07f-4c5a-b821-e19ef08214de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "def2d890-4ef8-4b2b-8fee-519ca86d3576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d53186d-230a-4e9e-89dc-890cce4407e7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75c4b41f-9b83-4f52-bbc0-7ee3092ae324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c09914-3571-463e-b655-982a03c0ceab",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088d02df-d4d4-4bee-b82d-f445f14e8718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0597172b-3929-4f32-abae-7edb2c4565db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a397e4-db9c-42eb-8f44-452853a1288d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c6227f1-c8d9-4767-9905-8472857f7b4b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d5d779d-a0dd-4ebd-a535-ec028c4f8a58",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ab9f979-7ee5-4a4d-8829-aff29eba2532"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b763bcd1-6a08-4c9b-b779-dd5112b71eaa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0ca43eac-2037-4946-aa3f-2b958ad28ec2"
                    }
                  }
                ]
              },
              {
                "id": "37f7801f-6601-450c-8285-1cc6d216eebb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccad9a5c-efdc-4d2c-8145-1bfd27ee686b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88d0dd3-e3ba-4867-8a01-0d07df46aa77",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "be500ae0-7768-4a76-a044-dc7a9840f70e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070e1546-5fb8-457d-9991-e290626a8db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5b39e85-5a87-4013-a210-6d9836f1bbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9494fb8-beeb-42e1-9c40-513e41ea4a85",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da85316f-d19d-44c7-b0f2-288dab6885b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "24409d87-60bf-49c9-9e6d-e528cbf491f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b188cb9-c95c-43a1-83de-c5b749aee133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad3282a7-3ede-4afb-bd6f-51158a5d8f1f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92810b40-02aa-41e5-a9e9-646f2efa4456",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dbef823-7f77-40c3-a672-9f2f869526fe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "20d40e09-3011-4651-8333-b682db327eac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d10f79a6-1bf6-4e25-aa11-e6268454e573"
                    }
                  }
                ]
              },
              {
                "id": "b01f774f-0919-48c8-adc1-8fbe073fee60",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "8d8df94a-b190-4d8e-9b69-7134fe9dcbc1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bdcad9e-4236-413f-b5f6-8d37f9036cc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "1c19e03c-80c8-4e01-866f-49c0d44eaddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47514ff0-0b89-48fb-afe9-7cd44a06e202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c080ddb-e3da-45fa-9042-358f16b20e3c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cb04cc30-2ef8-463d-b484-6a2e87e2734c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fc0e446e-0826-4da7-aaf3-644c7e611955",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "216b5550-d8b2-48c9-9d67-8e66f2999480",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4659c99c-3941-4f0d-b37c-220c49432a24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c21f3b5-9c35-4ce6-b181-f9e203540f67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d524ae4-1754-4d98-aaae-14aeb15d5d04"
                    }
                  }
                ]
              },
              {
                "id": "d2728b86-cfc8-42a4-8d81-dba9a51f79d0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2cd33ee-c164-4796-8022-2e7796b53d7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2d29f559-d05a-43ca-a85d-bf91c1a4a6bf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62a38c51-6244-49d6-aeed-2c102c1fcf31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8bb7177-8252-48c9-8cda-8e44f619bcd1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25a89510-103e-421a-b351-9282a8c7d187",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7c51693b-97fc-43ba-b84b-8db0ae8f4d53"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cd160c7-b5d1-4643-ab7c-0c97257373fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8eab039-5221-428a-a24b-f179ecffad16"
            }
          }
        ]
      },
      {
        "id": "19e3a12e-6a66-4f72-8ae9-3226a35a1cdd",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b1b5db71-15f9-44b6-969d-6288d68b1ca3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b7f2450-49ca-44ba-8fe7-c2e0a91bda4f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e458b0f4-0922-4bdf-b064-31d4c962195d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb75d01-c4eb-4902-8f85-48a52e3885e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e4b6280a-b732-4447-a8cb-bb7e78867b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5177201-246a-4fdf-a7b2-4c8a9ba1cee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6255780-33c4-47fa-814c-22ff1ba393b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4443111-6fb4-4d0e-acb9-138fdef90897",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748392b2-9e35-4f34-a538-ea9137ed5664",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "07554451-9efd-402f-833b-770d40b90715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3618dd1b-d657-44fc-9382-3a6f747750af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15f5c09f-afff-46e6-8017-1745567210a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bddbad5d-f1f3-49f3-9f85-86e7b2520f3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f88e50e-0f69-48d5-a6f3-7cfff2fc0cf6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d58e5b4-fb6e-42c7-b415-14bd93bb799f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da1b0e31-a5be-4fd7-a3da-e20efec47d16"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd253d89-8675-4ccb-b270-77da82ae0d5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "62d9a8b4-e8f2-482f-ad1e-0cf084c62dbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c338b32-d4d0-4f39-9a5a-9a87d06541b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ca5d86d-8f3b-4fba-b303-05123b312141"
            }
          }
        ]
      },
      {
        "id": "3b64da0e-8070-411b-81b2-960ace5146dc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8c69c088-23f0-46f9-8929-b691da80ff58",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31eaa839-367b-4ce1-8d4b-6bdabf3418e1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8a5f84c0-5a79-434d-9aaf-248895df10f6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f43423-eb6b-43e8-8dcf-a94d165e1db9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "319b53d9-2e60-445b-9e69-9261d8b34cc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c173f855-4c3d-44db-8749-45df663e148e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a577d24-ade6-4f00-b37c-c56ce53af0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307003ab-df71-4bdf-baa9-4f08acfeb34e",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894a934d-52e1-4a0d-89b3-fb8aec039a40",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4044148a-5bde-4502-934c-b8fe826d1505"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fa912c-b09f-4847-a964-824c0cbf435b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e62548c6-7922-4df6-b667-1cd34948e6cf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93c67e74-d034-4733-be85-d39761537537",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5aea3a75-87d6-4247-9fa8-ed6a929193ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee5e1f33-8250-4ac4-ae5c-4863b505aa3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "987a106c-d6d4-49c6-8ebf-7c2931ffb6e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49c6557b-d202-4958-8344-be2445a7e9ce",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "91fc6640-4980-4b19-bcbf-cf0f799787c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88e9d089-0eeb-445c-849c-ec803365b2b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0be2732a-a97a-4b70-b483-ba761410fc11"
            }
          }
        ]
      },
      {
        "id": "1b96ec17-832e-4060-b03f-e91295705d5d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2162ec03-c603-4c98-b2ed-56efc626858b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9359e906-fefa-4213-8b14-45bada7a2596",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba516c1f-b729-4169-b1a9-d22da67d21e7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2165ab3c-a60f-42ef-937f-c0f3e24d5c16",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e690de1e-5a33-49e3-aead-3c8f7a4784b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d109068d-147d-454a-bb56-2da048e1ae63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00267b7a-ff9d-4c19-b2cd-befae16576c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bba40f39-b77b-4971-83b1-a0148eca34de",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b18cc29f-e503-4fa5-8331-646dea43efa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "74988ad4-5bb9-4ec5-8847-dd85a850624f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e6c2968-d27c-4bbe-a0fe-07a5ae88bda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e471ed9-c0df-4f2f-ae62-8dda149f2ec8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a727a564-8d6f-4927-8c39-253e7abda8da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a57bb061-aee1-4bb9-a9aa-56e8a9f35962"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea01b93e-fdf8-4da6-883d-620710576240",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eca2d43c-b43b-4359-87a3-eac1778eb5c8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b8273ca8-3f65-4dda-8a3e-395b04cb1468",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b0a597d3-438f-41db-bc1b-3016d7631485"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28694b8e-2e84-436b-abc1-32684d192912",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4777b864-fd22-4303-8f3e-0a2511bb1f42"
            }
          }
        ]
      },
      {
        "id": "128f0ed1-3ab5-4ee0-8f3b-e3475d21d7ba",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b4ea4be0-75d5-4a40-bbb3-c593dcef3c6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f22a332f-2d8a-432f-8173-8a74415d5701",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9b8d3643-aa9a-4d8c-b095-18a51fe3072e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "44f0e519-ede7-4a6d-993a-ae5afced5b0c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "257ae98e-000e-4c21-baf2-5c2c0a41af21",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 302.2923076923077,
      "responseMin": 11,
      "responseMax": 6865,
      "responseSd": 905.813989617615,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1683160596086,
      "completed": 1683160685313
    },
    "executions": [
      {
        "id": "366c84cc-7982-4a34-ae7c-a6f3eb267ac5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "fab21e17-fc24-43de-96bd-ed2ddd3d9572",
          "httpRequestId": "23ec6dc1-9181-4f74-8659-5c0c0bfb70f4"
        },
        "item": {
          "id": "366c84cc-7982-4a34-ae7c-a6f3eb267ac5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7a7864bf-4b32-4bec-9789-b56bf73d3897",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 0
        }
      },
      {
        "id": "9d0f8adf-6909-4df9-ab08-68b158b43efa",
        "cursor": {
          "ref": "0adf819f-1296-4740-9a94-86ae151b5f86",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bba37eb0-20dc-40ed-b78f-61e916711597"
        },
        "item": {
          "id": "9d0f8adf-6909-4df9-ab08-68b158b43efa",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bd8248c3-b564-4863-94fc-6347f4d7f196",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "80ce48de-a280-47ea-ac53-d98ab5da73b4",
        "cursor": {
          "ref": "5a35ac2e-fd7e-44e2-ba06-0898305260f2",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4f028bca-4b0d-42ed-8157-b534fe944f8e"
        },
        "item": {
          "id": "80ce48de-a280-47ea-ac53-d98ab5da73b4",
          "name": "did_json"
        },
        "response": {
          "id": "15491e05-c3ff-469c-a6d4-0bf696ef6549",
          "status": "OK",
          "code": 200,
          "responseTime": 604,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b8030a3-f76d-4734-a184-0526aeed35b9",
        "cursor": {
          "ref": "0b03286e-9deb-4987-936a-c61ff270139e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e168227d-372e-4a44-bc17-b77d20403b39"
        },
        "item": {
          "id": "5b8030a3-f76d-4734-a184-0526aeed35b9",
          "name": "did:invalid"
        },
        "response": {
          "id": "f20e11b0-2283-4cf1-b208-fe29ae204091",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1074,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "5b8030a3-f76d-4734-a184-0526aeed35b9",
        "cursor": {
          "ref": "0b03286e-9deb-4987-936a-c61ff270139e",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e168227d-372e-4a44-bc17-b77d20403b39"
        },
        "item": {
          "id": "5b8030a3-f76d-4734-a184-0526aeed35b9",
          "name": "did:invalid"
        },
        "response": {
          "id": "f20e11b0-2283-4cf1-b208-fe29ae204091",
          "status": "Not Found",
          "code": 404,
          "responseTime": 1074,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "4c543681-8642-465c-bbd1-5bc426253cb8",
        "cursor": {
          "ref": "6f6b5c05-b5ef-42fa-871c-e7f1758f5bc0",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0ae60c1c-2747-4e6b-bbbb-d2da7832c0d0"
        },
        "item": {
          "id": "4c543681-8642-465c-bbd1-5bc426253cb8",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ac406f78-ace2-4d0a-a344-499c90b6683a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 916,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47140c64-d290-4305-81fc-bf5bc6a97fbc",
        "cursor": {
          "ref": "a6f27256-9f95-4bb0-aa07-f7e27598c45f",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "992d8b42-7266-4d23-b831-7088259b83be"
        },
        "item": {
          "id": "47140c64-d290-4305-81fc-bf5bc6a97fbc",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b47704f1-7ce1-4d1c-99a7-fc3b2c8a5ed5",
          "status": "Not Found",
          "code": 404,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990b2177-d2c3-4e51-bd80-9200acde54a1",
        "cursor": {
          "ref": "894f44fb-6e9c-4d6b-838f-601bfba9b089",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ab8445ea-071f-4d58-bf0a-24f27b433924"
        },
        "item": {
          "id": "990b2177-d2c3-4e51-bd80-9200acde54a1",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "6c2a4bf2-e6a8-4ddb-9d45-13f7c31cffe1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "6a54984e-d394-4a6a-8747-d94d27e8c257",
        "cursor": {
          "ref": "13460a45-1407-4db9-a29b-e58f7192a9cc",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e78a21e-7e63-48ba-be61-375e5b91ea1c"
        },
        "item": {
          "id": "6a54984e-d394-4a6a-8747-d94d27e8c257",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b3cb7be8-af61-41b4-b645-bcaeb1210bc0",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "6a54984e-d394-4a6a-8747-d94d27e8c257",
        "cursor": {
          "ref": "13460a45-1407-4db9-a29b-e58f7192a9cc",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e78a21e-7e63-48ba-be61-375e5b91ea1c"
        },
        "item": {
          "id": "6a54984e-d394-4a6a-8747-d94d27e8c257",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b3cb7be8-af61-41b4-b645-bcaeb1210bc0",
          "status": "OK",
          "code": 200,
          "responseTime": 28,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "70819f3a-2228-4193-bbc3-4bb49549b7f0",
        "cursor": {
          "ref": "8d172079-5f97-42f6-9ed2-53bdb595e92b",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "78ecab65-b009-4bbd-b284-d70bf8e17f3e"
        },
        "item": {
          "id": "70819f3a-2228-4193-bbc3-4bb49549b7f0",
          "name": "identifiers"
        },
        "response": {
          "id": "02e674ea-b017-4ae5-acc2-ad377efe4c83",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70094cbc-402e-45b8-9805-920d26b0b1b7",
        "cursor": {
          "ref": "4c8a3c87-3127-4a2a-a5d9-1f4c4957dc57",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "680af032-1a0f-48a6-b982-3b5047b40ff0"
        },
        "item": {
          "id": "70094cbc-402e-45b8-9805-920d26b0b1b7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "efa91236-2aa0-4431-9938-66a3f1fcd55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70094cbc-402e-45b8-9805-920d26b0b1b7",
        "cursor": {
          "ref": "4c8a3c87-3127-4a2a-a5d9-1f4c4957dc57",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "680af032-1a0f-48a6-b982-3b5047b40ff0"
        },
        "item": {
          "id": "70094cbc-402e-45b8-9805-920d26b0b1b7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "efa91236-2aa0-4431-9938-66a3f1fcd55a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51491cb3-d6cf-40b4-8a90-1557a831f25d",
        "cursor": {
          "ref": "e6f87f18-adba-4440-90e2-2ad40a6246ab",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "90312763-4e73-4171-957f-9a56151374dc"
        },
        "item": {
          "id": "51491cb3-d6cf-40b4-8a90-1557a831f25d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "4ffae858-5b53-46e3-ac22-69040721515d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4860cb6-7206-4e45-85ab-edfe177efb30",
        "cursor": {
          "ref": "f63b6333-ac4f-4c02-b9c2-973c2301ab63",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "beb1cb75-6e61-45ff-b01e-4a4b5b611613"
        },
        "item": {
          "id": "f4860cb6-7206-4e45-85ab-edfe177efb30",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a427a6a6-1e40-40f2-a653-110410e8f0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fa2c57-5e8a-458a-a5f4-ce29fc24d1ec",
        "cursor": {
          "ref": "fabc5baf-cbeb-4caf-b12e-658d03e4bb5b",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "32372970-eaf8-4738-a470-1ae57fce4218"
        },
        "item": {
          "id": "68fa2c57-5e8a-458a-a5f4-ce29fc24d1ec",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d17b05f2-097b-4f0b-8125-cd2d68cd9eef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b79135e-6a89-4c2b-b9c2-4736e180e347",
        "cursor": {
          "ref": "69a73e50-98c8-4bb0-b6a1-f1d8dbd898ee",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ece96d93-9e7d-41bf-89fe-4821f8c346f6"
        },
        "item": {
          "id": "9b79135e-6a89-4c2b-b9c2-4736e180e347",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6f1a68d9-abf4-4834-847a-ebccfe71caba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d8da62-ee5c-4fd2-8496-7ead99bbdc1e",
        "cursor": {
          "ref": "e179c221-0c4b-4fa4-b6f3-3c1f60e90a6f",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "0a339da1-8485-4aba-a242-d7318a8a24ff"
        },
        "item": {
          "id": "20d8da62-ee5c-4fd2-8496-7ead99bbdc1e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f0e4795f-6f23-4dfd-a82b-6623a4cef79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef7f657-6fcc-498b-8b0d-97f5ca96cee4",
        "cursor": {
          "ref": "8e8a7182-b5e3-4c17-97b8-577ea6b9fb3a",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "0fc96896-8e1e-4120-b861-06c258dd9ae5"
        },
        "item": {
          "id": "6ef7f657-6fcc-498b-8b0d-97f5ca96cee4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "8ec97cdd-af26-44b4-b2af-8f09c27bcae0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5a2a8c-e22c-4324-bed2-8bd2faecd632",
        "cursor": {
          "ref": "c4a69426-ed0f-4a65-8fab-012c3e5faf14",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e704ee5e-a2f8-4f59-bdeb-29a4cd671250"
        },
        "item": {
          "id": "7c5a2a8c-e22c-4324-bed2-8bd2faecd632",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "88ca05d2-d4ab-41f4-9872-f3611e305ff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65330bec-6673-434d-948d-651bb7374d37",
        "cursor": {
          "ref": "46f22ae2-eb0d-4b84-826f-7d7b12982758",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "93201831-c2d1-46af-8f5a-309ca60c93b9"
        },
        "item": {
          "id": "65330bec-6673-434d-948d-651bb7374d37",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b44fb70c-c13a-4c1b-8b7d-7ca5fe5ab307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b4ee525-988c-4a52-9b42-bbc7bddbe4da",
        "cursor": {
          "ref": "6bba00dc-9231-42ef-bcbd-3450e5f16ef7",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "12ff2b0c-b265-4899-a0bd-5042e0526133"
        },
        "item": {
          "id": "0b4ee525-988c-4a52-9b42-bbc7bddbe4da",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7d54cb7a-fd54-492b-8dbe-d71a11a75ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61f552f-be09-4c17-adf1-fcbb9e80702c",
        "cursor": {
          "ref": "fd053eb6-f795-43f8-b4ea-dbbd1541a186",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c47b93e8-41ae-48ff-b1e0-c1f517d8cb1b"
        },
        "item": {
          "id": "c61f552f-be09-4c17-adf1-fcbb9e80702c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "04815960-bb57-4790-b805-66e0b537e15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eac9d1dd-836f-4abe-bd60-d868055956c9",
        "cursor": {
          "ref": "1c68fc06-4143-4c97-a599-ef54db55d807",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6780bddd-d42b-45d4-8f9c-1af7dbea42eb"
        },
        "item": {
          "id": "eac9d1dd-836f-4abe-bd60-d868055956c9",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3b3f8591-c8d6-44eb-93df-26b33b61fce6",
          "status": "Created",
          "code": 201,
          "responseTime": 1308,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "2c052d78-bc2b-4ed2-b954-a56b99b4e077",
        "cursor": {
          "ref": "256c98d4-a856-4092-8757-71e1668f14d4",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dbf102bb-364b-4452-8850-c795535a545f"
        },
        "item": {
          "id": "2c052d78-bc2b-4ed2-b954-a56b99b4e077",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f941a46a-49bd-41e5-b8f6-9213249cde7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eced893-9e3a-40bb-b869-076be37c3462",
        "cursor": {
          "ref": "ab5ba229-f074-40ff-a930-cdc2d1e75363",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "dd5d07f8-8c39-4b6a-8ca6-786a5034adee"
        },
        "item": {
          "id": "7eced893-9e3a-40bb-b869-076be37c3462",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "444262f0-2d69-4ff2-8f46-59e388824c15",
          "status": "Created",
          "code": 201,
          "responseTime": 6395,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "968b29c7-78a2-41e8-b430-dedad19a9c6a",
        "cursor": {
          "ref": "6eadbce0-1818-4c16-a3db-bd9b557072c7",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0b7a304c-32b7-4cd6-b84b-dfc090016865"
        },
        "item": {
          "id": "968b29c7-78a2-41e8-b430-dedad19a9c6a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ec01a07f-069a-4547-a739-33a87689c984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9546522-a9a6-4004-85bc-08aea804d3a4",
        "cursor": {
          "ref": "e8d7ab28-4835-4ebb-a818-6a3516e07559",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "42825d23-e75e-48e7-aced-6cc4159942e4"
        },
        "item": {
          "id": "e9546522-a9a6-4004-85bc-08aea804d3a4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "98eb34bf-7230-4872-bfdd-4c46f8151991",
          "status": "Created",
          "code": 201,
          "responseTime": 4905,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "b95d83e2-7f02-4a6c-8fa1-44ab7adf0fe2",
        "cursor": {
          "ref": "2110f77c-1584-4774-b2ee-87a9a87c991b",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7879195c-9826-49b3-b65d-2839115154ef"
        },
        "item": {
          "id": "b95d83e2-7f02-4a6c-8fa1-44ab7adf0fe2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b2fbad16-e33c-4913-9a67-ccfa67a727e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9be6df-21fb-4cb4-8575-d95482e54688",
        "cursor": {
          "ref": "fc3be249-2aef-4a6f-b819-922ea32c44dd",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3f206b1d-a894-40ed-b67c-7d0aca80a3f9"
        },
        "item": {
          "id": "ef9be6df-21fb-4cb4-8575-d95482e54688",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "63a814df-e596-43e4-9e9c-08e783ed2c58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50be5dda-5614-44b1-b88d-8bf98c92ced9",
        "cursor": {
          "ref": "56b1188a-a79f-4a0b-8a09-fcd15a61ad28",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ceb54282-8cfd-4877-9415-459e3b0fdd41"
        },
        "item": {
          "id": "50be5dda-5614-44b1-b88d-8bf98c92ced9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d35df2d9-5bf8-4348-b0be-28f97140b94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0d857a-8a50-48da-adf1-ad73c26f33bf",
        "cursor": {
          "ref": "dc760106-3223-4b37-a152-b9614b6b071c",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "16ae9abd-fcde-4d6c-b2ed-1c27b9d29d47"
        },
        "item": {
          "id": "fd0d857a-8a50-48da-adf1-ad73c26f33bf",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a093e907-5543-47db-af35-226ad7f53a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 342,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b669bb30-b14d-4fe9-8c02-8b7b61207ee1",
        "cursor": {
          "ref": "89d0b08a-9773-490f-9c8b-6ecf81c9e5f9",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "c2b35725-e172-4fba-8f0c-2c3eed62c270"
        },
        "item": {
          "id": "b669bb30-b14d-4fe9-8c02-8b7b61207ee1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0f93a362-5a54-4a60-8240-3c1a17327de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e885a21f-15e4-49f4-ba74-c984c7037bda",
        "cursor": {
          "ref": "8e45c475-5a15-43d5-866e-67fe876a8391",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fb62f951-8b8b-4314-8a93-53d195ea1dfb"
        },
        "item": {
          "id": "e885a21f-15e4-49f4-ba74-c984c7037bda",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e611944e-993d-4c62-b505-62b65092d6a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895bdd90-ff6f-4765-905a-820605e26cf2",
        "cursor": {
          "ref": "0b3cf348-0dc4-441a-b311-774f6acb5910",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7fe86725-4c63-4976-bcc2-4c70b90a941c"
        },
        "item": {
          "id": "895bdd90-ff6f-4765-905a-820605e26cf2",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f1cdfac9-c439-4b98-9f6c-4844f3d42ebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4caa898-a050-4141-91da-51447dcaced8",
        "cursor": {
          "ref": "d5e3e483-ff3d-40b1-9845-a44a1060cccb",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "82576d79-886a-4b85-acfa-92d6f42a02f7"
        },
        "item": {
          "id": "a4caa898-a050-4141-91da-51447dcaced8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9b39ea74-5b27-4caa-ab01-afdb4810edfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a88692-392f-46db-9799-c92e091884e3",
        "cursor": {
          "ref": "7fd22035-b6da-4fdd-8bd9-4d02718172a9",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0959693b-7420-4a71-938b-88a8a9f48442"
        },
        "item": {
          "id": "23a88692-392f-46db-9799-c92e091884e3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "468cb1b8-0ac0-40e9-83cc-8a650126be3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06152f32-713c-4754-afc8-e2382e5ecaa3",
        "cursor": {
          "ref": "72303371-471c-4485-8ca8-bf286361eb7f",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e2af25f7-ed60-40bc-a565-cdfb57b5551d"
        },
        "item": {
          "id": "06152f32-713c-4754-afc8-e2382e5ecaa3",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "f88ef39d-25d7-440c-ab86-961af0af6648",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c67785-31b0-437a-8768-28bf89fbb6e6",
        "cursor": {
          "ref": "69b62502-d5cc-45fd-bb96-427fa1873369",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "f4c96c6d-6c06-47cc-b7ff-5e6487e57e8a"
        },
        "item": {
          "id": "10c67785-31b0-437a-8768-28bf89fbb6e6",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1477976d-dfde-4982-8aa2-3006a8a07812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9031b9ea-6fe0-407c-8c8d-aa06bb0eb946",
        "cursor": {
          "ref": "aa3cff51-20e9-4f30-b6c3-23d0f81104cf",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "650d2806-8787-40e0-bd19-fff1bc6a547f"
        },
        "item": {
          "id": "9031b9ea-6fe0-407c-8c8d-aa06bb0eb946",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d039895e-2103-4fa7-942b-f21a6583b6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "615d9abb-4dd1-4b64-aba7-5df3ad5d9254",
        "cursor": {
          "ref": "53a44850-44cb-42df-a41f-80d8d7d3a9ab",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0912e52b-c4b8-4e8e-8a6d-21019cffcfe3"
        },
        "item": {
          "id": "615d9abb-4dd1-4b64-aba7-5df3ad5d9254",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9b507bb7-7e1c-4e83-ab1c-10bd59f439ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348b03ff-6efc-46ae-be00-72ade3f6c319",
        "cursor": {
          "ref": "1770379c-8bdb-4892-bf9f-85693a22d185",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "75e4e44b-3344-48a9-a0d1-faa99048ea16"
        },
        "item": {
          "id": "348b03ff-6efc-46ae-be00-72ade3f6c319",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "07f643ba-5afa-4f4a-8447-3a8874fbe619",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4a0766-98a9-4024-b1d1-41ba2d46fdbe",
        "cursor": {
          "ref": "c594b161-8a18-437c-942b-695995b6e518",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "363fc1d1-42fe-4601-a4fa-c975ba0294a3"
        },
        "item": {
          "id": "0d4a0766-98a9-4024-b1d1-41ba2d46fdbe",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "49538c24-9ee7-41c5-94ce-2005d8c4968d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c74d4a1-0037-4e7a-91df-5d72c60bcf61",
        "cursor": {
          "ref": "2778e6e6-df1e-46a2-bf1a-73e0c73f1884",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3a8e3b46-15f3-4423-bc12-1c8ac4d5b450"
        },
        "item": {
          "id": "5c74d4a1-0037-4e7a-91df-5d72c60bcf61",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b919f38a-566e-4e34-bbea-42dffa40c179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24c630f7-da6d-4142-a964-6b8500d72077",
        "cursor": {
          "ref": "782d130d-57d4-4555-811c-056d7f6115fe",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "25699d38-24b6-4471-9454-57f2184f3437"
        },
        "item": {
          "id": "24c630f7-da6d-4142-a964-6b8500d72077",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3e9f4540-5a7b-41c1-94df-e767343c8607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c0bd9f-bd0f-4f25-a42e-4557795b8629",
        "cursor": {
          "ref": "6ea2f4f2-eca1-4c1f-b677-1c441fe1e3f7",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2bce43b0-b757-4b5e-ab76-517a1a7f2847"
        },
        "item": {
          "id": "89c0bd9f-bd0f-4f25-a42e-4557795b8629",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "86c094b3-4584-4ff3-a364-d81eae376d6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc35a2c-5880-4a65-bf9f-457a67078a6f",
        "cursor": {
          "ref": "1f8b9d97-6bba-41a3-a502-879c4fee9b80",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "e821c032-44e8-4d70-9b28-3ff48cfe6f8e"
        },
        "item": {
          "id": "bcc35a2c-5880-4a65-bf9f-457a67078a6f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f615f5f3-9648-4741-889a-3bb42e9326db",
          "status": "Created",
          "code": 201,
          "responseTime": 3209,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "05036931-5116-4561-9355-b041514b3f38",
        "cursor": {
          "ref": "b55bab87-fa57-4250-bb95-c1fb1134716f",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "794939b0-a53c-4b5b-9062-549448b93825"
        },
        "item": {
          "id": "05036931-5116-4561-9355-b041514b3f38",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d0d7c2f-9547-4fbb-8dce-7894c31bf368",
          "status": "Created",
          "code": 201,
          "responseTime": 3496,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ee08ef37-a042-49e1-a9ec-a89f5c92f8c2",
        "cursor": {
          "ref": "e0b42076-ca16-4121-93f7-f7d2d3ab1cc0",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "14cfbd66-5e12-4786-aaf4-4ae11b13c8a7"
        },
        "item": {
          "id": "ee08ef37-a042-49e1-a9ec-a89f5c92f8c2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7386d231-89c9-487d-8f45-55629040eb96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66cfab0b-0b85-44a5-868c-127c633d9f16",
        "cursor": {
          "ref": "59061dfb-7055-4b01-938c-21d0c11176a2",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0ebf600f-65b8-416b-8f4c-e47b3a9e6971"
        },
        "item": {
          "id": "66cfab0b-0b85-44a5-868c-127c633d9f16",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "781fefe9-dc28-466f-a06c-7874b6071ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dadc6fed-8f76-40d5-bfce-72034da5e09e",
        "cursor": {
          "ref": "39d1d93c-51e5-413a-b3c3-fba73d5f2c16",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c6c8984f-a100-4fe2-957a-96ed97d11c84"
        },
        "item": {
          "id": "dadc6fed-8f76-40d5-bfce-72034da5e09e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "fb55575e-4f60-456c-91b7-613a014b51b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3093e056-fc83-4af1-b9c7-18d9d2ec0c4b",
        "cursor": {
          "ref": "934e446f-327f-4ada-8163-5a197a39cd87",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0eb7825e-cda9-4c13-aef8-8ed859d763ef"
        },
        "item": {
          "id": "3093e056-fc83-4af1-b9c7-18d9d2ec0c4b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "4adea6f3-dfe2-4c45-9052-4ec24313f994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2912978-0ff6-4ee0-8cf7-38d5f9a9bef3",
        "cursor": {
          "ref": "7bd3a520-bcc2-4dae-9c5c-55e9b58c8135",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "90f784be-a420-4c74-a5c1-ff5bbde18493"
        },
        "item": {
          "id": "d2912978-0ff6-4ee0-8cf7-38d5f9a9bef3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "908f89f4-5aaa-4c14-aaba-17271254a438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82115f83-13be-4096-8f58-020f6a87af7d",
        "cursor": {
          "ref": "2b60ed01-5ed9-4e68-a1f1-9bf9d7ff3136",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "26f46481-4bbc-45dc-a294-b0145e0dbbd7"
        },
        "item": {
          "id": "82115f83-13be-4096-8f58-020f6a87af7d",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4e15b4bf-7644-48e7-b610-957cd32438cf",
          "status": "Created",
          "code": 201,
          "responseTime": 2694,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "809a7fc0-1fff-4c99-8be5-c0249df2110e",
        "cursor": {
          "ref": "f07927f2-b849-4367-b259-a54bdcf5283f",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0a549f50-fd25-465d-bef0-5023cc8f5255"
        },
        "item": {
          "id": "809a7fc0-1fff-4c99-8be5-c0249df2110e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "112ab4dc-35b2-4945-8e42-08577ba5cbca",
          "status": "Created",
          "code": 201,
          "responseTime": 2761,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "794c3cd1-8b38-4f3f-9ffe-89dd51f91b06",
        "cursor": {
          "ref": "49ada913-5ed1-40c1-9ad2-4cfa5dcf6af4",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f8b9b9a7-e358-4f3a-a655-bc78c672271e"
        },
        "item": {
          "id": "794c3cd1-8b38-4f3f-9ffe-89dd51f91b06",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "244fa87e-c8f0-44b2-96f1-839d71451d4e",
          "status": "Created",
          "code": 201,
          "responseTime": 2877,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "2602e1a2-3093-4e0d-ba62-2860384beeb6",
        "cursor": {
          "ref": "5e4467c6-4af6-4e3b-8c36-dfd728fcfdd9",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4cdb708c-5a36-4b7b-be64-de28924e15ab"
        },
        "item": {
          "id": "2602e1a2-3093-4e0d-ba62-2860384beeb6",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "58e0172f-2930-4ccb-8a7f-aaada6d31931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca718a7-b4b9-4356-9189-74c5c272061e",
        "cursor": {
          "ref": "81586a1d-dcf7-4f3d-8248-93c76ac43115",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7eb49683-0ff7-443e-bcf4-8cdc21a6d687"
        },
        "item": {
          "id": "bca718a7-b4b9-4356-9189-74c5c272061e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "9ba92068-f486-404c-8ac6-85d0a99bf51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1373e81-ebe2-4d11-b086-e00bd6a090b4",
        "cursor": {
          "ref": "98a3629d-a687-4081-8aad-ba76b57741be",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d9a4eca6-a821-4261-b7db-c5749b1af0e2"
        },
        "item": {
          "id": "e1373e81-ebe2-4d11-b086-e00bd6a090b4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "bcbbea8a-2d42-452c-b215-2517c6d9a520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a83f3e-0ab0-4406-ba90-fee8c435fcd5",
        "cursor": {
          "ref": "b0c1c4c3-a459-4744-8505-2e4c79c027c3",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "45c2b5a6-2f5f-4c86-b768-c9df4cf486f5"
        },
        "item": {
          "id": "b2a83f3e-0ab0-4406-ba90-fee8c435fcd5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c962d7ac-cda7-467c-a4bb-35de9a21764d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6e9de7-cfb9-410a-9af6-7433057597cd",
        "cursor": {
          "ref": "acfbc2da-7b7f-43fd-bf68-df6637193114",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "2e299bf0-a7c6-4909-ac19-83c5132269f4"
        },
        "item": {
          "id": "fd6e9de7-cfb9-410a-9af6-7433057597cd",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5390baa1-efb5-48c5-9a28-036c908ad055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed44c6e-0d76-4eb6-b337-908db49f6c3d",
        "cursor": {
          "ref": "80cbb47f-a6a2-4379-a4da-49296a7033a3",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "c0264059-b0b0-474c-8389-be3ba4ab4d50"
        },
        "item": {
          "id": "fed44c6e-0d76-4eb6-b337-908db49f6c3d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "98926c0e-271d-486e-9f7a-55c76cce3e48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2b3e7b-8d46-416f-ab56-2b44eba5d53c",
        "cursor": {
          "ref": "d2ba299b-0504-47b0-9098-3595efafa323",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d1c17b18-404e-469b-83fb-ef1393050167"
        },
        "item": {
          "id": "ae2b3e7b-8d46-416f-ab56-2b44eba5d53c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "13f78cd2-7443-43e6-991f-8ac18b6d1451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c545bf59-45e7-4e56-99ad-17850ba5dc7e",
        "cursor": {
          "ref": "cb5ca9a7-cab5-4687-9fa6-8239535c5125",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "88a59a6e-d4ee-4e48-a673-cef820988fad"
        },
        "item": {
          "id": "c545bf59-45e7-4e56-99ad-17850ba5dc7e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "2e6db085-0ff1-47e2-9648-08c16881f089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75cd7c5-b143-4bb4-86ff-0d45de665819",
        "cursor": {
          "ref": "20e896b5-6156-449b-8d4c-8e617ae6a5f7",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "847fff09-f0da-4d88-9e73-f08aefd805e5"
        },
        "item": {
          "id": "b75cd7c5-b143-4bb4-86ff-0d45de665819",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "75d893d3-0d88-4153-ab2b-9062fc5781e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaeb8deb-708c-42f7-8159-1bf703741158",
        "cursor": {
          "ref": "2816b5b4-4679-405e-9b76-aca793f2363d",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e5143d35-7cbd-4c71-89d4-9e66e22d53fe"
        },
        "item": {
          "id": "eaeb8deb-708c-42f7-8159-1bf703741158",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1dbcdf5e-5e87-43f0-9e1f-9dc713acbcb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34708812-b953-4dd1-8c9a-8da3c9ba928c",
        "cursor": {
          "ref": "b9b61b24-2bb9-4fac-bf7c-2841339e501e",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "e719e0bc-844f-44ca-bace-f9514a0465cb"
        },
        "item": {
          "id": "34708812-b953-4dd1-8c9a-8da3c9ba928c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "90f92cd3-365d-4bf5-97c5-596e2014562a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a49d7c3-1169-4d59-aeda-d4549d738da9",
        "cursor": {
          "ref": "df70d77d-7b4b-43db-8288-0dea588996ab",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "95ec6e64-dd2e-4c6e-acac-bb675815ce9d"
        },
        "item": {
          "id": "6a49d7c3-1169-4d59-aeda-d4549d738da9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8f5d6cad-d2e6-4199-8400-5262fe861b13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61653b8b-f55e-452b-b58c-cda8e1df522a",
        "cursor": {
          "ref": "823e1e7e-6e55-47bc-b74b-1aaaf89b7da0",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1b73eb5c-65fd-4636-8dd1-2b1846f3b89d"
        },
        "item": {
          "id": "61653b8b-f55e-452b-b58c-cda8e1df522a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "1c5ad458-5b1a-4fe2-8fd6-396ac1682d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "863caf76-c7fb-4edf-8367-e5e250e73eff",
        "cursor": {
          "ref": "1185169f-2b32-4fbc-b4f6-b5043bea64b6",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "32c2e52f-0a2f-4f0a-9e12-e7cadc232582"
        },
        "item": {
          "id": "863caf76-c7fb-4edf-8367-e5e250e73eff",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bd889a6f-6f95-4bda-9409-34951984797a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09876f32-5a88-45cf-8f6a-048b6eddb23f",
        "cursor": {
          "ref": "fcc38fba-8b72-47be-9e72-4db553bab661",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "42c6b946-8f7d-4c20-8618-69765d12e9bb"
        },
        "item": {
          "id": "09876f32-5a88-45cf-8f6a-048b6eddb23f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b948df83-9ec7-4ced-8fc9-293539063ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17e3d4f-a5af-4e9c-bb01-8de63caf21f7",
        "cursor": {
          "ref": "c5a10e88-bc3e-4c2f-b333-875df3c6defe",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b63f72d3-24b1-4fc6-ac09-7516f7391e85"
        },
        "item": {
          "id": "b17e3d4f-a5af-4e9c-bb01-8de63caf21f7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "2cbe018b-a5d0-44fd-b502-1e1a03fcebab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc4d888-de08-4808-9fd2-99551873e8b6",
        "cursor": {
          "ref": "1a742d75-504a-48ba-a55e-c05c14289230",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "35d50680-ec4c-401e-84a6-25e4d0dde217"
        },
        "item": {
          "id": "1bc4d888-de08-4808-9fd2-99551873e8b6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "a13448ac-b0e3-4e2e-ac1b-6015d6480866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0b6370-44b1-4b8a-a070-b2ceb67feeeb",
        "cursor": {
          "ref": "8e43719d-990d-420b-b3b8-c422e0de09fb",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e9aec870-e846-453f-bb71-55ae0c23aeef"
        },
        "item": {
          "id": "3d0b6370-44b1-4b8a-a070-b2ceb67feeeb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1b2bccc1-722a-4196-b27b-3ad845a0ffe2",
          "status": "Created",
          "code": 201,
          "responseTime": 6865,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "f5e20110-0b85-476f-b277-eec8579001c7",
        "cursor": {
          "ref": "10ce1e03-a5e3-4714-b7a4-bf721307ba9a",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "74e9121f-79a0-4323-8228-a74bbe40ac44"
        },
        "item": {
          "id": "f5e20110-0b85-476f-b277-eec8579001c7",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4e76f39c-e263-46f3-b00b-15bbdc64764a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c75041-5fb6-4632-8f0a-434f45691b63",
        "cursor": {
          "ref": "923d7a18-9be0-47a0-aee1-4934f2794d87",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4b7abda3-be8d-45da-90ae-1867e0baf6df"
        },
        "item": {
          "id": "04c75041-5fb6-4632-8f0a-434f45691b63",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b21c9f26-769a-4165-a7e2-48f8996d2da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1a6fdf-ef67-4aea-aaca-c19600964786",
        "cursor": {
          "ref": "6cf212af-fc3c-463b-8142-145d2c0eb0d1",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d46ba667-bfb1-44f5-8cc9-4d2eb9193ed6"
        },
        "item": {
          "id": "3e1a6fdf-ef67-4aea-aaca-c19600964786",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "735de50c-32ca-469b-9f88-66ebf9fbb594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21e71bbb-8d54-423c-b215-58bc12b803c0",
        "cursor": {
          "ref": "dec7f821-e1e3-4014-bf38-99f843e06662",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ce305d16-10f8-445e-9dcf-e889aa217a39"
        },
        "item": {
          "id": "21e71bbb-8d54-423c-b215-58bc12b803c0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "faee9c65-90ee-45ef-b235-0814f19a10cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1dbf19b-680e-458f-b87e-1ecdfd5bafc0",
        "cursor": {
          "ref": "220b37b3-f118-400e-bcd9-fcae2fa062bc",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7e3f4845-cf3a-437f-a715-22bc33321601"
        },
        "item": {
          "id": "f1dbf19b-680e-458f-b87e-1ecdfd5bafc0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ad4e4be0-bcd8-415d-a395-20a88784dd49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdab354-6e53-40e5-a178-e96f635edc21",
        "cursor": {
          "ref": "2e75f10b-9f89-4f31-b13f-7e9b30d27742",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1ba23075-1afe-4a35-8757-8f3d6bcb9c96"
        },
        "item": {
          "id": "5fdab354-6e53-40e5-a178-e96f635edc21",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6bf86be7-dd9d-464a-92a3-0b8f8ad18de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "034c9202-56b5-444e-b3b7-48500968e988",
        "cursor": {
          "ref": "6c474e1b-6495-4d60-aeec-6bba517c6a92",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "075ec97e-bb42-4dc5-b5c1-ca86c63383d0"
        },
        "item": {
          "id": "034c9202-56b5-444e-b3b7-48500968e988",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e812cb7a-6381-43f1-90fa-108636c68436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20f16cf9-851a-49a3-8c4e-d68e914f89cb",
        "cursor": {
          "ref": "f3510070-6711-4030-9e46-1ad8f3c763a8",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "83117b12-7741-43e5-aa5f-354d0e271ad5"
        },
        "item": {
          "id": "20f16cf9-851a-49a3-8c4e-d68e914f89cb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c0cddf57-d7e0-4310-83bc-5f25abc949e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518332b6-f459-47bb-9ec8-68bc167c6e1f",
        "cursor": {
          "ref": "6e78213d-5813-4ff5-97b7-2ab937719e7c",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "6e53bfe4-3ee6-43df-92d5-d09e5dae6c8a"
        },
        "item": {
          "id": "518332b6-f459-47bb-9ec8-68bc167c6e1f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "64b4fae1-8a91-4502-b306-d126ab24d731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d69b527-98ee-4dce-81c9-42126dabf97c",
        "cursor": {
          "ref": "068335f1-b522-4b8a-9d6b-c8ba4d63b734",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "94933809-3165-486d-9c4c-0fd102eb13b5"
        },
        "item": {
          "id": "0d69b527-98ee-4dce-81c9-42126dabf97c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "35ebdcbd-9a1a-4395-bbc4-f956186d2987",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97306471-ace8-4d6d-a481-8f5f5dd51212",
        "cursor": {
          "ref": "0f7745e3-f32a-4a40-b4ee-cf87f1814dc2",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "40ae1823-d173-4711-8ee2-facf54fbe066"
        },
        "item": {
          "id": "97306471-ace8-4d6d-a481-8f5f5dd51212",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5bd43da5-f64a-4483-a9ce-a5b0ca78d12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 195,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942d253f-ed9b-4a58-bf74-ba4e521f070e",
        "cursor": {
          "ref": "507eeadc-5dd0-45df-8669-56b79ec740c6",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "6c6870b3-6087-4646-92c1-a06862a53551"
        },
        "item": {
          "id": "942d253f-ed9b-4a58-bf74-ba4e521f070e",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "23dacafb-8a1b-418d-9701-c980b68a65e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 215,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eca93f8c-351c-4085-9873-c4b7bea8c40c",
        "cursor": {
          "ref": "3c123370-befd-4bf6-9298-689818775ade",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9d88be61-d691-438a-8197-ea3c5e6e6fac"
        },
        "item": {
          "id": "eca93f8c-351c-4085-9873-c4b7bea8c40c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "aa0a878d-b330-4438-b52e-d5889d6e71ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 145,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96788d91-e707-4319-8b63-0d3bd29d7909",
        "cursor": {
          "ref": "dcff1c09-e101-4c95-9b80-e1c3a54f99c1",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e955c152-628f-4426-8191-61f4b0c8d55d"
        },
        "item": {
          "id": "96788d91-e707-4319-8b63-0d3bd29d7909",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bdabb309-1b2e-49e8-9455-070d512f2941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019c5ae9-bef1-4016-8fb7-03739fdaecc9",
        "cursor": {
          "ref": "d1dfac55-0187-4afb-98aa-1a63708b5085",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a9b836b6-901f-4155-8a67-a17c3e91115d"
        },
        "item": {
          "id": "019c5ae9-bef1-4016-8fb7-03739fdaecc9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "43cd6301-0147-42da-8485-0587a3ba433f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925dc736-a3f8-4d60-88f1-662b9ffbde90",
        "cursor": {
          "ref": "273548ab-148c-4031-987b-38e67b51b74f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "81ad9b7c-3a79-4827-8585-d70564f0bd06"
        },
        "item": {
          "id": "925dc736-a3f8-4d60-88f1-662b9ffbde90",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f9a61bc0-7bb0-410f-ad84-fc8b7ff9765d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 716,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6a860c-44ae-47d6-afb9-219476d06098",
        "cursor": {
          "ref": "219284af-cc58-4257-b28b-6acfa0e4f6d0",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "fff34720-e3c7-4c14-beba-5530db9dea1c"
        },
        "item": {
          "id": "1c6a860c-44ae-47d6-afb9-219476d06098",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "afcdfd34-4e8d-4854-9dfd-be4e490eb1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 766,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e308535-b35b-4302-8336-69c65af61efb",
        "cursor": {
          "ref": "8227d735-b037-4a43-b43b-57e604db33d9",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "7705ae66-eafd-453b-8375-67f6e3a0a974"
        },
        "item": {
          "id": "5e308535-b35b-4302-8336-69c65af61efb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "23256d2b-5aca-41f8-a8f9-1e4dbda466a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 867,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "772c4318-b1a4-478e-a5d5-646d596ffc8d",
        "cursor": {
          "ref": "61897492-d20d-4920-b00f-bc9ed4ed9d82",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "144aaeb8-3c9f-447c-9161-d626a3d20494"
        },
        "item": {
          "id": "772c4318-b1a4-478e-a5d5-646d596ffc8d",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "1fff0d5c-19f8-4cd6-9806-38b91280c56b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab380f71-677c-4461-94c2-72ccfd893d87",
        "cursor": {
          "ref": "ac759aec-bf04-49c5-a915-0a26526bc769",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "acd6054a-c3a9-48ca-a2e3-dc6cab2ad2d4"
        },
        "item": {
          "id": "ab380f71-677c-4461-94c2-72ccfd893d87",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4514877e-75ba-4790-9364-44d68d53dcec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb98f534-3866-4957-bd3c-2982cdedbe01",
        "cursor": {
          "ref": "d237e014-0884-4f7d-bfcc-dd7d0e434151",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "985fc890-bb9b-482f-b8cc-a0329e058a0f"
        },
        "item": {
          "id": "cb98f534-3866-4957-bd3c-2982cdedbe01",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "68455377-022f-49c5-94ae-d9f20140878b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29f0a413-c4ef-4ea2-9b70-adc1703f194e",
        "cursor": {
          "ref": "9e359e4e-f27f-4b99-8be9-779930082f42",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0c767693-94d2-4fa8-bb07-946095ad9307"
        },
        "item": {
          "id": "29f0a413-c4ef-4ea2-9b70-adc1703f194e",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fbbf6a23-f1c5-4727-b49f-6e10d3d5b71a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198d3207-5a5c-4db0-bb75-857db74492f0",
        "cursor": {
          "ref": "17d3406f-178d-4c68-8dfc-c251b8b4bb9f",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6646c712-790f-459d-98a2-6db6d7ea4efe"
        },
        "item": {
          "id": "198d3207-5a5c-4db0-bb75-857db74492f0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "ec4d80a8-331b-493b-8ec1-7d8aeedc7014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09f9e8a6-f772-4992-a184-0e616743bd7b",
        "cursor": {
          "ref": "f0658f5f-b005-4b87-9cec-a86e8abc8146",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3ff50496-6b31-4e78-8934-7c28ac123dd3"
        },
        "item": {
          "id": "09f9e8a6-f772-4992-a184-0e616743bd7b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "bdd05d3a-553d-468b-b5e1-aec1093f7506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b17461-bca6-47fe-95de-4b984dd844b2",
        "cursor": {
          "ref": "0b4791d6-448a-4a80-9046-dc9f40734b46",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "aa993588-b891-41bd-ba30-979d4266c724"
        },
        "item": {
          "id": "06b17461-bca6-47fe-95de-4b984dd844b2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "10147d9c-9395-45cb-89bf-83ec2c267c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79979b3b-d0e5-4ba2-a2ad-3f1ea20cb4e0",
        "cursor": {
          "ref": "8fa19046-e40e-48e5-8a4b-9ef88cc220a1",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "096fb93f-15a9-450d-bfe5-6be63a3f8089"
        },
        "item": {
          "id": "79979b3b-d0e5-4ba2-a2ad-3f1ea20cb4e0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "8a229652-fd5f-4bd2-88b0-c3d61e8ed2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648d5f86-38dd-4d3f-9d90-1e3c9aec5cc4",
        "cursor": {
          "ref": "e81e120d-6b6a-46d7-8a35-5ea5a04030fe",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "70dbcf8f-4752-419d-b365-b64020b3fb16"
        },
        "item": {
          "id": "648d5f86-38dd-4d3f-9d90-1e3c9aec5cc4",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a1e7ae71-1309-4c4a-ac09-547476babe2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10379602-f04d-4515-b0a0-651f80689093",
        "cursor": {
          "ref": "5b2f9c92-22f2-4588-8804-46dbf57a0ad5",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1630880f-37a9-460b-a7f0-e4b8c21b080b"
        },
        "item": {
          "id": "10379602-f04d-4515-b0a0-651f80689093",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7be025ec-7ee0-4b57-bc36-9ed443afd5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221efd6b-cb46-42bf-8b65-2033403767bf",
        "cursor": {
          "ref": "48be160c-0fc3-42ca-9fce-15c8234909b6",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "0a0f6aa5-90c0-4d98-916b-85acf7d19a04"
        },
        "item": {
          "id": "221efd6b-cb46-42bf-8b65-2033403767bf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "38008f83-cca6-4f3f-b2b3-7c5735d407c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b430ad0-a5be-40d0-8749-1cab50ff2e01",
        "cursor": {
          "ref": "85a94df5-bfc7-4698-85bd-8c8a6fb96120",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "34ecacba-16f3-4e70-84be-19c5ebfb7a8e"
        },
        "item": {
          "id": "6b430ad0-a5be-40d0-8749-1cab50ff2e01",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "290a5562-43cf-4851-98e4-6c5ab3df506f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aef9664-333b-4148-b45c-429766232e43",
        "cursor": {
          "ref": "559dfca6-e943-421b-bdca-b7cb53693a6b",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "51b49450-c6ed-4e33-b439-5ec5bcb31481"
        },
        "item": {
          "id": "8aef9664-333b-4148-b45c-429766232e43",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1b78d1d8-ee7e-4fe8-b33c-df155cc4b163",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "4ec4d426-1155-4bc8-b329-fbded4ef822c",
        "cursor": {
          "ref": "a5890829-2ddf-44e5-bb55-87ff97e55710",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "34d82645-7db3-4770-b3ac-f901eb21e7d2"
        },
        "item": {
          "id": "4ec4d426-1155-4bc8-b329-fbded4ef822c",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "88129100-cc44-48b3-9df7-02002d17173d",
          "status": "Created",
          "code": 201,
          "responseTime": 3246,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "3f4de439-8380-4408-9e58-eced50823607",
        "cursor": {
          "ref": "79e2269a-2184-444a-bf81-7c5e7c844f98",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "284fd1d2-3b6d-4a70-9edb-20b246cce926"
        },
        "item": {
          "id": "3f4de439-8380-4408-9e58-eced50823607",
          "name": "credentials_issue"
        },
        "response": {
          "id": "df7d7066-3414-4bdc-bd4c-908942719ebf",
          "status": "Created",
          "code": 201,
          "responseTime": 3283,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee58b99-5d49-4542-9e7d-7a728627ec54",
        "cursor": {
          "ref": "e7762a70-574c-4aec-adea-9a081f41804c",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ecc7fdc6-0847-4579-8546-a3f35d15390a"
        },
        "item": {
          "id": "fee58b99-5d49-4542-9e7d-7a728627ec54",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "9d0d9e3a-3791-41d7-8ef8-15afb3c2120e",
          "status": "Created",
          "code": 201,
          "responseTime": 2974,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb26a50-75e2-4d0c-98b2-6f8d9a8110ca",
        "cursor": {
          "ref": "ca5bdddf-203a-4a01-a9c0-7e0639f8ad62",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "09b7e50c-5333-452d-b8ba-a7f11c70ce1d"
        },
        "item": {
          "id": "efb26a50-75e2-4d0c-98b2-6f8d9a8110ca",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "65bcea2f-6bf7-49ce-bfdd-70208efb8325",
          "status": "Created",
          "code": 201,
          "responseTime": 2526,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e39d9bbb-4fb6-4aa9-b1af-c48c7eaa3e1d",
        "cursor": {
          "ref": "067c29ac-5175-4d00-aabf-4073566cf8fc",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d949fc57-5d01-4d4b-bf5b-2486aae3ca05"
        },
        "item": {
          "id": "e39d9bbb-4fb6-4aa9-b1af-c48c7eaa3e1d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "84a2ac6d-dca2-49ce-a5d8-52bafe9e52b1",
          "status": "Created",
          "code": 201,
          "responseTime": 2870,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "78f560c0-e1a5-4007-8b01-bcbadeb06864",
        "cursor": {
          "ref": "c53e87c0-33a8-4d68-bb12-98b4f555e39b",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "be794494-aef0-43c3-b04b-b29493041543"
        },
        "item": {
          "id": "78f560c0-e1a5-4007-8b01-bcbadeb06864",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "91b961da-daa1-43d0-8306-ced03159c8a9",
          "status": "Created",
          "code": 201,
          "responseTime": 2552,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-04T00:37:42Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-04T00:37:42Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "48bf0ada-c34c-4fef-a4c8-23de38aac6de",
        "cursor": {
          "ref": "685f2c16-fb54-40f1-bbc4-3e2342e35284",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "53b45b3c-718f-4dc9-8632-a23e3eed88e3"
        },
        "item": {
          "id": "48bf0ada-c34c-4fef-a4c8-23de38aac6de",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8bfd5874-abf3-4e77-a9c6-17b098e8e28c",
          "status": "Created",
          "code": 201,
          "responseTime": 2206,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78db6497-8ed2-43a1-9d02-cd3d55f58201",
        "cursor": {
          "ref": "3c4a5819-5d0e-4a09-bf9a-014e36a80026",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d7f15e53-5e45-485c-8300-1561ec0cf80b"
        },
        "item": {
          "id": "78db6497-8ed2-43a1-9d02-cd3d55f58201",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2f623f3b-7d25-438a-9ebd-f9f6f0c99c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78db6497-8ed2-43a1-9d02-cd3d55f58201",
        "cursor": {
          "ref": "3c4a5819-5d0e-4a09-bf9a-014e36a80026",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d7f15e53-5e45-485c-8300-1561ec0cf80b"
        },
        "item": {
          "id": "78db6497-8ed2-43a1-9d02-cd3d55f58201",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2f623f3b-7d25-438a-9ebd-f9f6f0c99c0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bb0136e-2191-457c-bbaf-5b37835b9f38",
        "cursor": {
          "ref": "a5a81892-2eff-4a20-9a4c-2c6570d2ff7c",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e215d372-b901-4a7f-914f-a415399411fe"
        },
        "item": {
          "id": "1bb0136e-2191-457c-bbaf-5b37835b9f38",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a1b6913a-0939-45b1-8541-0351868e553e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a60781-cb8c-4bdb-8de5-a779927ba1e9",
        "cursor": {
          "ref": "57eeec57-478e-40c2-90dd-6bcc18408fe5",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7db0ea5f-5c47-46db-87bf-5ef65ecd37fd"
        },
        "item": {
          "id": "a8a60781-cb8c-4bdb-8de5-a779927ba1e9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a141170a-22fc-4232-8881-f7665f5e6805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "187acfd4-4a25-49cf-99fd-f377705c907d",
        "cursor": {
          "ref": "18707745-9ccb-441d-ace1-1adbf2c813da",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b2a2d50a-eb20-42f0-813c-bbffb62c060b"
        },
        "item": {
          "id": "187acfd4-4a25-49cf-99fd-f377705c907d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c2d6aacd-804c-4af9-b253-bee90689c01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc624c75-ae04-48a0-a0cd-71e912a7b70b",
        "cursor": {
          "ref": "ea22e8c1-47fa-43cf-b80f-c9fccfd3dcf7",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "99d0956c-fee5-47b0-8c97-a77403e9957a"
        },
        "item": {
          "id": "fc624c75-ae04-48a0-a0cd-71e912a7b70b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "16358ebd-0ffb-4675-b989-156d78f7eb9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dce358ed-a794-485b-8775-411230495ca9",
        "cursor": {
          "ref": "fb1b7bdb-813a-4beb-8132-5268c3f6cc6e",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7ddb24a4-d8db-46df-beea-488c7debf7a4"
        },
        "item": {
          "id": "dce358ed-a794-485b-8775-411230495ca9",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "49a010dd-c81a-4929-8cf3-fae2d17e8b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52ddd21b-3e3d-4b8c-ba93-3c0a3b9c02bb",
        "cursor": {
          "ref": "93b66128-e254-4617-ad75-3c0bd9443ca3",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a6b7b3f3-6da9-45e3-891e-44a86750ba1b"
        },
        "item": {
          "id": "52ddd21b-3e3d-4b8c-ba93-3c0a3b9c02bb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "834159c8-dd9e-4bb2-a712-c25ce533a23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e674c7c5-ea17-4157-bae0-727807d99266",
        "cursor": {
          "ref": "fd13ea2f-989b-4727-bad5-53a0fe82808c",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "93630b58-8133-4962-9c56-483517e0b1cb"
        },
        "item": {
          "id": "e674c7c5-ea17-4157-bae0-727807d99266",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5d068c1c-3a59-4470-9cf8-21ba38ed220b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed75f948-d564-4380-982c-dbb768810e19",
        "cursor": {
          "ref": "070fe23e-b0c8-4b0c-8540-73a05f92fef0",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2a7d5729-570e-4747-b80c-de6beab5cae7"
        },
        "item": {
          "id": "ed75f948-d564-4380-982c-dbb768810e19",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9b4f3aab-56db-4ade-a592-68da6cd7f811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de19d61-4383-4afe-8522-a699b4f5caf8",
        "cursor": {
          "ref": "b07d91f2-12e3-4106-8974-c78bdc36998d",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b1836c30-eb4b-4902-afa9-1728c8d54d64"
        },
        "item": {
          "id": "1de19d61-4383-4afe-8522-a699b4f5caf8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b3d62779-a33e-42ec-938a-00f8de11a322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "360ecc40-95dc-4e83-88a8-33999af47a84",
        "cursor": {
          "ref": "c2f87057-584f-4e13-8ebe-28eba344deb2",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ce287d29-9583-458f-99f2-9d0f24fada80"
        },
        "item": {
          "id": "360ecc40-95dc-4e83-88a8-33999af47a84",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4a9682ca-55c9-4f8b-844d-d163b23350f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74325f7-4e35-48a4-9389-21ffb69ef680",
        "cursor": {
          "ref": "1d58d086-1a65-4b90-b433-5c70cc4bcfce",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f64c4bee-60c0-4bc7-98f3-b52fa7a28c7d"
        },
        "item": {
          "id": "c74325f7-4e35-48a4-9389-21ffb69ef680",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ef06fe29-bebb-47c2-9673-58e080a6fef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8dbc06-54d0-4a4a-bd25-f93a79e7f4dc",
        "cursor": {
          "ref": "faa82e11-6576-41aa-85a7-abc323b5b416",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "abd46e4c-13be-4d98-a125-ee7b926e2cdf"
        },
        "item": {
          "id": "eb8dbc06-54d0-4a4a-bd25-f93a79e7f4dc",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ff150e3c-9697-44b4-9f72-15eb8228fc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fac8de1-6a0d-460a-a9b4-8bbfebb3cb0a",
        "cursor": {
          "ref": "7a47a6ad-222b-48dc-95c2-68ff13732d9b",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5c20b92d-8018-4972-a45d-7020a4300537"
        },
        "item": {
          "id": "1fac8de1-6a0d-460a-a9b4-8bbfebb3cb0a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "203dc52a-895f-4313-84c4-ecd082c9cb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1399243d-bc4d-4240-a21e-cd6ef2251578",
        "cursor": {
          "ref": "da41725d-822f-470a-a20f-50f9944d6b4a",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e6e750e0-3dc0-4905-b35f-4fa934981fa5"
        },
        "item": {
          "id": "1399243d-bc4d-4240-a21e-cd6ef2251578",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ca76d59d-cff7-4d8e-9f99-8163c92d9727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc30099d-f25a-4a94-91eb-7b3fe2144fd0",
        "cursor": {
          "ref": "1ebc0f8c-e5d7-4f6b-ac63-c1f6911e4456",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "0b3b7d78-dba6-41ac-851f-dd585679d362"
        },
        "item": {
          "id": "cc30099d-f25a-4a94-91eb-7b3fe2144fd0",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "adc8c348-7ffc-4640-8160-9f8e4dae6aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e6ea121-49ee-433d-b1ae-e51ed06f28ab",
        "cursor": {
          "ref": "60e8511d-0582-4d65-a434-576f9979fa32",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c4110bdf-2cf9-4d65-b461-a37ed23d9a82"
        },
        "item": {
          "id": "6e6ea121-49ee-433d-b1ae-e51ed06f28ab",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1131ff7f-7fa8-40ec-b42d-59c60042c2af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da666bd7-62ef-4c2d-92e3-d897124d642d",
        "cursor": {
          "ref": "73823141-c1e9-4556-83e7-85fb8113f233",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "bc5d48af-c13f-4e48-8528-acb489a9fabb"
        },
        "item": {
          "id": "da666bd7-62ef-4c2d-92e3-d897124d642d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "cf75e41b-1940-4dcd-8091-cfaa6385d8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e574a6a-ed9e-4126-bd63-25f7d99b9e53",
        "cursor": {
          "ref": "9cfffb58-2081-4477-8d11-c88ba8fead5f",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ac722bf7-5e64-43bf-ad8f-f6b9d5bf8f29"
        },
        "item": {
          "id": "0e574a6a-ed9e-4126-bd63-25f7d99b9e53",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "51f54970-b8b1-4f78-8a2c-0420aade3f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeed3c84-5699-4c5a-b3fa-6c2e8f016ec4",
        "cursor": {
          "ref": "13ec5217-5a90-4190-8999-205c4733a28d",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9bf052e1-1630-4ab8-83d8-d7442f237646"
        },
        "item": {
          "id": "aeed3c84-5699-4c5a-b3fa-6c2e8f016ec4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "19e86718-15a8-4a6f-98af-77e09a6d93c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1337c228-30a3-456a-8611-0c9cc2eed27d",
        "cursor": {
          "ref": "8cbc51ed-f993-4766-aefb-c7e8a3cc3621",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6c0b3a05-7439-43cb-8b95-50afa99698a8"
        },
        "item": {
          "id": "1337c228-30a3-456a-8611-0c9cc2eed27d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6641c74e-b0a5-427e-a346-ed18e16cdf52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9658a0a-1c13-4ae0-90a0-c862a9c8f601",
        "cursor": {
          "ref": "5dcd6577-9d3b-45c1-9951-697576b50441",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "646c7e07-6b40-43c9-af11-57976f2eb4e9"
        },
        "item": {
          "id": "c9658a0a-1c13-4ae0-90a0-c862a9c8f601",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "99968303-44cc-448a-8b29-0f1448366e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88900122-9d6b-4734-ae08-8f4f9815a93f",
        "cursor": {
          "ref": "674cb519-42e3-4b9d-bb90-ca1ebc9db9c8",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6bd69415-03f9-4fa0-acc2-e2fb640f8573"
        },
        "item": {
          "id": "88900122-9d6b-4734-ae08-8f4f9815a93f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "aa30b27f-78d0-4bcd-82f2-99e7fdf1f2c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d2865d-135e-4c7b-b205-fbd8c7c6083b",
        "cursor": {
          "ref": "6f447eae-1579-4362-ac3d-88b2acc368b4",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fd4a2eb3-4384-46e8-9445-3a05bcea277a"
        },
        "item": {
          "id": "d0d2865d-135e-4c7b-b205-fbd8c7c6083b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f647ad14-1451-40ec-bbef-6feec0da81ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c122b16-945a-4390-99ea-82f7c4a8daec",
        "cursor": {
          "ref": "c96ec73c-900f-4b8d-a205-57fcade7be62",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "85deed56-eb32-41cd-8d03-f1a34d39812a"
        },
        "item": {
          "id": "9c122b16-945a-4390-99ea-82f7c4a8daec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "2a79bb9f-c714-40dd-a87a-ad8c3851171b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "547e50c3-84be-4149-81d5-2c5e2cb59842",
        "cursor": {
          "ref": "71a115ec-4fc2-4bbc-907f-cc5c22a06720",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2f941956-3c0d-47a1-9374-72623237b103"
        },
        "item": {
          "id": "547e50c3-84be-4149-81d5-2c5e2cb59842",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "46004081-2410-4a7e-8fe2-fddbae27bd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9459af18-1fcd-4234-a7c7-6fbbb5a60617",
        "cursor": {
          "ref": "03f09054-5bfd-4b98-9ba9-ceef9e23dd92",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5c3bd98f-f38f-4907-bb91-9a00e31157ba"
        },
        "item": {
          "id": "9459af18-1fcd-4234-a7c7-6fbbb5a60617",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a9965474-14bf-4339-8e45-be12f86c658e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2859d20-7dc3-40a6-9d59-d172d25237a9",
        "cursor": {
          "ref": "2f2a5e6f-eade-4b17-84f5-88affb97e4e8",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ac520342-dc35-433a-a40b-4550984da161"
        },
        "item": {
          "id": "e2859d20-7dc3-40a6-9d59-d172d25237a9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8cdbfac0-650e-4718-b053-2794688eaf82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693ebd4c-9df0-4fd6-802e-cb86b48f00eb",
        "cursor": {
          "ref": "034f6355-38d9-45ff-b1f7-4c78ff0d6a81",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "464b0147-c059-47fb-969e-013eefdaf355"
        },
        "item": {
          "id": "693ebd4c-9df0-4fd6-802e-cb86b48f00eb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c9e4c05a-3177-4fe4-ab88-90e1d9d72cf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b68964-e20a-47e0-ad68-981c1db0371a",
        "cursor": {
          "ref": "4f12e65a-ae1a-4918-b23c-57cf102ba073",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d638b009-39c7-4802-8344-34b57fc5c301"
        },
        "item": {
          "id": "20b68964-e20a-47e0-ad68-981c1db0371a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "02b6c8f8-6b0c-4222-8366-f78ce00256ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c82d84f5-8d0b-4f30-af4e-01545d2e8caf",
        "cursor": {
          "ref": "72252974-8911-48a0-97bc-5aff2070a11d",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bb560cd8-f7fc-4a20-82fa-b25c0685844e"
        },
        "item": {
          "id": "c82d84f5-8d0b-4f30-af4e-01545d2e8caf",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f925ae52-1046-46d3-b8ec-0046be48c986",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e07815c-f6c0-44f9-9a2b-653c6037ab0d",
        "cursor": {
          "ref": "c03a14ef-e05b-40e0-bfe3-177c137e72c0",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5e4fc581-e982-4c69-8566-94b75c5a5e7f"
        },
        "item": {
          "id": "3e07815c-f6c0-44f9-9a2b-653c6037ab0d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a232ef61-36e6-4507-b1d6-09cd0258e4a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67e77cd-bc93-4118-bf3e-c2aea9804510",
        "cursor": {
          "ref": "65b5dd2b-b613-4907-b49d-ca84c905701e",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "49b77f4d-c7f3-4023-a5ca-95602f2d160e"
        },
        "item": {
          "id": "b67e77cd-bc93-4118-bf3e-c2aea9804510",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "36d88bfe-0313-4135-8eca-60fea76e6264",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "471f1062-9084-44c9-a168-54ef1326cd37",
        "cursor": {
          "ref": "dbf051f4-64a7-4636-a56d-fc45557fae73",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "10f41707-e794-4ebb-b4dd-e1cd482e24cf"
        },
        "item": {
          "id": "471f1062-9084-44c9-a168-54ef1326cd37",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4d4bd2c7-bce3-4a9f-b103-0707741ed968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "0c473f58-e96e-4882-a17c-5a7ca39c6f9e",
        "cursor": {
          "ref": "75afba14-ad06-485e-a1d7-7a71b01b122d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b756f391-1d68-4f9c-8ae8-a6407b840ada"
        },
        "item": {
          "id": "0c473f58-e96e-4882-a17c-5a7ca39c6f9e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1385cb95-91c1-4224-a109-83f639280e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c473f58-e96e-4882-a17c-5a7ca39c6f9e",
        "cursor": {
          "ref": "75afba14-ad06-485e-a1d7-7a71b01b122d",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b756f391-1d68-4f9c-8ae8-a6407b840ada"
        },
        "item": {
          "id": "0c473f58-e96e-4882-a17c-5a7ca39c6f9e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1385cb95-91c1-4224-a109-83f639280e54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a521d9ee-fcdb-4799-886b-3f7d8f24c21c",
        "cursor": {
          "ref": "972f81b0-0a00-4482-b03f-fe284ab5d51d",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7d1c7b29-db3b-41e0-9fa6-55cfbab4b3ac"
        },
        "item": {
          "id": "a521d9ee-fcdb-4799-886b-3f7d8f24c21c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "493c92be-bfba-46e4-b344-8a34bc547c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67295782-2dd0-4bf5-8d1f-135a034f0b2f",
        "cursor": {
          "ref": "d7127328-d2e2-4386-a097-454b53b7e66e",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "2447be76-d96e-4777-ae5f-0643ff3a4518"
        },
        "item": {
          "id": "67295782-2dd0-4bf5-8d1f-135a034f0b2f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "91f895a6-1346-4494-8ca2-bde0c436ec94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b68bd1d-c48f-4061-8845-7c58301e1600",
        "cursor": {
          "ref": "4b467fb3-0e21-4a34-a346-5b1800d6bb66",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "850e8795-ec3c-4775-8618-615534b3991a"
        },
        "item": {
          "id": "7b68bd1d-c48f-4061-8845-7c58301e1600",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fbf932ff-efd6-4eba-9a36-44d6df27a956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3eef6e9-6795-453c-a797-9754ce23bdfd",
        "cursor": {
          "ref": "2f3d9956-1941-4d65-92e8-c3766a903fdb",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "44bfeb44-96e4-48b7-b93c-41c6d62ec9ad"
        },
        "item": {
          "id": "e3eef6e9-6795-453c-a797-9754ce23bdfd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "78bf4dde-5121-4bea-9cdd-b8b5e425a0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca081646-c75b-4dbf-8767-b76c3527f2a6",
        "cursor": {
          "ref": "ae28a00b-ec3b-409b-875a-d7f8a5479034",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6323b457-3107-4892-9c4f-90726b477c94"
        },
        "item": {
          "id": "ca081646-c75b-4dbf-8767-b76c3527f2a6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2a97c917-f24e-438b-ac4b-e5ee9936924d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67d98aa-6d4c-4fa1-8be3-1a2c624a5280",
        "cursor": {
          "ref": "f434fbbb-dd4f-4621-ba69-0c61988b2657",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "734f80a4-a90f-4065-ab24-48e629149ac7"
        },
        "item": {
          "id": "f67d98aa-6d4c-4fa1-8be3-1a2c624a5280",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "69857b10-bbe4-45ff-9119-9cf93d232856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "452cc1cd-ebcf-40fa-a979-b75f4de74677",
        "cursor": {
          "ref": "1fdff4fc-53dc-4273-81c7-54775bfbbcf1",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "f9a3473e-f7e4-4029-98a5-a2cd02b39a77"
        },
        "item": {
          "id": "452cc1cd-ebcf-40fa-a979-b75f4de74677",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b494d155-5d13-4b04-a617-a4fc177fc541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561810b4-cd82-45bd-8cd3-212951558a44",
        "cursor": {
          "ref": "d8f3b719-f8bb-463f-a412-f4f31d17713b",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "acaeb1a7-1f3b-4525-b566-d2d3f1615b07"
        },
        "item": {
          "id": "561810b4-cd82-45bd-8cd3-212951558a44",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "495845db-f399-4921-9a1d-c11d6825964b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e36c31a-7cc5-42d5-86bb-f7870ffa901f",
        "cursor": {
          "ref": "36259d7d-7a41-4ec3-9884-8949f8a464ec",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c0e62fc7-0999-4033-add1-b81d20cbbb7f"
        },
        "item": {
          "id": "7e36c31a-7cc5-42d5-86bb-f7870ffa901f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c37068f2-362e-4790-8df8-025b2994832d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef02b231-1fc5-4c37-965b-62228486137f",
        "cursor": {
          "ref": "eda52ee4-e48e-484b-877d-18a9cb9d1106",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "930c96a7-a65b-4468-bd25-2e48860f172b"
        },
        "item": {
          "id": "ef02b231-1fc5-4c37-965b-62228486137f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cb327549-055d-4a58-a85e-0bf216c39434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cb8b060-0108-42d9-bdd0-0dc8c526ac14",
        "cursor": {
          "ref": "b0c351bf-95fd-429d-8c91-dcf417d4ca02",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "74d80674-3afe-409a-85d0-0d1ad2bc3302"
        },
        "item": {
          "id": "9cb8b060-0108-42d9-bdd0-0dc8c526ac14",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "6aaf84e6-8c8f-409a-89ee-46d2e40c025e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83b9254-95c2-4816-abd4-402d0886d010",
        "cursor": {
          "ref": "067ad6e6-e707-498b-8639-2b61f6b552f2",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c1f75f64-22ca-4ebd-8508-2bd9e8468c58"
        },
        "item": {
          "id": "c83b9254-95c2-4816-abd4-402d0886d010",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e90709c2-18ab-4600-96e1-6f95a79cee9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d67daef-8071-4523-9bcd-ab4376b75892",
        "cursor": {
          "ref": "aa47e418-5dec-4346-a1bc-e89bf324ae3f",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a9e5f242-dfd4-4f4b-9497-3cac3e19af5a"
        },
        "item": {
          "id": "0d67daef-8071-4523-9bcd-ab4376b75892",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "fa1d2ac5-8fae-422a-b7ce-59096ada6cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af39ee5f-3d73-442a-9a5b-d16c69c992cc",
        "cursor": {
          "ref": "4b65b4f0-d4f8-421b-8455-d9b7a386ad50",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f9182e45-0740-401e-ae7e-ea1de6fa8feb"
        },
        "item": {
          "id": "af39ee5f-3d73-442a-9a5b-d16c69c992cc",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1213099a-0398-43b2-80db-fe7e087b31ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bde6537-76b6-4cb2-834b-17113ba2abd9",
        "cursor": {
          "ref": "c1ea5b42-7765-4c71-8e6d-f0ae3ae7ccf2",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "50ba7356-e6bf-411e-8d4b-0cd82397636c"
        },
        "item": {
          "id": "6bde6537-76b6-4cb2-834b-17113ba2abd9",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a320c2d4-71f5-4101-aeab-7be581c984bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d435c08f-4129-4db5-81a2-815ebe4144f3",
        "cursor": {
          "ref": "351f1bd6-224c-4757-b21c-118fff922667",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "119d4466-4dd7-4ce2-9012-c4b8316abc56"
        },
        "item": {
          "id": "d435c08f-4129-4db5-81a2-815ebe4144f3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f42fc76f-56c5-416a-b768-36a2f51915fb",
          "status": "OK",
          "code": 200,
          "responseTime": 300,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "6a78ec07-e60f-4b44-a033-c66597731257",
        "cursor": {
          "ref": "617f13ec-9972-4bb9-b360-a25edeb1a130",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bb5226b6-07ca-4f3f-9975-757bb60c5231"
        },
        "item": {
          "id": "6a78ec07-e60f-4b44-a033-c66597731257",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "d2570db8-d442-45c7-90d3-68faca087175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaf81ae-6b1e-4019-b1d2-70a405d1acec",
        "cursor": {
          "ref": "2b210d67-cb98-42d1-9d87-3cabfbb57126",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "df57dd9b-9861-4ab8-bf6e-ce6a8d971c3e"
        },
        "item": {
          "id": "edaf81ae-6b1e-4019-b1d2-70a405d1acec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3e626934-8a13-4296-8967-0116fc8a41cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9bb430-1b48-4d91-ba18-83d776872509",
        "cursor": {
          "ref": "4ec91151-5189-4d00-bea8-147dd602a72d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4cd0b94b-dd57-4e23-a546-d2517e3f596b"
        },
        "item": {
          "id": "3c9bb430-1b48-4d91-ba18-83d776872509",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "30449c1e-a6b2-4a64-949d-1d978da8071e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80776514-5d29-4d33-b0ff-69216cff6ad6",
        "cursor": {
          "ref": "1ddd4201-89af-42af-9e2e-a179e2c56fb9",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2b972ec3-5c68-43b8-a9cb-daf82607f863"
        },
        "item": {
          "id": "80776514-5d29-4d33-b0ff-69216cff6ad6",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "73186524-0a64-4049-bfae-ce95a523624f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21abfe0a-d736-4a54-a885-db9bd80ec516",
        "cursor": {
          "ref": "5de4bb26-9bdd-4bc4-998c-da53242018c2",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "d8459c4c-bed5-4b20-b852-b2671445638b"
        },
        "item": {
          "id": "21abfe0a-d736-4a54-a885-db9bd80ec516",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "d1516adb-efc9-4883-8fb8-d08099659244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d8ebf1-ede9-4520-a2c7-ff097026e31f",
        "cursor": {
          "ref": "737f6e79-3e18-43d9-a40c-499e6c8fa2be",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "8a76e01c-4a9e-4f73-9949-0672f613fda8"
        },
        "item": {
          "id": "f1d8ebf1-ede9-4520-a2c7-ff097026e31f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e821f664-ba61-495d-9478-d50c55a6acc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd62103-f0be-4ae0-b031-916f2d17d4f4",
        "cursor": {
          "ref": "5e3ddbe2-37b1-44f6-bf63-b0d170c6c594",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4b074cd3-0475-4c5e-91e9-02f0adc7a373"
        },
        "item": {
          "id": "9cd62103-f0be-4ae0-b031-916f2d17d4f4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "21932e0a-7a3f-4795-bdb0-8be7808618f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "948bdd31-174e-4e52-b4dc-1d24e8e291f3",
        "cursor": {
          "ref": "006c30b1-0dd3-4cdb-a272-9a569ef08d3e",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "df00ef50-feb5-4631-a882-ec2cc654a748"
        },
        "item": {
          "id": "948bdd31-174e-4e52-b4dc-1d24e8e291f3",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "beef180e-8892-4fc8-92d6-aa57ff2cdf3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "629cb4be-e763-4436-8662-a927787165ee",
        "cursor": {
          "ref": "551ee4d4-c7e4-48a5-9b50-9e34a12bea2f",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "e37f6fec-5417-4f4b-b5c2-3eff2723637f"
        },
        "item": {
          "id": "629cb4be-e763-4436-8662-a927787165ee",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0ecff866-4c65-4a7c-9944-730a9a5ba7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98832171-96b5-4098-9daf-a1c5bb0cc7e3",
        "cursor": {
          "ref": "423f31eb-da27-4f34-927b-c16007978aaf",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "7f05ac04-87fd-4fc8-971b-0965a4ed8a52"
        },
        "item": {
          "id": "98832171-96b5-4098-9daf-a1c5bb0cc7e3",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "8fe06220-f410-4ed7-b267-66a7f073e136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af35bb90-eb71-4efa-b185-82537782609f",
        "cursor": {
          "ref": "a870e9ea-023e-481b-b7ae-94deedb97d1d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1eafe103-6399-42b1-958b-9397d047acfe"
        },
        "item": {
          "id": "af35bb90-eb71-4efa-b185-82537782609f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a64bfb59-23f2-4301-a8c5-f951b290189e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cef9cb4-b428-42e6-a042-b906c55a730b",
        "cursor": {
          "ref": "0670ad2c-920d-4f59-8bee-faa8b0060b50",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "638b97b9-78e8-4b44-84d9-62e709a1c19f"
        },
        "item": {
          "id": "0cef9cb4-b428-42e6-a042-b906c55a730b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1d313480-f651-4630-af5f-ae69b1cd4c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44e0d0d-85ba-409f-abb0-586eb3b3e5ce",
        "cursor": {
          "ref": "94a8c80c-1f8b-4414-9e8f-6e52c9d4337d",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6b6a60b5-f1e1-4349-825c-00803b36958e"
        },
        "item": {
          "id": "d44e0d0d-85ba-409f-abb0-586eb3b3e5ce",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "141ec02a-7df7-4206-8caa-f7a250d56162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8eb3557-07ec-47ec-8f40-81c4b01c66d1",
        "cursor": {
          "ref": "1f119a91-2c37-4f34-9059-6005d030da98",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "aed64d8d-83c6-4f7e-b6ff-01efe54c39c7"
        },
        "item": {
          "id": "f8eb3557-07ec-47ec-8f40-81c4b01c66d1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3db4d561-b6be-4664-9106-4727ef606caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d5f3f4-f331-497d-bd39-c11a8dd244bb",
        "cursor": {
          "ref": "d20aa4f0-d741-4809-b273-7b9e112209bd",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "2eac2c08-5eac-4d1b-a05b-24872c0e1c22"
        },
        "item": {
          "id": "a0d5f3f4-f331-497d-bd39-c11a8dd244bb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7f541dbd-c255-453b-b4a0-0d2557def28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f89ddf-0148-41b8-bc94-02b682b0270b",
        "cursor": {
          "ref": "7e8da358-9efc-4f9a-832d-f1b920bd939e",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dd8d9862-f738-4437-ac90-bfd9c816efe5"
        },
        "item": {
          "id": "81f89ddf-0148-41b8-bc94-02b682b0270b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d6afd6a6-5bdc-499e-bcc8-d78bd842f674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed803ce5-f3d2-4232-9fa1-5f38e0ab656e",
        "cursor": {
          "ref": "ceab4491-9bb0-4a96-9153-7d57a9d39f5a",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7d2147c2-38d1-4203-afb6-e5e16393a85b"
        },
        "item": {
          "id": "ed803ce5-f3d2-4232-9fa1-5f38e0ab656e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "89707a96-d4c9-4215-a358-140f8778bc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b47b401-59d1-43e6-b9dd-de9ce10286a3",
        "cursor": {
          "ref": "a80d3b59-05fe-4b42-9f09-f9e49f96b2b4",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ae25b414-35dd-4bb2-a6f1-b598a6510fd9"
        },
        "item": {
          "id": "9b47b401-59d1-43e6-b9dd-de9ce10286a3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "640f4385-09b2-4bcf-ac04-13ccb0daf03c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea28fc4-b82c-4f67-b5fa-60a11c2e503d",
        "cursor": {
          "ref": "02a2eae6-9a96-4e39-a7ba-f8398b357a0a",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "2c7df53b-86f0-4009-9db6-7ed898798b15"
        },
        "item": {
          "id": "dea28fc4-b82c-4f67-b5fa-60a11c2e503d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "cc0607e3-adcc-4dc5-8570-751ad06ea5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dd8b99-fc8d-42f0-91ae-6fea6d7edba9",
        "cursor": {
          "ref": "4bc9af10-2df5-4248-b59a-8b7a3cf854fa",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "0ed28ad3-988f-4537-aca2-fcb1e512d934"
        },
        "item": {
          "id": "62dd8b99-fc8d-42f0-91ae-6fea6d7edba9",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c5f02a01-c387-4db0-95f7-560d50011a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f2f43e-f2e9-4cd2-b306-adca46f18aa5",
        "cursor": {
          "ref": "1522db2e-95a9-4610-bdfc-bd0a6f51b126",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ad20bbbb-ba6b-44f6-8944-eb682e29f9d1"
        },
        "item": {
          "id": "48f2f43e-f2e9-4cd2-b306-adca46f18aa5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "572c0a21-cc43-4603-ae4a-1813b341cb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5054da-e42d-4fa1-a018-3b62378e117c",
        "cursor": {
          "ref": "0fba36f6-bc65-4280-bbf6-a56378c15e61",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "da452016-26d4-46b6-b3b7-5d9898409e89"
        },
        "item": {
          "id": "cf5054da-e42d-4fa1-a018-3b62378e117c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6408bf05-8c20-453b-9086-0bbcd6b64d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c91c659-9742-42b1-a3f4-125f0ef0aca3",
        "cursor": {
          "ref": "0d6bbc45-f816-4436-ae86-3fa37217d0f2",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "544a76d1-a178-4144-b170-e5bb6fb0aee8"
        },
        "item": {
          "id": "9c91c659-9742-42b1-a3f4-125f0ef0aca3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "bae30d1b-adf5-48c0-9376-4bafff7a7a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "805fc120-efab-429c-9595-98b74b92ccb6",
        "cursor": {
          "ref": "86dc4a16-001c-4e82-acf4-cc1ea87af727",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8c35ee9f-6a13-41b6-a06f-22b550d2d3ac"
        },
        "item": {
          "id": "805fc120-efab-429c-9595-98b74b92ccb6",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "61b04435-c197-4565-8705-2393d6438220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346d86e8-ce4e-4158-9090-99fab7281ff1",
        "cursor": {
          "ref": "7e07450b-500d-433d-a933-fb05c799532a",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8e640cf0-e70b-49c7-9339-7a58ef6aafbe"
        },
        "item": {
          "id": "346d86e8-ce4e-4158-9090-99fab7281ff1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "6b84e0ae-a246-4ce1-8182-671d3fc7ab83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de5a7329-6139-4dfe-bba8-07323f05d3e8",
        "cursor": {
          "ref": "1953e6e9-61e8-4e51-bd02-c99c947cf6be",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c4da74b6-f94f-415a-920d-3b73498e6b48"
        },
        "item": {
          "id": "de5a7329-6139-4dfe-bba8-07323f05d3e8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2cd5196e-fc83-4d36-aae8-3ce3a0ff4601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a34b28f-2069-4a68-8ca1-0bdecc63a23f",
        "cursor": {
          "ref": "113784f3-3117-41f2-960a-883da330414b",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "70b4cf5f-6006-4314-8741-45295ab91431"
        },
        "item": {
          "id": "2a34b28f-2069-4a68-8ca1-0bdecc63a23f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "8e866a1c-c825-40f8-97a3-0631dda067c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7094b5-e539-47f8-a593-69aca36ac266",
        "cursor": {
          "ref": "171bd5e2-e8b1-4d0b-93f7-c513d5701585",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7ac8c2b2-976b-4632-ae3f-daf96db6a657"
        },
        "item": {
          "id": "ac7094b5-e539-47f8-a593-69aca36ac266",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a4d16b8e-630f-4dd5-8300-b5e5d564ce2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53191b6-1423-47f8-8261-7117a0eacebc",
        "cursor": {
          "ref": "f34cd933-e74d-4b63-86ce-8a889611aad2",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f81c7e27-731b-4e6c-959f-029f94c15746"
        },
        "item": {
          "id": "f53191b6-1423-47f8-8261-7117a0eacebc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "39262187-69d2-4989-9391-ed72871cbbde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af70a3c6-9a76-4a73-9e7e-f20fceddcbe8",
        "cursor": {
          "ref": "c556de2b-d534-4e60-9c1a-b22a7c5459d6",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1d77cf87-24bc-4088-a81f-4709070e09d1"
        },
        "item": {
          "id": "af70a3c6-9a76-4a73-9e7e-f20fceddcbe8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "17aa61c9-a458-465f-9f5b-4b738f50b645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90804b1-53bc-4f57-8c83-915f0e36bc74",
        "cursor": {
          "ref": "187a1367-4cf8-47a0-b9ee-b74ed1a92262",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f0e45b76-e1f6-4696-865a-19b5219de6fc"
        },
        "item": {
          "id": "a90804b1-53bc-4f57-8c83-915f0e36bc74",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c7f680aa-563a-4b05-a61e-997aca854136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33a9dede-a7a3-4d60-beae-0f079f9282bf",
        "cursor": {
          "ref": "a6b9e738-dce7-4a3a-b056-d52a5286a1e8",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ee84b93e-063f-42e4-9a2c-b8d82043da05"
        },
        "item": {
          "id": "33a9dede-a7a3-4d60-beae-0f079f9282bf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "710b34ac-1194-483c-a26f-764977577400",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4b92ad2-9442-4362-8f2d-1d789960eba9",
        "cursor": {
          "ref": "ab0161bc-a8d7-4ca3-aca9-21e0313cfeb2",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b43d716d-24d1-4f19-9581-87a7c9c88a4e"
        },
        "item": {
          "id": "d4b92ad2-9442-4362-8f2d-1d789960eba9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8bc2867e-e825-4d5d-a49f-93dff5f2a94f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6cc9ab-be83-406a-8ed9-d5283c764d58",
        "cursor": {
          "ref": "706e31c4-443e-4dc0-9e64-3ab43d2ea544",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "1ab83cb4-2818-43d8-af35-1752911c839a"
        },
        "item": {
          "id": "9d6cc9ab-be83-406a-8ed9-d5283c764d58",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "be3efe65-60c7-4c6d-b70b-a5f16cca8bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73707d82-751b-4973-b7e0-31ec15c7180d",
        "cursor": {
          "ref": "74207637-3d87-4165-99c7-0507c49993e7",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fea4da05-e446-495e-b6ab-2417c81e7dbf"
        },
        "item": {
          "id": "73707d82-751b-4973-b7e0-31ec15c7180d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "29828857-a1b2-41ec-b074-d26f95233963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfb8817-3296-4daf-b765-c077947bc22f",
        "cursor": {
          "ref": "de671618-247e-47a4-8e31-b02d35f1c73e",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c21260ee-4eee-47a7-be28-4e55fab7e75d"
        },
        "item": {
          "id": "adfb8817-3296-4daf-b765-c077947bc22f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ff4a2d56-9e5a-4cf8-a876-801387c81cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89088df-6086-4e5a-b623-7826f0bc8cdf",
        "cursor": {
          "ref": "9bdf69ab-2522-4f7c-8a4b-52847ad0d854",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "f3915821-e6a8-40e7-8ea3-9637f377cc48"
        },
        "item": {
          "id": "f89088df-6086-4e5a-b623-7826f0bc8cdf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d6f5b31c-e21e-48c5-ab8a-5a0f0d95ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c187f2ec-723e-4c37-9229-504da3a3efdb",
        "cursor": {
          "ref": "c65b12ca-d59a-44ee-bf5a-f89ef7b87792",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "2a988f02-9391-4486-a123-3b2274885188"
        },
        "item": {
          "id": "c187f2ec-723e-4c37-9229-504da3a3efdb",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "884bbcbc-1b5a-4d72-a4ce-8944032b69c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 637,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d43b90a5-589e-443d-a0c4-1feb352c0d69",
        "cursor": {
          "ref": "5d530bbe-04f5-40be-b7bd-5cbc87c2c7fe",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d6b4e793-723a-4cbc-9203-59e7b434ae53"
        },
        "item": {
          "id": "d43b90a5-589e-443d-a0c4-1feb352c0d69",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "416df68e-5da0-4c05-be1c-0b8a91698041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e583ff4-017d-4ca9-aa27-727a3e4862da",
        "cursor": {
          "ref": "b53381c1-511e-429e-ae28-fc9dff02eee4",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5c83f759-a2ad-48d4-a33e-82df6cebdc78"
        },
        "item": {
          "id": "7e583ff4-017d-4ca9-aa27-727a3e4862da",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7c90624f-ede4-4426-9564-78301d8876ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1b3d7a-3736-42bf-bf1b-b0d61b57161f",
        "cursor": {
          "ref": "02f6342b-12c1-4e96-8027-5373f27e7652",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5cb020e4-3f38-444e-80c2-00c4584f00e1"
        },
        "item": {
          "id": "8a1b3d7a-3736-42bf-bf1b-b0d61b57161f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "82d894e4-227b-4216-bd01-8bd8ee958e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add86adf-c92a-4d82-8fa0-0c7063ca1e23",
        "cursor": {
          "ref": "68551741-cefb-47e5-b52c-69f403cd8c38",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2041b7d7-f0f9-4b0e-ae5f-a4e42c79f1d8"
        },
        "item": {
          "id": "add86adf-c92a-4d82-8fa0-0c7063ca1e23",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3cbe04f3-143c-450a-9183-b8ba24fb4c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fe54d9b-c1e7-43ca-828d-25bcff2c0cbc",
        "cursor": {
          "ref": "3c1aaf74-b33d-4559-aa8d-881a6ab466e2",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "91ce4972-fe53-4836-8530-d9b67be6a1b4"
        },
        "item": {
          "id": "6fe54d9b-c1e7-43ca-828d-25bcff2c0cbc",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6fe007ca-7bef-4399-ba0d-acd534814d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66ad34b-ffe8-4ec7-9ab4-b64609abb2f4",
        "cursor": {
          "ref": "77c98a03-7bd3-4c49-ab21-56ccefeb77aa",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "5f32ea97-f3c0-44c3-ba83-3f0932b8df9e"
        },
        "item": {
          "id": "c66ad34b-ffe8-4ec7-9ab4-b64609abb2f4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9978faaa-3ab4-471b-b48a-d2c415a52fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30542802-f7fd-4735-91e2-66dc35840e11",
        "cursor": {
          "ref": "0bf70c8e-4f45-4178-927b-a0dbce264507",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d494e70e-10ed-4451-b0db-c673d75a43b0"
        },
        "item": {
          "id": "30542802-f7fd-4735-91e2-66dc35840e11",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "040a1fd8-300c-4e51-8cb9-61e5c1e944c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed8f705-6744-489f-9e9d-27cab1ed1291",
        "cursor": {
          "ref": "3034fb65-213d-4834-a8ad-888322e37561",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a42226ef-ff15-4003-b4dd-00433443fddb"
        },
        "item": {
          "id": "8ed8f705-6744-489f-9e9d-27cab1ed1291",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a9225a98-569d-4d27-9d91-1324799b9cf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8636e700-a1c1-4b67-8e08-4e7067cda604",
        "cursor": {
          "ref": "9273b2f3-c9c3-41e8-b385-74312764288a",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d2ded73d-01b7-44b3-a752-ae9f55e6d25a"
        },
        "item": {
          "id": "8636e700-a1c1-4b67-8e08-4e7067cda604",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ef5a0682-aa21-4b89-b66f-fbd8cfad449d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6bedf9-156d-4af9-b794-d6963e3e956c",
        "cursor": {
          "ref": "ea1db0e0-7194-4596-9ae1-241b5ca28b22",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c0e2b34b-9afd-4539-a29a-63e5285afb35"
        },
        "item": {
          "id": "0d6bedf9-156d-4af9-b794-d6963e3e956c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "589477f1-7bac-4db8-9633-0e2b43a113a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf913fd-874e-442d-8692-ba3a3fe1c37b",
        "cursor": {
          "ref": "dac17915-53ee-4c04-9206-4c2f5ef60c03",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "00aa4658-ee7f-4adf-815b-ec5826959012"
        },
        "item": {
          "id": "8cf913fd-874e-442d-8692-ba3a3fe1c37b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "a6204710-bc3a-4693-b022-5b0e9bd65155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5ed768f-f550-4ab8-9b9a-410a90056317",
        "cursor": {
          "ref": "5f69d5e3-8f66-4263-9967-8d8b2e19dae7",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "09ae9ae0-ff56-4469-a1df-1a59bc52d56a"
        },
        "item": {
          "id": "d5ed768f-f550-4ab8-9b9a-410a90056317",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "1477d266-a401-4a0b-becd-b5034ec6881e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66555395-551f-4dd0-8873-5717be7f367e",
        "cursor": {
          "ref": "78c6a87c-cadc-4115-8685-256236efe262",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0e1be3cc-c801-419c-b2d0-370a1a1663b8"
        },
        "item": {
          "id": "66555395-551f-4dd0-8873-5717be7f367e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "748ef459-8c7d-4bff-8438-c943b295d481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7154e54-b889-4ca5-bd38-2ed65f3f650d",
        "cursor": {
          "ref": "689f292b-2326-47c3-9787-d46cdd04583e",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "df43561d-f626-4193-bae1-78ecba22ea3c"
        },
        "item": {
          "id": "b7154e54-b889-4ca5-bd38-2ed65f3f650d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "4d87300c-9112-4d7d-8ca2-bb36bf8dcef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62176bf-12af-4909-bbe0-fa16edbab654",
        "cursor": {
          "ref": "f0ed99db-a83d-4d36-a1fe-a84bb0cd02fc",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e1dc12e2-ee76-415f-94eb-a87e5e6763cb"
        },
        "item": {
          "id": "d62176bf-12af-4909-bbe0-fa16edbab654",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "501218a1-fbb9-4adb-b567-46a0f16a645f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f5e294-1a91-40f1-bbf2-39edf68a32b5",
        "cursor": {
          "ref": "bdb2270f-bea1-442f-863d-e05f45fb0d93",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0b9b89c5-2f42-4d42-9042-8fe3d7ac4813"
        },
        "item": {
          "id": "f9f5e294-1a91-40f1-bbf2-39edf68a32b5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "57b83a21-be0f-4b6d-89f4-80cba7790275",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4907d07e-9d6d-49f2-b6b5-9ee1d9cfad59",
        "cursor": {
          "ref": "de4d31e3-ec93-41bd-bf80-a68713102096",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "61d7a4df-c372-4fac-9d83-3ec12615331b"
        },
        "item": {
          "id": "4907d07e-9d6d-49f2-b6b5-9ee1d9cfad59",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ca2d1758-2777-4d97-a74a-a725165fbd8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36749516-38d1-4003-8649-91e0c664be0a",
        "cursor": {
          "ref": "d2315384-bd28-48ae-a21c-c18766b7af9c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9fe9b514-3373-4317-b288-65083fddc0a1"
        },
        "item": {
          "id": "36749516-38d1-4003-8649-91e0c664be0a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8b30a039-3e6f-47b2-b822-d41905df5809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b4f2d7-0d3e-4f65-be57-f2b5b134eee8",
        "cursor": {
          "ref": "2fda02cb-793e-48a1-9b49-35704abe45c0",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "825b734e-877e-475a-84be-6e5db49af6c1"
        },
        "item": {
          "id": "94b4f2d7-0d3e-4f65-be57-f2b5b134eee8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "efdcebaa-1739-4af3-9532-97e7704dc23b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15842ff1-e84c-47a5-9b06-cf439722aa80",
        "cursor": {
          "ref": "536fd505-b8e3-49a0-badb-3c4c0948beb2",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "37f2a0e3-ad58-4d06-b0f9-4bed0cd9ebb8"
        },
        "item": {
          "id": "15842ff1-e84c-47a5-9b06-cf439722aa80",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e7a457fa-56a2-4898-8135-1a58e9ef2df6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c476bcf8-8c66-4bd3-a4d1-25e3ad071686",
        "cursor": {
          "ref": "af9b3554-2ba9-4181-be03-a869e1fb061b",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6516aa17-af43-482c-ac2d-6ba594c0d7c9"
        },
        "item": {
          "id": "c476bcf8-8c66-4bd3-a4d1-25e3ad071686",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bd20cd95-47f0-46f9-9735-a033f279e556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad216c37-c771-484a-8f13-f54b4082b858",
        "cursor": {
          "ref": "ade62f23-c134-4a90-a9be-eb980f81e387",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8d8815c5-033c-42c7-a78b-bf912c785112"
        },
        "item": {
          "id": "ad216c37-c771-484a-8f13-f54b4082b858",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "ef5ae983-1dd2-41b0-82aa-fa826d018e58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ec6951-68e9-4b77-8576-2aab9318c7f6",
        "cursor": {
          "ref": "8aba6b5f-4763-4701-901f-39df195fa25f",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d6f49b4d-9453-4503-8fc6-2634887ed51f"
        },
        "item": {
          "id": "b7ec6951-68e9-4b77-8576-2aab9318c7f6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "66237a6c-704c-4175-bca0-44868c74fbaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec81541-6fb9-45ef-9c56-44daba9bf117",
        "cursor": {
          "ref": "e990d46d-1a5f-4a39-a4f1-33c29fb36807",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "15e973c5-a852-4411-8c71-85311dd9b5fc"
        },
        "item": {
          "id": "5ec81541-6fb9-45ef-9c56-44daba9bf117",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ebaaa4a8-342f-495c-a8de-2ce9997f0bb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d59092d-3521-44bd-8900-8867bb48872d",
        "cursor": {
          "ref": "78828b7b-b686-4a7c-8c4e-8673f60bde14",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "00c156d2-7304-4fd8-98d5-e6511f22caf7"
        },
        "item": {
          "id": "4d59092d-3521-44bd-8900-8867bb48872d",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "05f7ed4e-5085-4ec9-8f20-7eeeeeab0811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae4b131-3acb-4df3-9161-468a4405469c",
        "cursor": {
          "ref": "7631dd99-fac6-445e-8424-ce250f451d33",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4f690566-96b6-4073-aa9f-0ec398be01cd"
        },
        "item": {
          "id": "cae4b131-3acb-4df3-9161-468a4405469c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2163338a-ac35-43a4-b0fc-cf1909773b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2c1de1-ed1d-4ad7-98be-96ec57092047",
        "cursor": {
          "ref": "5d2f7a3f-7758-44bb-be2a-af0c577acfc7",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "de631a98-81f3-4792-88bc-af4c9947be1d"
        },
        "item": {
          "id": "da2c1de1-ed1d-4ad7-98be-96ec57092047",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "216b3b23-b1e9-4c00-b7ff-b11cf04ef5d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff05e11-9371-4079-bb65-14f5382841b7",
        "cursor": {
          "ref": "c0320b57-3a97-42e1-b3be-090f83bae47c",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1222de2a-d819-4856-bd5e-9ab85b7faf97"
        },
        "item": {
          "id": "9ff05e11-9371-4079-bb65-14f5382841b7",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e82a293b-c7e6-47d3-a6d9-b69e56f27b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 21,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348cc3a8-6b09-4138-a4c2-43f8e2c6e51d",
        "cursor": {
          "ref": "d7a4dd5f-17b4-4c10-b320-922ce8f55433",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ed29b091-09ec-477e-8544-7f09d99934d2"
        },
        "item": {
          "id": "348cc3a8-6b09-4138-a4c2-43f8e2c6e51d",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "30efbc6b-1ea2-42fd-8836-1974957edfbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee79de07-1cfc-4f66-ac9b-2237f378cd2e",
        "cursor": {
          "ref": "5e1f5cc6-ac03-44ca-8560-a9e1bdc55d5c",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "14c88109-fcb8-46a9-9979-61052ea00943"
        },
        "item": {
          "id": "ee79de07-1cfc-4f66-ac9b-2237f378cd2e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "af743ae5-8198-4168-850f-b20ac040a981",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfbf228-9182-49f8-aacd-25032abe285f",
        "cursor": {
          "ref": "110d2105-8038-4ccb-bc08-6e6e7a3811da",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cf6c444f-e591-4793-9bc6-b4650962d9f4"
        },
        "item": {
          "id": "3bfbf228-9182-49f8-aacd-25032abe285f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "20a06afa-e563-4a96-a9e0-220bf252e412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddcb108-73a4-4e8d-80ca-3dab6cfacbd3",
        "cursor": {
          "ref": "139c5df9-c01c-4035-900a-1e5e078623e5",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "24f3bb73-3c9c-49e8-8304-50d42791f3ed"
        },
        "item": {
          "id": "5ddcb108-73a4-4e8d-80ca-3dab6cfacbd3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "458fb1da-a0a7-424f-adb2-7d7335b92122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cbdf3e-c353-42cc-99cd-dbe090591bc6",
        "cursor": {
          "ref": "62dddace-521e-4354-97ad-066d0c7c41fa",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "1d83a924-c2c3-4175-adf2-d1305200e1ab"
        },
        "item": {
          "id": "20cbdf3e-c353-42cc-99cd-dbe090591bc6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "272625a1-3bc0-4c29-9331-3979644cd745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e051d513-e93d-468c-afae-65b289ae55b8",
        "cursor": {
          "ref": "a0503053-8f25-474f-b2dd-d6a90385da16",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6ea35809-3b4f-43fe-aa2a-1ca43285f4f8"
        },
        "item": {
          "id": "e051d513-e93d-468c-afae-65b289ae55b8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e60cc2df-9937-4d7f-b964-2a455a7fe376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9538a266-756e-47b6-9cdb-d85e033c0fae",
        "cursor": {
          "ref": "f1552467-7ad4-49c8-8185-1a0fb3562836",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "69637c88-63bb-4b6a-8f34-64d4aba1ccb0"
        },
        "item": {
          "id": "9538a266-756e-47b6-9cdb-d85e033c0fae",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "d5739126-f548-4fa1-8d38-1a2da15f3939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6185e60-ff45-4347-86e2-79e3f183912a",
        "cursor": {
          "ref": "e4b5d4b1-567b-4cc3-b35d-0fa40ffd0aaa",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "69ba0421-51d9-46a1-8883-8907869e7178"
        },
        "item": {
          "id": "c6185e60-ff45-4347-86e2-79e3f183912a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c5808b86-9d84-4cc8-9906-8ed5541f8210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1437028a-554e-45b9-a3b7-9010b9f81c34",
        "cursor": {
          "ref": "6751805e-e0b2-4b4c-b146-8f76a476d790",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3dd6a76c-f868-4543-9047-90cb105d7f77"
        },
        "item": {
          "id": "1437028a-554e-45b9-a3b7-9010b9f81c34",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "8e78deff-8636-4e47-81a2-3f02958c7f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 22,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18823ef-dfb9-4a68-863f-33e0ace48757",
        "cursor": {
          "ref": "e70d04c8-4a6d-450e-b89c-87f56debc918",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "214d2d17-da2a-4277-83c3-e371b30f46f0"
        },
        "item": {
          "id": "b18823ef-dfb9-4a68-863f-33e0ace48757",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "aae899f3-5e13-4f72-ad13-110859933869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366358d6-989e-422e-bb48-f5962069cf8d",
        "cursor": {
          "ref": "ef710086-1a8a-46ef-b296-87e99e5d9144",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "af9e1baa-b3e1-4ef3-8727-ba3c35d19b1d"
        },
        "item": {
          "id": "366358d6-989e-422e-bb48-f5962069cf8d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "05de292e-a7ee-48a4-a0d5-285ea2651be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb41c9f-8d00-4bc5-accf-9de4b1e83faf",
        "cursor": {
          "ref": "f7bf56ef-bc26-4e17-8e23-e1df04986a3e",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "08edfac5-e85a-4ac2-8e9b-18c18c086ffe"
        },
        "item": {
          "id": "eeb41c9f-8d00-4bc5-accf-9de4b1e83faf",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0444cdd3-b8ad-45a6-8ae3-5a0dac9f88c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 19,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7eb6e2-99b8-4f91-b7d9-87264917cfb4",
        "cursor": {
          "ref": "353199f8-5c51-44ed-86fe-0fd3b2aaceae",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8d51956f-79d1-4175-92b6-5d478ed11b82"
        },
        "item": {
          "id": "5a7eb6e2-99b8-4f91-b7d9-87264917cfb4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "236dd762-f968-475c-824d-feb5e1c6a859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c09914-3571-463e-b655-982a03c0ceab",
        "cursor": {
          "ref": "3e333290-5553-45fa-bcbc-ae2f3ba0b2ea",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "47858f62-565f-4496-9276-9c21230dd63e"
        },
        "item": {
          "id": "57c09914-3571-463e-b655-982a03c0ceab",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2e425ecf-d08c-4e1d-a07e-6b1c222e02e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccad9a5c-efdc-4d2c-8145-1bfd27ee686b",
        "cursor": {
          "ref": "a9a6d74a-30eb-472c-bab7-b6195938385b",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "76da447f-a413-4857-9e42-48b6437f4e2a"
        },
        "item": {
          "id": "ccad9a5c-efdc-4d2c-8145-1bfd27ee686b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2a1c9a22-f280-4488-bdc8-9358b8be58d7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "c9494fb8-beeb-42e1-9c40-513e41ea4a85",
        "cursor": {
          "ref": "729eb675-292c-41a7-9d0c-fe1c4bb6bc83",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b2568f90-05ab-4df9-9559-54fc6ea53601"
        },
        "item": {
          "id": "c9494fb8-beeb-42e1-9c40-513e41ea4a85",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0dccb362-cbac-47b0-ab23-e104acfb46b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 20,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "8d8df94a-b190-4d8e-9b69-7134fe9dcbc1",
        "cursor": {
          "ref": "13317086-afd6-4cd8-816a-8c7516c30c98",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7203e528-6d09-4775-9489-272f16b4b5e0"
        },
        "item": {
          "id": "8d8df94a-b190-4d8e-9b69-7134fe9dcbc1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7a22aafa-b906-4dd4-9fc9-d632bc234058",
          "status": "OK",
          "code": 200,
          "responseTime": 637,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0e446e-0826-4da7-aaf3-644c7e611955",
        "cursor": {
          "ref": "448366e4-bc5a-4e66-a1bf-42d766180bea",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a788d459-c700-489a-a92f-ddb4bdd3eaae"
        },
        "item": {
          "id": "fc0e446e-0826-4da7-aaf3-644c7e611955",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b7a7c9dc-ea9b-44f9-ac7f-34d2cd4625a5",
          "status": "OK",
          "code": 200,
          "responseTime": 2479,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2728b86-cfc8-42a4-8d81-dba9a51f79d0",
        "cursor": {
          "ref": "db76849d-229b-4fe5-976a-8d1df109d443",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8fc2b4ba-c7d3-423b-bff3-b6fc0f7cbc94"
        },
        "item": {
          "id": "d2728b86-cfc8-42a4-8d81-dba9a51f79d0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f7c030c8-f1c6-4c8b-873b-a7d26c5946a1",
          "status": "OK",
          "code": 200,
          "responseTime": 1717,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e458b0f4-0922-4bdf-b064-31d4c962195d",
        "cursor": {
          "ref": "356cfb30-53ba-41f2-96af-bf343ebfbd78",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5feca826-d306-4ee6-bcc7-bf9d39c5ea77"
        },
        "item": {
          "id": "e458b0f4-0922-4bdf-b064-31d4c962195d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fc6e115-ec51-4b3a-866d-0e56ef7d4ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e458b0f4-0922-4bdf-b064-31d4c962195d",
        "cursor": {
          "ref": "356cfb30-53ba-41f2-96af-bf343ebfbd78",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5feca826-d306-4ee6-bcc7-bf9d39c5ea77"
        },
        "item": {
          "id": "e458b0f4-0922-4bdf-b064-31d4c962195d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fc6e115-ec51-4b3a-866d-0e56ef7d4ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "e458b0f4-0922-4bdf-b064-31d4c962195d",
        "cursor": {
          "ref": "356cfb30-53ba-41f2-96af-bf343ebfbd78",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5feca826-d306-4ee6-bcc7-bf9d39c5ea77"
        },
        "item": {
          "id": "e458b0f4-0922-4bdf-b064-31d4c962195d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2fc6e115-ec51-4b3a-866d-0e56ef7d4ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "a4443111-6fb4-4d0e-acb9-138fdef90897",
        "cursor": {
          "ref": "c7b1795e-4442-4f3b-960f-38ec768673e1",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "34239566-d4e5-482c-b187-05396ba9bc3f"
        },
        "item": {
          "id": "a4443111-6fb4-4d0e-acb9-138fdef90897",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "4e82d454-b888-403f-99fa-71442f78167f",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 201
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "8a5f84c0-5a79-434d-9aaf-248895df10f6",
        "cursor": {
          "ref": "ff26beca-74b1-4882-817c-b4dd85825ef7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "03fa4e65-8ae1-43c8-9521-12d112370e6b"
        },
        "item": {
          "id": "8a5f84c0-5a79-434d-9aaf-248895df10f6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d347ca3-db87-43f7-8745-a6d5aac62f53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "8a5f84c0-5a79-434d-9aaf-248895df10f6",
        "cursor": {
          "ref": "ff26beca-74b1-4882-817c-b4dd85825ef7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "03fa4e65-8ae1-43c8-9521-12d112370e6b"
        },
        "item": {
          "id": "8a5f84c0-5a79-434d-9aaf-248895df10f6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6d347ca3-db87-43f7-8745-a6d5aac62f53",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 12,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "307003ab-df71-4bdf-baa9-4f08acfeb34e",
        "cursor": {
          "ref": "92f198ce-6a4c-40f1-a5de-368bfb0ddba4",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b1a92cf3-10fb-4881-830e-545c537b3ee9"
        },
        "item": {
          "id": "307003ab-df71-4bdf-baa9-4f08acfeb34e",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ea49a08c-9544-4595-b5ea-31f5c7dc02f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 612,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ba516c1f-b729-4169-b1a9-d22da67d21e7",
        "cursor": {
          "ref": "a3e8920b-0ce6-4db0-993d-91bd0480938d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e5a07690-17d1-465e-be32-526d5ecad012"
        },
        "item": {
          "id": "ba516c1f-b729-4169-b1a9-d22da67d21e7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "728ac421-65e7-4d4b-881a-9ec77a730ff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ba516c1f-b729-4169-b1a9-d22da67d21e7",
        "cursor": {
          "ref": "a3e8920b-0ce6-4db0-993d-91bd0480938d",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e5a07690-17d1-465e-be32-526d5ecad012"
        },
        "item": {
          "id": "ba516c1f-b729-4169-b1a9-d22da67d21e7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "728ac421-65e7-4d4b-881a-9ec77a730ff0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 11,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bba40f39-b77b-4971-83b1-a0148eca34de",
        "cursor": {
          "ref": "191b05d3-a119-412c-8840-8c72d43392e7",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "26c50868-1b8e-4bd3-b96c-e3619be77056"
        },
        "item": {
          "id": "bba40f39-b77b-4971-83b1-a0148eca34de",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "6b1dc30e-9974-4153-a37c-3bbff92374bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}