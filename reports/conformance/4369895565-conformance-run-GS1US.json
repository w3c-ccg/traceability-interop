{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "257fcb8d-dbc6-49ca-bcf1-4cf908c97ac3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0893508a-2517-44a6-a731-c4399fb10b39",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c27eebc-e5fb-40d8-b2eb-5a0aec651404",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "16b36da8-fe9c-4784-80e0-84e89eaa596c"
                }
              }
            ]
          },
          {
            "id": "89ab98d3-aa27-4250-b8bf-56e0e08a26ee",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "283545c1-2ae9-4ca6-9fc5-c0fa52b2df38",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "655cb179-3e9f-4fbe-8f78-d1b533f827c5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5518ecb8-fcf6-4388-844f-506f563f4cab",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a6e85f1c-6c6c-4842-bc33-1d0a50d6b5f5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c715a1fb-2a4c-4f93-8a2b-3875cfd82801",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "75741bf3-0f92-4c1a-920f-4f2c40dc5993",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b00fdace-518f-48cc-aa40-656dce7dd1d2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8bbbe52a-e9d4-4210-be55-db2524856148",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7da75f0c-55a1-4aa3-9f3b-189716220e9a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40632a1e-9034-45c5-8da4-849860d62008",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cd7d81ab-345d-43ea-b7c8-d5048726664c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd8fe617-1124-4f75-942e-88e46d94c66b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7a115af3-8adb-4628-840b-b70d91e8f261"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ece0a8f7-2a0c-4616-afe0-9fe9b31855cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cf459b8-b246-4dbd-aca2-5f5b08b6d560"
            }
          }
        ]
      },
      {
        "id": "99d9875f-8649-4cee-a0bc-cb6a57d8fca8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "0746fcaf-d8e0-432f-bfad-b121a5cb6731",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e68a2913-bfa1-4197-a66b-39abd40bb034",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2ba4e1da-058b-4362-9fc7-ef5c9f4de558",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86eb91eb-f404-4545-ae40-2bb881779813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fd8e1ddc-fa93-4eca-b43b-60e836c91f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e42b84-e1a0-4877-8f04-e0b3b1a75836",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3558c7-10a1-4b2f-85a0-8d6c900d34b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3c05bdbd-ab2b-4ba7-b9c0-2e7046cb1f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29063fde-f465-43a3-8f1d-5adfa906b230",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9182a8-affd-4400-9520-80018f93dece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d13d165-cd34-45df-848c-5587854389c6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1267d3a6-bd4b-4f23-a036-2de0d0b870ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25a6e834-0996-46f1-9f52-8fc246693491",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d875b29-1423-4df1-ae55-b86dafdaae3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26851e5e-cbec-4c69-b0f5-4d147d7791d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8ff5f1e-1226-4d0a-9409-4ab1bce33421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28861647-ef67-457d-99f6-c17e2ae5e56a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62bc985-e72b-4bbd-8ad2-e707348a99bc",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be5669d-fca0-4bd6-b2f5-6a186ca91e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d1422f7-2eaf-4a2c-8a94-bbb586b68248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c17bc8-6343-46af-8449-d8c25d8e6aaa",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "63b7e512-c35a-45fd-9311-22b6931e4753"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3708979a-08fc-449d-ac08-531070a6579f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5f80182a-e8de-44b6-a82d-ea4ec374ceec",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2aa2d18-f139-4b1e-a265-c2075c40a9ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f595883c-d11f-4d36-b8f4-573cecd0aeb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ab5e833-4a3c-43d0-ab07-1fa8e78cd1d4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "474518fe-2af8-41a6-a3fd-d5b201731250"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23cb57d4-9d95-4254-a030-727658616145",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecad3686-6b2e-4b63-b7a7-1dbba4f453e5"
            }
          }
        ]
      },
      {
        "id": "f75ad0e3-94a7-4d5c-abd7-16bdb4139015",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a8cf0228-c184-4872-80de-ca035ccb5029",
            "name": "Negative Testing",
            "item": [
              {
                "id": "788a8414-02a8-4bc5-a1b2-666cb8ae2155",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c3253ac6-dc57-49b3-8425-feaa055cebc1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c31c7f5-21fc-44a2-abe6-bd17420873a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcff8ee1-11ca-4d94-b40d-33665e70fb2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf5b45c-f9c1-4836-acef-3b4afb158596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b62be275-81cd-4690-a28d-d65643fcb29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7354cdf-ef7a-4127-9df9-bed245f39eaf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41b27d96-8d39-447b-b5ce-dd5c2e19b927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65445a16-0d06-4cb0-8fb2-2b5ad600802b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b69204b-b15f-4239-b9bd-6dc28ca9ef62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ad973b1-55fe-4230-9f96-43ea7b23dbb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8bb7ac-4d70-4c45-a9cf-33d1061533ab",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a319456-59f3-4b62-898c-302759563357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "610cd73d-f865-47de-b249-a748e070fc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62db2f77-6ac7-4e3a-a057-5feed416de22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c4e60df-23a2-4164-a86a-a6e172f703a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104ba76a-64f5-4771-84c2-666d5a6badd4",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43505db2-8930-408e-9d8a-b4905ca830dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b396baf-75e2-451e-a5ba-ddb02278ef4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3582a6a5-4e91-497e-9497-ff83985d0f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c83dbeba-29dd-4da8-8b05-58e05aa77e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51caf452-4899-4095-b7bf-fcab2583ddfc",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c397e3-3cc0-4189-abfe-cbaf427eb3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e283c185-9c25-4482-807e-2196dae664fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9396438-05bb-4391-8848-3863ab056f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d35619a3-c72e-4c7b-8c99-fcbf2f34bc49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc144638-aa14-4441-a1ba-eb2df30dbf0d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e028402-2be2-4422-966f-9385827611c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e77b91-f744-4bbd-b941-d1b6a876c169"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09459745-dbb5-490f-a15f-f5898d51bbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "77707a1c-dfe8-4d51-a1b1-a79c06833f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d832859-81f4-4dc7-9a8c-8f518c54b550",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e819a56d-ff79-4d45-9163-6668cf1e37bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bfde2e-2a99-47d1-bee1-a9ebe875ae55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319d8842-31de-47a8-9ca1-e1866ccfd0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a97e9d33-5f2d-4067-bd5a-b46ae717bb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a16b74-f6eb-48a8-88a0-b109ff5c7690",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d46caa-0d13-49b8-83a2-81d3e45052a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07c47a81-d05a-4a10-8669-42944696192c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb61e69-402e-4b57-8292-ac69a9d0bf33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d34c662c-4156-4170-ac85-647dd0b9272d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe17c86-5811-46dd-b048-488a5c29716e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b43539-9772-4fb4-8c31-c0ab175ccabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ecf1d9-e9ce-4e17-989a-a6346be2fc90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4e347b-0504-4462-b69d-be673d3a0709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8962b2a9-8d06-4664-b62c-c087615b2acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d77829-a3f2-4d03-b114-364f0dc8b139",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a0655d-f5b2-4251-a13c-296b2b98b7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2eeecc1-b8ad-4ffa-8a5f-f12a3ebbcf5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464f2ed2-9de6-41b2-898c-124fc3b04d80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40de6ec2-8f24-4519-aaa4-28341397c9d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742ac7ab-cb11-437a-8941-54c6492a92de",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468ce650-dd78-4e31-9161-7744e726c400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "785b35d7-5f42-4e40-8483-8aa21c1bb3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bc6c18-3116-4db0-9cbd-cee451c34e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91b63466-0c1c-4b92-ba6a-493aae4c1c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08898a03-e71d-443d-8927-331c17b7bf02",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d59ec32-99ad-42cf-8a58-d5d5a051e1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccd607a1-94bd-48ec-bc0d-17365725fafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ea748e2-69b4-4d82-9d88-f8f6dd865a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ef25052-9e84-46db-ade4-21f11d09315a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e333075f-2f80-4f56-87f1-38b5eb30d9aa",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f885393-5d3a-4109-8958-aad27cc82b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1daade22-51ce-4065-90cd-202349c9d08a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14971f39-76f5-47a6-a122-1b6aa60e9c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbddbc98-fe3b-477b-be73-0b43977e1f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb463363-94b0-4f9b-a8dd-a7dc8583aff4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a45fbfe-25ae-4bc5-9b26-e79bafd3e036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "001fd1a0-a343-497a-83f0-cfb707e715e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed93295-4f3f-4aa0-87bf-f3f91e12ca8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec2a6f18-2602-482a-bc02-6ab7e19896d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e85f6f-d82d-471a-b791-db3e00f58d3b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811fc00f-07c0-4cdf-bcfb-a27118c99aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0dd422-8f14-4fd7-ae49-1d8e38145ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22f69b8f-806e-4daa-befb-948cf91c7101",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "454e11f7-462c-4a4b-a344-ace46b473e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6425d4ed-132f-4a91-a85e-12ae8b0c4d68",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06906a50-77cd-4c7b-bb25-a624d01c0b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8499d249-b74c-4d59-a6b8-469ed48b9068"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a014c2a-6a4c-4817-9fd9-5b415534cb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8f1a42c-616e-4d1d-814f-3ae91c27d6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85dd352f-718f-4303-8ac0-bcafb960e780",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78dd39f1-1fb3-43b3-b876-ccbb9005303b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a9acbd-8fe7-4783-b37c-a26731ab8783"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d335f441-2d52-4f06-8fcf-cc4f1b120418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7de9484-c407-467a-9abb-e4e7fb1f0846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca51b810-1cbe-40a3-803b-b85d5353fb73",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93abb910-8131-4367-9b7e-e3b6400fb8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e161428-2327-4621-85c9-6478775b23d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0994b3ca-1a4a-4af8-9554-e79e74e4b0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0aebe903-e4d0-4fe8-b045-a539d51bac97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493dbc72-2098-4b43-8677-a89a0a36038e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53de4023-599e-4941-a929-628355c501ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4874a187-7dcc-45bb-93ca-c892a0a705e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30670812-d91c-4825-828f-9922c194e7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09a7c3fb-6069-442f-a09a-fae1f0937409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06fb7e7-ad8a-4197-b572-ed1d1f1627ee",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "339636c8-21b9-40a6-bb34-0170258e2f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca1cbdbc-c380-48fc-a946-f8d15cb506fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bea78a9-9a81-4a3e-a82c-2ad4004ee398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf30982-0114-4757-bc1a-a612bf53b5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06b5a0a1-f4ef-4d5b-92c5-26fabb56a42c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1064101-8efe-4fab-bc2b-e6fe5ed7b9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62119a0f-5341-4daa-962a-5daa37812fce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73241c2-f9df-45e9-8ec4-3c4e7109698b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da5ca31c-74eb-43e2-bb1e-e49611996555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50caf73-2329-4929-9bee-0ba6c2927384",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd7ea01c-954f-4324-bce9-b8be8c8d7f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a0648aa-cb7a-495f-8dbe-23ab413e5b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a851a81f-5528-43f3-9f60-2a900a1535c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c350af8-4f11-4d05-aea8-b7876496a62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7e21a8-a097-4d8b-9b20-153ffd40f788",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1112d8b-2208-4973-bd3d-c42cc56e2546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f7283c-cdf5-4231-b80a-cc123dee459b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "878fdbce-2515-4820-92dd-316b2cddbe79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "94243da0-5327-4695-a076-47a7c7b5249a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72e1614-b1a2-45d8-9831-930ce6d64f95",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d83afd3-3ead-43bc-92af-137b2a593975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb979d36-149b-4164-a7a1-31e89957f10f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1e1731d-6266-4cf2-86a3-9cffb0fae32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a98da52-8af7-413e-b828-e49d6089f52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae34a48-a535-4d69-9747-514bcedd960b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7374be29-fd15-4b04-9c07-14a3ec019fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226043aa-f185-48c9-b21e-c6b99b3b1576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ce462b-286a-4c10-81a1-95daee5209c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4addad08-0445-4295-a642-6ca62179c44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82443bf9-8fb7-47b1-87ee-7c9f63cf5bd7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85cd530-a13a-4b23-a397-eba30b69d801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3b80498-386d-472c-b984-bbb06a6249cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8fed57-86f1-4360-b07c-1eb94be6e915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4705369-7e4b-4491-90a5-d7d3598f0bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7689df-730b-4394-8fd2-297d07cc0af0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "355629e4-272b-4c2b-86f3-f508382604be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4a9bcd-64e4-4b29-9c29-2d2f98f25914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2693538e-ad90-483a-b3a8-b6927fce1964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fe3204-4aa8-4ea8-a39c-0f7be3a89e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "117d3b62-a9ed-41d9-8aba-1e2f95ff99e5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6576ea-5565-40fa-b235-773b8315cf7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6463593b-bd54-4c98-abf4-86ed1fb61894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da40c3a-d880-4111-9e94-abeff53fa37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e415947-2f3d-4001-93d3-df24d7ca3dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18af39cb-6bbe-40a4-8ff1-48a394503395",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4df2f59e-1d79-40ae-b4dd-39a8c9612aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ba5465-9ee3-4ed4-88a7-404e91a9e264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f5d6567-807a-4b1e-ab87-8f38bee5bb59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b2ef2af-0111-4e7d-9d7b-fbaaf7bfb4c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "219ab720-287a-4496-8169-1f6dbe8da114",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0a94e8-c372-4444-9ed3-300cd4129fee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "423682b8-04c5-41e2-a176-c720b1637d24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "453c7b27-49fe-4e8e-957e-66d7730c3fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "169c9c00-76ae-415c-bc5d-54f55eb46259"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6aea581-2ce2-4ad3-85f3-e0d548a66304",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381b3c21-2200-42e5-aff8-bbbbd7646718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f8b1b6-17e7-477d-b3e2-96956745b725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be70b48c-f324-471e-83d1-e2989f703a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10ebc710-8df3-4acb-a833-7ad0ad762642"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a1118e-2ad0-4f71-aef4-06e8f14e293c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "676c20ad-fa52-4605-be2b-197e6c9c0689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bd2cbdc-ac8a-472d-90d3-b4829be5d6da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d7f2b4-2396-4041-883c-d6f808118e2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31afd8da-89a2-46a3-899c-77dc203d5077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc7fcaa-7e25-40d3-b4b7-9ba86f24f9d8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd3d7174-ec65-404f-80cf-f93be3481e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042151d3-f28c-4061-ae16-020b8c53e85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf83924-fcc5-4806-a2a4-b65e58af3a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e5bfe88-fd70-469b-a4d6-8fd8c7206577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dceee35d-17c6-4ac9-bbab-afd64a809478",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c64b961-952f-40c0-80d3-3c00d2a28069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63a08edb-cf76-4635-8cc9-c6685fbeffd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a624df64-6a05-42df-8275-ef111852e76f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f488f09-5bae-4965-bcbd-66c9c98be6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75abf90b-3db8-4def-a4d4-8940d9057aa8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52faebfa-5dec-405d-a5a4-71df9e745287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4409b535-0115-40d5-bdcc-1f1d734fe2ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8572bbb7-9735-48f1-8134-ab4d47f5c67d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c549a2-65ed-4122-a6b9-8f8caee01bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e6ef6a-5fcb-4e0b-9205-626265703658",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fe50f8d-6389-4e9d-8cf3-c65fb8d46bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e03f45b4-9a06-4e91-b718-40767a22dbd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06246f6-f3d7-4402-b61b-d5a4f4c43f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e3a9623-baae-4405-9458-cd0d713a27f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fc67157-591a-450e-921b-5f825311949e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cef151d3-7cb7-4eb3-b79a-670978a1a4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ba78a8-d428-40c4-be96-ecadfb8c8b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f0ddd3-86e1-4ee6-9211-299be9badd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "355651f2-422e-4909-83c7-5b9ae0e878f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e5d683-4397-4b28-babc-c935d506e4d3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "658ba980-eac0-4092-b2f0-933f396fc6a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "509b8934-b25c-43e1-811a-c3a65fa65074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d140875-538b-454e-9757-2e090b49e1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c428cc2b-a7fe-4cca-a26b-0ce2e17c65fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd4b632-9812-4678-9a54-b71a94778222",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f559c5-15db-4862-bc7c-355d818bc0b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70c7c24-6297-4e54-917e-cc4f4d68d928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ded0624-d85b-44f4-b046-4e844aca4ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e1102cb2-27a6-4331-b197-f613ac6885c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7728623c-fd02-4293-b09a-4abb7736f0da",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deff44ba-b3a7-467e-94d1-8ccad231c2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e6497cb-477b-4d2f-bb9a-a5a2a7f1ded2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8776cb4f-a172-4e9b-b318-7d806caf9e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef35356c-344b-4627-9632-d871456ebdfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc9894f-f0b1-4c73-a3a2-51cfe080704a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ee541b5-e56c-40fa-8bb5-b70763b405ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "525b9bfc-98e6-4a53-aa79-44725411abca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c9259b-d40e-4ce0-ad05-8b7c815fdbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d655217c-0362-4ba6-9b0b-4b76f009b8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c441518-ca10-446f-9cbf-243e991896ea",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd432d78-d33a-47bb-b0cc-272bac5ba72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86082227-d063-4883-8a37-cd513168834c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0efd5ce6-2d96-499a-9ff1-da81b6c1a92a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a973005e-8afd-4350-8e47-b434402e70dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ac9777f-eae5-4c68-adb4-c6ef2ef6a90b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e9de39-bf44-4cce-aae9-18f8f40503ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ded353-9701-4764-99ea-dc4f7c450896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5525cf-e5b0-46a8-bc4c-4fce5814a01c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8680b9b-7300-4bc6-b88b-c3b50587a6ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43c2021-a841-4e32-ada2-9aeb0c0467fa",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4353bda6-c5f1-4b53-b247-c8c884ebf3e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "959d2eec-fe9b-4639-9849-24865e869379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8cd79d-33c8-4df6-8776-b44bfa251bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4f4d01-c51b-4baa-9f2e-a459d06bd359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b92f810-eec4-4491-9b55-74c582cffdfd",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e45af7c-890e-4df9-8d7b-47741ab049b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3df8ab4f-ac8d-4359-bec6-e38101fb49e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99447b8-06ce-46a4-b37d-e300e4a9c7dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5996891b-6158-444f-ad95-203338ae9ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a324c3-f95a-491f-874b-51087dd5b953",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f891a067-5abb-4e7d-9b57-9cc1195d9e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa1382e-87a3-4076-9fa7-27ef7a5f2383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003fd7ed-9652-4cdb-8337-67c8ce909b3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5706f4ba-03b1-4a59-b402-112ecffcfd92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237f630a-aa41-4725-9eb8-35ada6a69f6a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8338df-e71c-4ae3-8783-09e3b2b02523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55e7dd34-310e-45ce-95ed-340daea34e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d4a09a-c76d-4431-8a7b-9613bf840ac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24e7a5fb-8ef6-4d55-8f0f-5d0f657ff1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b09a91-eded-407c-a682-85004101a876",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "526700a4-74eb-4641-9872-3a071f93ecbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcbd7daf-e6bc-4011-ad6a-5bcb1dfb1888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b297fc45-3048-4107-b22a-8d3da561b55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f45ca4-3fd7-4948-8c65-3eb738783e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c111ab17-77e6-4673-aafe-3735e847f10b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6ca68c0-7447-460c-9891-18ee75e36e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07a53d8c-fc12-4b75-b000-9374f5057ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6afaf52-ec74-4836-ac6b-c32f6d5480f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "056caf88-a206-4710-99db-3e0e78507c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c502519-1e70-4865-8673-4a5a8d4af4b3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6b300e-96cf-4b4a-ac3b-434eb43c17b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7ed1b53-d950-4c17-9972-69d1cc42bc25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c553e0ea-894a-44e7-92e9-6e4aafb14ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "597c79cd-648f-40c8-8d8f-7a47c2a8b24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "539ce931-9e56-4423-8509-ba29dff519b7",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531df6b0-449a-424a-bca0-410c95d50e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f86b6129-34a3-49c0-a0b9-039b4f3e2c4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613a1a08-e6a3-4e09-a0ba-c38c4f0dee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "564b5cf2-e824-4411-93a6-46a0ebddeeda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06a0b238-b607-44a5-831a-1264fe11f17c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1405442-1f88-4292-b5c1-4f2c9875864d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b76e1279-a60b-481d-89ec-202e7c390d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cac09e-a02d-4105-a28e-7e3a612bd6e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd665a8e-711d-499b-8edd-094c4ac6fb34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d061f079-1b46-4a9b-8426-d88eafde8f3a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042f1a3d-4d55-45ae-9d94-8c8709b4406a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9681fd9c-6eea-4718-a537-cbc5b414df5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a31ecb3-34c7-42b8-9cd8-aacfec9acc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "23350cb0-05fa-4957-8553-a6406d4b72f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a75cbe-59d1-42fe-af8b-7417551cdccc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd74e6b9-0beb-4c59-a856-1e00081d3f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916c54c8-872b-4c16-9008-f37161915dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc006bf-452b-41a0-bda9-6d061edc887f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02dad027-7d50-407e-9c75-06ab3bd24077"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a07886c-af9f-4186-9888-3b33e139046d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edb326c-3847-44ed-a996-f0e999f3e49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4abe85c-6213-4532-846c-7ec35584f9ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7762db4-179c-4173-8acf-467da1c80fcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8645ab1-ed18-4aad-8482-8186a2e28927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3e6629-7e2b-443b-8f67-b31a066f4973",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "350d8ea1-5bac-4578-98ac-309471fc23fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21854ea9-c484-49f8-855c-4b2b880d2be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a9eec3-0dc6-4e80-aec8-ca0f26b71160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8b474bb8-2dad-41ce-9c3c-2d09da69cbae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b78550-b69a-413d-9fbb-47fb97080252",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde1ea91-a777-41db-a449-303fd52cbcd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e6c8699-244e-43be-a104-1806e3e26872"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cbbedb4-e099-4b91-8c65-9c7105329a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "771fbb92-05be-4f28-bd2e-d070f973af5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4ab085-8c8e-4f7a-b2bd-c0344e470dc7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236add32-540f-4510-af2b-efb07f5d083f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c55ba80-07d3-42b9-af03-a8ce7daa867b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb0e4c1-6c7c-41b2-965f-ab7ed265ca29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8af826-6be8-44e8-96db-187ffc748618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc797c1-6e27-4cc5-9410-cfbf57908f40",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42db5b31-9f14-4fa9-ad1f-f204d2b9644a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a889153d-dbfb-46dc-be23-a203b65e13ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b9e8e4-c2a8-4015-8145-a00b6a5329e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6039eb52-f295-45b6-9132-129317b6447b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57012e29-91f7-4fdb-9205-4dea8cc429bb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a8e9334-9dd1-45fd-b933-0454742515e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35feb66b-eb35-4dcf-8b8c-1473a6a7f132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58502274-ef9b-40db-b47b-2bc2aa533773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "74cb641f-3b49-4c5b-a946-a221a1c6f89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6567b7f-d934-4419-b18d-53b19c0f923a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554e88d4-73f2-44df-b440-a520ea8088b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b648c9a-f038-499f-883f-d3d2d8c18b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4251eae-3307-48a6-9476-2650287108ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca114ed7-653e-4f4c-a8e1-d4077ebb6739"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35b427e-01f0-42a3-92c4-4dbaa97c87ab",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d270e45-a8b6-43a9-85f4-6029fdca1f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3dd5c4-fd77-461a-bf98-143229f9f085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd685b5e-672d-480e-aed2-61969bb3b6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3b6a251-7fbe-40a8-a49c-497717a8bf4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6333de-3337-43f9-a72f-6dddf70a9fdc",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf36cfca-8434-4b77-84ec-1d5bd33ae0bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcdd953-7eea-4200-90e6-5fe81223ab1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe7ffbd-a960-48d4-9b05-a0248fd5e8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "40a9b87b-13ca-4d27-a98c-1396650e0df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb32f73-359d-4adc-8ad2-91a42f07cb29",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c6fff5-dd45-4de2-b259-57aeae6fa346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f70b472-e8ae-4790-ad4c-11d341c1818f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9c691f-01b5-4659-b7ec-8a61fef7b305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "486dd028-7a91-477a-9eee-a72588975547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f075aaeb-51a9-4bf8-8978-22afd7b32a57",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39fe16e-e5a1-4d59-9837-773348fb11f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b43d7a-6c7b-4aee-bfbb-1d34d73c895d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d55418-4bc0-4c33-b2fa-d4e54323e00e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f78c1be2-7c4c-4d19-ad03-c96730c693bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40219593-f1cf-4ce6-b257-1ebd76f41cd0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be1c21c-8502-4ec4-b7e7-bdb727a9ff96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7da7419-63c4-491b-96e9-1aa7e4744639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302d4bc3-d129-434e-b973-f02a8ee3fb14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d28e3bf-e9be-4f32-9581-253816f28dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75faeb11-af19-4612-9656-552f80356aba",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "729e6d1c-2414-4915-b70b-2c19553fa2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5964875-6f74-4477-af5d-96fe7999bf98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd47ff0-a75b-43a7-a9b2-79ac3975a134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a6a81912-097e-4a1b-bc23-3ba4c0a0e60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "385126db-1882-464b-8ab3-34e422085dc6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88678cc3-71e0-4215-9d6e-34aaf428d784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee77daa-9210-4717-b80a-4b5fd4bdb4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d04c2c-0446-424d-9dfd-b7ae1711afc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9de176e9-b454-48c2-aac6-b09e251bb0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c39b88c0-a1de-415d-b633-73fa3f3e8b8e",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1461a792-d75b-4373-a51c-6b1d2306a15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fce1ccb-bdc7-4a55-99d2-7e929cf3f080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a01a4e7-607a-4fe6-bea7-32f102de60ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c7ea655-8f80-47bf-995f-67dd47f5257c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94da1f7f-1541-4887-b155-c3e2d365e233",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7521eba-dbc1-41ae-8a15-b9d08f08decb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0a8520-0ea3-4328-87d5-fb43efb1f3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519114dd-e31f-42cf-9b50-d0ce10f8d001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "438a8e65-2794-4a4d-bb31-12a0c07ccc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82822b9d-bbec-41d3-9198-c960946fe68a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf2fc5c-6f20-4d03-9fa9-fff910411d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647b6e4c-e42f-4681-81f5-1b706aad8021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13aa9f3a-5bbc-40e8-858d-c413ca401600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4731c88-10dc-403a-b4d2-c09584416901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428f9ca9-444f-42e7-89ff-1b5fd8d8c031",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b30274b-b3cb-474d-ad57-146f7b73fcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4dd470b-2040-4a6c-843e-93684bd9dda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac75e97-b45e-4863-81c8-c1bd7f91e4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c0c84d5-a298-449d-99c7-81731b0ac919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88eb0f3b-4070-4eee-a44b-a2afade2b2d4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485ebece-189b-4a4a-a1cb-7a5d008cd257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0714a6f9-1378-4b40-84e2-1c02b3312589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508e4711-c4f3-474d-bd1f-c71a8d6df2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c137b01-c311-4e1f-961b-04a6c9e1ddb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8fc1f3e-7af1-40c6-93e6-17d8af56d467",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6d18ec-cacb-482a-944f-e941c3b71b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2766de-c330-4e13-84be-4ae5d84444c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51196147-dd25-45b3-af1b-b29f2ab128ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e94c57ea-2d02-483b-bc91-69003ad44415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a7b51a-2543-429f-8a73-16c8c9a6c548",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715e5bdb-74e2-4ada-9a0c-ad144eebd48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8985cd37-2038-4ed5-a988-7489eb983c1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83cb2c3-67ee-4702-8605-5bb321cbbab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fcdde25-f930-44d8-bb4d-c5336a1864ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27833cf0-581e-41ec-8cad-679a69e5c2a4",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7913b1a-e0f4-4c8b-a08e-0079978574a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb040ad5-f9b3-4f1e-a54f-831953b64ee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17462acb-6f89-4548-a043-3006ec29a793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9976286-b872-4121-9001-40b542988bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e45a53-0b28-450c-be55-c98c76e760e4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dd6ac0-52a0-4e83-8728-10b1a7b5ca60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e76597f-c2b3-47b6-a39c-da328e69bc36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93b1571-63ed-4195-8cc6-262e5fa57dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f722221-b92d-409c-8bfb-790d1db114da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c5eda5-24dd-41f7-beee-0bacee775a85",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c912f40b-befc-44d4-9105-1aaba1450322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7959d79-a2e8-4b23-846d-967be75107b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608a9cf8-ff44-499a-bcaf-b4e834da5d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ac9410-0e24-42db-8eb6-ba893fb5aece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b524140-cb12-4c74-a1db-c7fee05a43ae",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4755a682-1beb-4fe1-95ef-1ef2d70c2cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e472ee9d-ee04-416b-ab05-9294c740e544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ec81af-904d-4786-95ff-1624188c5280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c33185eb-6d66-40fc-963c-af5fc80d62f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ced7e0c-2a53-4d71-8bac-591142bd90ad",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07c374f-b491-41fb-959c-38168630bb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d2d30f4-eca4-4090-bafa-0704a3503a76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb0b5f6c-c544-4cbe-aef6-839fde5e1f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "50de805a-8702-4411-bc75-05d9b2eecbb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca5871c3-233e-406a-8c3f-198bebe21cae",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60f3c7db-ba9c-4bad-89ff-1da00a5a8f4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c71ceb2-07ef-45ae-bf92-73416bed9566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2fcda1-cb09-4e8f-8a93-d0e9f1167e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce17864e-0e3d-49ba-a615-76d3b1eb8400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6bc37e-724e-4cf1-a1dd-1a2b0a0188a0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f092e4d6-764a-43b8-8ad3-e515b923d541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c072743-fefe-4679-a3d6-f9239cf1beb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592452ce-bf58-4de4-89a4-628b84ea12a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a0bb818-4ab1-493a-8986-5f0d9a8ff315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbb5d3c-a1f4-4e04-b293-b22218548b0d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b97b6ac-b4b4-4fe2-83ad-c0fcb1cded9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83dee79-8fb5-4625-9661-89ed59f72a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "331c6b8e-cba9-4d82-ae0f-f0cb9542f120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc08508-9463-4592-9160-ae715a8c8993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb25221-e8d5-49cb-9e23-1b6e4548ed66",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23db3993-bdbc-4e56-921e-b53a5d949c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bb0c3a4-533b-49e7-a934-abf3cdb993ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4046bb05-8c75-4d5c-bac4-1398fa94a046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b19ffbbd-fece-4716-98a6-e8b87b0208ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7759bb-6f17-40f3-9d2a-94fbd3d7c3d8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717ac551-3906-4500-a732-5af09dedb83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8720d28-4d97-4b88-b70e-3ee09b9b6ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fb834c-00c9-47b4-ae90-0ada702cbfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bf4fbcb-92e0-40c8-a7ce-e399db24b937"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da264a62-a9e2-44d6-ba21-43e7aea2278c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1cde2d-7ca8-47b3-ad3b-0e86800f9742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb5e560-ced9-469c-aed7-004e4c5dc90a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1db662-2669-4544-85af-8a3c0da2f4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6c9d5ac4-132b-49c0-8c6a-105a16d0471c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932b2794-4220-4577-8178-f22ab5db282f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19152e5-68b3-4d4f-a7b2-35bb3f40c452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba869ea-334f-4a04-a256-81c9fd286fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a779d7-4961-4ff1-934d-1efcb804a917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5637ab38-bc64-4f8c-942f-e8ad88f0d1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ff49ec-9948-408c-801c-76bf2f8eebc6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd0ea26-1258-490b-91c0-23c8105dc08d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "271cd142-86c6-4d59-ae10-a01f572eeb19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c25de6e-cf5e-4891-8114-8155565e7f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "08a2253c-7df8-4693-aa58-5f8af902a713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae41d784-78af-46bc-be7f-790998f7275c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10aa128d-757e-4298-9d6c-efab9b0c10c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e9fd7a-daec-4e6f-89a2-191c6bf2b976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "675060f0-0774-42cd-a4dc-fce5c981522c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "120856e2-acb2-4d73-8019-6166743e215d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e235978-3039-4f7e-8c40-d96f8e525e37",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc58c59-e8fc-4fe8-a616-1da834bbd86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2522f323-905b-43ff-95ae-345f9e715c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85be4c8e-c192-40cd-8eeb-a135620b0e37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "16d6520f-1e55-4372-a2ec-4a674d7aaf9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea763c71-cd19-4a59-8950-30d389683aef",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a9fbbd-0613-4a55-ab1e-4d17edfb3d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8407926e-ce46-4928-9668-fdc1bbe51195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7f614b-5516-497b-bb7e-31f49a7a1dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe17534-31a1-40fc-acfe-1f32fd4e2dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e0e820-8d49-4ad6-bbed-f3bd07d92e06",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80f71dc-2dcc-4e4b-bae6-6ed7b5262344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c402d036-fce1-475d-97af-a1b5c3b08e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11670c61-a5ad-4dcf-b9ec-f796aaaf66d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "34e4a751-8034-4702-93df-bb9defbb45cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "386de01e-2bfe-49cb-b86a-013fa5a13451",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b4c5e41-b97b-423f-a1b6-0a47441b46ea",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a8126f-5663-4007-ac95-c30a204d2b3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f82d4e4-f140-4086-8abc-23ba5f14e622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcfacded-b3f0-4e21-97e2-977ea1615e6e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46db1c75-e187-478b-bd2e-78bb203690ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c8e905-e431-432d-bc14-52b935aeabf5",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf2fbcb-382a-442b-8fdd-14d1707779e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3502af18-7729-4d28-b232-6be5cc5695aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d2b4dc7-6fc5-44ac-9370-23bddaaf32d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68543c9c-6503-4621-aeb9-26f831a832a7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b94c689-0f4d-46d4-9f2b-e3b8409971b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0bd16d51-827f-4298-864d-80530a61896a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e72fb15e-fc7e-4065-a475-30a59ee9e409",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69e29f6c-2082-433f-b613-98317f0c766f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a7a622fd-36d0-488a-bc5e-f7f299613e87",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3f5deb4e-9867-4d63-a8d1-8622e9fd8584"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7e2a52fd-f430-4057-bde4-f75bf2a3b500",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a13b41e1-8f0b-4741-8ada-02deeee39f28"
                }
              }
            ]
          },
          {
            "id": "5b33e05a-2d46-4b97-ad7c-1c33f465e350",
            "name": "Positive Testing",
            "item": [
              {
                "id": "704ee161-09d8-4efa-b604-b208ee0b927c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bbe5105f-b7e8-496d-a059-2f31f3f9e170",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "512d01d2-a01b-40f9-be67-17d0695dc3a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d676f7f-424a-4dd8-93c6-40d8af21065a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "130ab731-4fb4-4f91-b09d-c88b51d1c159"
                    }
                  }
                ]
              },
              {
                "id": "6043b15b-22c0-432b-bc94-760f2766fb4d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68054e78-d2e1-42d9-a805-56187b3e3364",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "13964643-872b-4bb8-82ad-6209c823d0ae"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4fb99d7-9eef-4c56-a0a4-b29c08143711",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "91891644-889d-4ba4-bde1-80166a224d74"
                    }
                  }
                ]
              },
              {
                "id": "68fd396a-fd33-40da-822f-201f135382e3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3893657f-5162-4749-8cfc-e867fcbc7631",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9692d7aa-b538-4354-bc24-6a80a1c7ab10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2cd62658-1b27-4df4-b67c-e1a96f180e04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "961005c8-a5bd-4b41-abee-b472a2641274"
                    }
                  }
                ]
              },
              {
                "id": "71553eea-ceaf-4e89-a671-09b24f90d5c8",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36e1be93-9660-4739-8934-4f620eb94c59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "caceeb38-4116-436c-9063-bb8dd2699916"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe35d269-d3a2-4396-b405-61b4fd146825",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "f7c4df9e-a9c9-4de6-b4ef-18c44d064b54"
                    }
                  }
                ]
              },
              {
                "id": "88f50572-756a-46cd-94d1-ba55930a8ca3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "19644d2c-cc2d-478d-8528-9a41af7945af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c9cbe6d-2e2e-4dc8-908e-eafb58164cd3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16c9dea4-0442-4bae-8f0b-ad3dd5555941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c5efdd1-520a-477f-a713-89b713a284bb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b2990377-8487-4929-865c-8e8a31d239d3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a1a3a6e5-79c9-4c72-81bc-ceb4cfcbf58f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "24f347ef-6825-456b-affe-1e071f10ba0a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44a91ceb-f2dc-41de-aaab-d448fe2d63e4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a85c492d-83e6-40be-97da-4e1d1772f15c",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "6080ecc8-ca42-44b2-a567-52c7de3d5364"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4afefefb-2f30-4df9-8a5e-65a4bed61073",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4cfba65e-32c5-4d59-866d-514a9f72b278"
            }
          }
        ]
      },
      {
        "id": "f5d550a5-d9f2-4659-a39e-f0e324cf25f8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d35a6348-900f-4d6e-b3e2-c3c66931b27c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5f327af7-958c-4e8c-b079-688ab6f6e4ce",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "16386733-f962-456a-a052-183a2ca0d136",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47ec4d44-a7ec-4291-801d-e2d4f37a824f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a955db-d014-4a46-970e-1e03e9cc6d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cc4555-3752-4f83-9696-04eb2e7c1e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c04ab6a-f1b2-4cb3-ad4c-8b4ab76f0eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abaf460e-cc61-464e-8a3f-a3c7c007e79f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba02fce-82a5-429f-a78d-d5b6efab7c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c04f5e-75cf-4ad9-9ff0-542a3a59e60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbdde00-6519-4c8e-887f-04f0828cdbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d42919d8-12d9-4a3c-ae5f-58ccc6b90217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574537b4-a280-4f93-a66b-ff6b171e54e7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5736f50-36fe-4555-8d60-e8fd24d82a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94f71e8-3e07-46a4-991c-c4193436be08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d3d6e5-e408-4f61-9b8a-5e527f166511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "715af837-41da-44ca-a09d-a8111a3369df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea9cc5c-e22e-4fd8-8fdf-320b0e580b46",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2cbd47-14ef-4159-b386-ebe1d68aed72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1c8b6a0-fd70-47eb-bada-9f44c2fcd91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165dc9c0-6ca6-4468-b139-7d9c156a403b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10806bb9-797e-47a7-9eb3-b046552d09ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc77efa9-0332-42bc-871b-c98ea13e00fb",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608ce8b5-c284-4dd5-9c5d-5a26218dde9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cef4edd-1ebc-43c5-a3c4-af84db86582d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f00c88c-a4ff-430a-bbb1-54d68f3f9c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6284a59d-e70f-4f6c-9741-ffcf090e56be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36a91660-25a4-467e-bc1f-0159af548c48",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4cb548a-0adf-4607-a437-43633438e749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca7a89f-807a-4e71-bd68-cc9bd6244bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed5c363-9f96-4fe5-bdb9-834f236afeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3cad8cee-683d-49c3-a199-9c14a0266d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8550dd31-cbc9-4ef6-95de-0765064bfae0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749f09ae-5a78-429d-8b99-b3e67deacc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d02baf-10e4-4a61-b5b6-184c3027097f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b5cf6fe-31f2-4810-bf4c-77aa57909372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ace4bf2-8125-44ec-a271-101cb141cc4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd6f23b6-9383-4740-ac29-4ca19ecf2084",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf2303b-f648-4024-90cf-9f9afa2d22e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e623499-10b0-40c1-b104-b46673735d9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39938605-1b7b-46e1-a4c2-ed7ffb9b2cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a20fe63-99ae-48be-bd2f-22c3be7d944c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f79154-53f9-4ef1-a1f9-6cf94e16db1c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f612a3f-b8a8-4613-a3ef-31780c631609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d8e425d-8419-4683-b109-0e762f1f5d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee31810-4f4d-4724-8eae-02b050462d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9762f2-5271-4517-8bef-67e0c1e4b48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ebe2bf-c834-4c66-a27a-ead1fde76ab7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e1b7d1c-de11-4a94-a0fe-a474193622b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da658835-c253-4e7a-8396-1c25c04afba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e4a5e6c-e849-4eff-b89b-69e24ce9f7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9da6873d-5653-4794-abba-5538f12d859f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37964891-3099-4a16-afbf-a0db5dd469ab",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5799847-c744-4666-9763-ca6a481c8a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6bdffc3-10c1-4e61-ba32-65ce6d05f17c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7dbb06d-f45f-4519-a9e2-3c03089a766d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "913787db-2fd1-46f8-bb76-97f35da921cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2fab09c-ebe1-4434-b80f-40907fceb997",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d532b290-1d3a-49ba-99b6-e0294aba0b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21ba107-5cbe-4434-add8-bd4939a37c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9adb780-6081-4e2b-ac7f-18cc1c091917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32a73924-cf22-4a3f-9793-5bd589a5f88a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "673edcf0-e31a-4d82-8583-78f5f12ebf85",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c88e12-3f09-42fe-bc0d-0224a3236231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bbfcab0-4c44-4f1b-9bc0-47a831c64fe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcc7972-320a-4452-8a6a-01f778595dff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "521c9faa-9a66-4fa5-af3a-f5abec30b912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7abb08d-8deb-495d-9ffc-4211dfde66b8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1fe90c-d4d4-4a07-b774-8acb8596fe37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b01ee754-b343-46a0-b243-1586348400bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "407b488d-7a9d-4e56-a896-a4e0cda7b681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "777b3a68-b496-4b29-8936-d5f517484166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b69a785-3e22-428f-80cf-df156f2c296a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712a1818-2dda-439f-9d1d-5e96f21d9953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608c4286-9f7b-47ac-bc97-7897216112a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c8ad3f-a32c-49c7-9d1b-a40c211ebd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf7951c-9023-4aed-8523-0e84658bff9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c228e37-9a13-427f-8657-611ae9b265f2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd656ef3-dc11-4485-bc6d-919f8490cc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b78227-d51b-4905-a540-35dc99bd7824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d704173f-70af-4563-9750-878a8f48d666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b49fa7-15e5-46c1-a2f1-dd1ca4c031a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac477955-d65d-42bf-a84f-51362aed1b44",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3f68b1-c9f4-4991-bcc7-e2dd00e5701b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5855db6-5e1e-4c3d-a375-559bb1113eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c119ec-f4cc-4cf7-be3a-c35ade33ecda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "18fb0ee5-35f1-4d23-8fec-379642494c7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe9bab8-27ed-40ac-835b-26da1e8a0721",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "954daab0-5444-4668-8110-ed21f66d1dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38514a23-673c-4659-ab22-38000ba98a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca90de7-3a89-43d2-b66d-ccc76650c38e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "577c57d4-4467-412a-8824-0ba95aba7063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa6f0d9-3fbc-4a2f-bbcc-fc7172a1bc94",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44698539-92e8-4eca-aaa5-1a62ed3385f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136d98d7-61b0-4907-8e47-17abc5176ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817567f6-6666-45b4-a0c8-eb55ad5453f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37260f0a-03a9-4868-8944-51abd815f807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac53e24-f869-4c35-a6ee-061745051cee",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84d80dd-eabd-42e4-8ce8-0e56da6c3225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0f6182-28a3-425c-ac01-6dd6084f9f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3047256-3a9e-496f-aeca-11dbcb0aec6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a780d66-e5b9-451f-b0d6-e038fd0d32c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87f792d-a7e7-4d64-a6be-1db1cda9fd87",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c9703b-4b65-48f8-954b-7d6db9106f83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98538ea5-74be-4dba-90e1-9d4e250b2269"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b3f296b-c15b-45e3-b91b-6eb851582ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db5da759-a752-4b43-b088-bb630b8ece71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06ee8e60-255a-4c04-a146-04d172950270",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00d27ab-59ce-4b1b-86a7-1744306cd95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1585d84-80a6-42d2-ba4d-8c66d66aab79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d45d2f-90fe-40e5-b2ff-2aceac4e1d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8685c0fc-fbd5-4b25-bb1f-3ea534820550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7716e3-e642-4e3d-b713-ff8d09fdd488",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9170a65-f002-472e-a142-0cda47a68ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04d197f-8a96-42b7-bc83-623adb1fcf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aca379e-9023-4c78-9a42-48f6f4cf1fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "962abd8f-7897-453f-a419-9303c21e1968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1470e62-6996-41b2-aa2b-377f162da6d0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf28ed9-3403-4946-87b6-c1248a70bc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e5deb17-7470-4939-9a43-7e819c4aef6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec0dd59-c066-4385-b75b-017aab009515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8eccbf4-a9d1-4cac-a5dc-95acb1f6e5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d8679e-4ce5-428a-98a9-2b1b751bfc8d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e034e9a-a211-4320-b4de-5047eb278b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb44b0a-d677-43cc-936a-164e0969b5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44c18d1-dab8-4476-937d-455a8eec4a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7908d62f-06e5-4da2-a812-64a833cd33be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cd2303-be29-42c1-8b40-f69249d4948a",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f0a3a4-e251-47de-a3fa-0d1499ee7754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35b83fa4-dcda-4fc0-bf15-bc3eb2dbf3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43860479-eee8-431c-a1d2-00a0f4f5cb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb37cc92-6f8b-4ecf-a704-fe4f63f4047f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfa11bf-2e5e-4e79-97ea-6e942cb67838",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc65781-47be-4e11-9abe-2174d2ca3588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b161f4f-ed25-4bd5-be17-d4887c4c7c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26928200-eca7-42c6-8f71-62a3007bc999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29831a0c-a969-42cf-ab01-d339b8c137d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caebdb79-05cd-42fd-88f5-383e6fa0fbd1",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1cc5db-9ae5-4fdf-976b-2f29fb364ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3968062-c76f-425b-8ca6-7f7478f0a456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "700e05a3-455d-42f1-99b4-22f0ab1a4ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f683feb8-23ac-4c4f-8626-106d854e0f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879448d8-981d-4fa9-8439-92cfec4c40fb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ddb7b6-6421-4c6f-ba08-317dbac622a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a78aa3d8-accf-44cc-9672-a9ef66873222"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe01a8a-3b1b-40a3-bccd-819efc7f843d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acb51c2e-c14b-4374-8c4d-9fdec4e05b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876ce9ff-7da7-4f72-a235-80e065dd4386",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55a64da-7ca7-4f06-94d7-d303c67bb5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c162448-ad0c-4263-96c3-293686648882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eda4ea7a-7a90-4a07-8e1d-693c45e7a834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eeb1cc4-40a8-4417-b6ff-33238d4469c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfebdfc-ab64-4833-b68d-a2df9b2ae9a9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33c143f0-1e76-4baf-b225-043568a1f620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92445072-6b57-4c18-a295-0a8fa163cf1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668bb965-c180-44c7-ab37-618b5d614f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b68c9a9d-cd17-4d98-b842-f3fe7d607130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faf3c083-26f1-4ec6-ac09-4df9d8d06908",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070f3e06-4592-4f4a-a122-ba47a0827193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473f1a51-9ad1-4104-89a3-e1a41f850a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54484085-b960-4856-a91e-11882a6e2607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a9b8890-6a72-490e-94cc-e6a850a16e17"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "56a2e8c8-f569-4e95-b3a5-0d7e3efb2883",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c283302a-b262-4d26-ae56-deabaa4896ef",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c903e43f-eca8-45b5-af87-deccc530002a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c1860e4d-2711-44e8-a842-70b68796f5b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05448f8e-b5bb-4cc7-862c-11b5605aab27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7404210e-1263-416f-ad53-2d0b9e4572b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdbafd7-d8b6-4c20-b037-5fc7a37a531a",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d48d50-2de7-4e8e-856f-a6da389bf9ec",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "385b3582-ee6c-43b0-ac3b-724ce8e385ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9c2c8c-4126-45e5-9b3a-413cc0ab977f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98afa4ee-6d9d-4162-9552-f5ddf1619513"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2175c271-f532-495e-9268-94877cfd1b13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9cde93a-a292-4b04-875f-649b4fddfb10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b4233f4-128c-4731-ba5d-648b03d31085",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa3d0d72-bc66-4086-b911-5e6bfb876596"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a3bc5d8-2d2a-4832-9665-82682e795f23",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7e4be56f-6428-446b-bd8f-fc2a43e43f00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "23991da6-52af-4868-a684-b23c1c87b3e0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aff7e115-a992-47e5-b346-5a8ff93acfe8"
            }
          }
        ]
      },
      {
        "id": "29e367e4-a9f6-439a-985c-55a7df673e4a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9fd2dc57-42d2-487c-bf01-0ebb0d91cb83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "937d6bac-0fae-40fc-94a8-83df18f025f9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c7968dd1-a854-4ae3-80fc-ed62b903b90b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371d947a-4f20-4c4f-b183-faa1fdebf40e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a78496-6620-4bdb-9065-25f553e2b11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ce85a1-15de-464d-a926-dbe1b6c2f395",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07cd09d2-541b-4dd7-8bd5-07cfdd32d9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2433991-9f4b-4fd0-b353-bfcdbd49e351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b9bf2f6-984e-444f-a28c-0c164c45f058",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5729ebf8-e797-4a40-b444-56343651f90d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22c88f7a-db0c-466a-a1c9-d3df7561083a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e179282-c70f-4ca0-b13b-b12d6730cc3f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43b7a84c-5d1c-4a85-a698-3dac82fbf653",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24432b7b-8fa2-43a0-ba81-25d238244340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d6aa0a-0fad-4fe3-9fb8-8d39a1892a20",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483baed7-8536-4b70-b179-c75542b6e144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5b5ca4e-0945-47b1-9353-042196057467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25a9088-4f65-49d0-a3ca-5b620b1b066e",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a196b44-6b58-42b7-80de-abe873b0bc05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18831abe-6491-48ca-827b-5afa31540679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6131903-361b-4580-bb5c-d98b6e4a61be",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d79414-130c-421b-bc61-7e02b7bc6320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff91122-4525-4fe5-bb7a-a21b48f85618"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceb3ed9-379b-4e7c-85af-541f097b8ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef6a785-f97d-48c4-b37d-e6f3e226f630"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa37ee1-8be9-4fb0-a30c-8b1690fcdb4f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f23f02-34ef-4ced-bfdb-cbcfce135b62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a0744f5-06fa-49b4-b2af-a32a03137997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "548f8e19-9145-403b-ac95-064796f5a7ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed49f47-3ee1-47e6-b3b6-4ebfa769085f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "131ae7f2-764c-4cf7-b46b-60abf28d4eda",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9968e6a-7798-458e-9341-7312297fe59d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d30b9e-38de-40f9-89dd-dbc32c875663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7d50d5-dcca-4130-a694-5aa9778182b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6edca7ea-7099-44f6-a5d4-a9d9906bb2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "328d6eb2-aee8-4627-808e-69b2db928a20",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dbe7eb-6237-46ef-b09a-89dc9d2329af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01852a7a-f5b0-4b58-a9cb-5666a158961f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e91259-77d9-43b5-af56-9d0abd2c809f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60f6db7-fced-4127-8316-69705124828f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5a2a79-5d88-4447-8aae-d12f44bfcfc9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aff5833-7fcf-4ded-897d-ece4edeafbb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab9d2fb5-bfb4-461f-b3eb-d636b623f972"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9f93ee-4810-4dcc-8f8c-060f7d26b30b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cedc0fe-406f-4f06-98f6-4d9d5f98154d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158dc966-39ba-4061-af34-5c64b1ca7bf1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b908f527-54fa-4d48-b4dc-cf72bd85b3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81221d94-a763-4965-85bf-f96feab6f801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a55313c3-3140-4345-97a3-99170d4fca51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f142b903-d78b-45d5-b991-173a05d7d37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef28bac4-efbf-4d24-a4c2-b50bce39e15d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71bf7a3f-f656-4612-b2a8-e369658ace26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba70850-0d48-4e95-92f5-9add5d98a39b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a788845f-8622-44cc-b21b-26a9015a267c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c06f57e-7256-4d07-a95d-8883c96639c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa59cca-a190-41bb-b758-f31fc90569e2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e9b1e2-6a11-41e9-bbe6-55f80126d5ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f142093f-43b9-4ff3-a9d5-02cc5a14972c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75939d5a-6ab0-4597-a294-1a5aac6118a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda6becf-2214-4894-b1e8-035ec5e3054a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e0e7f27-ac87-4cb0-bccc-d4329bb272ed",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec24b73-f6a9-425b-82a8-f154850d5ec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9faee2df-f4ed-48c1-8ac3-c771d3afab4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e748c7e-b98c-487b-89a2-3d7fd28fab91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3904d3-9f41-45e0-9991-9affc207e847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d74dba4-2c46-4991-b4e8-3db579838226",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7e31a0-1f96-4020-a116-d468aefe8d21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "548b39ef-5be9-4676-89b6-64ca4db54a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c5691a-8bcf-4ade-a2ac-f886d383b072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296975e4-d489-4db8-b472-28c9c5e76050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88fec9e-86d2-46f1-be95-f947d9a715da",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c95791-d98e-4b17-85e3-d2d273f28a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef7ed357-52e0-42bd-b7e6-4759c6809b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a414874-29d7-4f3f-aaf6-4337dd9a0042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4d6517-e5c8-4c18-b146-0e2ab8d0e8d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76db5ca4-afbe-4b9f-824f-b39675ca2f47",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e445ad5b-9a9f-4062-9526-bdffa2332d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43a486a-6312-4b38-b721-46a15875fc24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f531a72f-8b08-4c7a-ad5a-e2ca1f88f0c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e96c4de-7438-43e2-acf1-293d60c498ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6255aaa8-a8dd-48f7-ab65-fe4bdceffee0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "985e6894-4488-448a-9580-93101c797987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09f9602-8626-4ef7-abf3-a26f63f23014"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7add95c-dcbb-4698-9308-774275de0c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0e856a-59d2-4a42-b6ee-606693b662b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ddb69e8-7070-4e5b-bb1a-d03471f3ec86",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626d03f5-7514-4d72-a4d8-82019ec140e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09275a2e-0d5a-47ee-b2ef-3c4490ef5a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4916ec15-3c1f-4eca-8144-185fce766f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "650bfafa-aec5-4066-b104-d7bf92274d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c51e4f8-eced-4f7c-8c40-47f1cf183866",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0e296e-6aa4-4643-aba7-3a3930fc87a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73c3192-3396-480c-b375-de0bb8c7be88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "080c84da-4d21-4437-bcd7-ace811f5fc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5214677c-5aea-4da1-a4d0-fb030689245e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19ffa852-f8e8-441f-9e93-90d9bdb707bf",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38fadd40-a5a5-491d-ac00-4bd2798c0a2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3d8c0d-99eb-409c-b741-09786a6233af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "134ac4f3-5a76-4794-ba01-5ec39eb14295",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d49738-20df-45be-8255-08211294604d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7b0f9a-ccff-4ef9-abef-8adcb738cf5f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b458a0-93f7-4511-aef7-cd927d758627",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ea8007-cabe-4c60-9562-77af283bde8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffe423d8-5dd9-498e-906e-54018b25dad1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11f4a3ed-c88b-47bb-81bd-f22ffe94717d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae24285-5b53-4031-bd82-263186d44fce",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c04014-7bee-4a63-8bbc-b7e85bcee2cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51f97a30-6e52-4e48-9a2a-47e2db99fa82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2292ce-ed9e-473d-a393-8141cd2323a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea79851b-e0e1-4834-b7ce-cfe79e05b26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b91358fd-8070-47b1-ab5c-9bd813f3ba55",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a727304f-3783-4a12-a812-d46e5dd2ac4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae1c4783-e675-4cf4-8d29-767f63aa217b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "325829dd-553d-4b7f-842d-41047a78f6ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbd41b29-d529-485f-9653-37b94f0342e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f486308-6b6d-426e-bca0-b97855ce9262",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aee32d0b-780c-41af-980f-bc6cf6220aa4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e759fa2-71ff-47a3-8076-150d3686cf47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e159d3b-5f8c-45d5-ae6b-f6e6ab0ee83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091b0fa1-1cda-4ce7-a57f-70313758b006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbafca6-d28d-41c6-990d-44b60eb3ce00",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f09ce0b-7506-46a9-8331-dcefa3b73354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afaeeac6-b3e0-423a-b215-fe8edb62c233"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ff51e6-8542-4d23-83d2-c3d91b77d847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcdfba35-92c3-4c6f-a49a-d28b05398eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61e2d8c2-845d-4339-8505-a216bc5edb5d",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df8d7386-ed14-4d43-9cf3-36cf0d4fb53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9099cda-08d0-4aa7-a1ab-0c220a238e41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56959f8e-1d0e-428c-8311-0bc84e30b6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34be66e-dc2f-47aa-b4d5-5b0f67263e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "606bb962-38bf-4fd6-8e25-7d1af76f1488",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82f0a04a-d8d2-412b-b3d2-912a8c550802",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "728fab4c-f70c-4e7a-9571-0a656372535b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efd2518-d303-4d52-b62f-f79ac92a4ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1da63f6-7b8a-49c9-a2fb-aaffd8c1c5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6dd25b-40bc-450b-8f4f-82ba196d17d6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166e1038-9e30-4294-af94-848a1d5175d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb0ed945-c6f4-40bd-becd-9dde1fdcb5ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4893291-4eb7-4f74-b4ca-26cdc62a71ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e68444fe-790f-420c-a91c-2b51811813e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a75267e-0237-4b17-89d0-883a5ce3feaf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892b2591-b2f4-4e8f-82e9-d93137efcb79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86438a8b-f2cd-4e79-a6ed-00b9617d5bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aefef15-138c-4814-9045-4cacc4438bc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d032679-643e-4bdd-b3af-89929d604457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493179ba-7989-40a9-94a6-a5e3d775e132",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b661f89c-da59-43b1-a10a-0888b15afdc0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feb8bc03-958e-43dd-b111-54273427fe1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc9086e2-6aea-4f57-b593-97ec963ce276",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c402a2-db81-4faf-b981-242095540adf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51687c9b-a175-40c5-ba4a-35f1b0f58e1e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e3ad6a0-c818-465d-9cfb-37d3a7fc97ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ae413e3-3c33-4e5d-be0f-ff061ad6a9a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a909710c-cca8-41c2-8fdc-7426bc07c0e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7dbe11-14e6-4818-9213-6ea6a2ae9662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b6c06a-45a9-467d-8b40-a6f2d1c76ddd",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e08cde-fafb-4a23-915d-db3a0a791083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa710847-61f6-4c29-8aaa-498b280f148c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0093eaa-e5f1-4ebe-b293-57665fe9a4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ada72c5-6b3f-46db-afb1-28b93283d276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c798da-cfb0-403d-a9c2-f3994c1e29e9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "411752c1-f0d1-4a2f-b46c-caf3410d3e9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b38da82d-e4ae-4737-9aac-d3ef5d37dc42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9977f4aa-332b-4ceb-91cd-dc9e6d6c1d31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f139bf9-f76b-4e47-99e2-3d4527e52933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264952a3-63fd-4fa8-add9-069c10e5cb01",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8ffb0cd-1eab-472c-a15d-2c38c5f53ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e7e0a1d-fc4e-442a-b128-941831a406fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89256be8-c56a-4767-8c1f-c1f4463fa1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b9b83d3-5157-44b8-8359-51e6a392ecd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25539d6-e05c-45c8-b843-376995911f5c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532ab676-19a6-42c8-91a0-914455b486e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75197ed-a53b-4503-ae0e-f8afe4828402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f19716db-18c6-4c4c-a28a-af49f74f031d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2da44a3d-10a8-47fd-946a-ade2723a0954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db427b7-ceb6-441b-a677-06767533d9bf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98ed6c1d-3c46-4428-ac9f-04cf72ed9227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8acb8b-d475-44d3-92a6-9d9cdee2a3e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd16c4dc-3f2b-4a40-92f5-837427597a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0754c2a-2601-407d-937d-078c54e6ec53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b0d6be-8fe7-4909-a521-3a7052b5c49f",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ac7f5e-ae91-4319-8568-70cb71cf52f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "963df942-fd46-4b3b-bb57-192ff0e92bcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "935f92dc-6b1c-440b-b28e-d04eabb03f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a4e5216-81bb-4618-aa61-6933b2a47e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d36153-a891-4b0b-9f83-8b05f9871db3",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025094e1-aa0b-452b-a983-e2829b4c581c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d312ab0-3532-4e0d-8d39-fc084152e959"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e96f2edc-95ac-4b09-ba1d-35ef41dc9249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72aaf5ef-9a44-4877-8041-7cacd20eecf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb724dea-9878-41f3-a920-b2e224f85d16",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579f9e80-fad1-4e0a-b631-17dd28de62c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85eb57a8-a904-4c30-add0-5e5a824dd571"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0acb18-0b2b-4399-9611-14aadb54d497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e8cc1b8-fd81-4335-8a6a-2111a5ad45a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb31a12-37ac-4a14-9c46-b336527dfd86",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7953844d-b6d2-49f5-9d70-f7035f2aa160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c835531-177a-482e-ad92-654d1ee95d1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3deec0f-4f8e-4d3e-b29e-80e0295c3e13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2c5c949-5f74-4792-88ce-0a3465a4f7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de4dc459-60d1-4bae-b4f4-4f55c7e358c0",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b70f7b6-e756-4595-8a82-b6fee92b3221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4f62d1-98ec-4f4b-8bd1-9a47f01c6341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7794c132-9724-4bcf-87d5-92400d722046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d96556-bdd1-4773-b70a-784d82993039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410474d3-bceb-43bd-9b84-6cf3a58be7cf",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea50fa24-8b72-4edf-8cab-6048a71708f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f912ac-9c48-4a48-8b66-a74475458c75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f844d9b7-25a1-45be-8747-15f2a4b851eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307bf322-79ca-4f14-a1bc-57fb53f1e160"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81664e29-6946-4f6a-b925-177fe29d63d3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e2511f-3175-4690-bac0-497eacaeeb0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d3592c9-2c08-46db-9f62-e0b6ac9d7927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0856fb23-4043-4505-afe4-6603b9034fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cc2d7a5-7096-4865-b562-2c97425e1d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896c7078-a6a6-4c43-b8da-00aed5d30f13",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecceb94-9ed6-402a-82b4-46a3bc2be70a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "073444b2-1ee0-4185-93ca-75d487fdc39f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "170fca9c-2d7b-48b7-be12-e6091bc218bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "495919f3-d4e4-4aa5-9e1c-8523e662ee1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb840ea6-50ce-490e-ade1-db7eb2fcfa32",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7e945c-2b5a-4d99-846e-4cdcaea60ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c65968-5357-4c8c-95dc-756c40faed9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8709b238-0685-4b68-8cca-c8a33f07eadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfde32b2-ea9c-4e7a-bd79-19b24f385165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80c0eec-3967-4b04-acb1-e179a3b4b195",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1576b14d-8315-4ec0-8a79-7e3a546fa1c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d17838dd-a937-4ef9-954d-dd6bd9184faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc4680d8-448e-492c-bc98-006b076a34db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "643a03d3-2769-413f-abc9-dbdfed9e4424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b444dbfb-f231-47cf-9bfd-d8f76292066e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ea6e1d-6f8a-4939-97fa-b55a44459b20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74933ed-74d5-4d2e-917e-44ba4c3f78fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b0f0238-7bc1-4981-8ea0-b51262c4cd6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05d5aa4-7996-4ced-85f3-c247c8998fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce41fe3-fcc8-4fff-9ed0-2f4d053c7c5c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf0faee-b29b-4921-9581-ad2444ebd4c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af5d2f59-c6d3-48e1-978a-c314fc91034c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5251e73a-1dad-4891-9e9c-cc7f87d4f894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39a6a027-fd87-48dc-8e28-c75357fb5f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e3ae17-4b92-4287-bbe6-0a1fdfc1a7de",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc61482a-9a4d-4b16-965a-c3cfdb2771b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df7db35-b472-4050-b195-7b2bdb414b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b925b95-ca3f-4a67-a8ff-d62096ac58d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66138c02-8dbf-4aad-886b-c42f40ead72e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbd548b-c845-428b-843d-d8e83566dc05",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adefa9d3-88c6-429b-a165-ceec982c1bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40bccedb-0101-412e-bb4a-ebde400ccefe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8af48c62-08e0-4694-a572-381040f1d5cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58658a3-4d52-4c8b-bc89-fa4f6fb5f052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5403ae-6f5f-4d77-a89d-f0eaaa9b37bb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02224bb2-1b5e-4cba-9015-ede7daa6bd6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7175ba62-9be5-4eb5-95d8-4c5d2cf1a84e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b2b587-88af-4f9f-9e9d-0b2255c123ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f0da7c-4fd0-4741-a334-299ffa3e4b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73583895-7c38-49df-bd0b-05e1447cd746",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc70445c-ab17-4569-980a-becaeafa06ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "baaeca56-512b-4c75-8ba4-f931918ade6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54705c62-7346-4be3-96cd-e9e29f39aa47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32ae6e3-7a69-4457-96d9-64d91ee38ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95358dc8-3536-4fcd-bea4-882c10e4840d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a5eabf0-8e45-4440-9a98-fd266cd25683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d163c48a-a448-409f-8e2a-4084410dd07e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0500b35a-c31f-4dc4-8a68-5133e62f3671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e09c87-0d0f-4ba7-9183-ed7d74806736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00681108-02df-4319-b9d5-2ff85b3a9fe2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9152e7-a393-4512-a450-8e9ac9b6f4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd277abb-5f41-4554-9a5f-f5abf5e4f48c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ec297f-d523-4c58-b918-371f31dffc14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77cb585-0c81-40ce-b9d3-c8609f6305e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cbdad9-d872-4d3c-9fa6-99d7b2389c42",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ab49bf-9383-499a-b67a-0ab4bbf2a575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "417803d5-6457-421f-84f3-8cc1746ec45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84730675-f815-448d-86e0-001da04d603a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6972c1eb-1ecf-4093-9e7a-929a96c93376"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf16100d-985e-4548-ae75-54f74bfa4630",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07baa1d-48e5-496f-804e-04b0e8a3d24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57fde2f-41e6-4e8e-8f6d-3ec38f30aaf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "693680b6-faf5-4e3e-93aa-7cf44d474726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "973765a9-fd6b-42f0-b7c1-949ca7ba8346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9373511c-efa0-4a9a-98a6-3ba56569fe53",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e5be5a-43d4-4214-bff0-ff50607811a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41567b64-dde1-4560-87bd-afde4075fdc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5800b4-c2c9-4eff-9a7a-97d63ae60067",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06963e4d-e60f-47e3-ad91-1e64cddf024a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a351d3b7-91f8-4262-bc3b-3bb35869918b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2014cf5-af36-49ed-9347-31b90070cde1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3197dd-e1ce-48c0-85a1-16564c9baf8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1e880a-d32d-4aa0-a0c3-dab829a79576",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce57362-1d10-457f-bee4-ddf80c2e7306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfd6b24-90bf-4abf-aac6-a0224bc4f630",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87652a66-bc15-4e67-848c-da68cff0ed7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1522b3d2-7e23-47e8-9c5e-c409479feeb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e676c594-fa93-4c3d-86de-9bf0d1fe9e39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36bd7ec9-c089-4e1a-930f-431f574ee6c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4df9e0-7a55-4209-a5e1-ac92ce47f93e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44776f6e-7acd-428d-aa9d-da10cad8fbaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12071156-6055-4da9-b43e-154a433035bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03487f69-efd8-4c3f-b6be-ad914e67ce85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00093a16-e46a-4b5a-ae9f-03e4a71c5b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "063eaf9f-6b7b-435b-961d-4f04bc57d843",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ea87ba-9428-41ac-8463-e4f5a7610aa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc09b3a-06bd-4122-850d-1a3899b64641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600b420c-3c9b-424e-a2ae-21d0ea7e9d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73c4015-d176-4cbb-9155-613dc3d5594b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e43c2b7-01b2-40d1-ac90-d470f307685f",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d84af6d-e3b1-4056-90d7-7c8aec882857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63d23586-42e1-4d8a-b211-f0b2bf5ec21b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888f86a4-a1cd-4289-a93d-3913a580a88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728cb10a-b161-41c3-a9df-bee6fc9e80eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1647bb4-7e14-49b5-abdd-357b0ea58e0d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f71308-1aef-45b8-82fe-8104ccc57cdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9810d142-cc89-426e-b93d-1c5696f2eadd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97105a7a-8dc8-4a34-ab88-9281ba04387a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc3b140-2751-413d-b149-e0fa98945bcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a6e4db-2d0e-4f48-a459-b6dca514cfe7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c059b9a2-155a-4b00-a966-c4c98395e10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c00e3bef-18af-43e2-995d-49ddc575afa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af88007-2316-446f-b513-1cad016d5c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77c857cd-2adb-4a78-81e5-53a7586c9cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305836fb-c068-42b9-abc6-7d71f472c2a0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d6c241-efb4-49f9-944a-6302dc66aa40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41697ec8-a3b4-4181-af36-58f26b5880c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1d3080-86a6-45d8-bb17-f730b739f4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1948220e-fe99-4e45-bec5-bc397b6d2ef3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1286cb68-05f2-4758-a71a-a14c7c2b7fa4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc507d4-1db2-4c1c-8956-9a93e66bd3ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e57d41a-76bb-467e-b9a7-e5d5112e9aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbf4b08-e17c-453b-85fc-958b235e7f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8852a808-5971-44b9-a504-e44fbf4e3612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d3af18-b8f7-4e41-99cd-7bee936bf177",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458f9679-8def-4b5b-ace7-ad1211e24698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c15b9a59-6e77-4297-8c8b-6defd6c9a5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe73d882-1896-49d8-a9f2-b9b6be693ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af0f98d6-f95a-40a8-8450-5f057e1d93f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e4120fe-f54d-4896-92fe-f3c7d6f46a06",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baeb31a7-d300-454f-904d-9da7486492fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52ef2eac-3152-4689-904e-65cc6ca4f7b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c677e5-c456-40c5-8d30-52616071ede7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747b5a5c-0759-401c-8157-a7bd36e7ffea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19bfd47-8a12-4dcc-86d3-5b62e9fcb2a0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260692ef-f762-4d4e-9f1d-6cb298f00458",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a0d5a6-7357-4708-a093-75eec9169754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb11b1bc-7cb4-40c7-a4b3-e9c529ff047b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a7bca25-7f26-4d05-a9cf-888db790db5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe2900d-3486-4580-9e42-afc566404ea6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485ff99f-5328-49eb-9833-e785fc76ce1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d6d36d0-fee8-40bd-9a83-8d60c2965203"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99c2b40-fef4-4f45-8501-2b6a04039ab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f18075-ff69-4813-8306-7e85c2243335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabae6b4-2231-4dbc-9e21-8592022d51bb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c12b25-acaf-4346-a197-49628cf6022b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f4f2133-ab97-4229-b97e-a9380bd733da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20005de-1b98-41e2-951c-6ed03cc46ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15c3cd1-9011-4d84-8991-ca6b205bd844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8e2e11e-572a-4e2e-b3ba-b0de1448ca71",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7208cb-fa7d-4d72-9f04-4b8ceb9437e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66b46c30-8337-416d-96e2-36d94ede156f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "637f33c6-32cf-4a36-9127-78856191697c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9a524f3-3ebe-4ccd-b77b-c17577870efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b87d8e1-353b-42a1-aa07-b3934c47a67b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcf7e32-debd-4c9b-9a7f-3389311e12cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "654d0af3-e535-40d0-b50b-edac4cf9962b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ae5f73-801e-4526-ac62-79bbab27fea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d94dc4f6-6c4b-40c9-b7a7-eeb40e856067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a25ce6b-2c27-4b29-a53d-0bee8d46c4ac",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4167f9a-ea51-452b-9b0d-3430c4e23130",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342cf4d3-1642-4e34-9cc3-4140020bc517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "248055d7-a007-48c8-8878-98d5c3aeca76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f75d815-6d86-4a37-896e-2c7dcfa2b2a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f64776a-711b-4fef-ba44-0c7135169cc3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc38c3d5-3860-48d2-b637-baad250fa04e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cf4e652-c639-4dba-847f-2b36c144dc78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bead3484-651a-4c30-8003-04f5180b1d64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548f8f2e-2b0b-4dab-9c6f-0816d589c189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89dbf155-ed88-473f-9b03-73c434326628",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f665d52-6eba-4498-a14a-5e1c59484654",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0973600b-de4d-493a-865d-00f910d7669d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1853bb34-05d2-4d7f-a73f-fa14cab77eea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f0bf2d0-f21d-4850-9130-05dffc96ce25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9acff9b-b5bf-438b-8741-42230dfe6bc4",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "547ef791-264d-4c68-b92e-461d2f12c3bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50ef1f17-7c8e-4782-ba62-60a103d389b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "820442d5-d595-4e0b-b84b-e5e0bdd5506c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd59514-a695-4dfb-acbc-8bdff62710e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76c02b1-bf33-4000-8d10-f7903e73fb34",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b530af-a6e1-4b05-8a92-7fc5a8e0dc99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f08c59e1-3435-4686-b47a-5ce4301f7130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5697d8d9-5713-411e-b7ca-f89c0c0ae68e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec14efbe-b139-4808-88c6-bb8114da5997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3040dacc-97a0-4e94-86cf-5c43457c3b2c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f72366-fd5d-45a3-b5ee-65a9d75ed134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5113ee4c-a318-40b5-ac7c-f8250dc995ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dadb4d46-23f0-4e20-b386-9d12a4a88c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d138ba9-6996-4c43-96d9-1ce3eb8188a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92cf17fd-ec4e-4a4c-b69d-92346dae8dbb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54337b7-4176-42e8-9e03-8fc884f29400",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe3a2023-f869-4a7b-9306-1cc9caf8a81b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5466141d-afe6-4733-b4c6-4dacb25feec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff42b15e-ebc4-44f1-bf43-3f42e8a8726b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fb65fb-b47b-42ba-90c7-d754f09b25e2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6bb245-2ce7-46a9-9a20-4724a09bbaec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "936e0345-90fe-4e5b-b654-725684b4dcbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d63af2c-457a-4bcc-8016-118aa50cf934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f38f2c2-2e3e-404b-b30f-55375f97ae6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e85012-58f8-4034-93c9-a47609cb9317",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2617133c-d81d-4d5b-807e-596aedeb30ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd1248ba-b330-4d49-ba97-64fd920687e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12691d73-5213-4f97-bb18-3b5e79eeafaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4350c6e-f6c0-4813-b7b1-cd4d268dba34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c78cd3-94ee-4afa-b0b5-be39c218e9b8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48138378-c453-4221-b5cd-515d57b99009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11d5d88d-e67e-4956-9b83-f625c89d8587"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff934d0-ee9a-4d10-aa5b-440cecb3ff7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12316b1f-6d5b-4da7-8fb2-37854d2058fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4ce4d8-0693-4baa-96ee-11ef08263b32",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658c0865-97d8-41a3-8679-93de330032a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "961cb66b-a9d1-4a20-a7b8-ec54d544b6d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91086c5-9a5a-4058-ba27-dc059692c1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143768bf-4912-4329-816d-a3aed45345fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0e3da3-6db6-4b41-9b07-90e2e2dc24be",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe338fb-d639-4a9e-b3ea-1b4b05b8265c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6257334-feef-4d3d-bbdc-a6cd1a89a3d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1887ca-6717-42d7-ba01-5e1448c15bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59830496-3662-4848-8876-148095051c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33cf734-34ac-44d6-bdda-cb43c20bd82a",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b902430-f217-46df-9e55-46fb0cc8fe48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b20412d-1532-4f5d-8c2a-84504a217af5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21084762-b436-4e7d-b42b-e44d4653c062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71e5b00-d9b7-4448-a4b8-34e489cd3f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad98ffaf-8e95-460e-b339-6eca20628124",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47967dc6-cba5-4501-badb-8f8138ab7fba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f277c532-d7fa-4ed5-a27b-fb4f4b62ccb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9d2ebe-4e6b-4ccc-8a4e-46fc82868dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae8a117-127d-4c6e-9f08-041fa29591b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836dad8b-339b-43a4-b748-e336cbebbfb4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa96c3f-2d5e-4cc0-b354-7622f2dd9f65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "671c60c8-33ee-48d2-b148-78158788a807"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0a2ecb-9a60-4fb9-a520-752e93448148",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d05683ac-5d4d-4848-b513-566f6511ea4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded5a25a-351e-416b-8b3a-3af26b170025",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416d5b52-336a-4172-a5ce-b04bccdeb36c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24cdd117-6449-4067-b253-c04e54176be2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1833574e-cb9a-45af-a49d-03a9ddcc5634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e630a6e-bf1d-4196-a160-880ad299c4ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a09f5075-f6b7-43f1-8b5b-5551cb2ef3c3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc98f54-5613-496d-99b1-e72013357832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b6a6c3-4f54-4879-8693-3c06a5391c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "744811f5-3868-46cb-9036-f4b264ca5f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11df68f9-7828-45ca-b0c3-88d1e08283e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663fff29-ea0d-43a9-ace9-6f6e4aed413e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0555da3-9ce0-4733-91e9-9fe8627d52d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73f11c28-2e17-4768-847a-631901b34126"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8414547-f83e-4a24-8f06-e887b57d968c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0e26bf1-c682-45d8-8a53-a2af8626e2ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb936f6-2d5f-42a1-9ad4-c579232f2bc4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02785011-05ac-42a4-b301-5c5aab2a5d97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d39ace7-7927-4aa5-ba3b-1c0d0d30e5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35bccc66-5f65-4d14-85e7-7e951993a73c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1014b3b5-1157-437a-a8ef-1a05b0e5ad82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1011a358-8507-4744-b40b-e1f68cac6e46",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccccba96-d962-494e-8fea-fb36898ac5c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3118eff1-c32f-4631-9e58-1159f0e8d0ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec269fbc-c30e-4f9b-935d-30d881a62cfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11cbf6dd-862d-4a34-95ab-f49b7122eb18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31dd361f-0942-410c-bd7e-68191c1bb5af",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ccb29e-9fe4-4dff-a70e-bb6103862432",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96c0f4d1-1daf-47c9-b571-b2cc261ee7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4962ce32-d3ef-47e2-a88e-4a624f96614d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "986fb1d5-112a-4a73-82c7-1efbe551e2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8fc568-e39a-445c-97bd-80742eb908bb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09242518-0a0d-48eb-8f91-a3bd8a4e6ad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a39cc20-b288-45ba-9c2f-a8394a0e2c9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a553e10-51f5-4f23-b9ec-7b4580cac594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ede55d-a436-4598-91fb-6bdb249e25e3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1a1c8f55-9d64-4b5d-a442-7516b6f74eb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b76eeb18-ea1b-4633-a49d-08087a16960f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "629d5fac-d08f-46da-9cc3-4b1af98dc644",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e85f03a1-4535-4f0e-a23d-f08a1187404f"
                    }
                  }
                ]
              },
              {
                "id": "41585850-48ab-4f35-b195-cfe7508f5bb4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac437028-e6a6-42e2-97d6-8501816afa82",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e8ed30b-3124-430a-bbab-a7b358c97d17",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "05ebc31b-4006-4e81-ac75-c87ab12c99e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5e8c6b-dadc-44ab-8107-eb77b5fcfc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04938de0-4382-4c63-84a1-2834c4be5b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "548b6568-28f5-4e0a-b823-6a9d257e1ee7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51e67a5a-cba2-42b9-b937-fe0b4865adab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "84de6d61-1d86-4c7b-a9a0-1dc153fa6932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf6dc280-348c-451b-8db8-879db0c6ad9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "31e49f4b-36c9-4c29-93c1-cc231e8040bf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "038aec19-4391-478b-be58-c67b09824ddd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c76bf6fb-9c8e-4b0d-8426-470048e6eaf0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ac041b3-9ae0-4e4f-aeae-a8c66de71c71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a2db7cf-49fc-4d85-af10-a1381afaeffe"
                    }
                  }
                ]
              },
              {
                "id": "57f699b0-67eb-4627-a043-a7a1bc7dc406",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "746f58c0-9435-4c82-88a6-2fa5b0c580c2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c577a5-4b97-4e31-849a-0d6c5246300d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fdddaf30-9587-4737-869e-2c82ef52491c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80689a1e-cd1b-42f0-8b0a-d7cbc6b9f9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5951c0-a0bf-484a-b3c8-392c73a91881"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1391787f-c69e-45e1-b6fc-ec5b9bb4346b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ad8534e3-71de-4048-9fea-21de943d3e3a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e73d4c4d-81f8-475b-89e2-c8d14780bb7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6b999cb1-755b-4f41-a163-ae15577bdd08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bcd16df4-2968-4fc6-a92b-026b426e00fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d0ec1b6-5070-4149-bd47-088aa660b98a"
                    }
                  }
                ]
              },
              {
                "id": "b05dcba7-876e-4b4b-8c99-abf1db7d5148",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "555abe0e-e30d-4693-b9cd-91b4b937192b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0545a727-f624-451d-851f-871cb84b7864"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10e78767-e663-43dd-a4cd-363aab7ff73c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dbedfe5-e033-4c27-b925-131816119559"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94239fc9-28f0-4bb7-a3b2-4749a7cb2164",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5fe0bbb6-eb44-450f-9fa5-745e3ce687f4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1026893d-f9a7-4b01-a7db-e7092890eebc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fe066c32-bc2d-4edf-a94d-5e7dc394e546"
            }
          }
        ]
      },
      {
        "id": "15e5e622-7493-4e7b-b994-aa16d4f5e674",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "8909b2d6-56c7-482b-8a2b-ffa56a569958",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b9bffb2-b68e-4638-8f45-3c6b0ab25dc3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52d2d555-cc32-42bb-8929-acb99c86c0ac",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f675f5d6-e92e-4649-b20b-51663ddcd4f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "72cb8ed7-7a04-4403-9bab-afe2d77b4def"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d8553d5-cddc-4031-97ca-fdd02951ee02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b751a10d-2ab7-4cf0-a43a-ae75ae0549e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40047ecf-2fa2-429d-86df-a136518f0b96",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c93d29c-d42c-4f2e-ae95-f688a91ef087",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1417233-6603-4b8e-be5c-0ed08846ea7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d013866-e66f-48b8-8475-99513402d0aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d1575ee-19e9-4275-b62a-329a7908a061"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9512215b-8be7-4156-887e-ed032b1b4036",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d93a0ebf-4dd9-4cfe-9ffd-ed4cbb0f2f2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "63f114db-d680-4729-a446-4532bd805488",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6d3f3d5-8e57-4fd8-86bf-af2ce6fb3e47"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c00b77e-9bb5-4af1-b390-2215e5fd4b7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7862a994-8d07-4953-a060-d04dafc2a086"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3a87442c-a714-4659-a4ad-66e4ec877994",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4ab97e4-ba38-4835-a053-f1016cf297a2"
            }
          }
        ]
      },
      {
        "id": "c240c05f-492f-4190-8d10-53bba620cd64",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "32f5d452-91d1-4adf-b0ae-cf176854b961",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ba75302d-5c26-445e-950e-069f790071ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ac502ba8-c145-42a5-a0c1-132ac80e2852",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09fda5b-2ec9-4605-99dc-d48f00133444",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8096db85-c10a-4521-85e2-1e1f217cd680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bac51a3-d71f-457b-b2fe-d0b6d5c12389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a97b0cb-80f9-410f-932d-99f36745c3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83df173b-d809-4ece-ace8-238acdfc97cc",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c93651d-5588-45d1-b5ea-6ec8e88bf945",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f614c8ff-49a6-4002-a784-3cccce31d82c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe0b4de-e3a8-4498-8abe-65496a21dd70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fc36f8b1-cf53-4360-bdc2-703b5d97c9b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc4d147f-95d2-4c80-a2c3-6e39a5c1019b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27add732-26de-4781-b632-04f251993f96"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7331bab-a118-4af1-8501-100e9f5b9092",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13dcb28e-7e43-48d3-a120-b165819fbdc2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b3156639-e530-439b-a6e0-368d529edb22",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "34df60e9-0702-4c2b-9aed-e784e0fe4357"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "533c895e-0ad1-40d9-ae1a-6cc95aead622",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "51ac2d61-95a1-44bb-b2bd-0e9094cdf8e8"
            }
          }
        ]
      },
      {
        "id": "31e838c4-21bc-49d2-a3c2-ee85fcf1c794",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "84cf0472-38fa-4922-a41a-3f4c5ae26e64",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97b53658-8149-4fc6-8947-0f3f1e7c53cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23e7e5ab-294b-40fd-ab60-7b493b77ae6b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c456390-686b-4b9e-a800-eb7c4a99e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90673a00-5e43-4d59-a848-7472b31c59d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd21519-0c23-4717-a492-23306c7ae30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1195ad0c-9ee6-4d3d-9f78-cc9726306c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4c0c9a-0cb6-452b-adb7-19c31d3fdaba",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34138dcf-a2af-4d34-a08a-7f42ef3620a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "c1352ad7-cc22-48fb-8c44-fb4c9bd0c182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8790fff8-07f0-4387-b649-87d61daa22bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "55eb398f-2d51-4ff7-a0ea-8fea3725b01b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "363cde09-cd29-40e0-98ff-14aeca241bc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62375069-129d-4e73-9d6f-452fd7e89742"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9e3d1a3-3ac7-47f9-aa03-a5592dc374ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d5811a0-dfc5-435a-b797-f06947bd395e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f317ddcb-121e-4f32-94b3-ee8641489dd0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bdca7453-c646-492c-aefa-a17f532e51c3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "21623a41-a958-4fc6-8adf-d76663013ead",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae97dff9-8e99-48bc-b741-5a9be839723b"
            }
          }
        ]
      },
      {
        "id": "7e04b4b2-2364-48f5-bf8b-eaa81572dcc5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6e393379-c8ce-4da1-8517-71e82e507858",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a32992e-9ec7-4bda-aa0a-84b877318307",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "65ba491d-f412-474d-b50b-19c75db39141",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3213c880-ed06-4b34-a79f-c4666f681975",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5eb5cbbc-4422-4c7e-a959-3c45385918a3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 267.6911196911199,
      "responseMin": 21,
      "responseMax": 5956,
      "responseSd": 731.860540361961,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1678322545705,
      "completed": 1678322625787
    },
    "executions": [
      {
        "id": "0893508a-2517-44a6-a731-c4399fb10b39",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "558cb0f0-7eb0-47df-a478-6e3851a874a2",
          "httpRequestId": "54e618b5-d267-4bf4-95a4-8c34bafee6fe"
        },
        "item": {
          "id": "0893508a-2517-44a6-a731-c4399fb10b39",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6945ea1d-ab20-4bf3-bbd0-17a00e454d6a",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 0
        }
      },
      {
        "id": "89ab98d3-aa27-4250-b8bf-56e0e08a26ee",
        "cursor": {
          "ref": "76c423ca-560e-480e-9adf-8f04db43da4f",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "22ea3ded-40f1-499e-a876-6bfa2d987706"
        },
        "item": {
          "id": "89ab98d3-aa27-4250-b8bf-56e0e08a26ee",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5dd572bb-6316-4df8-9f22-78e71a758381",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "c715a1fb-2a4c-4f93-8a2b-3875cfd82801",
        "cursor": {
          "ref": "3d071ced-6b56-4c05-841a-0bd6d1c766bc",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1b430a09-ad26-48fa-a1de-0b3fdc206b8d"
        },
        "item": {
          "id": "c715a1fb-2a4c-4f93-8a2b-3875cfd82801",
          "name": "did_json"
        },
        "response": {
          "id": "d16be6d4-84ef-4512-8cb0-354ac99cb600",
          "status": "OK",
          "code": 200,
          "responseTime": 562,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba4e1da-058b-4362-9fc7-ef5c9f4de558",
        "cursor": {
          "ref": "f58b2f18-dbae-48ff-b8b3-a6112b15eaf3",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d03f2fc7-60a5-4542-9d8a-a84523ab1961"
        },
        "item": {
          "id": "2ba4e1da-058b-4362-9fc7-ef5c9f4de558",
          "name": "did:invalid"
        },
        "response": {
          "id": "53eb8a39-7b93-45db-afbd-2a8f92134737",
          "status": "Not Found",
          "code": 404,
          "responseTime": 244,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2ba4e1da-058b-4362-9fc7-ef5c9f4de558",
        "cursor": {
          "ref": "f58b2f18-dbae-48ff-b8b3-a6112b15eaf3",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d03f2fc7-60a5-4542-9d8a-a84523ab1961"
        },
        "item": {
          "id": "2ba4e1da-058b-4362-9fc7-ef5c9f4de558",
          "name": "did:invalid"
        },
        "response": {
          "id": "53eb8a39-7b93-45db-afbd-2a8f92134737",
          "status": "Not Found",
          "code": 404,
          "responseTime": 244,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "36e42b84-e1a0-4877-8f04-e0b3b1a75836",
        "cursor": {
          "ref": "9ee41086-f302-45bd-a946-420d9d8532ea",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c3dbb28e-4f1f-4fd8-895d-33c2625be3e3"
        },
        "item": {
          "id": "36e42b84-e1a0-4877-8f04-e0b3b1a75836",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3dd1570f-e5d8-4e2f-9808-ec94c5246b85",
          "status": "Not Found",
          "code": 404,
          "responseTime": 95,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29063fde-f465-43a3-8f1d-5adfa906b230",
        "cursor": {
          "ref": "0c2facfb-ef30-45b9-8391-aa6e86f199ea",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ad086645-4c0e-4080-99fa-e5db3bae2580"
        },
        "item": {
          "id": "29063fde-f465-43a3-8f1d-5adfa906b230",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b823b4fc-88f2-438a-9225-d0bf686e249c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 67,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a6e834-0996-46f1-9f52-8fc246693491",
        "cursor": {
          "ref": "fee45bc5-5f3d-46ef-981b-4aeddb314478",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "91076126-1498-4b0d-8716-640a7e4c6fa8"
        },
        "item": {
          "id": "25a6e834-0996-46f1-9f52-8fc246693491",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "788a2253-7d70-44b2-a82e-9f1ec1893c84",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 119,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d62bc985-e72b-4bbd-8ad2-e707348a99bc",
        "cursor": {
          "ref": "cb5cde23-8582-4863-998a-c0b7c0a0e949",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51a5bed6-f056-4f0a-b335-9995329185f7"
        },
        "item": {
          "id": "d62bc985-e72b-4bbd-8ad2-e707348a99bc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "05c5c5d2-1dae-4cfd-86c8-b0bb3c2d99e1",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d62bc985-e72b-4bbd-8ad2-e707348a99bc",
        "cursor": {
          "ref": "cb5cde23-8582-4863-998a-c0b7c0a0e949",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51a5bed6-f056-4f0a-b335-9995329185f7"
        },
        "item": {
          "id": "d62bc985-e72b-4bbd-8ad2-e707348a99bc",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "05c5c5d2-1dae-4cfd-86c8-b0bb3c2d99e1",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "5f80182a-e8de-44b6-a82d-ea4ec374ceec",
        "cursor": {
          "ref": "93ebcae2-1f89-4b56-b1ae-3d701f2ffe4f",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "dce5f9fd-d0e8-4f0c-8ef8-9f2da3c672a1"
        },
        "item": {
          "id": "5f80182a-e8de-44b6-a82d-ea4ec374ceec",
          "name": "identifiers"
        },
        "response": {
          "id": "6379358c-4ff5-474d-bd70-2f33da972b6a",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3253ac6-dc57-49b3-8425-feaa055cebc1",
        "cursor": {
          "ref": "7b20a40a-a701-4803-8cae-145097f7f8ec",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2cd7517c-9594-4d36-9f48-ad8cd3286601"
        },
        "item": {
          "id": "c3253ac6-dc57-49b3-8425-feaa055cebc1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dfd43977-2e9b-47c9-a1af-a03b4b13d82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3253ac6-dc57-49b3-8425-feaa055cebc1",
        "cursor": {
          "ref": "7b20a40a-a701-4803-8cae-145097f7f8ec",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2cd7517c-9594-4d36-9f48-ad8cd3286601"
        },
        "item": {
          "id": "c3253ac6-dc57-49b3-8425-feaa055cebc1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dfd43977-2e9b-47c9-a1af-a03b4b13d82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7354cdf-ef7a-4127-9df9-bed245f39eaf",
        "cursor": {
          "ref": "8a1699a8-2a40-416e-ad72-ab176fd15848",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b8438247-f21a-48f3-aff1-c260433bb0c2"
        },
        "item": {
          "id": "b7354cdf-ef7a-4127-9df9-bed245f39eaf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6e7cd28a-07c6-4472-9e0b-495aa3f29286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8bb7ac-4d70-4c45-a9cf-33d1061533ab",
        "cursor": {
          "ref": "949dda62-f8c2-4285-b3f6-693de5750ec3",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8cb75174-2c72-4616-a9bd-b37755342133"
        },
        "item": {
          "id": "df8bb7ac-4d70-4c45-a9cf-33d1061533ab",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7f5f14fb-9321-48b6-afd9-8ffd765c54ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104ba76a-64f5-4771-84c2-666d5a6badd4",
        "cursor": {
          "ref": "24506c48-0edf-464a-9977-7a4d75522258",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "5aa3a3a1-2bd5-4b10-886a-c5a349bc7021"
        },
        "item": {
          "id": "104ba76a-64f5-4771-84c2-666d5a6badd4",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bf063051-8ef6-46ce-a0e8-5512b51620fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51caf452-4899-4095-b7bf-fcab2583ddfc",
        "cursor": {
          "ref": "c6d5f86f-2373-4d46-b7cc-d3fb20e95cf4",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "98e8febf-b13a-4517-a639-d35eb8969def"
        },
        "item": {
          "id": "51caf452-4899-4095-b7bf-fcab2583ddfc",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "80de1631-09f2-44f5-8ade-b533d81fa33d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc144638-aa14-4441-a1ba-eb2df30dbf0d",
        "cursor": {
          "ref": "773375de-866d-418f-b196-efbab38cc139",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2568a6f1-5ba1-4e27-981c-31d30f92de03"
        },
        "item": {
          "id": "cc144638-aa14-4441-a1ba-eb2df30dbf0d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4233036e-5410-4a36-b9b7-19036d3774e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d832859-81f4-4dc7-9a8c-8f518c54b550",
        "cursor": {
          "ref": "f8abc8fa-89af-49c1-9faa-4b414a7ae9bf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e05695bd-71bf-41f5-af2a-2f66850e3863"
        },
        "item": {
          "id": "0d832859-81f4-4dc7-9a8c-8f518c54b550",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "70b1943d-a4c0-4e80-b6ee-63d2747d267c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a16b74-f6eb-48a8-88a0-b109ff5c7690",
        "cursor": {
          "ref": "999853a2-ebc6-4559-a926-a4ca73043ddf",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e0c0ccba-1cbc-4a9b-a840-6cafdb4f1d03"
        },
        "item": {
          "id": "b2a16b74-f6eb-48a8-88a0-b109ff5c7690",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d8d40b01-b1ff-4323-b6cb-3b601441178b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe17c86-5811-46dd-b048-488a5c29716e",
        "cursor": {
          "ref": "307077ee-9a32-4f4d-ad73-4e584d6e761b",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "84d8e592-4877-4ed0-a640-fa7031c9490a"
        },
        "item": {
          "id": "bbe17c86-5811-46dd-b048-488a5c29716e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b3433ac1-33ee-4081-9522-7099c5044320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d77829-a3f2-4d03-b114-364f0dc8b139",
        "cursor": {
          "ref": "356e0d93-7aae-416a-8aa1-6c9b7b126a1b",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a4e696ee-e7ed-4030-b65d-c48914bd65e0"
        },
        "item": {
          "id": "77d77829-a3f2-4d03-b114-364f0dc8b139",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3842e1af-b573-47d6-9238-959abaf47f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "742ac7ab-cb11-437a-8941-54c6492a92de",
        "cursor": {
          "ref": "0ca3e645-3579-4aea-aa41-e539675fda3b",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "54b3b67e-761d-484e-ae10-402f65fba72b"
        },
        "item": {
          "id": "742ac7ab-cb11-437a-8941-54c6492a92de",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "93abde7b-87ba-41f7-80b5-ba93b0a5d0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08898a03-e71d-443d-8927-331c17b7bf02",
        "cursor": {
          "ref": "dbc51e6f-5bc7-48b6-8038-eba6aca62eea",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "cc0d5269-c799-4bff-bd31-426bb447d14b"
        },
        "item": {
          "id": "08898a03-e71d-443d-8927-331c17b7bf02",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "31c59602-d8fb-4158-99a9-69c3e99a324d",
          "status": "Created",
          "code": 201,
          "responseTime": 626,
          "responseSize": 996
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e333075f-2f80-4f56-87f1-38b5eb30d9aa",
        "cursor": {
          "ref": "ca5b92da-7fe1-476a-8025-912d314f7427",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0fe3c077-95b4-4968-9bd8-0a42bd68a60c"
        },
        "item": {
          "id": "e333075f-2f80-4f56-87f1-38b5eb30d9aa",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3551b236-aa68-4df4-ab75-8ba36add83ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb463363-94b0-4f9b-a8dd-a7dc8583aff4",
        "cursor": {
          "ref": "95f18683-6da3-4027-8300-5f472acfe364",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "48b58b62-0a0c-482e-bd03-4fd51225ce9a"
        },
        "item": {
          "id": "bb463363-94b0-4f9b-a8dd-a7dc8583aff4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e4bf68b2-5551-43ea-b13c-690f4398b31c",
          "status": "Created",
          "code": 201,
          "responseTime": 4605,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "49e85f6f-d82d-471a-b791-db3e00f58d3b",
        "cursor": {
          "ref": "47f1ed79-7eb7-4dcb-9cc7-19f8cd1fb505",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "94b45dbc-0ff2-4727-8aae-55d2aa56a3db"
        },
        "item": {
          "id": "49e85f6f-d82d-471a-b791-db3e00f58d3b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5e901956-bf85-4694-8659-1042799d5967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6425d4ed-132f-4a91-a85e-12ae8b0c4d68",
        "cursor": {
          "ref": "a5bb70aa-f610-4784-ac71-78a7b9d696e1",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9d2c1288-7851-4921-b5f5-b5fbacb3b74c"
        },
        "item": {
          "id": "6425d4ed-132f-4a91-a85e-12ae8b0c4d68",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cebaabd0-4291-4edc-85d9-c86422173a71",
          "status": "Created",
          "code": 201,
          "responseTime": 5956,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "85dd352f-718f-4303-8ac0-bcafb960e780",
        "cursor": {
          "ref": "0b291b1d-839c-49bd-a1f1-59ed4e76d3c8",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "70e72657-1b72-407a-90b2-0c698f2f694f"
        },
        "item": {
          "id": "85dd352f-718f-4303-8ac0-bcafb960e780",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4ced6716-9d8f-45b8-b9bf-4a780bfafcec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca51b810-1cbe-40a3-803b-b85d5353fb73",
        "cursor": {
          "ref": "78f1fa8f-9a5e-4bfa-9300-8dee6572fc8b",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "79795c6b-f6f6-49bc-8606-ba81197cba73"
        },
        "item": {
          "id": "ca51b810-1cbe-40a3-803b-b85d5353fb73",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b6f7102d-880d-42ea-89e3-3b59d354fe0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493dbc72-2098-4b43-8677-a89a0a36038e",
        "cursor": {
          "ref": "bd6f09fd-9a08-423a-b289-e0262167c522",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d2d384a8-3c3c-432a-845b-3b7fe0418104"
        },
        "item": {
          "id": "493dbc72-2098-4b43-8677-a89a0a36038e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "999fade3-690b-4ae3-b855-5ccb6938554f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06fb7e7-ad8a-4197-b572-ed1d1f1627ee",
        "cursor": {
          "ref": "153aac87-ca77-410b-8c4c-f9dd372ccfcb",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a3f58c1d-268a-4779-83a3-5be2bfda6f68"
        },
        "item": {
          "id": "f06fb7e7-ad8a-4197-b572-ed1d1f1627ee",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "cd7da575-78cd-4c69-bc0b-5a3515ea76e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 745,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06b5a0a1-f4ef-4d5b-92c5-26fabb56a42c",
        "cursor": {
          "ref": "333b5d85-8b5e-42f2-a862-768973af441a",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1cf52e57-8fbe-4e13-83cf-a6affc17743a"
        },
        "item": {
          "id": "06b5a0a1-f4ef-4d5b-92c5-26fabb56a42c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "472a593c-e4ed-4966-8ac1-f9454fd42a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50caf73-2329-4929-9bee-0ba6c2927384",
        "cursor": {
          "ref": "b57b18ee-9a81-4f4f-96cb-315982a407e5",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5714329d-dbe3-47b3-abad-ee6e347cdd52"
        },
        "item": {
          "id": "c50caf73-2329-4929-9bee-0ba6c2927384",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "039da770-28cb-4659-9b03-53c8927011d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7e21a8-a097-4d8b-9b20-153ffd40f788",
        "cursor": {
          "ref": "c7c8fbed-3981-4bb3-81aa-ac4d2fbf827c",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "81e34b1a-dbe4-4cbe-993e-359df3599127"
        },
        "item": {
          "id": "9f7e21a8-a097-4d8b-9b20-153ffd40f788",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "81703ac6-9c0e-4c86-880c-6771731c60ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f72e1614-b1a2-45d8-9831-930ce6d64f95",
        "cursor": {
          "ref": "458ff779-8bf2-4a4e-b54f-91bda8a38227",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "92467cdf-0d3c-46d9-ae97-30dfdbc0e892"
        },
        "item": {
          "id": "f72e1614-b1a2-45d8-9831-930ce6d64f95",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "3cdc7a85-0a4b-4fca-aa07-45bbdd48f110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ae34a48-a535-4d69-9747-514bcedd960b",
        "cursor": {
          "ref": "a8ce1619-9d11-4e91-b0c9-d03ab25a7758",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "fe37dcbc-0234-4b13-bc9a-8997f4a2732e"
        },
        "item": {
          "id": "4ae34a48-a535-4d69-9747-514bcedd960b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a2e6a5b8-438a-4a33-9fe8-592784f970c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82443bf9-8fb7-47b1-87ee-7c9f63cf5bd7",
        "cursor": {
          "ref": "853503a7-118f-43e1-b7d6-a7dd3a783959",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d6021ebf-f284-4d69-b9a9-6dfa073db3e8"
        },
        "item": {
          "id": "82443bf9-8fb7-47b1-87ee-7c9f63cf5bd7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c2bb6b72-fb96-4b2f-82cb-ee5846d89f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7689df-730b-4394-8fd2-297d07cc0af0",
        "cursor": {
          "ref": "9c162cc9-9e8c-49e5-9796-e4a4af12c284",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "5570e213-f0a1-47c4-acd2-f216ec81b8c6"
        },
        "item": {
          "id": "9f7689df-730b-4394-8fd2-297d07cc0af0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4510f508-e4f0-4a80-ac59-2a569772eb11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "117d3b62-a9ed-41d9-8aba-1e2f95ff99e5",
        "cursor": {
          "ref": "ea90a567-17e5-4930-b99a-d5fa1338a86a",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e9391ae2-c2a8-4f1d-b073-f9102285cd20"
        },
        "item": {
          "id": "117d3b62-a9ed-41d9-8aba-1e2f95ff99e5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "76357761-54c7-4399-8426-b20bfe56b93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18af39cb-6bbe-40a4-8ff1-48a394503395",
        "cursor": {
          "ref": "9a4709ec-94d0-4b2e-8fe0-5eb0390f4ed6",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1cea3320-16f0-4be4-8252-443f4000e78e"
        },
        "item": {
          "id": "18af39cb-6bbe-40a4-8ff1-48a394503395",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "798d0454-090a-4ed2-98cc-4c5ccce4431a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "219ab720-287a-4496-8169-1f6dbe8da114",
        "cursor": {
          "ref": "79710e43-6c01-4ec7-b00c-4c82c4455374",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4b49fb9a-50e5-4d69-859b-a1e0b277e717"
        },
        "item": {
          "id": "219ab720-287a-4496-8169-1f6dbe8da114",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4c176dc3-427a-4eff-a0af-3dbc874cae5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6aea581-2ce2-4ad3-85f3-e0d548a66304",
        "cursor": {
          "ref": "072388ac-15bc-4d86-98ea-8f6503c6481a",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b95cffa0-bc30-432f-9074-1d01c2d6b9ec"
        },
        "item": {
          "id": "f6aea581-2ce2-4ad3-85f3-e0d548a66304",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "d010afcb-68dc-4bb6-b0dc-37c19190a7cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a1118e-2ad0-4f71-aef4-06e8f14e293c",
        "cursor": {
          "ref": "0b3ef569-d991-4660-a571-6f04f30882bc",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6fbb629c-81f6-4ed8-b24a-9875b0f9de36"
        },
        "item": {
          "id": "a5a1118e-2ad0-4f71-aef4-06e8f14e293c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6469492e-5088-4675-aaf3-46a6b7deffd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc7fcaa-7e25-40d3-b4b7-9ba86f24f9d8",
        "cursor": {
          "ref": "1d6fff55-5b9e-490a-b9a3-1e1e7d590de0",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bc1c5c20-1e09-4f6c-9255-a437549fbe8c"
        },
        "item": {
          "id": "8dc7fcaa-7e25-40d3-b4b7-9ba86f24f9d8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ecff8e52-abe0-4466-bcf9-4bd2fa503269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dceee35d-17c6-4ac9-bbab-afd64a809478",
        "cursor": {
          "ref": "2e9ae3f2-4949-48cb-a97d-cb2cf83f487c",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "443eb258-a551-4f87-979a-2b5624a16e20"
        },
        "item": {
          "id": "dceee35d-17c6-4ac9-bbab-afd64a809478",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "f7493adf-d53e-4032-8066-52fc4d40a0e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75abf90b-3db8-4def-a4d4-8940d9057aa8",
        "cursor": {
          "ref": "6149cf34-2df3-4c03-982a-d0a2f237c361",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "56524eff-5f2a-414d-9d8b-4725d084bbef"
        },
        "item": {
          "id": "75abf90b-3db8-4def-a4d4-8940d9057aa8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "89fc1bee-f585-49fc-829b-864aebdf7c4f",
          "status": "Created",
          "code": 201,
          "responseTime": 2787,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c0e6ef6a-5fcb-4e0b-9205-626265703658",
        "cursor": {
          "ref": "a10a5b91-5bdb-4bbf-8b6e-c48e8eb10e8f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ccf334fb-3f4e-45a3-80e1-b0630beff737"
        },
        "item": {
          "id": "c0e6ef6a-5fcb-4e0b-9205-626265703658",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e22a1c29-d829-4f58-b1ae-0b1baae39356",
          "status": "Created",
          "code": 201,
          "responseTime": 2826,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "1fc67157-591a-450e-921b-5f825311949e",
        "cursor": {
          "ref": "0240eba9-52d1-4bdc-b00a-e09910c4e986",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e78dca0c-0d79-461e-9078-028967e6bb75"
        },
        "item": {
          "id": "1fc67157-591a-450e-921b-5f825311949e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bb1cf0d4-be91-477e-95e6-f45a87137b41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e5d683-4397-4b28-babc-c935d506e4d3",
        "cursor": {
          "ref": "d5a7b196-2147-4395-8d15-ee68ede2c041",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e0517dd7-04da-45c6-9a9f-e8028573cb4e"
        },
        "item": {
          "id": "84e5d683-4397-4b28-babc-c935d506e4d3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "62e22243-4937-4b32-887e-e3b07bc27822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd4b632-9812-4678-9a54-b71a94778222",
        "cursor": {
          "ref": "34cde080-9cd3-44c1-9fa2-beef18048e2b",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "177f197d-6226-48f3-8f85-1954a0325e36"
        },
        "item": {
          "id": "1fd4b632-9812-4678-9a54-b71a94778222",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "884af61e-9f89-42b3-86b4-4c77156a6164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7728623c-fd02-4293-b09a-4abb7736f0da",
        "cursor": {
          "ref": "d6d6f04e-7558-41d6-a6af-37c85e1df6cb",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "224297e5-f2be-4949-a463-2452741e7548"
        },
        "item": {
          "id": "7728623c-fd02-4293-b09a-4abb7736f0da",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "5c85895b-8606-4b40-bbfa-d86b07cff875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc9894f-f0b1-4c73-a3a2-51cfe080704a",
        "cursor": {
          "ref": "3eeb18e6-193c-4f20-83d9-4ae038b77ccc",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "b185d9a8-0b90-4f53-9326-b8ad5f9eb9dd"
        },
        "item": {
          "id": "5fc9894f-f0b1-4c73-a3a2-51cfe080704a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3a7c4d40-536a-492f-a04c-e041925e9cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c441518-ca10-446f-9cbf-243e991896ea",
        "cursor": {
          "ref": "24457f58-634e-4807-ae46-9063c2029c3c",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "af6c8ffa-2577-4b2a-a8f1-4bbd4c351878"
        },
        "item": {
          "id": "7c441518-ca10-446f-9cbf-243e991896ea",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7ea36233-0275-4521-ad05-dfc315820a85",
          "status": "Created",
          "code": 201,
          "responseTime": 2008,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4ac9777f-eae5-4c68-adb4-c6ef2ef6a90b",
        "cursor": {
          "ref": "76009b58-a5e0-45bc-bbae-4a39dfde3416",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "574e9d08-7ce8-4c99-8a4a-e176322a8061"
        },
        "item": {
          "id": "4ac9777f-eae5-4c68-adb4-c6ef2ef6a90b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7c459f33-f610-4730-9244-40b0b6f85eba",
          "status": "Created",
          "code": 201,
          "responseTime": 2903,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "a43c2021-a841-4e32-ada2-9aeb0c0467fa",
        "cursor": {
          "ref": "691d10c8-8e4a-471e-bc05-a257af6df809",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e467fb6c-efe4-45b8-b3e4-b787bb5fd8f7"
        },
        "item": {
          "id": "a43c2021-a841-4e32-ada2-9aeb0c0467fa",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "271cefb9-a3d9-48fc-8d25-e9057dc61506",
          "status": "Created",
          "code": 201,
          "responseTime": 3104,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "0b92f810-eec4-4491-9b55-74c582cffdfd",
        "cursor": {
          "ref": "d136d00b-d9ef-4d0e-b9f0-568d92432cdf",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ca5d60ea-fad9-47fe-899f-9f23fab05913"
        },
        "item": {
          "id": "0b92f810-eec4-4491-9b55-74c582cffdfd",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b57f57c7-7a0b-4566-9348-71f8171df675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38a324c3-f95a-491f-874b-51087dd5b953",
        "cursor": {
          "ref": "c92ee78c-7a8a-45bc-b0e8-8196a2d4914a",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0a03de7a-e710-49ef-ad68-1dd4907e96f6"
        },
        "item": {
          "id": "38a324c3-f95a-491f-874b-51087dd5b953",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b8fc5e58-1ad2-4d79-b7ff-d5165b0c40fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237f630a-aa41-4725-9eb8-35ada6a69f6a",
        "cursor": {
          "ref": "7ddc4b0b-cfea-47f8-9b82-481d9c2f4141",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c9118204-d99d-407d-aa36-47d45784758b"
        },
        "item": {
          "id": "237f630a-aa41-4725-9eb8-35ada6a69f6a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "39b2096a-df55-4ce4-b939-bba1abc1b27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b09a91-eded-407c-a682-85004101a876",
        "cursor": {
          "ref": "b896dbb3-c8d8-46d6-84ef-e3024faca2c2",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a619026d-3114-4ddd-9f64-76cfc4b836bd"
        },
        "item": {
          "id": "18b09a91-eded-407c-a682-85004101a876",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "669d2d77-35f7-4bfd-82d6-9317256dc5df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c111ab17-77e6-4673-aafe-3735e847f10b",
        "cursor": {
          "ref": "0ca8ef6d-aabc-4b30-89f3-bf6e10ef2193",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "1c9a0832-ff13-4c25-81b1-6266d9d0db16"
        },
        "item": {
          "id": "c111ab17-77e6-4673-aafe-3735e847f10b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a25eb195-1fb8-4c96-aa40-b9c8995135fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c502519-1e70-4865-8673-4a5a8d4af4b3",
        "cursor": {
          "ref": "83daf979-8ca9-4ffb-8451-7a689736b5e3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "db3aa213-99ed-4f4c-b065-f51a335bb1f0"
        },
        "item": {
          "id": "1c502519-1e70-4865-8673-4a5a8d4af4b3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "57e7a750-f0d9-4de2-b4bd-30d2ba3aba7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "539ce931-9e56-4423-8509-ba29dff519b7",
        "cursor": {
          "ref": "bfa427dc-7392-4847-9cfe-b986e9d21c0f",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "381e4224-9697-4f26-b244-2183d1ba07ab"
        },
        "item": {
          "id": "539ce931-9e56-4423-8509-ba29dff519b7",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2ecee92b-ca7a-4d38-821a-c0617a67eb27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06a0b238-b607-44a5-831a-1264fe11f17c",
        "cursor": {
          "ref": "edb481c6-4a9e-44d4-a45c-fa6290b32092",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c1ea7bce-cfcd-4875-8f93-f4082c82d747"
        },
        "item": {
          "id": "06a0b238-b607-44a5-831a-1264fe11f17c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cbf54ec3-b96a-4b0b-9072-7070467fa5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d061f079-1b46-4a9b-8426-d88eafde8f3a",
        "cursor": {
          "ref": "7406e92b-d3f7-46ec-a52a-d01523fa7bf6",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "790d6a52-a41d-4a5f-9ded-a7d7f4c9818e"
        },
        "item": {
          "id": "d061f079-1b46-4a9b-8426-d88eafde8f3a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "49177a19-de96-402e-9c21-2092dbe87a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 133,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a75cbe-59d1-42fe-af8b-7417551cdccc",
        "cursor": {
          "ref": "dc6cb348-34ba-4489-8f68-73516192b0fe",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8e7c488c-1cbf-4ba2-9e8b-457f598ae72a"
        },
        "item": {
          "id": "50a75cbe-59d1-42fe-af8b-7417551cdccc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c523aa06-824c-4a44-9635-39049e5b398a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a07886c-af9f-4186-9888-3b33e139046d",
        "cursor": {
          "ref": "26f4f4a5-fe8e-431c-8ce7-1ad75b68e1f6",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7d4ef0cf-d9f0-4ed0-b594-101aa8b083de"
        },
        "item": {
          "id": "2a07886c-af9f-4186-9888-3b33e139046d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "987edbda-7bc5-43f8-be4f-3dca3947de32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3e6629-7e2b-443b-8f67-b31a066f4973",
        "cursor": {
          "ref": "8a58c2aa-1295-463c-b7d2-9c72bff9b5e4",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f4b3afff-f0ac-4a02-a700-bb8b07595682"
        },
        "item": {
          "id": "ac3e6629-7e2b-443b-8f67-b31a066f4973",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7b3ed91e-114c-4a5c-9e9e-f2692147fe3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b78550-b69a-413d-9fbb-47fb97080252",
        "cursor": {
          "ref": "77419bb4-868c-4dae-bbae-919def038a80",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "28dd5747-a566-48d7-a5f7-f57668ab743a"
        },
        "item": {
          "id": "05b78550-b69a-413d-9fbb-47fb97080252",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "cfbfbf55-0263-45e9-9d51-bb173bcf7f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4ab085-8c8e-4f7a-b2bd-c0344e470dc7",
        "cursor": {
          "ref": "0d165bf4-c958-4c40-be7d-535d5aaec90e",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "96bbcd2a-992d-4c9c-a3fa-972995290d2c"
        },
        "item": {
          "id": "1e4ab085-8c8e-4f7a-b2bd-c0344e470dc7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "dffaabfc-70df-4309-a497-c1e34762e3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc797c1-6e27-4cc5-9410-cfbf57908f40",
        "cursor": {
          "ref": "df6272e1-cf62-41a9-a755-01c224e846f9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "73f00d76-ba60-45db-8129-52f2e4477b03"
        },
        "item": {
          "id": "7fc797c1-6e27-4cc5-9410-cfbf57908f40",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "954c1df6-a0dc-4c36-9e6c-046b2a9f3835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57012e29-91f7-4fdb-9205-4dea8cc429bb",
        "cursor": {
          "ref": "c2fae6c9-537c-4028-9fb8-b2405dff8013",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "39f5db15-abbc-4bac-a7ed-38932d8d4280"
        },
        "item": {
          "id": "57012e29-91f7-4fdb-9205-4dea8cc429bb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "31ee513e-fc36-4527-80c0-69b1221467dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6567b7f-d934-4419-b18d-53b19c0f923a",
        "cursor": {
          "ref": "06e8fba4-10f9-4281-b2c4-b7cb4710b350",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "6842ce91-a2ed-47ef-8b74-600651f1daa3"
        },
        "item": {
          "id": "b6567b7f-d934-4419-b18d-53b19c0f923a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "60c3395c-3774-44f1-a005-2571d6498155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35b427e-01f0-42a3-92c4-4dbaa97c87ab",
        "cursor": {
          "ref": "6a631489-6a3d-47cd-8cfa-5265638ddb55",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "14b49342-bf31-4556-96e5-670e07a9b71d"
        },
        "item": {
          "id": "e35b427e-01f0-42a3-92c4-4dbaa97c87ab",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "dabf14b7-f4fc-4966-a59c-0facb76234b4",
          "status": "Created",
          "code": 201,
          "responseTime": 2570,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "2c6333de-3337-43f9-a72f-6dddf70a9fdc",
        "cursor": {
          "ref": "72080aa5-14bd-4597-91ac-76190cd26ef6",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "56ea2d49-f71e-4eca-b502-9aa67d2fffed"
        },
        "item": {
          "id": "2c6333de-3337-43f9-a72f-6dddf70a9fdc",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6a13109e-c533-4245-b6f4-f1d80b5917f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb32f73-359d-4adc-8ad2-91a42f07cb29",
        "cursor": {
          "ref": "f66c2b9b-a97d-44a9-89d0-ded6fc7a1863",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3421f722-d674-404b-ae16-8c0f36cb8620"
        },
        "item": {
          "id": "5fb32f73-359d-4adc-8ad2-91a42f07cb29",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "730be0eb-d7db-424c-9d58-11835f4d5d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f075aaeb-51a9-4bf8-8978-22afd7b32a57",
        "cursor": {
          "ref": "0d240856-c8d0-4693-8be2-26bec0277e23",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "64284c5f-e524-44f7-8a74-e3998a118900"
        },
        "item": {
          "id": "f075aaeb-51a9-4bf8-8978-22afd7b32a57",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "22cb018d-6e96-4057-bcc0-571a12db637c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40219593-f1cf-4ce6-b257-1ebd76f41cd0",
        "cursor": {
          "ref": "1246796f-c17a-41dc-b812-4c658229c972",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "dff67131-9e2e-4df5-91e8-0ea6951b5501"
        },
        "item": {
          "id": "40219593-f1cf-4ce6-b257-1ebd76f41cd0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "8e182a90-da4c-42e2-982b-35a0d17129c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75faeb11-af19-4612-9656-552f80356aba",
        "cursor": {
          "ref": "f7bd4a4b-f6e4-48a7-898f-802b4ba13a51",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "12992a32-cd5b-4762-b97f-723d78889eb9"
        },
        "item": {
          "id": "75faeb11-af19-4612-9656-552f80356aba",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "603f4804-f302-4a29-bbf8-2a446bc598e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 149,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "385126db-1882-464b-8ab3-34e422085dc6",
        "cursor": {
          "ref": "9d7309dd-eaff-44ae-8e5e-686dcaa3e6fb",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2e65e3c2-1479-40f8-ac2d-177cd1b34060"
        },
        "item": {
          "id": "385126db-1882-464b-8ab3-34e422085dc6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e4c7f58d-5314-46b4-9a32-1379bfc80d70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c39b88c0-a1de-415d-b633-73fa3f3e8b8e",
        "cursor": {
          "ref": "2cbb3542-753c-45c3-abd8-a21cc0fe03c0",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f3c1207f-74b8-46d0-8954-32995f185b4e"
        },
        "item": {
          "id": "c39b88c0-a1de-415d-b633-73fa3f3e8b8e",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "de3b384c-f055-47d3-9d63-a41305f1f1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94da1f7f-1541-4887-b155-c3e2d365e233",
        "cursor": {
          "ref": "55737aa0-8cac-4582-a81b-b888fa043b84",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ed60a4d9-e670-4722-81e2-cea38775c9e7"
        },
        "item": {
          "id": "94da1f7f-1541-4887-b155-c3e2d365e233",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "cb1f21ff-1aba-4ff9-a002-96c93d9c49ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82822b9d-bbec-41d3-9198-c960946fe68a",
        "cursor": {
          "ref": "e76d0999-1865-4c12-bdbc-99a9548202e2",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ef414fb5-a297-4f79-a3c8-91e6b334f4ee"
        },
        "item": {
          "id": "82822b9d-bbec-41d3-9198-c960946fe68a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "734011e3-cad4-470b-a178-f1c4869879e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428f9ca9-444f-42e7-89ff-1b5fd8d8c031",
        "cursor": {
          "ref": "403a4c32-6bc3-41e7-ae33-da6f9682aa80",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0bd995fb-0f71-4718-b7dc-dd8c34b17da9"
        },
        "item": {
          "id": "428f9ca9-444f-42e7-89ff-1b5fd8d8c031",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "68b2f4b0-ffae-4c76-8f57-e37007e9f2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88eb0f3b-4070-4eee-a44b-a2afade2b2d4",
        "cursor": {
          "ref": "60ac0e71-e86e-4438-a19d-a5ffb9ef0a07",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "2bf061fd-a535-4b92-834e-131582982e56"
        },
        "item": {
          "id": "88eb0f3b-4070-4eee-a44b-a2afade2b2d4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8ac7c60b-1139-4a41-83b3-b393479ce001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8fc1f3e-7af1-40c6-93e6-17d8af56d467",
        "cursor": {
          "ref": "1d4a0387-2368-4503-85ee-ca6bda003042",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0afa5b7a-d475-4aef-a65e-785735e2ddf4"
        },
        "item": {
          "id": "f8fc1f3e-7af1-40c6-93e6-17d8af56d467",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8f351f6f-469d-4be6-bffb-95b6fb8a6a1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66a7b51a-2543-429f-8a73-16c8c9a6c548",
        "cursor": {
          "ref": "2f89c862-a7c7-4b8f-a488-c5435b50336f",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "75b24033-dafe-4573-bc0f-2d079dd3e62d"
        },
        "item": {
          "id": "66a7b51a-2543-429f-8a73-16c8c9a6c548",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "dc0d0315-9363-4861-ab4b-faa1305514f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27833cf0-581e-41ec-8cad-679a69e5c2a4",
        "cursor": {
          "ref": "2d65c3e0-7b81-4f41-9fbe-9d3c311fb346",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b87afc2e-719d-4925-87d2-bf678a378bc1"
        },
        "item": {
          "id": "27833cf0-581e-41ec-8cad-679a69e5c2a4",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "8e6403e5-1543-429d-b229-afec3d295dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e45a53-0b28-450c-be55-c98c76e760e4",
        "cursor": {
          "ref": "38195e0f-64d1-420e-b504-8093ebe292de",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d5d9b462-9f2f-4a31-95c1-6edfe7e20df0"
        },
        "item": {
          "id": "68e45a53-0b28-450c-be55-c98c76e760e4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "5a60fd24-70b4-4409-929a-f150d19c147c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c5eda5-24dd-41f7-beee-0bacee775a85",
        "cursor": {
          "ref": "2bce78ad-2b06-4cf1-ae85-108a25e60874",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7c7d7009-e09e-4d34-a1fb-a3c82b232d19"
        },
        "item": {
          "id": "96c5eda5-24dd-41f7-beee-0bacee775a85",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "34628d68-01c2-4072-a325-ee972f06e97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b524140-cb12-4c74-a1db-c7fee05a43ae",
        "cursor": {
          "ref": "6d7dd3b8-9a17-47f8-8dbe-ea7dc95857e7",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9bda0ad4-e911-4350-b965-135f4ba2e4d9"
        },
        "item": {
          "id": "6b524140-cb12-4c74-a1db-c7fee05a43ae",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "408ea1a1-79eb-45c0-a8de-5a7666ff3c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ced7e0c-2a53-4d71-8bac-591142bd90ad",
        "cursor": {
          "ref": "73974d67-efe9-4302-b870-1e75d15f1e77",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ece9d352-53eb-4c35-9e49-835d88dbfb9e"
        },
        "item": {
          "id": "8ced7e0c-2a53-4d71-8bac-591142bd90ad",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1da4141c-4cb4-4569-b3bb-ae68890ac468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca5871c3-233e-406a-8c3f-198bebe21cae",
        "cursor": {
          "ref": "c0ccb7e6-bbdc-4877-ba17-cf57bf5c31ab",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f97fd34b-9a5c-4999-b3dd-027ceca9f8c4"
        },
        "item": {
          "id": "ca5871c3-233e-406a-8c3f-198bebe21cae",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "aa510b72-c108-4d78-a1f1-6ba93e61fb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6bc37e-724e-4cf1-a1dd-1a2b0a0188a0",
        "cursor": {
          "ref": "3010dec8-ce47-4778-8bf8-f10ceaff3a32",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "4e0173a2-698e-4b8d-ae63-2718da8656b4"
        },
        "item": {
          "id": "ec6bc37e-724e-4cf1-a1dd-1a2b0a0188a0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c45d6fe5-564b-4b1c-963d-a6537a760ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbb5d3c-a1f4-4e04-b293-b22218548b0d",
        "cursor": {
          "ref": "bf8ec6ed-e141-4841-9306-b9876402bfc9",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "055e6014-13d4-447c-b216-1d21d9316b7a"
        },
        "item": {
          "id": "6fbb5d3c-a1f4-4e04-b293-b22218548b0d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d0f7660f-3e3c-460c-a3ae-333cdff13097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb25221-e8d5-49cb-9e23-1b6e4548ed66",
        "cursor": {
          "ref": "684ee0c9-2e6b-4bb6-ba0c-28667b963a80",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "2e606879-da5e-432e-bcce-4aa325eca939"
        },
        "item": {
          "id": "1eb25221-e8d5-49cb-9e23-1b6e4548ed66",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "b4456d0b-3f3a-48ba-8574-2ab24ca9a45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc7759bb-6f17-40f3-9d2a-94fbd3d7c3d8",
        "cursor": {
          "ref": "ad6491d4-5091-4c40-975a-d18c6650e06f",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d7a8cea1-ef8d-4dcd-bd79-92da9456ce88"
        },
        "item": {
          "id": "fc7759bb-6f17-40f3-9d2a-94fbd3d7c3d8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "8af8eb30-1725-4736-859d-2d7867db405a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da264a62-a9e2-44d6-ba21-43e7aea2278c",
        "cursor": {
          "ref": "07851475-c439-4c66-85d0-1499425bd377",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "f51bf6ea-c8ea-4f72-aa98-d80de421f73a"
        },
        "item": {
          "id": "da264a62-a9e2-44d6-ba21-43e7aea2278c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c80c3973-0e3d-4bc0-bcaa-2116feb3a4f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932b2794-4220-4577-8178-f22ab5db282f",
        "cursor": {
          "ref": "fca26da5-f613-4f76-9701-50fa6a6a21cf",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "45c6a037-d1af-4f84-bd10-f63abed1112d"
        },
        "item": {
          "id": "932b2794-4220-4577-8178-f22ab5db282f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ad97ead9-eb83-415a-a8c7-12db1380a333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ff49ec-9948-408c-801c-76bf2f8eebc6",
        "cursor": {
          "ref": "067f9f0a-3235-4710-bcd8-e2a6a3a33d94",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4296d338-d15e-44a5-b3bf-21390494a1c6"
        },
        "item": {
          "id": "95ff49ec-9948-408c-801c-76bf2f8eebc6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0795d602-9acd-4956-9fab-8587b7ed3c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae41d784-78af-46bc-be7f-790998f7275c",
        "cursor": {
          "ref": "f0139a80-a439-4d08-bcba-b1b1de651a82",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e1a85b57-bfeb-4402-8333-553c626dc0b7"
        },
        "item": {
          "id": "ae41d784-78af-46bc-be7f-790998f7275c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "fa79ad3e-4a7d-4407-8dc4-f3b29f903e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e235978-3039-4f7e-8c40-d96f8e525e37",
        "cursor": {
          "ref": "59e04de6-bbef-400d-8c31-829c8907b71d",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "750262f4-7134-4a0c-a0f8-7b2da138f564"
        },
        "item": {
          "id": "6e235978-3039-4f7e-8c40-d96f8e525e37",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "2ca66a02-00cb-433c-bb4a-510b760624f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea763c71-cd19-4a59-8950-30d389683aef",
        "cursor": {
          "ref": "3919c974-ba12-4269-a3cf-2a7215771b0c",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2582bc61-bc0c-46e9-94fe-dbe7efde7216"
        },
        "item": {
          "id": "ea763c71-cd19-4a59-8950-30d389683aef",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "209f02dc-27af-4a32-9300-7fa5605a33b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e0e820-8d49-4ad6-bbed-f3bd07d92e06",
        "cursor": {
          "ref": "7f731694-61b7-43d7-a3be-059e9b314f58",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c1f2b8a0-3ff3-47c5-9898-dfdcf006ac38"
        },
        "item": {
          "id": "33e0e820-8d49-4ad6-bbed-f3bd07d92e06",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "89ed8cb9-d55d-4670-98e5-432ee22ee439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4c5e41-b97b-423f-a1b6-0a47441b46ea",
        "cursor": {
          "ref": "fb39c346-4d36-45ee-acca-7fc6c6e4a835",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7a70e8ee-ba22-4d4c-b486-b9d0c03fbd96"
        },
        "item": {
          "id": "7b4c5e41-b97b-423f-a1b6-0a47441b46ea",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "ac0f567a-f8a4-42d5-b2fc-d8a04de93766",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "d8c8e905-e431-432d-bc14-52b935aeabf5",
        "cursor": {
          "ref": "60f8e509-f7a9-4157-87e9-667abd49eb9a",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "18304ab5-febf-4ca3-8d25-091225debcb4"
        },
        "item": {
          "id": "d8c8e905-e431-432d-bc14-52b935aeabf5",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "d2f4c6df-c43f-4131-93ea-26766d823752",
          "status": "Created",
          "code": 201,
          "responseTime": 2132,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "704ee161-09d8-4efa-b604-b208ee0b927c",
        "cursor": {
          "ref": "8a361e73-4574-4594-9090-a56e4cd53ff4",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c938fe8f-2136-4bf6-82d9-42f8d35d5e29"
        },
        "item": {
          "id": "704ee161-09d8-4efa-b604-b208ee0b927c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a79babb0-bf65-401d-ac46-062e898b1fa3",
          "status": "Created",
          "code": 201,
          "responseTime": 2744,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6043b15b-22c0-432b-bc94-760f2766fb4d",
        "cursor": {
          "ref": "ab2caf85-516d-44b7-be5a-4b9c398caedf",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a5268375-5f75-4090-80f0-b5d77b2b4c83"
        },
        "item": {
          "id": "6043b15b-22c0-432b-bc94-760f2766fb4d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "224951ff-0c2c-4ffa-ad43-5d21115adab0",
          "status": "Created",
          "code": 201,
          "responseTime": 2355,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "68fd396a-fd33-40da-822f-201f135382e3",
        "cursor": {
          "ref": "0e5a35c8-2dc8-49aa-981f-d0c71a0d6cef",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0a24abdd-6f0f-4373-9bcb-e65dfc983b1a"
        },
        "item": {
          "id": "68fd396a-fd33-40da-822f-201f135382e3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "49360b7f-c84e-4c64-a654-b430c4096f73",
          "status": "Created",
          "code": 201,
          "responseTime": 2573,
          "responseSize": 1007
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "71553eea-ceaf-4e89-a671-09b24f90d5c8",
        "cursor": {
          "ref": "80e0bcf6-bf5a-4ca0-8f47-28e18cc05ae4",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8f63bbd2-61e7-4cce-a52f-7e34e964a48c"
        },
        "item": {
          "id": "71553eea-ceaf-4e89-a671-09b24f90d5c8",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "bc1a6da8-22c0-4885-a1e1-6c93007fa730",
          "status": "Created",
          "code": 201,
          "responseTime": 2334,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-09T00:43:18Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-09T00:43:18Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "88f50572-756a-46cd-94d1-ba55930a8ca3",
        "cursor": {
          "ref": "f90a56d2-c27e-4c80-8028-5b225cdd660b",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cd979130-8260-4821-b8f4-00dbeed06602"
        },
        "item": {
          "id": "88f50572-756a-46cd-94d1-ba55930a8ca3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d63b5aee-dbc2-4da5-adee-df0d11ea2d11",
          "status": "Created",
          "code": 201,
          "responseTime": 3588,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          }
        ]
      },
      {
        "id": "16386733-f962-456a-a052-183a2ca0d136",
        "cursor": {
          "ref": "6e2d0d78-9841-4b03-8b3c-256498cd06b1",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a641b284-5d29-49cb-a4d1-42bdb6c31a3f"
        },
        "item": {
          "id": "16386733-f962-456a-a052-183a2ca0d136",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "05e2d694-e18e-4fd4-82cb-84a8f2e42ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16386733-f962-456a-a052-183a2ca0d136",
        "cursor": {
          "ref": "6e2d0d78-9841-4b03-8b3c-256498cd06b1",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a641b284-5d29-49cb-a4d1-42bdb6c31a3f"
        },
        "item": {
          "id": "16386733-f962-456a-a052-183a2ca0d136",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "05e2d694-e18e-4fd4-82cb-84a8f2e42ea2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abaf460e-cc61-464e-8a3f-a3c7c007e79f",
        "cursor": {
          "ref": "92e732a1-49d1-4418-95e4-e56c9c7c77e3",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "12656add-c115-4048-9d62-573681991da9"
        },
        "item": {
          "id": "abaf460e-cc61-464e-8a3f-a3c7c007e79f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "60fccbbf-9a80-4226-8e35-abec16e64a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574537b4-a280-4f93-a66b-ff6b171e54e7",
        "cursor": {
          "ref": "b0dff2e6-2be6-48da-838c-389ca25b6de4",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7ba6debc-d50b-4b84-b2f7-8665e2f24953"
        },
        "item": {
          "id": "574537b4-a280-4f93-a66b-ff6b171e54e7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1878bbeb-d056-4427-81f1-b6c0626cbe9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea9cc5c-e22e-4fd8-8fdf-320b0e580b46",
        "cursor": {
          "ref": "7e085f59-d197-44b2-b729-d0c28162db9d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "67dbe6fe-bbeb-458a-a664-7570f0de7417"
        },
        "item": {
          "id": "0ea9cc5c-e22e-4fd8-8fdf-320b0e580b46",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8c2a40f1-dab2-4d75-b861-ed6ad86194c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc77efa9-0332-42bc-871b-c98ea13e00fb",
        "cursor": {
          "ref": "78163e7c-a511-49bf-adc5-da7a64dfc509",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8b4103df-2ff2-4be6-92c3-e7f1d3efb13d"
        },
        "item": {
          "id": "dc77efa9-0332-42bc-871b-c98ea13e00fb",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "983cd738-a3cb-4173-9800-c28df95e8de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a91660-25a4-467e-bc1f-0159af548c48",
        "cursor": {
          "ref": "6fffdc3b-480c-4dda-b671-3014930a9ef1",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "06c36b94-80ed-414d-bc21-d39a52d32760"
        },
        "item": {
          "id": "36a91660-25a4-467e-bc1f-0159af548c48",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7b5a5d8c-48d7-4ffc-b150-5b1a22a71a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8550dd31-cbc9-4ef6-95de-0765064bfae0",
        "cursor": {
          "ref": "d6fe5792-61c0-4f35-9d3d-ef8195c06466",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6c8b1027-d595-4395-b92d-47e1cb566b15"
        },
        "item": {
          "id": "8550dd31-cbc9-4ef6-95de-0765064bfae0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "abb0db5c-0215-4dae-9961-74649382109c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd6f23b6-9383-4740-ac29-4ca19ecf2084",
        "cursor": {
          "ref": "9b550f88-59d9-4726-b029-6ee8be27d38e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "50a15020-a790-4c1b-bbb9-ca46999f13c0"
        },
        "item": {
          "id": "bd6f23b6-9383-4740-ac29-4ca19ecf2084",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "106a6b3a-64f9-4aa4-9ac6-dcce66413161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f79154-53f9-4ef1-a1f9-6cf94e16db1c",
        "cursor": {
          "ref": "689afd0e-af51-41ed-ac51-04be3cb20d4d",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "886afe11-7518-4dd3-bb87-15f50c48e95c"
        },
        "item": {
          "id": "51f79154-53f9-4ef1-a1f9-6cf94e16db1c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a6782036-c4e5-4eed-9593-46a4ced87f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ebe2bf-c834-4c66-a27a-ead1fde76ab7",
        "cursor": {
          "ref": "60a5f996-2657-4921-88b1-8b0705acceb2",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5cc0ced7-ce2b-46f3-b2ed-5eeaafc63d66"
        },
        "item": {
          "id": "80ebe2bf-c834-4c66-a27a-ead1fde76ab7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "cde125f2-55d1-4259-aa52-0d13a9639391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37964891-3099-4a16-afbf-a0db5dd469ab",
        "cursor": {
          "ref": "76dc6b1a-156c-400f-9ffd-90648bdeeff0",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "24bb2fac-15ba-4188-8bc7-9bae10c0eb01"
        },
        "item": {
          "id": "37964891-3099-4a16-afbf-a0db5dd469ab",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "916c3df5-ed72-482b-891c-c85400b27d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2fab09c-ebe1-4434-b80f-40907fceb997",
        "cursor": {
          "ref": "d22b11e5-b88b-4afd-a11f-7bd3bb0f5c69",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7bdaa294-9cee-47e5-9202-b54d63d968ee"
        },
        "item": {
          "id": "d2fab09c-ebe1-4434-b80f-40907fceb997",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "1fb0f9c6-350b-49d6-946c-df59f37a8f07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "673edcf0-e31a-4d82-8583-78f5f12ebf85",
        "cursor": {
          "ref": "163b13a9-2c12-47a2-9b8d-ad0395357860",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c29c5e44-a701-4f20-8b91-9f5d0cc918b9"
        },
        "item": {
          "id": "673edcf0-e31a-4d82-8583-78f5f12ebf85",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "be9e72f5-6b52-45cf-8f4e-819612daeee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7abb08d-8deb-495d-9ffc-4211dfde66b8",
        "cursor": {
          "ref": "e7bfd9c5-dd95-47ad-ab8b-840b118b62b8",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c6affc99-d6d5-41ad-85cd-fdf1ac92b211"
        },
        "item": {
          "id": "a7abb08d-8deb-495d-9ffc-4211dfde66b8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "950c3284-7ca0-47a9-aaa7-c21b4a2c6cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b69a785-3e22-428f-80cf-df156f2c296a",
        "cursor": {
          "ref": "117aea19-0022-4542-86c5-30fae87797f5",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ec4102d1-46a5-4f2e-b90a-d544ef362ce4"
        },
        "item": {
          "id": "2b69a785-3e22-428f-80cf-df156f2c296a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9abcbe99-1404-495e-b6c7-b902af123512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c228e37-9a13-427f-8657-611ae9b265f2",
        "cursor": {
          "ref": "7198a8a0-77c6-412b-ae91-72b7656e1afd",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b24abf81-05b6-44f3-b1c1-4471159f921d"
        },
        "item": {
          "id": "5c228e37-9a13-427f-8657-611ae9b265f2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "07542cd0-0b34-4663-b700-2f65940fd61e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac477955-d65d-42bf-a84f-51362aed1b44",
        "cursor": {
          "ref": "838ea901-87e6-46c6-95f9-096ea0249737",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5126bd4d-8a2b-461e-a1bb-e8c93ce5f295"
        },
        "item": {
          "id": "ac477955-d65d-42bf-a84f-51362aed1b44",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "69429ed9-d9eb-4597-804d-5945744692ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe9bab8-27ed-40ac-835b-26da1e8a0721",
        "cursor": {
          "ref": "69fddc8e-0f85-4942-a303-00055e412598",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5c8c35fd-e3b7-42d9-bfe7-d0a7c50d1e62"
        },
        "item": {
          "id": "2fe9bab8-27ed-40ac-835b-26da1e8a0721",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "de494e01-87fe-4fb0-8cb9-d5ca384b5e25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fa6f0d9-3fbc-4a2f-bbcc-fc7172a1bc94",
        "cursor": {
          "ref": "64417451-b563-4c40-b5d4-29df73575b28",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "93a92986-d311-403e-9277-be7a067cb14c"
        },
        "item": {
          "id": "9fa6f0d9-3fbc-4a2f-bbcc-fc7172a1bc94",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "657d9c02-5673-405d-a1da-186c7cbfa1e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac53e24-f869-4c35-a6ee-061745051cee",
        "cursor": {
          "ref": "171c73d8-49fe-4f93-a4f6-f31ab56ba039",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "aa4fbbf1-d397-4703-9b72-4e42df69d93d"
        },
        "item": {
          "id": "fac53e24-f869-4c35-a6ee-061745051cee",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "72d9b0b4-fccc-4da5-84c6-fe7d943c21e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87f792d-a7e7-4d64-a6be-1db1cda9fd87",
        "cursor": {
          "ref": "4a373ae7-d2f9-4e73-9da6-c25b66e9bfd7",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a4307fb2-5cc0-4742-b9e3-efc5d925b31c"
        },
        "item": {
          "id": "b87f792d-a7e7-4d64-a6be-1db1cda9fd87",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b7ee759b-2dfb-4924-a2ef-15189b5d30ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06ee8e60-255a-4c04-a146-04d172950270",
        "cursor": {
          "ref": "0e3698de-b825-49b5-a34e-ec56b0cac557",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9154fe10-d367-43e6-8a40-c08b70c4b566"
        },
        "item": {
          "id": "06ee8e60-255a-4c04-a146-04d172950270",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6353b710-efbe-4d31-8214-cdd399f4fa3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7716e3-e642-4e3d-b713-ff8d09fdd488",
        "cursor": {
          "ref": "0067bed2-b0ba-4f49-ac48-4986497de16b",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bb2d01a7-ed0c-46d8-a1bb-4130db6569b9"
        },
        "item": {
          "id": "ad7716e3-e642-4e3d-b713-ff8d09fdd488",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f1801e4c-873e-4677-8b27-cf3aa00e1282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1470e62-6996-41b2-aa2b-377f162da6d0",
        "cursor": {
          "ref": "dd31607e-7270-4a64-bb3e-4d1ac581d993",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "6dcc8f03-4b48-4079-b081-bad2ec5b6d5b"
        },
        "item": {
          "id": "d1470e62-6996-41b2-aa2b-377f162da6d0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "93083bb7-1acd-4d3e-a725-21533cf19856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d8679e-4ce5-428a-98a9-2b1b751bfc8d",
        "cursor": {
          "ref": "c3b3ea84-8656-41e2-9bbc-bd5c2a63545d",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "863c7e65-7754-4456-9109-4fb91b847ecf"
        },
        "item": {
          "id": "03d8679e-4ce5-428a-98a9-2b1b751bfc8d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "beafbf48-4604-4df9-8d35-38eb04fcbf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cd2303-be29-42c1-8b40-f69249d4948a",
        "cursor": {
          "ref": "151528b7-4cca-4f6e-8272-f7ac2234b436",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "60e0488c-dc58-40f8-bd7f-142c3776ce1c"
        },
        "item": {
          "id": "53cd2303-be29-42c1-8b40-f69249d4948a",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a289fb8e-54a2-41c3-b656-71e472e6392c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfa11bf-2e5e-4e79-97ea-6e942cb67838",
        "cursor": {
          "ref": "fe9d37ad-d97d-4615-b34a-6a8ced236deb",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2092dbe3-c90c-430d-9c23-0c6ea23dbc76"
        },
        "item": {
          "id": "2cfa11bf-2e5e-4e79-97ea-6e942cb67838",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "629a91c2-5108-4f22-ad5f-59d61a34e9d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caebdb79-05cd-42fd-88f5-383e6fa0fbd1",
        "cursor": {
          "ref": "909f1491-947c-4821-a5a8-7ab4db5b519e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a31d48a9-4437-49f1-8c31-1607d74208cb"
        },
        "item": {
          "id": "caebdb79-05cd-42fd-88f5-383e6fa0fbd1",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b8a7054f-f1b9-43e6-9d72-e13ac71510a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879448d8-981d-4fa9-8439-92cfec4c40fb",
        "cursor": {
          "ref": "3c661aa6-bfd2-4f28-9641-c3b233d2d273",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "72095d1b-426d-4112-bde3-f33f1cd17047"
        },
        "item": {
          "id": "879448d8-981d-4fa9-8439-92cfec4c40fb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bbe5da5b-5699-4271-b015-94a03c2cc5f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876ce9ff-7da7-4f72-a235-80e065dd4386",
        "cursor": {
          "ref": "e66e2344-1760-4428-9743-367484115e91",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4738b205-992c-42ad-a801-d09f2966da68"
        },
        "item": {
          "id": "876ce9ff-7da7-4f72-a235-80e065dd4386",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4590272a-f709-42bd-bc60-6b413fa331c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfebdfc-ab64-4833-b68d-a2df9b2ae9a9",
        "cursor": {
          "ref": "9c205149-c73d-4173-96d7-4a7d4b6f7a4f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "602978e1-f41b-47a3-80e7-3fc0bfe72fea"
        },
        "item": {
          "id": "7dfebdfc-ab64-4833-b68d-a2df9b2ae9a9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9ad782a3-706c-47cd-bd07-1ae85e2db0b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faf3c083-26f1-4ec6-ac09-4df9d8d06908",
        "cursor": {
          "ref": "cf800875-9185-4ef0-9373-7986a2422e31",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b95ccc25-87b9-4159-8b1d-d2d7305bf1f3"
        },
        "item": {
          "id": "faf3c083-26f1-4ec6-ac09-4df9d8d06908",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2998b6a1-7245-46e5-9064-a71a84a6a441",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c283302a-b262-4d26-ae56-deabaa4896ef",
        "cursor": {
          "ref": "9d79fe3a-d93f-484c-a1a2-aafd6b2e73b8",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0dfa12c6-6150-4a51-bd57-98802e42bd0a"
        },
        "item": {
          "id": "c283302a-b262-4d26-ae56-deabaa4896ef",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e6133667-4963-4931-ad30-edbd16a4a2aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "afdbafd7-d8b6-4c20-b037-5fc7a37a531a",
        "cursor": {
          "ref": "d34a18e9-2201-4133-b75a-d916ca7cbb1b",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cc40a2d2-195d-42cf-b330-968f7f0a386c"
        },
        "item": {
          "id": "afdbafd7-d8b6-4c20-b037-5fc7a37a531a",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "db683615-9a58-4e36-83ff-efb5b02e4ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "c7968dd1-a854-4ae3-80fc-ed62b903b90b",
        "cursor": {
          "ref": "38dcfd19-65fc-48db-9eea-62f9ee8524dc",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99360f52-3063-400e-926a-fb2c7c156eab"
        },
        "item": {
          "id": "c7968dd1-a854-4ae3-80fc-ed62b903b90b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "63bdbe88-4f41-46c6-acaf-8a3586040892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7968dd1-a854-4ae3-80fc-ed62b903b90b",
        "cursor": {
          "ref": "38dcfd19-65fc-48db-9eea-62f9ee8524dc",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "99360f52-3063-400e-926a-fb2c7c156eab"
        },
        "item": {
          "id": "c7968dd1-a854-4ae3-80fc-ed62b903b90b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "63bdbe88-4f41-46c6-acaf-8a3586040892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83ce85a1-15de-464d-a926-dbe1b6c2f395",
        "cursor": {
          "ref": "68870be0-4b6b-4867-b326-b54ed5653b3a",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b710ed95-b689-4fc6-babf-957d1e5a26d6"
        },
        "item": {
          "id": "83ce85a1-15de-464d-a926-dbe1b6c2f395",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ef1c3b2a-bc48-4fbd-8e98-647a36701a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b9bf2f6-984e-444f-a28c-0c164c45f058",
        "cursor": {
          "ref": "0bb2e432-ffb3-4c12-8adf-377b3497d5c7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0ae3a4ee-97b7-4d54-a055-6db9c52a9fc7"
        },
        "item": {
          "id": "6b9bf2f6-984e-444f-a28c-0c164c45f058",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "dc1c1823-7d99-4b7c-9cb9-5c2914b9e669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e179282-c70f-4ca0-b13b-b12d6730cc3f",
        "cursor": {
          "ref": "3b54594b-1d95-4cb7-9eb6-76a131e63ba9",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a9ed4dcc-1cca-4dbb-ac55-f3409e60076d"
        },
        "item": {
          "id": "4e179282-c70f-4ca0-b13b-b12d6730cc3f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7661d758-2e4f-4c12-bc1f-b829b67bacc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89d6aa0a-0fad-4fe3-9fb8-8d39a1892a20",
        "cursor": {
          "ref": "208f6ee3-761f-4f50-a5ba-0a0b51b29c39",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5958d510-984c-47c2-a091-2aab157bb0ac"
        },
        "item": {
          "id": "89d6aa0a-0fad-4fe3-9fb8-8d39a1892a20",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "48b9d3e4-f940-487c-b14f-422db6037b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25a9088-4f65-49d0-a3ca-5b620b1b066e",
        "cursor": {
          "ref": "6df95fa5-9751-4ab1-abab-30d8352b22b6",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "8dcf69f5-252f-43f1-aa34-167724c1a488"
        },
        "item": {
          "id": "c25a9088-4f65-49d0-a3ca-5b620b1b066e",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1cadc4d4-27e3-4674-bd5a-c6b0999f0470",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6131903-361b-4580-bb5c-d98b6e4a61be",
        "cursor": {
          "ref": "fb413ba7-2904-4fb4-ba6b-bd739cb5402b",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "47a3ba01-711e-4f09-89e5-d0777d466b54"
        },
        "item": {
          "id": "a6131903-361b-4580-bb5c-d98b6e4a61be",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f123718d-9ee7-4577-98a8-a1c43ec6a464",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa37ee1-8be9-4fb0-a30c-8b1690fcdb4f",
        "cursor": {
          "ref": "4736f809-498e-4f4b-8d58-d41990489308",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "be6bb393-77c4-4bb7-8331-0477881416b0"
        },
        "item": {
          "id": "4aa37ee1-8be9-4fb0-a30c-8b1690fcdb4f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c858c00e-97e1-4ad0-a4c2-b4307af8ca62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "131ae7f2-764c-4cf7-b46b-60abf28d4eda",
        "cursor": {
          "ref": "44e765fe-1bb4-4f1e-9716-5f3cdaf77a6d",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "055b3e87-671d-430d-b851-541efb6e9650"
        },
        "item": {
          "id": "131ae7f2-764c-4cf7-b46b-60abf28d4eda",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dd0c382a-d312-4674-b870-6f1b2ff94bf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "328d6eb2-aee8-4627-808e-69b2db928a20",
        "cursor": {
          "ref": "d9a3b546-0af8-439a-a3ed-7fc90fc1b3a8",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4b9c4793-40b0-48ca-8c66-74b7daee18c8"
        },
        "item": {
          "id": "328d6eb2-aee8-4627-808e-69b2db928a20",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "14272339-a8e8-4ab2-9873-e32ab72eabc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5a2a79-5d88-4447-8aae-d12f44bfcfc9",
        "cursor": {
          "ref": "47de71db-2fa2-4c06-abf6-ccfb76ce92ee",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "5042da48-5f7f-4d35-a730-3d51c08d0bb3"
        },
        "item": {
          "id": "ee5a2a79-5d88-4447-8aae-d12f44bfcfc9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "52f7c1dc-0d5b-4411-95cf-beb33ff67b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158dc966-39ba-4061-af34-5c64b1ca7bf1",
        "cursor": {
          "ref": "dea9b4f6-e710-4f63-aa27-d5ab90d51023",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "669ed249-9c80-4b52-aaf3-fbfd59a591be"
        },
        "item": {
          "id": "158dc966-39ba-4061-af34-5c64b1ca7bf1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "19ed2487-3321-48fc-9276-db8d736a26da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef28bac4-efbf-4d24-a4c2-b50bce39e15d",
        "cursor": {
          "ref": "76b8a438-1e85-4c40-88c2-2d944fe833fe",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c8d6f990-cb46-40f3-9a5a-50e0337195fb"
        },
        "item": {
          "id": "ef28bac4-efbf-4d24-a4c2-b50bce39e15d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "46986948-920f-4d4c-aa6c-a27bc24fdf32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa59cca-a190-41bb-b758-f31fc90569e2",
        "cursor": {
          "ref": "bfb5bb0e-b184-40dc-ac2a-e5a25145287f",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "add08153-7706-436b-a989-4a410dbd1764"
        },
        "item": {
          "id": "dfa59cca-a190-41bb-b758-f31fc90569e2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5704ec0d-22b5-4717-afdd-6fd3e58f3029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0e7f27-ac87-4cb0-bccc-d4329bb272ed",
        "cursor": {
          "ref": "80405431-00b7-4dad-9519-4d7eb8cea773",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8a784cf2-4b3c-445b-98dd-aea49c97fcbc"
        },
        "item": {
          "id": "8e0e7f27-ac87-4cb0-bccc-d4329bb272ed",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2bb86e28-9f7a-4690-a033-01d92f9afb8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d74dba4-2c46-4991-b4e8-3db579838226",
        "cursor": {
          "ref": "832ff8f4-8969-4d3d-90aa-81cffad894bf",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "18ac71e6-41a6-4c97-99aa-ca716260d138"
        },
        "item": {
          "id": "3d74dba4-2c46-4991-b4e8-3db579838226",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "dad25afa-371b-41fd-94a9-4729dbf455fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88fec9e-86d2-46f1-be95-f947d9a715da",
        "cursor": {
          "ref": "bdce8e4e-573d-43ab-bbd0-cc7ddc527e34",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "974e2ec1-7fad-44ef-8646-918618bb5909"
        },
        "item": {
          "id": "c88fec9e-86d2-46f1-be95-f947d9a715da",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "da7fee12-b06b-4a16-b031-066a9b5644fd",
          "status": "OK",
          "code": 200,
          "responseTime": 368,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "76db5ca4-afbe-4b9f-824f-b39675ca2f47",
        "cursor": {
          "ref": "63a955b9-39a5-4ccf-97d5-99274f6ebe00",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4c591983-97ab-4a88-9f36-ddd739540f00"
        },
        "item": {
          "id": "76db5ca4-afbe-4b9f-824f-b39675ca2f47",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bf1d9450-5c2b-4a6b-8f1c-097db0f8d582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6255aaa8-a8dd-48f7-ab65-fe4bdceffee0",
        "cursor": {
          "ref": "a48d4789-4373-4c3c-ab8c-451087b55425",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d41dad41-b09b-4bb4-afd3-b5500280f882"
        },
        "item": {
          "id": "6255aaa8-a8dd-48f7-ab65-fe4bdceffee0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e1109742-98b5-4d34-b045-89c7750fd4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddb69e8-7070-4e5b-bb1a-d03471f3ec86",
        "cursor": {
          "ref": "f61c45d4-a156-4ac5-aba6-b3e2c2d4616f",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a83eec6e-9e30-4d2c-bd8c-dd0875dc76e5"
        },
        "item": {
          "id": "1ddb69e8-7070-4e5b-bb1a-d03471f3ec86",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e6ecd612-0b2a-4241-b0ab-49ed3073c28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c51e4f8-eced-4f7c-8c40-47f1cf183866",
        "cursor": {
          "ref": "649a6652-1875-4cfc-9e20-c65f6f54ab22",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "fc27fb65-6f77-4116-bd13-2513dd99adc1"
        },
        "item": {
          "id": "4c51e4f8-eced-4f7c-8c40-47f1cf183866",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8d61149d-2486-4f21-b536-2f4fbb4a95f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ffa852-f8e8-441f-9e93-90d9bdb707bf",
        "cursor": {
          "ref": "d6de8c02-48c1-4dc7-872b-80f8f3db2c48",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "1b610a4c-5981-4f9e-98df-af36fed440f0"
        },
        "item": {
          "id": "19ffa852-f8e8-441f-9e93-90d9bdb707bf",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5d758c6a-90cd-4376-89fd-20571fbd52aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7b0f9a-ccff-4ef9-abef-8adcb738cf5f",
        "cursor": {
          "ref": "3470bc08-dbcb-487f-a182-3db2c6266564",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "54330fc1-0156-499b-a034-218182993dde"
        },
        "item": {
          "id": "9b7b0f9a-ccff-4ef9-abef-8adcb738cf5f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9779ef95-0d25-4cb4-8e68-5590368bbc80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae24285-5b53-4031-bd82-263186d44fce",
        "cursor": {
          "ref": "05d7731e-302b-440c-bbf8-12b99f835513",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "43ee6b8a-9db3-4756-bddd-bcaee2b2de9b"
        },
        "item": {
          "id": "dae24285-5b53-4031-bd82-263186d44fce",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ed72449b-4fa9-432f-969f-6f67035ab5e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b91358fd-8070-47b1-ab5c-9bd813f3ba55",
        "cursor": {
          "ref": "a7a556ba-ae4f-40d8-8508-8ec0b1f02218",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b0dedfa7-d2f0-41e9-90c6-8248f91b7dd8"
        },
        "item": {
          "id": "b91358fd-8070-47b1-ab5c-9bd813f3ba55",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b55691fa-ee2f-496e-b16a-7411902495fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f486308-6b6d-426e-bca0-b97855ce9262",
        "cursor": {
          "ref": "7a54dc13-7145-4c7a-aaed-a8e80bc980b5",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "74c4899b-3f03-48d1-a019-45313919a438"
        },
        "item": {
          "id": "2f486308-6b6d-426e-bca0-b97855ce9262",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "67c72dd8-5628-46c1-835c-f231f6d796ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbafca6-d28d-41c6-990d-44b60eb3ce00",
        "cursor": {
          "ref": "5bd9a05d-9b48-4507-9225-23131e1b74a5",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "cf389275-b992-490c-ac07-0993e936ffcd"
        },
        "item": {
          "id": "9fbafca6-d28d-41c6-990d-44b60eb3ce00",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9713b3db-9c09-45dd-8e8f-ee406cfea110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61e2d8c2-845d-4339-8505-a216bc5edb5d",
        "cursor": {
          "ref": "3a2f7f86-583e-4c5e-80c4-cd985aa4268a",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "62620fe1-1d08-4d5d-b354-b6a6a1f861e8"
        },
        "item": {
          "id": "61e2d8c2-845d-4339-8505-a216bc5edb5d",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "11c178e5-3daa-450b-8b48-c3901f20b6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "606bb962-38bf-4fd6-8e25-7d1af76f1488",
        "cursor": {
          "ref": "03a2be87-3f72-4944-b00a-cbe2bc461b5e",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "dae603de-3cea-4ffb-9017-f38695febfd4"
        },
        "item": {
          "id": "606bb962-38bf-4fd6-8e25-7d1af76f1488",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "32decc35-a9b7-4d7b-a8bf-458dad1760cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6dd25b-40bc-450b-8f4f-82ba196d17d6",
        "cursor": {
          "ref": "6c4f9890-99ca-4f25-bd61-72cf5cc3ff91",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9bee9102-250b-4885-b499-70f57f9975fd"
        },
        "item": {
          "id": "8c6dd25b-40bc-450b-8f4f-82ba196d17d6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9dc26e82-08e6-4c27-85ec-c57cc71eaaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a75267e-0237-4b17-89d0-883a5ce3feaf",
        "cursor": {
          "ref": "f0eb939e-52ba-4979-bbdf-cc4cdb8c7fdb",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "dce03fad-7d36-4eda-afdd-54593e8558d6"
        },
        "item": {
          "id": "6a75267e-0237-4b17-89d0-883a5ce3feaf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "ece1685a-d87b-4fc1-a548-94a7ef89bca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493179ba-7989-40a9-94a6-a5e3d775e132",
        "cursor": {
          "ref": "359ef869-8f8f-416b-8d5a-060356669752",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0a8479a8-9805-413f-a0b7-b794628be059"
        },
        "item": {
          "id": "493179ba-7989-40a9-94a6-a5e3d775e132",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f57f2c4d-d0b0-44ff-898d-dd1f446787d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51687c9b-a175-40c5-ba4a-35f1b0f58e1e",
        "cursor": {
          "ref": "4fa82ac2-2068-4c93-90b6-22b4701ee723",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b74d42f0-e4ea-43dc-9017-9669f63ad9f7"
        },
        "item": {
          "id": "51687c9b-a175-40c5-ba4a-35f1b0f58e1e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "47584fcb-e35a-48c0-943a-9487df6917e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b6c06a-45a9-467d-8b40-a6f2d1c76ddd",
        "cursor": {
          "ref": "975cb687-19a9-4e2a-aaf1-a3c4433186e6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ee54aff4-e80c-490f-8070-739f1f96b9a7"
        },
        "item": {
          "id": "15b6c06a-45a9-467d-8b40-a6f2d1c76ddd",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "51cf2f11-537b-4c19-8ed3-1ec1ee60a0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c798da-cfb0-403d-a9c2-f3994c1e29e9",
        "cursor": {
          "ref": "18542cf4-e987-44db-97f9-661bd82b726a",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "bb714648-981c-46ab-966c-efca9da7e26e"
        },
        "item": {
          "id": "e1c798da-cfb0-403d-a9c2-f3994c1e29e9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f3d8faf0-28a3-43d4-90ff-fa5abf373850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "264952a3-63fd-4fa8-add9-069c10e5cb01",
        "cursor": {
          "ref": "98a3224a-5dd7-4c9e-bbca-2b9020f78d0a",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ee8a818e-dae6-42be-9792-a30b2a44f423"
        },
        "item": {
          "id": "264952a3-63fd-4fa8-add9-069c10e5cb01",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8f7ef4bb-9e52-4a84-aa2c-9b1029a10023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25539d6-e05c-45c8-b843-376995911f5c",
        "cursor": {
          "ref": "4d80dad6-45c1-4c5f-a46d-90182dc78f52",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3dce13f3-1ba6-4fa3-995e-d6ea1d232d48"
        },
        "item": {
          "id": "b25539d6-e05c-45c8-b843-376995911f5c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6326780b-9f05-49aa-91b7-357290fa96fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db427b7-ceb6-441b-a677-06767533d9bf",
        "cursor": {
          "ref": "428cc6fc-f052-44e7-98b4-b13f52d9309e",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f90e2a24-37af-4a23-8501-b40e9483f18f"
        },
        "item": {
          "id": "3db427b7-ceb6-441b-a677-06767533d9bf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5e54b249-c247-4d34-9105-8d0104409292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b0d6be-8fe7-4909-a521-3a7052b5c49f",
        "cursor": {
          "ref": "f31468f1-565d-4bdc-87ec-938af6cc8090",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fe3ce553-6693-4220-bd65-5e14825b4916"
        },
        "item": {
          "id": "b0b0d6be-8fe7-4909-a521-3a7052b5c49f",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "36be3c88-57f4-4c24-bd7b-e5322922f057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d36153-a891-4b0b-9f83-8b05f9871db3",
        "cursor": {
          "ref": "e8aa5f0e-5650-44d3-9ada-0c6db26e2a6d",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "be96fc1c-39d9-4930-80d9-5ef5a8af2ed7"
        },
        "item": {
          "id": "c2d36153-a891-4b0b-9f83-8b05f9871db3",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "45832a7a-61db-468f-8c97-b673834ccca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb724dea-9878-41f3-a920-b2e224f85d16",
        "cursor": {
          "ref": "c6a01065-a787-4fda-896b-a7221e806fcf",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f48d4f24-5bae-444c-b649-823e2b385052"
        },
        "item": {
          "id": "eb724dea-9878-41f3-a920-b2e224f85d16",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7edf90e0-b68a-467c-8db5-7f5e82ee3d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb31a12-37ac-4a14-9c46-b336527dfd86",
        "cursor": {
          "ref": "47a79db6-bd9c-45fd-b8a2-c063c045707f",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "26d68cac-ba82-4674-a704-468172ae02c7"
        },
        "item": {
          "id": "7cb31a12-37ac-4a14-9c46-b336527dfd86",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "004a70c1-f216-4ad4-b05d-cf6db1b48522",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de4dc459-60d1-4bae-b4f4-4f55c7e358c0",
        "cursor": {
          "ref": "2c365eb1-9a8b-4ade-9040-f64042b98df9",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6fdf1bf4-6571-452a-8b05-6fc3b47f7abc"
        },
        "item": {
          "id": "de4dc459-60d1-4bae-b4f4-4f55c7e358c0",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "66814eb8-1711-4303-851d-1b6f5bf55360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410474d3-bceb-43bd-9b84-6cf3a58be7cf",
        "cursor": {
          "ref": "913b8623-3141-40d8-b0b4-66c17d3a64b6",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "891f777d-7a9f-4d98-b898-df0741d6d3d3"
        },
        "item": {
          "id": "410474d3-bceb-43bd-9b84-6cf3a58be7cf",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6c405929-190a-4107-afe9-5ecca285e817",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81664e29-6946-4f6a-b925-177fe29d63d3",
        "cursor": {
          "ref": "b5abc098-986d-4dc3-9565-e264b6bf683a",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d7527810-8e6f-48d6-90ae-56c594341ebd"
        },
        "item": {
          "id": "81664e29-6946-4f6a-b925-177fe29d63d3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e4e721e0-70a8-4ef7-8256-355808b5cbbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896c7078-a6a6-4c43-b8da-00aed5d30f13",
        "cursor": {
          "ref": "11745206-8c49-4aac-a816-08dc49ce84ae",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c77b830b-903f-4d4a-b122-02ddd2b8ae38"
        },
        "item": {
          "id": "896c7078-a6a6-4c43-b8da-00aed5d30f13",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b65e1c37-b5eb-4ef3-b979-3845502223c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb840ea6-50ce-490e-ade1-db7eb2fcfa32",
        "cursor": {
          "ref": "77daa713-bf3f-4ec4-8088-bc48b67e819d",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8d602800-d4f8-4bc2-9c07-1e9192a7d5dd"
        },
        "item": {
          "id": "bb840ea6-50ce-490e-ade1-db7eb2fcfa32",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "0b78daf0-5272-4e3b-8ce1-fa1358bed98f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80c0eec-3967-4b04-acb1-e179a3b4b195",
        "cursor": {
          "ref": "21a733b6-a6a8-43ae-b352-b2b2501bd85b",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0d88154e-5884-430d-b44b-39261db8c390"
        },
        "item": {
          "id": "e80c0eec-3967-4b04-acb1-e179a3b4b195",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ed8f1dd6-2be6-438d-b046-88d2f1621dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b444dbfb-f231-47cf-9bfd-d8f76292066e",
        "cursor": {
          "ref": "fbf5411c-27ae-4ea4-b8c3-0e796d8a5c96",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1ce6d3f6-3a48-47e7-918d-47e081ddb7d3"
        },
        "item": {
          "id": "b444dbfb-f231-47cf-9bfd-d8f76292066e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6af3954f-8e5c-4012-9cf2-faa0ba5bc277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce41fe3-fcc8-4fff-9ed0-2f4d053c7c5c",
        "cursor": {
          "ref": "8fab4e02-147f-47a5-abe0-6522c162647d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "326ac449-fde6-4f71-bb17-41dc21b3071c"
        },
        "item": {
          "id": "1ce41fe3-fcc8-4fff-9ed0-2f4d053c7c5c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f805923d-b651-41f5-a9a4-b813f17dac9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e3ae17-4b92-4287-bbe6-0a1fdfc1a7de",
        "cursor": {
          "ref": "2bb51abc-f9e2-4423-adf4-1b703d596817",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b3e3a3d6-836c-4706-93fa-a7722cfc7c0b"
        },
        "item": {
          "id": "72e3ae17-4b92-4287-bbe6-0a1fdfc1a7de",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "c5c97fef-9350-4188-b955-c7084bfeb465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbd548b-c845-428b-843d-d8e83566dc05",
        "cursor": {
          "ref": "a4474421-53f3-4802-ae4c-217bf5379c88",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d9da1b25-f184-46ea-87b4-118f7c32893d"
        },
        "item": {
          "id": "5cbd548b-c845-428b-843d-d8e83566dc05",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "85439c4c-2ad8-4b43-ab11-6c501b8b5a6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5403ae-6f5f-4d77-a89d-f0eaaa9b37bb",
        "cursor": {
          "ref": "88e2e8c0-509a-42e4-afdb-01eac6c17577",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7c879d20-6f18-41fa-9e29-70f010415d2e"
        },
        "item": {
          "id": "7a5403ae-6f5f-4d77-a89d-f0eaaa9b37bb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "126cda45-72bb-466f-8e90-a5340514a5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73583895-7c38-49df-bd0b-05e1447cd746",
        "cursor": {
          "ref": "7f30065d-5836-4349-acc6-8a56b05e6f4f",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4368d3a9-e76c-4dc5-b736-7b1f536df4ce"
        },
        "item": {
          "id": "73583895-7c38-49df-bd0b-05e1447cd746",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7d33c36b-b87a-45dc-befa-2645a4ddeab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95358dc8-3536-4fcd-bea4-882c10e4840d",
        "cursor": {
          "ref": "e54b33fb-9132-4415-9e16-c4bc05ff6ec9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5918b0a5-1e8e-434b-b032-448421bc0369"
        },
        "item": {
          "id": "95358dc8-3536-4fcd-bea4-882c10e4840d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f6396aeb-ba3f-4612-ad49-038e720e1945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00681108-02df-4319-b9d5-2ff85b3a9fe2",
        "cursor": {
          "ref": "e628cbdc-696f-490a-9b5a-adc104080e0d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "39a5fe2b-5e99-4acf-8ffb-6e06b5745ebc"
        },
        "item": {
          "id": "00681108-02df-4319-b9d5-2ff85b3a9fe2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "518ce63c-432c-4590-90cb-1726f98ed4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15cbdad9-d872-4d3c-9fa6-99d7b2389c42",
        "cursor": {
          "ref": "f1b71afe-4d27-4837-9003-8d6b7871b3a1",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0a9e1b0f-7218-4987-8450-cc1000ba8e18"
        },
        "item": {
          "id": "15cbdad9-d872-4d3c-9fa6-99d7b2389c42",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2f2a7240-52ff-4692-9962-d83d3a8e4071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf16100d-985e-4548-ae75-54f74bfa4630",
        "cursor": {
          "ref": "c2d1cc87-7775-4a1b-a9aa-479909db9b22",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "bf3998eb-7613-47d2-bdc3-a3d130850c15"
        },
        "item": {
          "id": "cf16100d-985e-4548-ae75-54f74bfa4630",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "738f8430-9a96-472a-8657-56de5cf78f5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9373511c-efa0-4a9a-98a6-3ba56569fe53",
        "cursor": {
          "ref": "9352468b-bedd-4083-b636-f7434437538b",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33fc8e74-702f-445a-86aa-23590fb5b67e"
        },
        "item": {
          "id": "9373511c-efa0-4a9a-98a6-3ba56569fe53",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4d067f8c-8ae0-4bae-91c1-f391d3c84479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a351d3b7-91f8-4262-bc3b-3bb35869918b",
        "cursor": {
          "ref": "b301d88a-9fa8-4e61-b773-372d575bedc1",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "14de6815-ec63-45c7-87a9-f85868c7b701"
        },
        "item": {
          "id": "a351d3b7-91f8-4262-bc3b-3bb35869918b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3e5297cd-06c9-4e33-bf0a-aa4c5abb4f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfd6b24-90bf-4abf-aac6-a0224bc4f630",
        "cursor": {
          "ref": "5a65065c-2ed3-4434-b713-8d5e3b8a3747",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d72ec75f-a473-470f-9c0e-92b4cc9feb4b"
        },
        "item": {
          "id": "dbfd6b24-90bf-4abf-aac6-a0224bc4f630",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "5488a97b-1940-4da8-940a-c8b8c6a30dce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4df9e0-7a55-4209-a5e1-ac92ce47f93e",
        "cursor": {
          "ref": "1caa38f5-69a1-4ede-92f2-c4ebc300a91a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8817a394-a51d-4139-925a-ee8300f4bef2"
        },
        "item": {
          "id": "6b4df9e0-7a55-4209-a5e1-ac92ce47f93e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "84e1fab5-cf9b-4c6f-9425-ccaafdd82109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "063eaf9f-6b7b-435b-961d-4f04bc57d843",
        "cursor": {
          "ref": "23055921-20f2-4e08-a098-cab1a8909d6c",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "73cc9d3f-31ce-402e-bd5c-26cc1a85aaae"
        },
        "item": {
          "id": "063eaf9f-6b7b-435b-961d-4f04bc57d843",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "85bdf164-eb07-4b19-a242-2bdb1725a1b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e43c2b7-01b2-40d1-ac90-d470f307685f",
        "cursor": {
          "ref": "3d15b40f-4b3f-4dd5-b696-e17dd7156322",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "36fb787c-8d5b-48a9-b225-0bf8c2a9cb77"
        },
        "item": {
          "id": "5e43c2b7-01b2-40d1-ac90-d470f307685f",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6ee01ad3-5278-4569-b5c3-3e960135adce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1647bb4-7e14-49b5-abdd-357b0ea58e0d",
        "cursor": {
          "ref": "7ff412b2-c8c1-4299-903b-8376cd762d77",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "89978862-5f78-4aa2-a7bb-a4d5c76cfcab"
        },
        "item": {
          "id": "b1647bb4-7e14-49b5-abdd-357b0ea58e0d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9d8e1bed-747e-407c-bedc-dd09a05a9f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a6e4db-2d0e-4f48-a459-b6dca514cfe7",
        "cursor": {
          "ref": "222fcf19-2065-4552-8a6b-eb8adaad4653",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0819b02f-f6b7-49c7-8c98-7467f4394443"
        },
        "item": {
          "id": "03a6e4db-2d0e-4f48-a459-b6dca514cfe7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "93143d2e-8d18-4cbf-b301-9eb11024f0f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "305836fb-c068-42b9-abc6-7d71f472c2a0",
        "cursor": {
          "ref": "a933dad8-c19e-4182-9762-7beb7a51a922",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b2d7f7da-3ad9-4ba0-98db-c13233cf9e4d"
        },
        "item": {
          "id": "305836fb-c068-42b9-abc6-7d71f472c2a0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5bc115c0-e676-461d-b7fa-cd203e5624db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1286cb68-05f2-4758-a71a-a14c7c2b7fa4",
        "cursor": {
          "ref": "3c6acff1-2178-4af9-b32d-d6333a0b70cb",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "95cb10f1-88ac-453e-9496-d1232c38d3cc"
        },
        "item": {
          "id": "1286cb68-05f2-4758-a71a-a14c7c2b7fa4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5661fd96-60a4-4b19-ad67-e6a2a4b6304d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d3af18-b8f7-4e41-99cd-7bee936bf177",
        "cursor": {
          "ref": "957dc8a8-58d8-414f-b4f2-ba072f2688f5",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ac7fc6c5-c320-4af8-b731-cc7609c8b574"
        },
        "item": {
          "id": "37d3af18-b8f7-4e41-99cd-7bee936bf177",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "f20ffc9d-c1d7-44d7-bfea-deae8328df04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e4120fe-f54d-4896-92fe-f3c7d6f46a06",
        "cursor": {
          "ref": "932b8b36-b6a1-4c23-94bd-8ec385fe2a38",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a22a6e0c-bf9b-4183-aadd-10854e4d9cc7"
        },
        "item": {
          "id": "2e4120fe-f54d-4896-92fe-f3c7d6f46a06",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "32b5a16c-a130-4ca5-a112-0e1fb89abec7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19bfd47-8a12-4dcc-86d3-5b62e9fcb2a0",
        "cursor": {
          "ref": "d416bf78-8cac-4540-b5e9-d8c507c07609",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6b18d885-718c-4fb8-9c32-1ac688d91f44"
        },
        "item": {
          "id": "e19bfd47-8a12-4dcc-86d3-5b62e9fcb2a0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7ce1bf07-a9a7-45fa-977d-6e9c4f33c667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe2900d-3486-4580-9e42-afc566404ea6",
        "cursor": {
          "ref": "aa9939f3-d051-451a-9a88-094ffa05a975",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "54efb14b-9171-493b-8468-f1699aba19c6"
        },
        "item": {
          "id": "bfe2900d-3486-4580-9e42-afc566404ea6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "36a3d1ac-f7c5-4017-a29d-25c967ec11ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabae6b4-2231-4dbc-9e21-8592022d51bb",
        "cursor": {
          "ref": "6913f286-e1d2-49c1-b23e-b1bb9fa1fa50",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "32fcd240-c223-4704-b685-d9e45bef422b"
        },
        "item": {
          "id": "fabae6b4-2231-4dbc-9e21-8592022d51bb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "315dd2bb-8665-4474-975c-c26dc39d0303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e2e11e-572a-4e2e-b3ba-b0de1448ca71",
        "cursor": {
          "ref": "180e45e2-f90c-433f-b5c7-22e8f5dea580",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "287e457b-a297-41b0-8900-acb23bf79bfa"
        },
        "item": {
          "id": "d8e2e11e-572a-4e2e-b3ba-b0de1448ca71",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "4fcac6e9-2165-4f1b-9e0f-89b80a5b02e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b87d8e1-353b-42a1-aa07-b3934c47a67b",
        "cursor": {
          "ref": "ec0f3a8f-974b-48cc-b022-2ff6344a3cb8",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4030cfa3-6f54-4bfb-b7be-02649b43f3a6"
        },
        "item": {
          "id": "2b87d8e1-353b-42a1-aa07-b3934c47a67b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "72c5c6c4-2bb6-479f-9722-777c05f75ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a25ce6b-2c27-4b29-a53d-0bee8d46c4ac",
        "cursor": {
          "ref": "287aac14-f0b1-4c27-b57a-8555272d0c98",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3d9b1711-f338-4dfe-a017-4a5d3ff6b125"
        },
        "item": {
          "id": "9a25ce6b-2c27-4b29-a53d-0bee8d46c4ac",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "311c0a21-2e93-45ca-9d7c-9cb85ba88096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f64776a-711b-4fef-ba44-0c7135169cc3",
        "cursor": {
          "ref": "61720650-0e31-47ee-a518-1545cf075bb5",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a6f23e6f-6efa-4435-b1c3-1140fa2ffa49"
        },
        "item": {
          "id": "1f64776a-711b-4fef-ba44-0c7135169cc3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e927b111-dac1-4031-9d42-2fb259becb71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89dbf155-ed88-473f-9b03-73c434326628",
        "cursor": {
          "ref": "ec0257a0-aeff-45f0-967f-ec81e6d0f648",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5746862a-cdba-4875-a799-51e7e75d3125"
        },
        "item": {
          "id": "89dbf155-ed88-473f-9b03-73c434326628",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "048b1876-aaa7-4204-a1dd-f74a036b5d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9acff9b-b5bf-438b-8741-42230dfe6bc4",
        "cursor": {
          "ref": "5173e689-e9d8-476d-80af-45b4a451a5c3",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4aa6cdbb-a5c2-480a-b23d-2fc1643b4ae6"
        },
        "item": {
          "id": "e9acff9b-b5bf-438b-8741-42230dfe6bc4",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a756da45-5b2b-4e20-ab21-7a22cc0e4560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76c02b1-bf33-4000-8d10-f7903e73fb34",
        "cursor": {
          "ref": "584b9f79-428e-4658-afcc-7c6fc487967b",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "53b6c27e-4a41-4773-9784-f85c5d5479e8"
        },
        "item": {
          "id": "c76c02b1-bf33-4000-8d10-f7903e73fb34",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3c64c5d1-7da1-42f3-8d73-c022426ee543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3040dacc-97a0-4e94-86cf-5c43457c3b2c",
        "cursor": {
          "ref": "e3f955bd-cb42-454b-a0d8-005382d60752",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "05d3c10b-5553-446d-8def-8de8d4d242a0"
        },
        "item": {
          "id": "3040dacc-97a0-4e94-86cf-5c43457c3b2c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ee38ae94-c68c-4852-a364-a293704244ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92cf17fd-ec4e-4a4c-b69d-92346dae8dbb",
        "cursor": {
          "ref": "cac97330-c977-4cec-bb4b-07905f0d34a3",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fbe46690-c6aa-4788-9d31-b51222cb98f7"
        },
        "item": {
          "id": "92cf17fd-ec4e-4a4c-b69d-92346dae8dbb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a1b3e332-8184-4bb1-adeb-a22173b3e307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49fb65fb-b47b-42ba-90c7-d754f09b25e2",
        "cursor": {
          "ref": "b135f046-e124-44fe-9bd2-7574eadf7341",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "dff80257-cec8-4a47-8742-99bb02a7f821"
        },
        "item": {
          "id": "49fb65fb-b47b-42ba-90c7-d754f09b25e2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9b12cd0e-e11a-4b49-aaf8-215e015d1d23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0e85012-58f8-4034-93c9-a47609cb9317",
        "cursor": {
          "ref": "9a92f24a-640b-4544-942f-20a43cf53813",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "511f9e3e-c55a-49d7-8627-39a52ea137e3"
        },
        "item": {
          "id": "c0e85012-58f8-4034-93c9-a47609cb9317",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c3d56b40-65b2-4f63-b3c9-51c115e311cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c78cd3-94ee-4afa-b0b5-be39c218e9b8",
        "cursor": {
          "ref": "a89f2d55-c63a-406d-b34a-f1c6bad70747",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8bb228dd-4303-447b-b1ae-f4725bd71f9d"
        },
        "item": {
          "id": "51c78cd3-94ee-4afa-b0b5-be39c218e9b8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "98ab1a97-2a52-495a-9e67-c2d7470d4134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b4ce4d8-0693-4baa-96ee-11ef08263b32",
        "cursor": {
          "ref": "5b959f9c-adf6-4d8e-a050-a53956e12a5b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "10d26a35-d126-44d2-97fc-6fa9683f3213"
        },
        "item": {
          "id": "3b4ce4d8-0693-4baa-96ee-11ef08263b32",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b8e94f1f-14a6-42d5-b0ed-e66cf4101a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0e3da3-6db6-4b41-9b07-90e2e2dc24be",
        "cursor": {
          "ref": "e21fd90c-6d20-4022-b79e-a5eb09aba604",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "2d020066-3ab4-4c64-a88e-d3a755c890d9"
        },
        "item": {
          "id": "8a0e3da3-6db6-4b41-9b07-90e2e2dc24be",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "d3e1e9e8-8061-4318-ad98-9a58d2ee1e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33cf734-34ac-44d6-bdda-cb43c20bd82a",
        "cursor": {
          "ref": "b5c9ec83-93e8-43a9-8822-679438515761",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e8fbeeca-5d52-47a2-8abf-a1427d4c83da"
        },
        "item": {
          "id": "d33cf734-34ac-44d6-bdda-cb43c20bd82a",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5447d0ed-cb2f-47e9-b255-4ae00e881dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad98ffaf-8e95-460e-b339-6eca20628124",
        "cursor": {
          "ref": "215a7cde-bd6e-4fc7-b59c-b22374a9d5e4",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9fd878bb-737d-43ad-8bd5-4ce80f481110"
        },
        "item": {
          "id": "ad98ffaf-8e95-460e-b339-6eca20628124",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3e2230f8-c2f6-4559-8690-07b839d39b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836dad8b-339b-43a4-b748-e336cbebbfb4",
        "cursor": {
          "ref": "efaea180-13a8-413b-aa11-58ada31be470",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d06e3643-7fe4-4d5f-bee2-1fccd5c20bb4"
        },
        "item": {
          "id": "836dad8b-339b-43a4-b748-e336cbebbfb4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a34a3743-9ef9-4f42-ae9d-187651a39216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded5a25a-351e-416b-8b3a-3af26b170025",
        "cursor": {
          "ref": "2d3863e3-69f4-4039-8ec4-89ee8a30dc2c",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2596febe-1a6b-45d4-9e63-17ded5cb5aa5"
        },
        "item": {
          "id": "ded5a25a-351e-416b-8b3a-3af26b170025",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9995db16-c2bd-4b10-a222-5dcdf066e040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a09f5075-f6b7-43f1-8b5b-5551cb2ef3c3",
        "cursor": {
          "ref": "0f63e85a-e614-49eb-ab2c-99799d3b08cb",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "34fe2ef6-f2a2-441c-919c-2bad9fd66b9f"
        },
        "item": {
          "id": "a09f5075-f6b7-43f1-8b5b-5551cb2ef3c3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ab112dac-f3c8-4b2e-a431-21668fd11f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663fff29-ea0d-43a9-ace9-6f6e4aed413e",
        "cursor": {
          "ref": "0f202e37-3bb9-465d-b6ae-21996e077935",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "64871257-44fb-4e91-b70c-d99b26718502"
        },
        "item": {
          "id": "663fff29-ea0d-43a9-ace9-6f6e4aed413e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "382fc7af-3f93-4c71-a6f3-accd01eee5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb936f6-2d5f-42a1-9ad4-c579232f2bc4",
        "cursor": {
          "ref": "c3842ea2-5f6c-4bc9-bcb0-a66f6b4d4c9e",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b7c3fb37-a40d-4b62-9ed0-d9f268895ae5"
        },
        "item": {
          "id": "5eb936f6-2d5f-42a1-9ad4-c579232f2bc4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "942f2fe3-b1b4-4154-956b-c9a4df17de84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1011a358-8507-4744-b40b-e1f68cac6e46",
        "cursor": {
          "ref": "0ef1b46c-44ba-44bd-86dc-1f35d3840992",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f4051737-c05b-40da-98a2-b07cf9ca4c05"
        },
        "item": {
          "id": "1011a358-8507-4744-b40b-e1f68cac6e46",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "579e2c82-af55-48a3-b3d3-7ce7a8113113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31dd361f-0942-410c-bd7e-68191c1bb5af",
        "cursor": {
          "ref": "622a3334-199c-430f-9620-7e74f8e9ee40",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1f008839-49cc-4db8-8518-cb4ff6d74f35"
        },
        "item": {
          "id": "31dd361f-0942-410c-bd7e-68191c1bb5af",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "ae4f09f4-5801-4c21-bb45-040fe632d5b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8fc568-e39a-445c-97bd-80742eb908bb",
        "cursor": {
          "ref": "6c353fab-d0da-49c5-a18e-d446b333b5d6",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4b6c40bf-147f-413f-958f-5ec7a5674707"
        },
        "item": {
          "id": "9c8fc568-e39a-445c-97bd-80742eb908bb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3ee519d3-fe46-45c9-9873-350b020c6af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac437028-e6a6-42e2-97d6-8501816afa82",
        "cursor": {
          "ref": "aebb02f5-b663-4728-8fad-852c30e74711",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1099c50b-568d-484d-834f-34c901eed7e8"
        },
        "item": {
          "id": "ac437028-e6a6-42e2-97d6-8501816afa82",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "3b6c78fc-dcef-474b-a9f8-4fd4dcc4fa76",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "548b6568-28f5-4e0a-b823-6a9d257e1ee7",
        "cursor": {
          "ref": "3de44f66-7592-4f23-9a17-7c9713df790f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2e0aa68c-b9e0-4391-ac1b-505142b0bd8f"
        },
        "item": {
          "id": "548b6568-28f5-4e0a-b823-6a9d257e1ee7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3c63ee68-da97-45d6-add3-3764e541c6df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "746f58c0-9435-4c82-88a6-2fa5b0c580c2",
        "cursor": {
          "ref": "02c4f72c-2bec-4459-a1ca-1c61aff5dd50",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "74a3690a-2918-4420-9e0a-f67b9089aeae"
        },
        "item": {
          "id": "746f58c0-9435-4c82-88a6-2fa5b0c580c2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3275d343-e392-4124-817b-baa818bdfa10",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad8534e3-71de-4048-9fea-21de943d3e3a",
        "cursor": {
          "ref": "10b5da8f-e5d1-4ff0-b0ee-4ac14c283dac",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a80d449a-3770-4a66-898c-2e56bd77feb4"
        },
        "item": {
          "id": "ad8534e3-71de-4048-9fea-21de943d3e3a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8150fc07-b166-405b-b771-ba7d1ca416a1",
          "status": "OK",
          "code": 200,
          "responseTime": 1956,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b05dcba7-876e-4b4b-8c99-abf1db7d5148",
        "cursor": {
          "ref": "788417eb-fb8f-4225-8f88-71f7c9898248",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "8bdd9aec-368b-4aaf-9667-7a6efac95dca"
        },
        "item": {
          "id": "b05dcba7-876e-4b4b-8c99-abf1db7d5148",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "8bc9c921-27b5-4e7b-8cd9-3a1997de3ebd",
          "status": "OK",
          "code": 200,
          "responseTime": 2241,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d2d555-cc32-42bb-8929-acb99c86c0ac",
        "cursor": {
          "ref": "35cf1489-3c53-4601-827b-76dd38617ddf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ebb2da51-2ac7-4aa6-bc18-a33cdce58b3e"
        },
        "item": {
          "id": "52d2d555-cc32-42bb-8929-acb99c86c0ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38ba5228-7db0-41c0-a2be-81e4a0ffa437",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "52d2d555-cc32-42bb-8929-acb99c86c0ac",
        "cursor": {
          "ref": "35cf1489-3c53-4601-827b-76dd38617ddf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ebb2da51-2ac7-4aa6-bc18-a33cdce58b3e"
        },
        "item": {
          "id": "52d2d555-cc32-42bb-8929-acb99c86c0ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38ba5228-7db0-41c0-a2be-81e4a0ffa437",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "52d2d555-cc32-42bb-8929-acb99c86c0ac",
        "cursor": {
          "ref": "35cf1489-3c53-4601-827b-76dd38617ddf",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ebb2da51-2ac7-4aa6-bc18-a33cdce58b3e"
        },
        "item": {
          "id": "52d2d555-cc32-42bb-8929-acb99c86c0ac",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "38ba5228-7db0-41c0-a2be-81e4a0ffa437",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:245)"
            }
          }
        ]
      },
      {
        "id": "40047ecf-2fa2-429d-86df-a136518f0b96",
        "cursor": {
          "ref": "ada7f6be-6685-495f-bc6b-94d3a55cbda5",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "615ce14d-81c8-4152-a98f-f86e5b18f21e"
        },
        "item": {
          "id": "40047ecf-2fa2-429d-86df-a136518f0b96",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7f1714a6-2bc6-47ff-8134-9f5021de3dee",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ac502ba8-c145-42a5-a0c1-132ac80e2852",
        "cursor": {
          "ref": "59bc3020-5d04-4a2f-91be-203db61eb59b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "660e681d-0feb-41c8-8d70-a962f8c4f97e"
        },
        "item": {
          "id": "ac502ba8-c145-42a5-a0c1-132ac80e2852",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5d3444e2-5b1f-4e49-b72d-0c2d6f82059d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "ac502ba8-c145-42a5-a0c1-132ac80e2852",
        "cursor": {
          "ref": "59bc3020-5d04-4a2f-91be-203db61eb59b",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "660e681d-0feb-41c8-8d70-a962f8c4f97e"
        },
        "item": {
          "id": "ac502ba8-c145-42a5-a0c1-132ac80e2852",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5d3444e2-5b1f-4e49-b72d-0c2d6f82059d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "83df173b-d809-4ece-ace8-238acdfc97cc",
        "cursor": {
          "ref": "a5a8a6d7-b862-4b02-bedc-091993ddea4f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "9df8f0d8-f9bb-47d7-bf47-c51d9486e126"
        },
        "item": {
          "id": "83df173b-d809-4ece-ace8-238acdfc97cc",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "5043fbcf-3525-497f-ab44-ebb42d9cabea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 70,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "23e7e5ab-294b-40fd-ab60-7b493b77ae6b",
        "cursor": {
          "ref": "2b8b82aa-2092-4232-8cec-2f056b30b36d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c651a274-c237-40de-8977-9ef909396620"
        },
        "item": {
          "id": "23e7e5ab-294b-40fd-ab60-7b493b77ae6b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7aa0a1a5-48ac-4beb-b84f-2729de4a0c9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "23e7e5ab-294b-40fd-ab60-7b493b77ae6b",
        "cursor": {
          "ref": "2b8b82aa-2092-4232-8cec-2f056b30b36d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c651a274-c237-40de-8977-9ef909396620"
        },
        "item": {
          "id": "23e7e5ab-294b-40fd-ab60-7b493b77ae6b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "7aa0a1a5-48ac-4beb-b84f-2729de4a0c9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "7d4c0c9a-0cb6-452b-adb7-19c31d3fdaba",
        "cursor": {
          "ref": "c4e8a012-7df0-4f48-a10e-b131d733dd72",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e5c933be-ad02-49e9-9338-333ce1203a6f"
        },
        "item": {
          "id": "7d4c0c9a-0cb6-452b-adb7-19c31d3fdaba",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "71578d4e-418e-400e-818e-4e6c4669dc39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 66,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}