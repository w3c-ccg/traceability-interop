{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "904d977f-6ed5-4473-9666-a68af31c3b85",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4779571f-6f45-432b-8fed-a568fb67c6d7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b4ad81f7-5579-46c2-9893-d443daeaa1fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5e9a7814-0bf3-43c1-84d1-df1845bccc95"
                }
              }
            ]
          },
          {
            "id": "b2094509-3311-45c2-897c-656bee923d00",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5a000efa-c103-440b-9555-efca93bfaa43",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3637cd7e-1298-4c93-b2be-262077efeb0d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4419ed62-2637-4d20-980e-0dd9a9a35b2c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8fd72152-e7b4-40e8-815b-b253decc2d48",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e8a2e93e-242c-40c2-a80d-c1904119a97b",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4071ce1d-453b-4676-82a8-7ab2cd42e089",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dbb78a6-dc88-4241-aa67-5454a3f63dbe"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b0a63022-db4f-41af-a05b-44b26a6e400b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "edbe6b14-4b68-4616-bacb-351bfe916bcd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aa2a47c4-78c9-43f0-9f93-1c9d5ce3233f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e3d41e33-3629-4c7c-ac37-3eeb57687bdf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87cb4da4-45d0-4d94-b6ad-49a3eb9c1553",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0d2c6db6-37a1-496b-938b-1bbe4dd9b039"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1611b62-5667-4f66-b604-8b6bf46eae41",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a7751079-ef6a-4dd3-b8d9-ab53e0ecc4fa"
            }
          }
        ]
      },
      {
        "id": "34b256fb-3437-4ee9-a109-1b7347fd68f4",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1902d5c7-770b-4fbe-b268-290d7b819f0b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f4ae84e-3735-4d82-9ce8-69d055c8dde7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d89f4cda-c2f6-4dac-a9e3-1c6299699177",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de00dd4-6bd6-4dba-909d-899f12a3cd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "937594ce-9b55-43fd-811d-858e81a03db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f3845f2-9b00-4397-a35a-fe6fc6cba988",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c5660c-15e0-4e9e-a6c5-238004fa47f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "367e99d4-10f7-4262-aeeb-d20b40c038c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edaed79-7cc6-4ba8-af4d-c11b9febd49a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c2ac4f-0b90-43e0-8386-e4f5b1ecdfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6211e1b0-3f23-4ca0-af3a-9bc473691fa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d669d94d-2c60-4afe-90dc-fc9d2e2f0137",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bc7cee9b-791a-481a-a63c-7c9786659f3b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e49252bb-7992-4bd9-a7de-598776ac78f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb0cf5f4-4943-415f-8aee-348b62d5f1e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c74b9f-d1bf-407b-b60e-863c90d1ad9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7997dd2d-e036-44d2-b05f-37eb5a034c86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "66c96472-f279-43bb-a4d4-22de490c20ae",
            "name": "Positive Testing",
            "item": [
              {
                "id": "be6f1d42-1824-4e7b-9ed0-65b3a240b21a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9378d485-9ccd-4974-8301-b466efb5dbd1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c0dbc40c-8336-4d06-8c67-a32a3d4c9539"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac571b3e-f361-42a6-ae3a-9a5b2ac67cab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "22526c37-073f-4b3a-9916-3b6f2e23a17d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1496cfb2-752d-46e2-b431-33ca70fc75d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e99cfca2-587c-4b6e-9a6b-8e08deab5d7d"
            }
          }
        ]
      },
      {
        "id": "caf8304c-f013-4c4a-8c41-1ea147fad7ff",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f80485eb-ba3d-4cd1-a0fb-f6d727c7b8cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "031fb214-21ad-485e-95ba-547a9ec20f27",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b87ad043-bc36-4f6d-a6ba-98eaf4278a4c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf94354-f688-4572-b204-5755b915291a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c730bbf-6460-4c8f-9d5c-415172291c5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a524ba66-888f-47c8-8d6d-ff3db371dda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bbdf2e8-434d-4f84-9352-716063d5d3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54345201-b7b4-4ac4-9659-6be2b1dff7e8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4d4f22-6b24-4cad-8959-443f660a3f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c05319c-dd9c-4dbf-b89e-302b82e242d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0eefaf-45a9-47c2-ae07-0cd0e4a3ccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "431cc57a-bb74-4a95-bfc5-dc9d76466c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c847b2ba-c9ac-4877-84d9-dc04e662461f",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "124a8f89-f15a-47cc-9a6d-ee231733235d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801dbc6f-9aa5-4255-9638-3d6cc05a6d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7025d05-aaa3-4219-b7d9-46e9045130ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b1592f4-81c7-4fb7-80ae-bbb2a55ef159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a61a31-f40f-4635-b9ec-a9f8904276a0",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "041973c2-21c1-4d8c-96e6-983aede7f676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6db8b807-7522-4303-9788-577a54818a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8b97bd3-556c-4bb8-b8fe-469bdbf3737f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c12ea9d4-55d0-461f-88f0-a2de886da35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11fa359-28c1-4625-8fe7-9ea0fa5c284c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00f04f6-e8ec-4ab5-9185-525f7f93190d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e8df6b2-03b5-489a-ba39-63e94fd0e583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b50d2ce-74d9-4825-8856-ae737aba6662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78815bf9-724f-4a5d-ae03-0be2ba876521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8eba011-fdb4-4b73-8196-da75f89eef71",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eca14c-bd89-4f10-8593-1b021f03f471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f0edd29-e411-4f02-81cb-0db7e7659fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a144b57d-baa4-45d9-b259-c99bcf7cff65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "05c9812e-5a11-40dc-912b-548de8e45ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b37ced-137b-448e-8f85-ef83c9691af4",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f2897c-f80b-415a-9a58-4444362f92e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098ea96b-53d0-4e38-8285-b4b822692f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddcb3b6-b367-4249-a990-afd54e5f2e7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54150959-1874-40a8-92f0-bf96534ca485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9641fed9-04fc-4e39-8921-a9bb582bc935",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e2a8d5e-b69e-4455-aef8-24f282fa6a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1359e0-c452-4de4-b8a2-ffc1ff162c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f55690-004c-4573-883e-9ab8eb4a077f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0001ee75-9cc4-41c5-8fd7-7dc49b94cb3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e44dec-e8de-40b8-bb78-30d39a12f0d0",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5dbd88c-014d-4f0a-b9c4-b363ba25d93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69670855-4581-457a-828a-36998fb5c460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524a2b00-166f-4f17-b09c-1af77974097e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2333408-a77a-40c4-bf06-f360c1a86ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837dcbbd-8db9-46ab-9a5c-74b5b61cc3d0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acaed7a3-c3a5-450d-9770-3694a5a039fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bff5d438-7ae2-450b-be95-97309618b8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72037c3a-9f4e-4607-85ac-84c3c6c0bf68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec684783-faa7-4d9f-985d-6c31ded7e545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa5d2597-6093-4614-9b9a-5f9dc4ca238e",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bec5d90-11f8-40e4-8a31-6819d772eb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31aa146e-176f-4511-b8de-25228f271e0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abd035f-98d3-491f-9ba9-9d26f0a1b476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efe771c2-3e10-4adc-bd88-7d0cc0cd92b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660570d8-66df-42c1-bf41-459962416d80",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bede286-c691-4fe4-8fef-ee7a9ac6817a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "445bc60a-0cf6-443c-b650-3d5cc619c096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290f4ac9-9a13-4ccb-8982-ce0efc704e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf63f348-d49f-4160-9ad5-2441f4d64909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373b7754-30c5-47e8-9557-60b1c44d22c5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c9834a-3dd9-48a1-b416-3561a7840fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e19523f-60f5-41c7-8c25-54ba62e2c0a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ce0330-bc77-4785-8438-d7b411d48579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80a8c73d-4136-4c52-a727-5066d343cce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac35980-b727-42e1-8761-315e0a321e4e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a7dc12c-dc4d-42da-84bc-211415991934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d92f632-676c-4162-87c3-c1a3b160960b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6884de4e-68fe-47df-bb66-f051b0f11923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f74d6215-306b-4dd4-b4f8-409f5422f935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a76a264-457c-42e9-9375-73108fa25c1c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c7bd72-d8bd-44c9-a248-faaf3a363771",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc221b1-2d81-4a8a-b25f-15199f135fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee135724-0739-4550-a404-aa10a2c79c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff5db330-e8ff-46d7-86ce-81028c2871c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1ea94d4-bcc3-4588-8adc-94a58962a59e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9cac3ac-a46a-4fda-beaa-08c5dc29aaa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275dd327-d2e9-4a60-98fc-0c306ac02e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e5e26c-5474-405a-ad4d-90fdc49301a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c98ceecc-0f76-4319-8aec-e318709e2749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d36979-ca5a-46be-a19a-632c7f1e6c8f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd2275d-6dbe-42d0-a002-dcbc204b6467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6842d27-984d-4ed8-b625-64c0b0941b36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042e97dc-8e92-47e5-824b-fb41fdb6c895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53c439cf-9e89-4781-a91c-af11c0a598d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b174665-4c8f-4dea-9ea7-0bde4d46d40b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046d2389-72f3-450a-a61e-097e57594fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5314a3c4-08f5-4f28-afb8-f0cca93b8e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80f287f-fd3f-4489-a1cd-07150c122742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "625de481-7d34-4d3b-be3c-f548f2cdbf0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9506fd-1469-4891-a2df-0cc711c23b97",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f212f94-053f-410f-bda9-7b7f5570e377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49378029-d314-4c12-843f-db774db42a0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c687c0c2-154d-4e1c-87d1-847acc6845a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5122fd2-eda0-4734-a070-a06931ead27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3970d14a-d219-424e-8644-714fd417520b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab3f049-2e2d-4b06-a48f-746c90908a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e2912b-6839-4d7e-82f8-4f4519b4ba80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49b19f7-925e-46d0-a854-d14f7ef752f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a92612f4-4fee-44e3-862b-66ebe1d08245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e571fca-dde2-44fc-96a1-e522828ae4f5",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2f0de4-cb28-43d7-94b4-c6ce53809bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a73d68-1ff2-4d3d-be1e-581a8cb03a31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0deea60e-16c5-4294-bf08-7e7a9d7d33a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac90060b-86e3-4ac7-91de-358e7d9fed46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd60e26-35df-421a-b77f-68305f2e9438",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a646da-fda2-43e2-b5a6-d9bcdc8046e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5315b544-fc1d-47e0-b210-edebeff7b4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffd6ced-f6d2-4bd5-bb07-db5f1490f6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cbc2c9e-3ee7-4978-9728-c07b2e128726"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5543d463-1774-4a61-aa9b-381b28e85930",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077be71b-5a37-4416-9833-64864580effa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0edfc67f-2e1a-4355-a24f-dd56b7636bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f628a6-4e00-4c40-a203-4ccf15cb7a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "407f5081-71e2-4bcd-8b80-0a55ea52a249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d48178-d356-4007-a55c-48a4292dea17",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1d1054-fc9c-47a8-931b-c16471cbd290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f4b37d-5c0c-49d0-89e0-19bb2321a24f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11cffc96-6066-4431-bb15-57413a1b53fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7316188-543c-4b8d-aea3-28e7259e52ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63308e49-9c8d-459d-b5f6-370ea6d0509e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d82cc05-0a00-4c60-a7ea-f584d5ea798a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a89512f3-8939-4649-a34c-5ff1bfffe8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd4465c-48b9-4fc8-bf10-7285baf72fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2538deaa-9eb5-4e0f-bb2c-2897b2405eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f5b544d-7917-4f2d-8e36-d9c37b4fd217",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe2fd2b-8a92-4951-bd2c-412bb2c261e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2493f9a1-04ba-467a-b58b-1360dbcaf043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ef37c4-b537-4fee-8409-7e26b5a1f411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c94603-9a6e-4e6e-9eae-d7ba620bd0fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdeb4aa6-97d2-482b-9101-5b98dd57b356",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce269593-b25b-43ec-ab5e-40c318de0cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c56169-f4bd-4368-a93c-0d53ed13de4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ddf14d5-1db2-4898-a5c9-18dbd8aa0cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b05d4969-1f9e-47aa-bd74-04f71d797fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c03e20a-20ea-4b85-8953-f54de38404f1",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4db41f-daaf-468b-9bd6-98affa746763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce05edbc-29ce-4137-a2c6-0be7090ee8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30a5677e-3a9f-4f0b-8acb-f41cbac7a38c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13d66f41-fe2f-45be-93b0-649dff9c1b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a102d2c-a091-46f2-9b2e-3085db7a418a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8907fe49-2b00-41c8-8c04-eed907e457a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40c38eb-0c38-466a-add1-3952b9d03aec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eff0f398-0f34-4252-bed4-6928022617f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b3bfb9b-9f3f-4595-8dc7-06c869153343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d451db09-e2d4-48ff-bfe1-0ad0d8c73a90",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea647598-275e-473c-b9ab-6c74e8ca30d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76d2f63-2563-4441-ac26-511dcaf91abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45952832-1b27-46cd-bea6-638901346fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b4715e2-2627-478f-8f5c-de82fe24e233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b437b7c5-b950-4180-a521-522128bf93c3",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef1592df-cf9c-45ec-a406-ec75ba52eae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20556a29-6733-4d2e-a049-193ce87f9594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abea7b1b-2563-44d7-bf9d-038aac1304d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "adb2557e-c981-4795-a337-8d093c181768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e54dc0c3-4bfa-4720-8d95-f5d8b12b1d97",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a72ecd6-d46a-42ec-8b2f-3596e711befd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e3d941c-4093-4da2-b0ab-5c9aa52303d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9e7e1f-f310-4029-834a-697346379157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6e9800-eff7-45f2-90c7-ed819f39003f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58c1fbb-3ea1-4eab-b35e-1950ea6c39b8",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f57c08-5948-4f94-8839-9592e8d373f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4930af51-1918-4174-a0aa-59bcbf9c4fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d30d4c-48ec-4814-a5dd-2aeefce9e97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dab58888-f5f6-4fcb-b021-07b2baa930a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a778110-6b8e-4de9-ac8f-3b0da781ffdb",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17ec22e-bd40-4758-b74a-765870b40fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "116a5ed8-d33a-43ce-b388-7cd822608f1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5070ebf-607e-4081-963f-9eb6e417109e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41282500-8da6-465c-8ddb-7ee2c38b1ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe7ad8c-ad72-4ca3-9727-5d8434a27277",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43c0e663-8bc3-4f16-a568-ae679de2d646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae11f8c4-562a-4e89-872f-8bde440e7321"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9deb4b73-eab1-42ec-b585-f17b69bccc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "37bcf763-ab64-4a97-b9d4-c23b4165cac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7cd337-3fb2-4c16-a735-b1cbdbebee0a",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa870df-abe8-402b-9cba-876c7d7654ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f3cd273-e30d-4fde-ad10-12b9f7b2c0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a3e27df-e5eb-4990-acc5-ad923301c8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75a30dd0-1253-45e5-8038-e5d4c6e8164e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea9fde7-1bff-4f88-9858-343cc13d3c68",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5742df91-e3d9-4154-b36f-08d2e5a7b798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5590556a-59be-4d05-81a1-4d2f35e90957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55550072-38a1-48dd-9065-5059811deb5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f9b850d-46d3-4150-b029-2a87c57f30ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2619e1-7866-49f1-9633-71a7ed53c8c4",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54c727c2-d7cd-4952-9758-009b63480e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38cdc794-bd53-4b0d-bcd7-cddba479104d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "607f6f3e-4986-4825-9f3d-8bfb4039e8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "914aeabd-ac75-4dfe-9dec-3543dfa8c4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8335c51-17d5-4b88-8a55-61a021293f31",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1952f0b8-3eb0-46a3-8ed6-3f6558c249ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9c2cb53-beff-420a-967c-a3a5e600177c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9629931d-d9c1-446b-b1db-f383a8869b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9499d795-eed4-4199-9d81-628c48103b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa17157-1da3-41f1-a263-312b5f4671ae",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "424e0f6c-212f-41f7-b35b-9546ef993a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373cc19b-babd-4a23-9657-67ac874bde2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0203ba90-2069-4c56-b57d-90570a79db1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b9b0980-358f-40ce-b558-75a25d0a9a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2866d3e8-8f7f-4c22-9274-a116a625a2ff",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71dae73e-98fd-4347-ae12-a12b5026e420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de098ee-a3bb-4fc3-ada3-d22199f8bf88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a138fa5-6b43-445b-b918-b5420c818506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80b291b1-0e6d-4533-ab46-bed9b403c3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe09b41-0e4c-4563-ba9a-895bb696b7fe",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53737795-59cc-450f-b94e-33b514c7ee62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a191e19-be47-4c6d-b27d-6b8781f94628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03c942d-21de-41c9-860a-47b4c2ff318e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7852d4ce-d1dc-48c0-b578-5c8227a0007b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1068da4-cd06-4815-b9dd-78b44f685600",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a239d6d4-d95c-46aa-be56-1b6c85c5a71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbda2236-635c-4552-a425-3aa5e4d63ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0c157e8-d1c8-49cc-b77d-2c0faa4ad93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdc555a1-cc52-4b91-85c1-c3b96e11b40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "761b5e60-22ba-4d62-b37c-1ec5a92aca2f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74fa032e-60dd-4c4d-bdc1-e178df3304e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb2b339-6c57-4e52-bf01-5f60133ac225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7be17e-736a-4f6b-9530-f3a225dd0b1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "8981c4e8-98a8-49a9-b858-2bf0545a50e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8028f968-7e1a-4e6a-b0dd-b490b2c50705",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccda1238-3e04-4dee-8389-967a64267212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e19643eb-f08d-4727-9fae-6b10a1c2f2ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1723035-0c77-4447-9c2d-af1e6c118145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7124491-9dfd-49f1-8266-9218ab65ef13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b1cbed-ac5a-4536-b0c1-a3a64c2ed705",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bf16d4-00a3-4fa3-a41c-2bb60c2a3c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fa8813-5695-442c-bc66-0701a859e228"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce7d60a5-bc73-4b27-b498-9fd531edc11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f61297-70d6-4c58-a617-c052b45db233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59da346-6257-42f2-97a6-ceffb5ff2a4e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b562c40-68db-4968-ac1e-a2579eab8395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c94a7446-7760-47fc-965b-b4511e7c9652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2c6250-aabb-4f7c-8773-ebf74b5b115c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0f3fedc-f554-4332-91ce-587067d038a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923c6d19-1f3d-44bd-afc8-ee71e04675af",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e27a5e3-a92f-444b-a010-a1bc307a07cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5125990e-e4e4-479e-a2da-0b0d110216da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e060e269-437a-497a-9e47-ed522f4a5879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c57c75-c591-462f-a5bb-e90ae2d31540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bdcacc8-410e-45fa-882d-90319f1b4cf2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a159566b-1acc-4cfa-8ac5-c9c4a706a2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfcef9f-714b-4bf3-ae15-4186ccc14c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d223a78-0ffd-432e-a881-f16620c533a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f17356cb-0c0b-4080-bf2c-97c5dfc36af9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffe2bb59-de1f-49a3-8d81-0b4e1987ee65",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4252e9b-30d6-4e98-8526-d46df9db933c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a741cb3-6514-4de7-b043-b5a273a0ad24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7835bfa4-9eef-4727-8f10-0063d2b90c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f899aa19-5248-4d69-be38-ee0e4678529a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e04fa75e-86f5-45a5-b04e-dbcc31c6c532",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91f6194f-b3a1-42ef-94be-d712b95564d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1aa03347-1134-46e7-a7b0-ed9fa49c0deb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1947ed2a-1d31-4cd2-897c-74612a0452a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "50c1bee5-1a8d-4712-b6ee-fdffc6505dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d04925ec-e5cb-4d28-b445-ad3693094ea9",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff20a9ed-8e61-49f6-982a-2afd8652e5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efcb8837-8ed1-4c9d-b4d1-dfcdfb3f9d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fd88f3-c220-4bdc-b434-e30c011f7c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "741eb2ac-16de-4328-84dc-4026354df3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4b62a3-a016-4eeb-b405-240148c16d6f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe692f85-a282-4aac-9d86-cf0a26dad975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab221586-d4cd-4811-83fa-15360649fcb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec8a9d9-4e16-483e-b509-d9e08810c2d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab84af19-aef2-42be-93d2-90d1226015c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f91c250b-c00c-421b-bfe4-20cea697ea79",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebeef29-7303-4c3a-8696-befcd359bd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87605cc4-0367-448d-af4d-c6d5f32c3a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "492beafc-4325-4894-bb71-6ff7ef5105e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d51e7837-7b52-4f25-a466-62a3b54b3b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033e2a45-151d-4490-8d57-1068ecae53e9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0922ed9-1e33-45dc-9585-9f15eed2df6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06885631-b485-4898-8601-b7b3addfd04a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f25d7b6-7be5-43fa-8a1e-3523c6b10061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "981507f5-65ab-4ba6-8618-d5e42a3957ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf02ab20-565a-4bf0-8685-ce17b5ac7d57",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9511827-40c6-404a-8a82-05171b6f64fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaabfe00-67b6-4313-a08a-39754b0d1fc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb876c1-a71b-4ac1-8130-10747c60b902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ee3f4025-d7f6-477b-b021-a07c983e7f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f95bb4c8-e861-4480-a5c7-386f8cd3fda7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868619f1-234d-436e-b311-52f9cee01e94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425f7ca3-7ddd-4656-9b34-b88b3a8c49a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3cd627-2d41-4af1-818f-5120320faca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "69644d81-e2a8-465e-8aad-7b10e588d798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc03281-e12d-4c91-a399-1c443dd28b9a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b1389b6-9d8d-479e-80e7-b195e06646c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae85a10-f481-4fd5-b1d7-ca84fe7ccaa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bfda90-2444-4974-b78d-e03e1e36f5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9acdbeb1-0d4f-4416-bbdc-69f96bf60b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03cac69-aae6-4cd7-af77-3c7f7a57dc5b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3c3789-9b8e-4674-a61d-a7e54c94daa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ae4714-5316-4ef5-a13d-a3ceedd87ab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a722ae6-88e2-4696-ad8f-d6911bb07a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "03d8831e-64b8-4859-bfc1-18d4ed7a4ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1866714e-f5ed-49f3-bd47-bad46108fc3c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f15e4f-4928-470b-b517-64fbc70e5a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7546895c-8eea-4c89-a8f6-b92ea11b7fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c649cb33-3383-4426-936c-6f2a9ffd0d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "43493360-7853-4c78-b592-229001e9393a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9effef-ab09-4501-8ca7-4beea5142759",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678413db-7f23-4536-8991-3825aea26d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52085c1-ba8c-4ee7-be5d-e9840bcf0d21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbcaf97-24cc-456c-b628-6ce7b7b119cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "42c1655c-f66a-48d1-a979-8dbc268aa9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ac7c4d-f9d1-4a8c-9775-3e87f6b528b9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051d3c60-69d2-4200-b4b1-26c4af3b696d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3bb4020-61b8-42bb-bc1f-1bc02c2527e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c05ba1-0607-4fc7-a8e6-1ef007f87823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d75d468-7490-410a-8fca-675f2a9a28f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce1e69f-6d12-462b-805d-eea300fcb7eb",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4d2d59-4f82-4d2d-9a94-167bbbb11e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37355223-e38a-48fe-a3e5-19cde7812d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b903351c-c8ca-4b9c-a237-4daa30fdc0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "92e2af9b-5d2e-4952-a519-221d72f6086b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c875c946-a09b-4c6c-b144-a6e8a9d2203c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53d32886-63cf-4737-8c94-49d3c79df07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3efed2-e03f-4500-8ea8-86aa14eed529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c91443-4e58-4a1b-923b-45b2ece16b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08c0635b-0e82-428f-9cfa-c89e784b3176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6959d1-1755-4f5a-a644-c9482cb3b811",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d18d59cf-32b8-4887-865e-ee60fc32e7cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e65b1d-226c-4759-b701-690e8326ffb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2dac18-b216-44f8-b3cf-f836964cfa3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75e2d37e-a32c-4299-8e9e-3ce04b964a01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebb1c83-cbbc-49dd-81e6-46765a12055e",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50897b2c-4569-4e12-a5c4-a310fb7c1475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a1739c-9163-4f30-80df-b5dcabbf635e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4af2145-8eb2-40b0-9288-a09f748e8dfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0c7879-3abd-4fd0-bf37-47493b134c05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16595bff-a0d0-4d44-9d27-fa8a70596a86",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bdaab6-bf00-4143-9486-89cb2316c7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736a01e2-e931-4883-9ae0-c9b7f5cfc521"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6d72ac3-f665-4d73-b69d-196e7551175c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "128b86b1-5a31-4d63-93c8-c37a8fcc62fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00bd801-c25d-472f-b10d-5ef22ab7ebd1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a34c805-1f6e-4ac4-a2fe-e4642f4ec755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc2152da-db5e-404f-8deb-9c510b8d60a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31138f88-aed5-49ac-bb9a-97f75e84c49e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c18b226-a1eb-48f8-9511-410e14af853b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ae413b-fc8a-4b79-a75f-6ad757ac74ff",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e1a402-dd2c-4e2f-8f3a-9266c0b2f508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f9f66b5-a366-4370-9e92-7da9c1ac9dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde176d8-4d0a-4e5e-a880-a42de6f33cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d34969-495c-4a51-a71b-bdeece901601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2ed21f-6d87-4a43-97a6-2479a0c1c1cb",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84ceac0-35dc-44f8-874c-a5adaf0ffea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f2da842-c2eb-4527-a76f-f739f5284d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a96a4b-1e2c-4c7f-a3a6-682d3e1cddc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ba4d49f-0c68-4645-94ab-d21bba87278f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13a41cf-acbd-4614-9b10-f504a44659be",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d85007-f543-4e94-b18b-8f4ce05eb96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf55da76-4091-4968-a379-4af6a1732143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4900b75e-4737-40b0-aa63-a785a9aa3ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ebfff2e-4398-4f75-976c-5e1e9090f101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8981146-70e4-4eee-a4c3-ffa90935345f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab3633a-b370-4732-b6dc-256378554be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7399d65f-9f0c-4f60-9785-b4855967e4eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f724119-af0b-4890-9655-b586ae27f004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa7a1cc7-ce9c-4b50-b1f8-f3d319fc09d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c390eaa-07e7-427e-97e1-5bcd689634b4",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3d2d97a-3851-45a2-a528-7403888cc141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cd2886-9253-4b73-a209-111389964a68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7481eddd-0493-4309-9b87-2473d958aade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac60adcb-102d-4d39-979d-fdb689474e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75261d52-3067-418e-b8ec-9a3b1cc5a732",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6434cfc-0e6f-4545-adc3-9917d8db517a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23ffe3ef-9bbf-459d-b03d-f77cb5ea96b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a8ac029-3f62-4a9b-a222-71bd5f5a75d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc5ce0a8-d913-4cb4-82ef-03a0c66abd21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d8a33c-e7d8-4b8a-9033-50f7c4d17e74",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28de54a1-4409-4959-96f5-70d1ddd7a7d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04687715-9c65-4e16-8337-026485f63de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c48dfa3-2f0e-4095-86d9-74f5d8524c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4009d956-d595-4347-8fe2-a57f1a84dcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a48280-2293-47ba-8740-ee8ac569782d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bc523e-6bf7-40f9-8a8e-e36b83368556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98abf4b6-77ca-4273-b0f5-9a6d076dd7f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9657fb6a-bf55-4261-8bd5-ab0155ab7b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "941989fa-a9d0-430b-ba92-a6e392ed42a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "351f44ca-3390-4af3-bca2-fc74e4f67cfd",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea0c66b-b670-44f1-a9ff-f396c15d227d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bdf095f-3b6e-46e0-8b9d-9e561660c017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee5654f8-1677-4720-b607-beecb5d8e970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "26bf4ce6-f17a-41b7-8bac-9b7ef4a4defd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77f825c-7303-45f8-b427-00cecbea06de",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e3d06e-f915-403a-a198-6b0af0ba2d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab0530b-63e7-469f-90ca-f33bc50edb03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6cea02-9973-4ba3-b44d-79ab701b8e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ebbc8cb-f5c7-47ec-b2c6-ca48196ba9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f9af5d8-76e8-4fb8-bd4f-cccd4bf90cb4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a03f988-6bfc-452d-8825-e4a359fcd252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545bc205-77b9-4742-93ee-876734756540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cc5182-a223-45fc-b6b0-4b3a7c99fce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "474bde9f-4c49-4890-922c-a0894db70d30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6917aef9-71d2-4a35-b163-181063ff79a2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b21b0d-0f33-4d24-b306-117cbb2f3aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2adec1e2-da3a-4b20-a1ec-e259a0ae5d7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc02b26b-bf21-4d58-9c30-24e0cfc4147a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3ddd88e5-2033-4806-a00f-1352ffdca519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5780011a-b875-47a6-8e34-8acc0e3a0add",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a9b42d-70e3-4c0f-a35b-c5aaab0054e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9b08a15-213e-4e52-aa42-e4c8348bd776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6da2eb-e5af-439d-9dce-04d97b81f7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e371dab3-0524-416d-b2bc-0a95452c7ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3dc86d-e752-4527-8133-0197172dd7e7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0173ba-7db7-4a7d-9d3a-b891da2c559a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300eb8d2-df20-43e9-ac55-def479ee0b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a00f22-e05e-45fa-a167-06d24f1f17f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9d6b491-57ad-4c99-b643-06ff0bf4f5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b16050-3fd8-4ea4-8f63-36c9f743deac",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "186d7b4a-3d60-4311-8c8d-934f37cea370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5739966-b5cc-43f2-9978-21246591b75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b9d003-8d6c-4749-96a9-870d9f94851c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3ebfbc-d986-47d8-aeb6-67a9a3f27530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47ecb739-9e5a-4976-9968-9dbae410fb7c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0b71414-439f-4c48-8adf-fa1d8c31c63a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc72401d-a2ec-4bbc-a76b-5214e06b5b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6faf46-3e5f-454b-aae2-5a317eb51e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d5ce38d-a61d-4ce5-8194-3b15470785ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213e66b6-fda0-4453-a856-9c35c6be707c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8e1a1a-7390-4528-9379-821e63247987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943e839c-96f6-42ed-a67b-8b8535baf3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b00d001-c26e-4949-b2cd-e90b45723526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "743406e9-12f7-4e58-8c9e-527e06f2d80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "453da05e-7d3b-413c-9390-46055f922daf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da139db-5bfa-45c0-8757-ad5677cde0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26af7363-46e7-4f9d-a659-1912f2e9ee41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd139746-5e27-42cb-80ea-1faf8440b996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9261110b-43b5-43a0-9e7b-ebd6dca67dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacbac90-3bab-4bcb-97f9-764fe33297f9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60343a7f-2871-4145-8984-33a94704b0ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aacf106-d986-45a8-a6b3-ecfb983856f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b073d513-7fca-4563-b13f-3ca77aecca00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f719877-002e-4129-85e7-0773209dce43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144fc3b6-f2fe-4344-8b6a-5f99c26443c8",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29e5994d-5fef-4aaa-b656-c9fb994f5e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e1ab6a-9314-4b44-8c16-396a3cd9d1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7f3c1c-fdad-4bc8-a2aa-f07e0c25d15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c32eafb-5501-40a4-bc6a-4a4b539f0e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0730b49-8cb9-47a0-9a0d-0a73556b6504",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930db39f-339f-454c-ad80-a1dab47f97e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31e8631e-792e-41c2-bb51-ae4f77f56d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57614b7d-c969-4bca-9736-d1214fc13cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "357d93cb-2f1b-4e2c-aee2-f025f810bfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c6b7d7-7999-4df9-963b-8064b01a5a42",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b303f72d-1f73-4329-94d8-10ccbd398f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "493b5cc0-31aa-41f9-a80a-70970247a193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a131d7-874e-4d29-bae7-bac5ed1453ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aad584b0-bf22-4ead-9fef-8de00d84c9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f62cf3f-b82d-40e7-9616-b4d587118e7d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30008ede-07ca-4655-ac69-d3aa3e32eb33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edff6f30-02bf-46aa-a7fa-5988ab975e2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f84eb9-e283-4719-85f0-6f5d184c0729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c946ac3-d094-45bb-b652-19ec0679f899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d85035-8ea6-41cc-a344-4adf9ec484d3",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "775a0cf0-6ae3-4f31-a10f-321b0d274d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "28b23ad9-ac84-49b7-bda3-8ce5e10d5439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdaf7547-017d-4c86-9227-e147780b0785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2983f9fc-8c50-4ae2-80dd-8037212554c5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ee4e228f-5314-40a7-b698-c06790015c53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6ecdf1d3-9fb3-49b3-b67b-bae781901263",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62687e39-cee9-4bb8-ac1f-dcee3084bef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d5255e2-c95c-4555-bb60-2ebc2153d90f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c437e5-9f78-4091-81c5-d8d4235978d8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c74a0f6-5885-4a34-b80e-b3b7f207f654"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "810771ed-2856-480d-aaec-bb70d8be143c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "28bb4585-0558-4a70-bc23-2fa9f3f1f2ec"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8e95bb9-2637-4680-aa3f-24098ef4141c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cdab648-01e6-4552-a02d-e533eb6e73b2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c6712a2-f0ff-450d-87a5-15c128552e64",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b12e562f-d91f-4999-b098-562f3e89f5a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "16118aff-2228-4c76-8d92-038d8bb0642b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f061d3eb-870d-4501-95a1-ed99422b972c"
                }
              }
            ]
          },
          {
            "id": "85570bc2-8ace-46b2-beee-6a5475cff4db",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f8d6719a-b5fe-4a05-9dda-476e044cf2b7",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5c3ca8f9-194c-464f-bad7-09ebba3d6b38",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c526efce-d5ab-4ad0-82f9-5e4d54a22d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "11c05349-4dc9-47ae-bfc6-212423fdfeec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f9f0b0-0c6c-44e7-9cd0-ba159c6fb12b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb89dfb-f8be-4bcb-8b35-88730b53b97f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7a4d6630-2792-439c-9973-4f6ee2f1c5e6",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3edea7e8-de9b-4921-be6f-0a091d3246bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd299840-cd69-45b8-8375-2bcc3af89dfc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e1cbea0-9ee0-411a-907c-c0e0c187ea7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e981553e-ec90-44fd-af58-ea151cda79fd"
                    }
                  }
                ]
              },
              {
                "id": "3a91915b-4115-4ea7-9cb0-6eceabe0be46",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bb21f95-f7f7-46ec-9f76-2bedd9193c32",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5f1ef6d5-e3fc-43f1-816b-8977de59a1db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7991db5-03d7-455d-ac14-1db060efbad1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a148d111-9e85-47d8-9ff9-c8388f814f0b"
                    }
                  }
                ]
              },
              {
                "id": "8d3afb20-1897-460c-a7d3-47c7b595388f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ef1c792-ab1c-4c00-90f7-b290b3ae08ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a5db6247-8850-4ada-bb74-ccbf03baf581"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f052a644-81e2-480a-9476-43176c0a587c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2a44dab7-c82c-43ef-b000-9ee00a45d087"
                    }
                  }
                ]
              },
              {
                "id": "3a817333-5864-4695-bf7c-f9c81096c83a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "70512267-8fd1-41e0-a4de-ed9d19557c58",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "26e5d07b-91db-4a0a-9478-3fc371da63a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e7640dc-8866-4dc7-974c-f146b993fe30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0d503ac7-902e-4737-9c7f-5c2dd96488cc"
                    }
                  }
                ]
              },
              {
                "id": "402740b2-88f1-4e66-8d05-2a87605f6dbf",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcd1deda-9160-4248-8a0b-4040951717d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3abe1f42-196b-4c8f-9842-e90ca87667ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a876fb3a-d709-401f-b636-6876e81214ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "af057f19-d561-481b-b6a0-92c9f19fb10a"
                    }
                  }
                ]
              },
              {
                "id": "b6285ad9-ce75-4e4d-9d1c-1f245d0c9725",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "331e457b-da63-4164-a502-d2fffdd123a9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc498dc3-9dc8-488f-96d0-a6c8e4022bba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90e5dfa8-5db6-4146-9f1f-813700674dce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "47673377-1dc8-4c2b-81f7-2a28a3542669"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ca86c57c-3d16-48ad-9d78-8c1df3f28278",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f3357879-5806-45a1-8f82-ac6440f8d666"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "40525a78-8688-45be-b180-e086e425c60f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e0f0b87b-ebab-48ad-a446-0d6fe9b4c471"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2d32601e-44bc-495c-a840-6dfba981ca0f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "779b62bd-f316-47f0-a54d-ebebb887f17f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3f246fbb-edf0-42be-93d5-b373714f708d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c679a405-24dd-4bd2-abd9-7f02df2cab67"
            }
          }
        ]
      },
      {
        "id": "d14e502b-845c-4b12-9e48-61ca74796de9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2b0ba8e6-68d8-49db-961f-6d3832968068",
            "name": "Negative Testing",
            "item": [
              {
                "id": "79296f42-0394-436c-9554-214297a3358c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c9f1b11d-5bb4-4d88-9679-55459432d5e7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842854ac-b5fa-44ad-81d9-b681d90e8957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f51659-dfc2-472b-85ba-f330d8cb292a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60b4808-017f-4466-b23d-74d1872a91c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "068713b7-4410-4ef8-a7ee-da99e487ce93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e330ba0-faec-4f6f-84b9-b242bbf8a595",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc96369-e720-4403-b014-88b3430ea65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cda6db9-1f00-42fb-ad19-a796be603bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788ca9a5-f3f1-4b8e-a689-c8b3d848e3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c04adcd-39e6-4e24-b100-0fbc17155f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3679cdc-226d-4453-a1cc-2fb923346a22",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1da01f-3f38-48f7-866a-4d9478d753e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b601ac-d195-4b2a-b243-1ea12db1dcb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b62b24-94dc-4284-aaa6-d9899d0fe304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9dd27b1-3f85-4f52-97b7-f2f2e80c3d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec5264f-5752-4d7b-ac13-12088ce44ebb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "387840f0-6e1a-41d6-a728-861dbdfc97cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1433985a-4b22-4192-a599-790ad44a92be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b94c6a-005c-4cd2-8bbd-94cc17365c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac48e1d0-8aa2-4a29-87a2-324a725b4cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd34d57d-9044-4a80-90d3-2ba54fa45ff0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b8742a-5686-4614-98a7-9741233ae81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff59f304-24c9-4d7e-b20e-d0536e834e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0208f1ad-ea05-4a70-a1ce-9169e4df4b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8492f63c-f326-4bed-aeaf-9566502c81a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "105c154d-0f8a-4940-b6b2-57b70f7fface",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90fb00b2-7746-4a6b-9e59-07f789cd8056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572b00cf-3b2e-459f-863d-1aa8e3d1ebc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9c0fcf6-1c53-42e8-ba35-c2dba5e3fed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "836baaf5-4490-4b4e-ad6b-949ad267514f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8094c0-1e09-4e35-bae2-55d5f8b57178",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df9f490-550a-4534-80b3-a55263a6ea20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa761a08-3759-4c23-8d5e-a2c88d51280e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360af754-f19d-422b-a98c-eaef99391f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "263c2df3-135c-42af-a1e2-9af5d65e33f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7433a74-8993-4c3b-9b85-e90653f051d4",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82b21b5-8847-4459-be41-c068ae4fb5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b1405a-094d-43db-a14c-cf55533f32bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc096d1-b7d9-44fb-bd87-1a0cdfc77223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d274055-f64f-49ec-8e8f-3b203db68f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157b0b59-6d07-4f28-8382-23b30e369af8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89bc59e-8e91-440a-9240-2145700bdc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ff21f2-a528-41db-bc99-0671d747fe52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a776f33d-0ff7-4a9c-af6d-67aa0bcbb3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "186073de-738b-4a8a-929e-0d0527013305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c41498c-8496-4674-8722-58587f2fcd2a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181d7d30-aec3-4d72-b9f3-ab93fcd38e01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35f4320a-da26-496b-a309-9ea75a174914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bb7f1f-8fbb-4b90-99f7-e2308743dbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3118745-1df9-4d37-b1da-21d8e73c547f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92260cb-0917-400a-a0d4-99cafa818749",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef370f16-0ce9-4c82-8dbf-ed8c6f50a254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8761825-c0f2-4013-a6ae-4665a3f504d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22287828-c9eb-4ee4-adcc-1d6549c7881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "14fe125e-b813-4ab6-b734-a82e01fcae74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be3d7a27-2711-4446-8472-5a343e2c4e05",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9069dab7-b733-4c25-b3f6-b84ae8422922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4d4e59-762f-4551-9233-95d104fc4d15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06cbcf9f-4db3-421b-b33b-7ae147cbe93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eaf4e72f-a36a-457e-8ec0-2871ba1cf50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9756409a-0c19-45a6-8d57-7c4b2421bcf7",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3842df-f6a3-425d-83d1-bd75f6c5edcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e279d73b-9962-4bb4-a138-50c4939d7780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aefe941c-780b-4423-b573-7fdfa4bc2c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "994defe1-4b8e-4020-90d7-1def246dd2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c49dac2-4661-4a64-8a82-00e1f4ff197f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ff5967-11d6-4229-a0ef-7d572a5c711f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ac91a0d-9b5e-43ed-a1b6-5de53b4fde06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47407919-7f69-4bf5-ac41-98e6e3f3160a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f518c412-9ab0-466e-a422-f8c9051240da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9350c718-52e4-42d7-a4ae-9174a76aa52d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fce2238-6aac-427c-9f8a-00b6e267d46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55c33db-53f9-4c1d-bba5-f6dde9936fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4280e81-358f-4d99-ba58-fdcc57793045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "84885d8b-c41d-4a3e-8808-a08b46b4d4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be4fc76c-cdb0-4647-9345-44e9fb9a2ca3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f914c95b-4fa6-4796-94e4-caec3369d43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af87043-be09-4427-b97e-a972ff295db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "834eabf1-5c57-4076-9623-806879e89b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5cfb9f1-9fc9-4e66-9db1-6e194e10b9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f750ac-7bfc-4606-98bd-037a9f224ab3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e567469f-3c98-434f-a441-6cfef6f49e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4eb2e26e-3d2d-4696-9b9a-9225121d3911"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868321a4-cffd-4038-93ab-eb7c332ba404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "65bcc6fa-8a5b-452b-9c6d-c689a359cfe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ddd7a1-def2-44d3-af63-54998025b90a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcd9630a-69c2-47a6-b771-f3f1c62d3136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e284c53e-db61-450d-8a60-f71b6680b3e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cbb512-79d8-4179-a44e-f059d19411dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b20a8432-359a-419c-aadf-45836c8f6a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eff38945-9305-4839-884c-c22aae4696c4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cd6e0b-3d1b-4895-a6a0-a444cb1ad911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef801278-d99b-43d6-b04c-aff181f86379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "467e7a82-53be-42d9-8058-61cab695db27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ee820b-df6b-4b60-9144-d1099c9aa59d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac21a9ee-f893-494f-935c-b9a88336d66d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0c2b33-4124-447c-be72-c05eaf0b64a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a83ce65-a02d-43cf-a5d8-05b7301fe7bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4e72ee-ae93-4f9c-a9f8-9102d8f9aca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "245b3734-6b1b-4e4f-b31f-a8ec810c0628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137768f8-885e-419a-926a-358b878b2b08",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f913a10b-6977-41ee-b521-36b439795b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87f143c9-6e22-4536-a22c-8bde9d4bf96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b08860-55e9-42a4-80b3-6ee713e05921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "17762358-f670-4545-8b52-eab8fb3507cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5074eec6-5e74-41d6-8fc3-396b7f87f77a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d288bca3-4c36-4d20-b613-41f7c5c29fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bfa262-7426-4349-8cc5-c6cf2722d17f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7caa363-13d5-4e4b-8382-66f397227a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f71acc24-5d07-4497-912d-89334f8ac438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7505aabe-cec4-4c2d-9b23-6a084cd40539",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0eadbfa-9517-4658-8860-a28be0a2231e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee3346b3-7516-4baf-8b72-0e2890ea3ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a8db1f-e093-4f67-ab16-de2a78415e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "495f6497-87c3-49b6-ba32-8f8f0368895f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc016c95-e9b0-4603-ac71-ab32ccf402b1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df384233-6493-4f0c-89ef-cb100cb8de25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10ec9bd-bd82-401e-9dd4-ed7703b596a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aec092e-16e4-455d-a26d-c892714b3c8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eb0e06b-0a5e-40f2-98f3-05d17c5c8947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b576ff1c-f9ea-4e16-a0fd-cbd0ee6778cd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393d2acc-7400-46d4-a7ee-f82bc5160f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72aeb42c-4954-4c50-8c63-a6d8e9e09540"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b20115d-43ea-4071-8b3a-51dde674086b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dcf0162-3193-4e0f-95f9-16e7012c4f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba88475f-03d5-48fb-9f97-b5d3380608e4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d242c2-d5f3-4402-88cb-ce37a3c6b675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8888bffd-eafd-4a42-816e-0d8c0c8ea939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22abeab5-3bb7-46ca-b5f6-fddd3bf2bc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e88bf999-a1d8-45bd-9995-1d6c3c93be3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86507a23-d068-43e6-8fcb-49e05129a604",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e764b5a2-ab84-41ee-b483-58e521e0b0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d7d032b-2323-468a-ba48-fc4e1612216c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abe94e77-99a0-4f7a-8fbc-72cfe949dd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19bda0e7-e12c-4929-90e9-a7696d87614d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca73e43-fb9e-449c-8a8e-ea1caaf16871",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c76bb3-8a06-46fa-acdf-5a15d9d6b081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeb594a3-4ba4-49f2-abb5-e74d84b1c8a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcbcc0c-1af1-45ae-879d-5a7ab2fe0f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9862005-ac4d-4af6-b1ea-cfe25cc2c6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5c1cfe-5f62-4751-b338-6ab089c5cb1e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c4aaf6-4631-4554-9b93-8e20ecb2ea23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a3e901-1102-413c-9625-785b8c309833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3733a50f-a1f3-412f-86c5-2ce40274eb9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd7276c-3554-4717-bac7-fb64635e7fcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365ffd33-07bc-4c54-90fa-fd082bc8b4f7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04397a5e-6a7d-4fca-89d9-045f8fc36de2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9dbd5d-2156-439e-a269-c2d05b410543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e1655b4-534a-43e7-9a66-ca420db75d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5590ef97-1a72-4cc4-a4de-2f1602988b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bef470b-1da8-4016-8175-a3a00a27a0f5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886299bc-d211-4133-8889-d9b78f00528b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0e3278-8057-46f4-9f68-8d70575f62c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "facd2946-e783-448d-b5d3-9f39f32a3329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "58d1c837-31f5-44d8-b3d6-1394e1399971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418d2afd-927b-4a4a-a49f-33ddeb5da2e6",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521beb67-4739-4725-af45-aff02c3ba0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b042a775-eafb-47f5-8261-660d0b2375ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7b015b-7705-474f-9a81-39038084786e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b33b4cf-2696-41fb-892d-157dbf9cfb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc815818-f47e-4f1b-b1d8-c5522caf91ab",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "218af130-a199-456c-9514-d74b39f8ff54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08938b39-cef5-4814-ab4d-c2a592032f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21fbfe24-41ee-438e-bd28-4b7333f99b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "721002ba-51f5-4835-b64e-58029c2040a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b6b03b-0211-4ef6-a167-a93fb22769d1",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1e6ed3-e2f0-4151-bcf0-3b3c08b4b42c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4016a1-ad10-4328-b436-28a62e869d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db332500-77fc-473e-97c7-99b86990ae85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "844cca99-dd20-4c4f-95c4-f9aa9aa0f4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a8c207-75ba-47b7-9630-afffe6574268",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f5beb3-ff5b-488a-b0c2-45afb331c30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6831af8e-98bb-4fe2-822f-c81f6613a875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69d4dc6f-fc8a-4b19-8409-9397a8f5bf4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "593b41d2-0187-4f68-96b9-3c27216a8044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a2878a-82ed-4299-a823-573c07c82aed",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52fcf77-7f66-443b-b003-8ff76b858174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eed4ece4-18f4-4735-8115-624f618df106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3c7110-3029-4868-91cf-11d896049dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2838cdd6-f82a-4347-87b0-0f53cf30a574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9336f51-5b5b-41f1-bb76-099be3e6b47c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6f5800-6604-4031-9547-34da3560c5be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ff9288-1082-447c-b49a-bcd5b5f10c5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965bba71-554f-4e03-8781-58d6d1df69bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5629b792-f2e1-411a-81fd-7a29331c13e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1f748664-62b3-4414-ab4b-83f05499282d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1aa55d2b-f084-4b14-8040-8e2f728070e1",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a241c08-c050-4a60-a5f4-e397512afee3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ee9cb64e-87cc-44bf-8f79-e5c03232070c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba058bcc-5dcf-47c3-b35b-608d495550a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20ab2bfc-34e8-4946-8625-aa1d77e35191"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1dd3e327-a8f7-4b33-9bb5-3d4905f27f93",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a6afc3e-a8cc-4c5c-866a-7c88026e181e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f3cf28f-f33b-4403-9a0b-6da7471293b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20a5f652-60a8-4d87-98c7-0f11d1f404bc"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9444aa3d-2b55-496d-ba0d-c54776c7b3fa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eaada927-22a0-4303-a76c-3531e8a35076"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eca87ccd-02eb-4b34-a2e3-ecf9130eec5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c39107ea-eb96-4420-bcfd-6dc083f58395"
            }
          }
        ]
      },
      {
        "id": "c114d0d1-9eeb-4f1c-b5e4-b8cc404b85a6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "eef2b060-ebf6-4757-9ea2-40dc583be723",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa5f51ea-269d-42f8-b90d-c72f29a8a557",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "af74a7f2-8e86-4f6c-8184-28e11680a7df",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7347b5a0-1393-4726-906d-dda58e30ae16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3eaccc6-4ef5-43b3-8841-78bf2a8e7c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957ffdbe-848f-47f6-95ab-8a7399c40885",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fecb89-1509-4bf1-98f6-ef880db6d555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f28150dd-c9b2-4b99-b9e4-865582c7c1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4365948-b4ee-4f4d-8400-84d9eb57253a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf17a14-88cf-4a2f-8c8c-ea9f176a05d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7943073a-3148-4752-8e27-aacb6bf1b3f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d4ebfa-118c-4c41-8e64-d13c8048b692",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc521b4-9afa-413e-ab33-f6b9e09e347d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1b7718-99b0-49fb-a061-22bebb888af8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa860aa7-fdd5-4fc7-9e0d-8e878775c886",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af694c16-1362-4385-9427-20109fdbeefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6007303-1779-4447-892f-f61ee99756ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36f072f-bdf5-4eab-b650-f777149d1a99",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ddbd8a1-0b08-4c3e-b933-5618a5cc44a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2c6dab-d3b0-41c5-a821-2d403fdde1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b226034-4bee-4c40-93f5-8bcc9307cbb7",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339d38ae-6e7c-4644-ad5d-d035baaa3ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17db64d-5397-43ed-bcbc-6feff750bba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc8b03c-33c0-408b-8353-757d81a363ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630bf8a5-f280-459c-927d-ffde48b1e7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a024d999-18e0-40fd-ba99-92c127dd2be7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc36ad4-b4fe-4ecc-af0e-b5f8ae2dc64f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e2ee19f-36a1-4dd2-81a1-8ce11d5d0965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdabdcf-16aa-458c-8f0d-a5f2089bde16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248e00a4-3d4b-4ea3-80b1-0938d3ae0cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a3f06f-b0c0-49bb-a591-e8ae5b4d133b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80ac4097-1cb0-4512-b1f5-e112f1a707d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55250a8b-5d1d-4415-a08d-ff6e78111b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae05c03f-612e-48ee-824d-0f321a3e8e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdd5bdd3-8796-47d4-8bd2-80de10e214ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80139a3d-e0f4-4254-ae6a-833c2572e38c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9570b6be-877c-447a-803c-2eee17497e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "264a11f7-a2fd-44ea-89f8-b89656e13584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00390b13-4a81-40b7-ad62-188fac5a5266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b67d48-aec3-4c70-bdca-e9cea3c828d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa68b3f-f48a-41ba-a5fd-54773c606c47",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a19d3a-d35e-4c13-aa4e-aee98ea7c233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aac3760a-9fdc-4b96-b0fa-ccae0b597646"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1543660-bc4f-4e24-a301-42155038ffbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0a654c-0abd-452f-af6f-b172f0e4a6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a77d8a4-a408-4a66-b3bf-e1b7af31062b",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43977a03-c0c8-4f34-ae01-99858bde300c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73fea4f0-a9d4-443e-8d5e-b479cbd38cfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ec8966-64fe-4788-95cd-769e03f75197",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b108fd-0c0f-4bf7-b61d-3a8ce0270ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf284ded-0646-4988-916f-bf02dede6ad9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec48693f-e934-4849-9622-b81a1e4f3c16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fc86e45-23bc-40cb-a9f5-acb3fc194ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b42d144e-5455-475a-bd7e-2b142be7b441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b1677e-e19a-4f81-a4c9-06d130261c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6c38ec-a44c-4c73-9b5c-9ac407208d9b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf63c2a4-aef4-4933-85ef-df7702b94aae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9915875-c177-49d0-8f91-fe345de5cfc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a61213-c683-4e3c-a82c-4c029ddd6fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fecf5ee3-bbd0-429b-9629-ec8e60ced3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1db25eaa-6490-4c8a-9cea-08882cdf5a31",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4177cc68-e929-4e2f-88a1-eedebe77ac4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02b34b78-42bb-4746-91c3-81444d7ed4ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484c59cc-e26c-4487-bc8b-a5dbc314ce4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8664294f-f8ba-40bf-ab97-5a4310ebe5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc5b72f-faf0-4175-a4f3-143ca7c964da",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff5b775-3219-4481-b33f-55df75fc16f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "714730b1-1257-40b3-9830-f8ec106c5356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a4724d-e76a-4a3f-9b0b-fe36f8a89ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c396d3-19ba-437f-a886-2a54bb9bd98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2843cbaa-72ff-49ea-9c12-6e6d7c50c244",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0f412d-a09f-47a8-a421-64c1ba67494d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ec916b-2a36-4c2c-a726-555d1cf1ed7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f654d8bd-9394-4c26-b5d0-de5fe4938b55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87e6b07e-5139-4247-8af8-9f75bf3b4436"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8784d9-1e9d-4b2f-b80f-a9138db14e50",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceb8db58-f24a-4dc0-b205-ae52fba52e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fdafca-8660-4e57-af33-9f50795e1d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b901dce6-907f-45b4-bf87-1ced60eb111e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b122dd6-a4ae-462e-9ecd-25c6ade14de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db75d034-cd64-4480-98e0-5694ffe7f413",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b8b2db-5359-4bdc-ac29-b539b8f94c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8130243-e90a-4669-a211-1c7107e67317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf81f6d-085d-4578-862b-dbffc6e8dcb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb9aa65-d6e6-4293-90dc-e5401a8973aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8eebca0-0984-42b2-8cba-577008b99424",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509c3467-8902-45f8-80a0-60aa59e59ac1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ebbee42-3367-4bb1-8420-a3467f60b4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1428006-fe6a-4d54-89e2-1d901f146c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d63a1fcb-278f-473a-a5f8-00c26d76b235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03330746-5b91-4b15-95cb-b4d7c75188e2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be5d35cb-9c9b-4052-a811-50b4596ce6c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b85ea2c-3e7b-4f34-a3fc-328382de92cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "616e8726-6c8a-4469-b8dc-af3df9229f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e7d344-58fc-41cf-b1cc-0baef72ef0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907bc87e-0483-488d-a1e3-a66c15f1107c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc2bbf6e-d707-41e3-b096-3774981e4dc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f85b43f0-4fd6-4ad9-8adb-21cfaded8b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fbcbad-4f93-43e4-8e1c-85e92b979aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9594c735-2104-4da0-8967-79cc35a8365f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b484d18a-96d3-4ba8-9922-bebd486fccbe",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32349317-86a5-4671-a671-ba39af804f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857a79a0-e993-43a2-b96a-3cdc156c366a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdb907f-0e8b-4637-9faf-0d3ccc1a8687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f17ff10-2675-4f51-ae55-1da93d6b3265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e13cd94-4907-4d38-80f7-13cfbf7b2669",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ad2136-bdd3-4e41-8596-96c74efc03ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3db8b5c-7823-41c9-b279-e2458d8e92ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "332eaeea-1ef3-4b9a-87dd-43aaefbf4881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "398e7c30-7fff-4801-a6ff-08729f7ef91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94104bf0-529d-4e3b-8564-4f636069d496",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54957841-e5a1-45a7-b47e-64085fc7c9cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "35d55577-ab39-4ba6-9b5a-9cb6171f5208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a5294c5-5df7-4f74-a51b-4bdc3137c9ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139f3efe-29ab-41ac-95a4-224e25d1fe60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe64e7f7-7e66-4b00-87d0-6d9cf9db5d1f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3b8b76c-b407-4e5b-981d-c95ee434fec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7349c5dc-00d7-4d00-8e03-bf96b0eb84b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9d87cc-58f6-4046-b6ca-bd38cf0ee818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c429f63-ea06-4986-8963-c837c1088747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e363442-d9d0-460b-a19b-f00d20f2495d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b7b1554-9a63-498f-b8be-398d07219108",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "538d7f00-5443-4af7-aecc-9a44b4a39772"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31939b24-14f0-4037-a0a1-ed7f8d0c73a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc823191-2bfb-43db-8b4b-57f57a1dba7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506d84b1-8f18-4195-8928-76be416b087a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3b5e24-62dc-4c31-ae4f-b306045c0c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d505c3da-ab0d-4812-b1e9-c5f9e5df2309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a76273-5306-47d4-810c-a92d4e3e9f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "933b20db-167b-4d88-9a63-bad0f41deb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17141a60-c79d-401c-a03e-cea39e709faf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd2aa96f-9d49-4639-bc82-a38d045fdbec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3353c5-966b-4f47-a81d-4f935e123ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb465279-be2a-49e3-a5b5-a30e1782256e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c0b543e-dfc3-480b-925c-2acc1dac2861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e367445d-9dbc-4538-8ddb-dd276d4c133d",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a821b45-2548-482c-8f8b-183531786bf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41528194-1ae1-4529-acc2-797093098cb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d57aa7-bcf7-4d21-8dac-ae34119af023",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5238ff59-2566-46dd-95ec-1407077bb5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b47e4248-f6ec-4b05-870b-de06fbc824db",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec98ab5a-a2db-4aba-bea3-bcb548e6723d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "461ab3a1-c0d9-4ed0-9cb5-639385531c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef62304-b655-4462-8015-39d676f80487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98ada842-c753-48f9-b95c-cadfca47609e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bef666-9c7f-4512-b5a3-426f790593d8",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e758243f-6edd-4d10-a458-0ef92b312cac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1524040c-2a1d-479b-9c9b-2e0bf8f8f4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98609b13-64d3-444c-93bc-5de1529c154d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1a1f52-da1d-4f99-ba89-b1684ec6d210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9377c68-6066-4f91-a448-e6dd54e625ab",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03548650-13e1-4833-b021-faf38f9b9578",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0289f73-bdd5-4724-8a18-4ccae983ab95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c486def-a73e-4dd5-aa46-30577330e6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9778aef4-5fb8-49cf-9980-411fdb539603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74262b15-3655-4ca9-90ef-16cfd99a871a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac13cb43-83af-4941-afeb-54320a1cc224",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "198110d2-8a26-4526-bf55-b641f282ebe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8956b9-f71b-41c5-9788-f9bdaaedfe26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec23966c-bf9f-4cfe-a8f1-3bf23e76c4fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7c3fb8-b495-4c3f-99c0-d7d4a9465b9f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b762802c-3e19-4ab2-83c6-46fc845e4cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bd5583-97af-4573-b13d-f14435324b37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a50c3786-1a57-46a4-a6ce-66a9cf9b0a1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa3bd79-c5db-4513-a308-67d14d9c2562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92a2719-86c4-43d3-b0d7-7bff3cf21364",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae862e1-6d03-4723-a56e-6baf424b8801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b935df4-a772-4eb8-aa02-dab75d73af06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860d8760-79b7-4048-938e-0e1bf3fc2414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea9c05ef-0ec6-43e5-bd4f-3b22a48c892d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa24011-0155-48ca-adb0-41a42e621ac1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae304d46-8a34-4164-abd6-fc716c2ace76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0991f93-dbfc-48a7-868e-0ec3c3b5e0f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aeec138-8184-40cf-ac50-7948d0a7240a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f54ec8a7-1091-4f39-998a-c712b58fdebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c79d883-c0e5-4b00-ab2f-00ace7596806",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4396bad-6aeb-4294-9c42-d722c7a9a005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d4294c3-4088-4491-a254-54b83cd930bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853a7aeb-11fe-4ed6-91a0-04e3bbe514a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73be60f-a333-4012-873f-b5c889b7bfa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e794b1d0-2b97-4fce-8c13-b7905d805b61",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47122409-bc7b-4fa1-9b81-020200d172f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfa76c6d-a8c3-4231-8775-d43ff53cd0b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e7226f1-d52a-4ae2-b52c-e2764e3fd724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4b0f3a-5094-4ad9-b563-02991f41e227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f32adff-8608-4633-8940-9dedceeb3843",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186ae8ed-33dc-4c35-b065-371421142e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39fccf34-9af5-4e93-a351-c877f743cb9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffc9a6a-585a-43f4-8f6b-ac34d9bc0892",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bac356b1-357b-41da-bd7c-5da149b05875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0d4ab8-6427-4fae-b658-a2d102210dca",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e946d46-84a2-40bc-b5d1-b3e76f59c40c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "830661e0-7bb1-4cf4-a1a3-1e5023db7fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b6a5fd-8a28-4154-857e-40120df68b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38b9dfcd-2f61-46b6-aa23-8d00fc0b4962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3bee763-f96b-4bcf-8c4d-58459e83c20a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416639d8-0566-4d29-9ed8-4fca6d47d479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8882f8-7f4b-49c1-b3f5-57ad46777273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e6fa6d4-f86d-4901-b721-2403c54d59f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107d1fd2-4058-4445-b8d0-c73d9899a87c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb90c8f4-3cb1-49a5-bb25-7bd2fb57b28f",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0b4619-22f3-4f43-999d-933abbd98d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea657930-ebb9-4ba8-b79f-074a663dd883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec8f5ad-995c-4e47-bed1-9d2eb6773f14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc7b39c0-3631-4987-b8a2-c0eda64abd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68954b7-83a6-41e6-a330-98ae88650032",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c60fbb5-7aeb-463f-af39-c6e214ee3622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b992bce0-13c1-4434-bc23-fb734d4413d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac86566-ef49-4b6a-9e94-178fcba1a201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580e4248-3c14-419e-9e2d-acf114105d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57d0d78-2bb5-4abb-a80a-0d9a07173c50",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d280a8c-2fb4-4a3c-97b9-7bfc49dc90bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf97e86-421b-4dc5-a728-f87df3c1d65c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e428434-be2c-44ea-bcb9-57aa2aba4c70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fe7d08-16f3-4682-a6d9-39da3092c2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd5a71e-c05d-4393-b79b-212ed2943f96",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "532915da-f876-416f-bc44-cf00cad2a30f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f99695-549c-46b1-b998-e1b0b14fb9b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1af27230-2add-4b8e-845c-8db29f484ccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1db148c-593e-4bfa-bdc4-68d778026599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf23b75-1b48-4647-8a2c-15921e189705",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a571e1-01f0-470b-8e94-f97c414a43f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "853f599b-d004-48fb-bf70-fce3baefd651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac4e31ec-c98a-4536-9480-51201e9a66c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430f8609-e78d-437d-95ab-8f4b63168ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6545e9d9-2791-4586-9d68-9c82ede5ed25",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32fe5e8-e716-4710-9063-eea7ef5d11e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a36f684-7e38-4d6b-a96e-a44e25224abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db42bcd5-838e-4ec6-a4ef-8d838348f405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3562983-df9a-4b3d-a4a2-0f449954ca99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a65384a-eeb1-475a-90f9-f993bbc8a86a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d860814-4fa9-443f-9fcb-be3da4b8e186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279e7abf-ee82-4154-bd1b-09ce711fc52b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7993515-289d-49f1-b47b-a24afd8933d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55b3b31b-11b7-4d44-b396-d8e2780c0870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998effc4-d599-4f91-8e10-d7619192b54d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d872582-4af5-4828-aead-04969578d8bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f8388be-8189-4d0a-b3ad-a707e1020ef0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "303eb37d-2474-4a48-9764-86c9effa2034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c722b7-682f-4d60-adef-597d75138c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cca9c0-4ee4-4cf1-94c7-aadeb93a0297",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97a6f4f-5176-4690-bf1f-1ae14ec30391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef9a7047-c441-46e6-b7b3-45f44a456fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ab1c63-00b0-43ce-a5bb-d47b935224f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e290a1-0934-4cbb-b283-45a762e0bae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479878b7-383e-4c3d-b74b-95b8a101f542",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e183cf74-cfc2-4940-b7e9-211840ff9e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416ade67-bb0c-4ed7-bce3-e12692c80efe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc739e1-370c-495d-a9d3-493113a1ccac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0ee1f68-18c2-432c-93d5-f662c838fe42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2867c67-051d-4f24-a094-0e0b28ccc3b8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f3060f4-cf5f-4929-87bc-58d8d6cf8365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a208341-7caf-477f-9ed1-697ebcb6403c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66292520-6ff7-4511-8ec2-38ea6cdbc564",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d51c99f-808f-420d-b002-1caf70d0346d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8434ee63-a4c2-4c14-85f5-14952064f9ea",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdad8a59-9e94-4c1d-80d4-bab4a6c346e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941fb2bf-537c-4246-a95a-aa05813fae2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaa41f0-a643-435c-b0fc-a5d8e123ba2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a02a37ee-f5b6-4c33-a1ca-f6289f895d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7357f35a-0753-45a4-9022-c18c4227509b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f28e13-2c49-4258-9b5a-d32971f7b903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1dab2d2-bc16-4c54-9dd1-6b381e5bb4b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ab5394-46ca-481c-9b7c-daefee458a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c76ea3-b5e7-4d6b-a603-670b038bba34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c14d637-0800-4513-95bb-9aead4088d96",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c9dd02-808c-4c4e-bb99-c5690befd6ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e30391-a174-4db1-af7b-6bb10c2c37a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3341d7-c8c7-4755-805e-fd2c92f6464a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2fa65cf-288b-4c96-8adc-e4b3d5638868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d84da0-2ebc-4275-913f-001d07389e3b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714bf00d-b71d-4d4e-8b79-b33698ab2283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "396534a4-4a2b-4bf9-a7a8-cae693fd64f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93369c9d-0ffe-4dfb-81e7-ac4caf27d5f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b156956e-f86c-4b11-9b83-5e4e99784cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2d5401-bbe0-4e6d-8856-7fef3e034a5b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a80a25-3596-4a10-a4b9-de5a323377f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4339903-17f6-4ec9-94e7-7dadf4782e16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091493b6-c665-4cf7-9dbc-b8f16262c280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a6949e-2491-4113-84e2-4e362ed2bcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462bd1cc-e7c9-4bab-85c2-398b7a88477d",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af18a558-a40c-44bc-862e-43ef86f9b7b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7820c00d-4cb3-405f-aaad-f00bbff57814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ad4d7a9-44b0-4154-9dd2-32b3beb18cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0486fc2-aff3-4176-ad31-396b64d0dcd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67ba8dd-e0db-40a9-9187-6f7b07781765",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d582892-7c93-4776-b80d-0e2b4c67ff08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37085604-b217-45b2-8bee-c9785fdca885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98708454-ba57-4508-8d5c-10c7214a9bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf2333d6-e9c6-4566-b4c0-b795e7c89c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093f8ff9-4fec-4787-8a4f-353a3af92102",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57ba20b-38ff-4ccb-ad58-039e1af2f966",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "474b1faa-934a-488d-a1e6-7f66f5d1a154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef4308c-47a6-4d37-8c2c-2d047e465f42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79b1285-3921-4f36-aa3d-8302800e7471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21465a83-de3b-4759-bb23-af8b78794c20",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3347966f-41b8-47ad-8cad-3d6cf87047cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9832c9dd-b890-467a-a1db-702b506ee6f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca66cd97-e407-4ae6-8b9f-8971ed94246f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28eefb7-9c0a-4ce2-9d46-e5934e9d1fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09a62db4-251d-4a02-829c-2193e77e90eb",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "917cc08f-50a6-4ca0-9caa-e9a340da5cb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af0f19a-7bd4-4a83-8650-9c18f72f8914"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32dc018-16c7-42de-ab4d-c37bef67a934",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4f4666-464c-4def-bc25-097dbcc5ddb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38a762b6-096f-45cb-b589-b9be8707dd75",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fbf9070-3106-457c-9c35-e83d7e3cf662",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ffb881-afb0-4e33-a387-fc8a600ab048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edeb3c99-88d0-4034-9c46-ee9aa3db9629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "854f11dd-cd6a-4885-8bb0-202dcb04c41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dfe61d4-0b95-4000-8ad5-1c30b776bff8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b81474a-6b7d-4d9f-b48f-06a5931a4f18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4597c36-36e6-4395-90dd-6d79f31929c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa3a17c6-2c34-499f-9c11-68cf06e026bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115586c8-9fcc-4da8-9a55-226851ecd704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d9b6db-36fe-4c96-b8a9-8be2e99161fe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b89f61c-4f7c-4bbb-a5d7-166bf4848ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a7e3fff-d02c-40a1-8960-6bc0517edba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5bd5ea4-3744-4617-a482-44c863972fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5a6f4be-15f4-473b-8e15-fec5dfd02779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80bf8bf-781c-4068-ad7a-428c1b064159",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf3b22c5-4010-4b18-bb99-2049303d5ca9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e6a598e-3899-45f2-878a-946d371686d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b5109c8-4208-4f2d-b994-8cfd04105f6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315110e5-8c11-4ab2-b1cc-d9eb81349e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66e4171-8840-48f4-919c-1b3ffc017b7d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d78558-e619-49ba-8d6a-933b72c98fe5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f3b6435-f6d9-4063-a9b5-6da3ec28ac75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052f9782-9fac-4bb5-84ae-ecf6bc73ed63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3845310f-eca7-476e-83c7-273e46196b75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5338f522-6c07-4c49-b8b6-c61244bc69e8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e663654-6e25-46b8-9a2e-60dadf52ea5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad852338-c58b-451c-94f4-807c7e4dbdde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2472d8-94f1-43b3-81bf-9125042f83ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04c277b0-3d36-492a-bb83-f7e4c7dacf5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a8178d-8602-4335-a7f2-5361d64c5e1f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148dd2cf-9161-42a7-80bf-2260a1d68c58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e1d5e0a-e715-44b0-8879-ea7cb5896ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f371b0a-ef7a-45c6-aa77-7460a74784dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ecfd736-388f-4133-bd8a-e1c34ec45cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebf44c7-2e82-4104-ae9b-a0173479ff43",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3475536f-1580-4135-be06-3eef7581ab65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "688085e7-d15c-47b5-b909-0dd574be687a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fe4e530-d535-4879-82e3-a7760d802ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b50f973-8637-4cbf-9757-db947af2f024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdffbdd0-840b-4411-b9f3-aea60c7b514e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b788a4-77d6-43e4-96c2-3a009b5b050d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17de359f-1504-4209-af1c-7a94a74e9981"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a701266e-2138-4543-9347-4d493358635d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c439daea-f6a1-46ec-a1e5-513fbe815ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7999fa-1c41-491b-b393-e210393fe846",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e6cae5-f42c-41bb-a221-5044826687a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a3a478-cf81-40f1-ac5d-938faf564d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc50ca16-dcc2-4ede-81bf-179ca6bac49a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "726a0a0d-51fa-49b6-9627-7b4ddf4c3e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d025bf2-1eca-47ab-b002-958672af59bd",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b02c54-e548-4380-b8bd-d0f819b8c600",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "448febb5-ce87-4642-a408-0d8d9030ee33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627e13f7-aa6a-471f-9813-af3476e3932c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5ecc5b8-5c57-4f3b-962c-8388932228d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f6844f-c9ec-4732-99c0-399657ed5780",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9552c912-e43d-457b-ac4e-d6acab54e669",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13409ab7-c3ec-4424-8cd8-548ab4ae5595"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c026ee1b-059f-497f-9f4b-2fc825f19669",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03cfec61-45d2-4e98-b0c9-663fca0c2629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb62ec0-f99f-4c63-93de-8e6229895b13",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c630208-4ebe-4acc-93ba-5e20cb87b171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "692fb91b-1ce6-4561-b91a-ffae53fb78a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac973719-2121-4529-962d-a211c6926a41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fba8bbf-ca9e-4540-8575-06effcf98884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8906d36-7e7f-4e94-b660-07f17c955175",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bea3bb0-7bf8-4542-be5b-692acde9008e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a115f8b-4906-4e54-a38a-3e874b1c0e01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58747732-da30-44c3-b689-8baf2dd10d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f186b7b6-523d-4d34-a926-8f452f1c9ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0047c2-3e07-444d-9d20-3bb078c311f8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ae2b93-08f2-45bc-94f3-4fca8c27f844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6fc7bee-77a7-4a06-8c90-db55108ec08e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ada5c3b-994d-486a-a7b6-d79c37563b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad1065a-cb6b-4b5c-8515-e120a691f94f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d2d7e2-ddfd-4a93-89cc-eb336033b3ec",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fc4028-606c-4a55-aa5a-ba99f5d02045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f09c109e-1af2-47eb-8a40-26f0786db67c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc8cc5c-fce8-4dc4-bea4-9b2b8982b35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c504aa-1d52-4ac9-a5e3-23c18a757538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7452aab8-8024-4e66-ac45-96b5e3134a05",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b7b1bc-b1a5-49ad-86e4-f600070a49b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53273a93-12c1-421a-9c46-ab41211e0614"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af27a1a4-956d-4e56-a5bc-0c9738386c6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7a94b57-f1e5-44d7-a220-4da22dc3b6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dd5a523-bdb0-48fe-b803-83240c17327e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51f194a-5542-4f1b-8c07-3f4a1820b481",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2641d462-a7cc-4c66-b8e6-1812c366790b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d694fe04-310d-4d47-a7b9-76fe3cd0578b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d21c697-3d05-4cfc-9a4f-7578d27e7af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695cfb09-555b-4a1a-8819-adae375f989f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179b478a-fb25-4aed-bff9-172a1dfe21fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee9ee4e-288a-4d4f-8278-856fd53cb5ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b912e1-e1c0-41da-9e2a-8121d92cd634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ec6bf2-7175-4ed2-8605-7230c7e884b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8725067f-0eb2-4c33-a081-031beef86756",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af99311a-7b80-42e7-abc8-998f39a15395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38fcfda6-c37e-4f8c-abc7-4c8a1cbf6790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8426de4a-92ec-40a9-ad55-b958dcd308c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfb49f7-139f-4992-bdca-c7dcc5f3911f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce8f530-7ffe-4bdf-8b8f-f5ef15723c2b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c24ace6b-53d2-4e8a-89d1-d06905a70747",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d61c8198-0b76-4aec-8504-4a32f99f5e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "719cc3ae-2c3f-4276-b7d7-0e2eed7669e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158b21c4-95af-45eb-a515-6d862f1d6a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33c3e18-9095-4e0e-9258-b6cb573772e6",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d2c37b9-de58-4842-8d93-d17feba16d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fbbbed6-8cc7-4e61-9f20-79ab7a1f82cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a238d5f4-ab6a-49f7-9cb9-e11e40b611db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fb64407-3d0e-4048-9a29-346e46185e92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05811c3c-ac6e-4ad8-99b5-b6e295d49762",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a6e1e6-a801-4dfe-aa51-5b4d77d88d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "608afaf4-04f8-43b2-a521-87300abf6f39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17e1afe-6ef2-4cde-86b0-3b48291816e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f50bb7b-e3c0-4169-a630-cdef0ab662c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e83798c1-432c-48ee-9c40-a10de24dc614",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e765572a-f8b5-48ae-8996-c2b4296fb913",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ec24d8-d244-4409-be94-8f6fb71b5b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a36037-7b3c-4b23-aa4f-196d35921b3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b945580c-1798-408f-a49f-1aa8dad8b354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bd7351-68c1-4600-b53a-859e41443774",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd17de35-e114-4c84-9add-864318441131",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "433cef4d-80ec-4257-aa0f-37cfae98a667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b628437d-6155-45d2-beda-f07256f6c58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfec7103-6981-48b7-9eab-f45391e0b7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bf0e6f2-cfa9-446f-bd8c-7a1ab6f7bbd6",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6e0418-196a-4263-87e4-803753725072",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0f0f3e8-6e68-43d6-8ab0-2621bf218a72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "843783f1-2322-4a1d-b977-f83d9870d39b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e656efe5-f82b-40cc-acd0-050d487427ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736d3899-d3a0-4651-8990-987f8561b59a",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e5774b-a3c6-4883-9a50-db5b898e35e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48d3deb9-e803-41ee-99d0-b5214d875651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1008f6c8-a811-4ad7-b744-e3a656e2abeb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b09741-4bb7-4f9f-b5bf-e55f47f96529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1fe0a9-9d32-4784-9f4c-f2706f0e9097",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeae6dca-167b-4300-a7f8-58ffb11d9890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81d073a4-0910-44da-ab7f-9ea1e83e45ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da22e22f-d36c-4838-b5df-e6e93e0e1b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb05930c-997c-479f-a6d5-b03cfc205dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8ce18d-b248-417e-9bf8-cedbd9c0e94f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7ec2f16-8071-4573-ae8d-108dfa9a3552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fabd488-f6c9-4a45-99f1-02658e1cb770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3178ba06-dd6e-48f7-b88d-9d941888c68a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8365b88-0c9e-4602-971e-03e3b14402c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c16ebd0d-0a3d-4c88-b761-ac124c16fadf",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c33656f-d633-40a3-8ff0-612372ea04a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "980fa646-dcaa-45ea-b3ee-c8b68db8febc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca042cca-64e6-402b-9ed2-d4820ae1c818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c81745c-0875-4b97-84b4-0fd8cfc04c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a7fe0f4-439c-42c6-b37e-f6dfd67bd0fc",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b587cab7-f667-4109-b3a7-b2139e428942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08f3bd62-389c-4182-acac-fae1de047867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d4066a-d14f-4c5c-bd6a-3c3aea1187e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07d1b2c9-6cac-47df-b2e2-b67b9b73f8f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ab0ccf-129e-4316-b892-294673640991",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5225625c-7964-4855-a03f-70f5c805af19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ad651b-f1c7-4d1f-a028-d341d965da63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3bbb1e-fff6-456c-98ab-d6509b1b3fbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d52de6b-29d3-4f40-82e4-619f68f040e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64bb4d1d-f356-4db1-90e5-a8eaff4c93de",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f187ef-9960-4fd8-8c4c-e01ed2e136e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6afce84d-5f23-43ff-8702-4593840ca9b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5adf1e-f40e-43e1-9a42-4e4c21a34696",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf0f17d7-4f2c-4537-8e54-577cb0502400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097db4ab-f715-4d12-950d-244cd44cdef4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da09649a-52d9-4460-a205-b6b272ead4cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab0a6bb-2145-473f-b1ca-082dfad81769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf7b42d0-ad93-493f-a4e7-35a3b9ea096c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c9d15e-63de-40e7-a312-d8ae58af5066"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b3bf365-f6dd-4ff2-b546-436f1560cf11",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fe0bc58-02c0-408e-ac42-a918d6b19320"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "85eb88b3-6064-488a-903e-a1897b07be16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2ba03f1f-0ae4-465a-8706-b89c8f845ee3"
                    }
                  }
                ]
              },
              {
                "id": "09ae39de-b25f-4f23-b166-829d6d5addfc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc22f17c-4299-4095-a77a-7b35a913be5b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e934349-7691-443b-8587-f6c4ff8a29b2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "cb864b8b-e9e6-4d09-9903-f0765f163d36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10f1d9b-7018-4fdd-b6ff-c0d1b208b8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e9bc03ca-7aa9-4914-8ff4-5af2ca2628b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "336a9d8c-858e-43f2-8df5-257aedd8ceb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5a219ee8-80a7-4fc2-abc9-53faa3bd7e5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "624fd6fd-208f-437b-9651-108500973e00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69eec89a-b246-47d4-8306-785d837bafd3"
                    }
                  }
                ]
              },
              {
                "id": "3893a133-aed6-4b7f-9e17-6d53f6a5ca6c",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c7a39bfd-c676-42c8-a450-faa8c4603f7f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e98e4dc-8127-459b-bd75-c797467e20cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b6084f7d-fd95-43b1-85bc-038e07ae9822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbd9de0-bd65-40d3-b6e9-3a5fefe3e328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7511070-756e-4cb5-ac91-7e6c8233c7d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "5dc57bd5-a272-4eaa-a0a6-66703dd14809",
            "name": "Positive Testing",
            "item": [
              {
                "id": "55cbc248-dab6-4818-bb3a-21325d447a64",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f373e175-e3c6-495b-8f89-ec81cd1772ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ab3ce20e-0e3d-46a5-874c-84a36cfa73fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a8f8302-165a-43a7-9d08-10b6ca7ae13b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "839f15e3-6fc0-4996-bc96-8ca6030fce17"
                    }
                  }
                ]
              },
              {
                "id": "6be855e8-fa5a-47e9-8cbf-6b579f80ce09",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31b8c7d0-0e56-4712-9a54-4e40f85ed221",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ee60ad04-e19d-4bbd-a28a-86498d013a4d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fa3a5a0-cdbc-47d0-9a3c-8d0bc0eea777",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3992a71e-fcc4-40ec-a6b1-f8a19eb52c8f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "43f08a81-8dd7-4882-ac38-67e1b5a86a7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "abaa42e1-eec5-47ae-a4a8-635010bcd450"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "876f60e0-616b-4e24-952c-56046c0f3c75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0b3945e-3072-4efb-a080-f203b6b222ce"
            }
          }
        ]
      },
      {
        "id": "e6bac6bc-2d1d-48ce-a4d6-91cd79422460",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7938b6c1-cbf6-4f9d-af85-dd2f348a31e4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7094ecfb-a88d-4120-b77b-cbad6077e83c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "746d9602-4654-430d-b6da-7fc4dcdc20c9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2d81833-e2df-4e61-bd28-d7821b1207db",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "216975c2-f155-416e-8ebf-60a5ccca2c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f2aca91-1529-447c-8a9b-24402cfe00a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03f06d1c-b54a-4a8c-94c0-3af399dfab8f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c208701-fb4f-4bfa-9fe2-acdb130ec67c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b5c8175-a3cb-43cf-8b0f-063bc9cec4ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "922dcd92-691d-4dbf-bae4-b71da260629e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e97b305-72d4-4cc1-866b-c1f92e80e1d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cfae5c38-d93c-4c4d-918e-54c13e318975",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "a81687ce-0d67-4724-bd8d-680f565a2af0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eaf42675-31f0-4bd7-b56e-33e8f77e418b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e85c23da-d343-4eee-bcc6-a0827b9d5f09"
            }
          }
        ]
      },
      {
        "id": "9203ef31-28c5-40d9-9c10-75172d8c0b88",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6f15fc8f-936d-4d1f-826a-e31dfac95724",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c76861c4-2146-46ce-b8cf-e9d752befe68",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d026a1f-0d97-48b2-9b23-fabe421192f5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cf4161-6687-4711-a4c4-435fe8fb943f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6dc60de-b004-43e0-9d61-14ace20a79f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa5c9a95-4712-4fd6-8a8c-c2df86677842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c244a1d4-6b17-409a-b98a-36f6fef4f0cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b7a1d2d-d922-4591-aef8-a16d42175d37",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10f5d97a-74d7-42dd-986b-d1abd541c0ae"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "baf2a493-1b12-47d9-adf3-745eb6981a01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2de82cd2-cc3f-4956-9419-c61e6a69649a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ea94966-0a29-41bc-a7bc-5ca41a672f37",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8098cfe5-a104-424c-998a-3cc66af9ae73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba0988b0-2a40-4c4b-9803-f4a056d66628",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef611f63-a471-4380-9984-625c31103672"
            }
          }
        ]
      },
      {
        "id": "e98d2094-88fe-4a7b-881c-a1c99de9e7ef",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b6b73167-1b1a-4bc7-98e1-0419f92bf2bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7a8af968-b650-41c2-a760-2e8d5b3adf5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3bec7e23-873b-4a6e-bbaf-1dbbd8b6bfcd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f38484-e8e0-4bdf-b0f0-ca3a686a8b67",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "149f99bb-ec44-456d-901e-4a2440d9d59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c067480-fd69-4c4d-bf65-91b868080cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4535061-14d5-48d3-b0a9-51df3e107cec"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4b650345-35cb-464c-859b-36a1ea5bdd3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "644c6d80-3a9d-4c39-93a4-a189b31450d0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "424021f6-58a9-4863-9686-db191fe556dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e5e2012-bee1-4cfb-a617-7e6fbd89faf7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26c06ad4-ab38-4882-968d-0a2b51bd859e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b341e0b4-81e4-4d24-b171-d0ce34e41136"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e80f7753-27dd-48da-a66e-ea700586b93a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca96a3df-4861-4006-8dac-8bee1558c273"
            }
          }
        ]
      },
      {
        "id": "12e94309-2a03-4617-8aaa-fcd89a0ce0ef",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "316d7b91-1da3-4a4f-947c-504114a82ee1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c01803d-09c3-44e1-8310-1acb930fe927",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "403cd563-02a1-4892-8514-ab252a710bc0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9ecaa3e-273c-4386-a182-e3e03daae8cd",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c89ea5b-b1c7-4b90-a7fa-4515b61f7345",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 96.09126984126983,
      "responseMin": 23,
      "responseMax": 820,
      "responseSd": 85.93530468003839,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1715906204183,
      "completed": 1715906236768
    },
    "executions": [
      {
        "id": "4779571f-6f45-432b-8fed-a568fb67c6d7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "bbb78d61-ebec-447a-a12a-1e0d93d46213",
          "httpRequestId": "c089a492-7a0f-4133-b38b-a5e93fc19741"
        },
        "item": {
          "id": "4779571f-6f45-432b-8fed-a568fb67c6d7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "534b8ae4-010b-4c8b-81e2-c2debb181933",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 0
        }
      },
      {
        "id": "b2094509-3311-45c2-897c-656bee923d00",
        "cursor": {
          "ref": "cb80864e-0dc8-4e31-a778-7c24d0470557",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "68451f57-a67a-47a2-8831-c7840c8ac304"
        },
        "item": {
          "id": "b2094509-3311-45c2-897c-656bee923d00",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bd07e3dd-85f6-4dda-9830-5e5d079db194",
          "status": "OK",
          "code": 200,
          "responseTime": 23,
          "responseSize": 0
        }
      },
      {
        "id": "e8a2e93e-242c-40c2-a80d-c1904119a97b",
        "cursor": {
          "ref": "59acb373-f79a-484b-ae25-7a778930c6c4",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "70debee9-1147-433b-88c6-c723e0e81cd4"
        },
        "item": {
          "id": "e8a2e93e-242c-40c2-a80d-c1904119a97b",
          "name": "did_json"
        },
        "response": {
          "id": "cb386401-a141-4c5a-9cb6-bb26213a07ba",
          "status": "OK",
          "code": 200,
          "responseTime": 367,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89f4cda-c2f6-4dac-a9e3-1c6299699177",
        "cursor": {
          "ref": "cf2417a2-2b71-4c6d-85ac-81fb85010159",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d991ae12-b633-4ac1-8ae3-71248101f668"
        },
        "item": {
          "id": "d89f4cda-c2f6-4dac-a9e3-1c6299699177",
          "name": "did:invalid"
        },
        "response": {
          "id": "b71e8346-eb12-459d-a152-c9347742a8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89f4cda-c2f6-4dac-a9e3-1c6299699177",
        "cursor": {
          "ref": "cf2417a2-2b71-4c6d-85ac-81fb85010159",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d991ae12-b633-4ac1-8ae3-71248101f668"
        },
        "item": {
          "id": "d89f4cda-c2f6-4dac-a9e3-1c6299699177",
          "name": "did:invalid"
        },
        "response": {
          "id": "b71e8346-eb12-459d-a152-c9347742a8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f3845f2-9b00-4397-a35a-fe6fc6cba988",
        "cursor": {
          "ref": "da1b6287-fc49-4ce2-8b7e-1e2b938905f7",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4cc97d6d-376a-4ae8-8e5f-735f2fd3631f"
        },
        "item": {
          "id": "8f3845f2-9b00-4397-a35a-fe6fc6cba988",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "d3b09392-28dd-41b9-a4cd-374a1cc3f1c4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 334,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edaed79-7cc6-4ba8-af4d-c11b9febd49a",
        "cursor": {
          "ref": "16beb87a-d1a2-4ddb-bec0-980678e791a2",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1adde6c9-7f30-49ec-91fb-1ddc9f95f3d2"
        },
        "item": {
          "id": "0edaed79-7cc6-4ba8-af4d-c11b9febd49a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "52d6a72e-80ad-4387-917e-881dfdbc78bf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7cee9b-791a-481a-a63c-7c9786659f3b",
        "cursor": {
          "ref": "ff626ada-477d-4fa7-9001-89c63ee8d272",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "db71d4c7-9874-4a87-8561-ba9d804d6e47"
        },
        "item": {
          "id": "bc7cee9b-791a-481a-a63c-7c9786659f3b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ea8eb92f-8901-447c-b0de-532a05e540f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be6f1d42-1824-4e7b-9ed0-65b3a240b21a",
        "cursor": {
          "ref": "b882ee84-8e64-4c62-a843-a074bb2e045f",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0aff7df4-be9d-4183-b8db-c5f4cc1e867a"
        },
        "item": {
          "id": "be6f1d42-1824-4e7b-9ed0-65b3a240b21a",
          "name": "identifiers"
        },
        "response": {
          "id": "5cf6cc9b-dddc-4957-982f-57308c64e28e",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87ad043-bc36-4f6d-a6ba-98eaf4278a4c",
        "cursor": {
          "ref": "13c6c40a-e23e-42c4-ae41-c01d4d05aca6",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9e9afed5-0641-45ac-a499-73a511bc006e"
        },
        "item": {
          "id": "b87ad043-bc36-4f6d-a6ba-98eaf4278a4c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "478624c6-2a16-4978-ba7d-863db097ecf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54345201-b7b4-4ac4-9659-6be2b1dff7e8",
        "cursor": {
          "ref": "06a27d20-8587-464f-b0c0-f99e8650e4b9",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "10d03ffa-4bfc-4a1e-82f6-1346c5d4c957"
        },
        "item": {
          "id": "54345201-b7b4-4ac4-9659-6be2b1dff7e8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "fa03b026-6856-48b4-81ab-c86aea75f7d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c847b2ba-c9ac-4877-84d9-dc04e662461f",
        "cursor": {
          "ref": "919d3c41-9039-45fc-81aa-38a883d0a6cb",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "680d3a2f-730b-4d6b-8d22-c9deefbfd3c8"
        },
        "item": {
          "id": "c847b2ba-c9ac-4877-84d9-dc04e662461f",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5eb137c3-edf1-4057-9067-2033c4f19870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a61a31-f40f-4635-b9ec-a9f8904276a0",
        "cursor": {
          "ref": "0bbdf39e-7bca-4907-9bdd-0e61125feb17",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "54be13a4-229f-4595-b097-d9551ca60e48"
        },
        "item": {
          "id": "45a61a31-f40f-4635-b9ec-a9f8904276a0",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "db8cd158-6005-4cad-b615-190575e5dec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11fa359-28c1-4625-8fe7-9ea0fa5c284c",
        "cursor": {
          "ref": "77e09abf-5a00-47db-b12b-2dc91fb6ac2f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8ca04e50-37bf-4596-8f4e-fda453df9331"
        },
        "item": {
          "id": "e11fa359-28c1-4625-8fe7-9ea0fa5c284c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "38c01d35-78a7-47ff-a843-910dbff310a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8eba011-fdb4-4b73-8196-da75f89eef71",
        "cursor": {
          "ref": "3dce647e-b35a-422a-a67a-7c101b3c3b8e",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "affdf108-7216-448c-ab6b-4ce024a5b80f"
        },
        "item": {
          "id": "f8eba011-fdb4-4b73-8196-da75f89eef71",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bf4dd8f6-acea-4d64-9856-e27d89845662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b37ced-137b-448e-8f85-ef83c9691af4",
        "cursor": {
          "ref": "0779f338-000f-4a76-a1a5-bb9cd17eb5f1",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7526b367-537c-4144-90a8-9374290cd405"
        },
        "item": {
          "id": "53b37ced-137b-448e-8f85-ef83c9691af4",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "95476c4e-518e-4a18-ae77-36b7c83602f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9641fed9-04fc-4e39-8921-a9bb582bc935",
        "cursor": {
          "ref": "0938c47e-8254-4737-8927-936eeb98609a",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "259e9c8d-4a5a-42bb-84ed-5d09b37d2e28"
        },
        "item": {
          "id": "9641fed9-04fc-4e39-8921-a9bb582bc935",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ce2fb5af-c739-4b60-9c3a-6ff6ecdcc40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e44dec-e8de-40b8-bb78-30d39a12f0d0",
        "cursor": {
          "ref": "4caebfb5-650d-477b-911e-8d1cf6879eb0",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "585610ef-2e05-47da-8ad5-0f2848a5395f"
        },
        "item": {
          "id": "f6e44dec-e8de-40b8-bb78-30d39a12f0d0",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1faf5602-3565-4fc7-8525-cb7cacbd5509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837dcbbd-8db9-46ab-9a5c-74b5b61cc3d0",
        "cursor": {
          "ref": "4d1a226b-dbbf-42ac-92eb-136ecf010dbd",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "89b0f495-e164-4d1a-bc95-dd498783fc30"
        },
        "item": {
          "id": "837dcbbd-8db9-46ab-9a5c-74b5b61cc3d0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0a7e0292-3b1e-4cdc-a4b2-06e8c0d2c62f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa5d2597-6093-4614-9b9a-5f9dc4ca238e",
        "cursor": {
          "ref": "a702db72-4f74-4380-b023-2e81441a517a",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "aa7d755e-b4d8-48f1-9acf-45626f67dd2d"
        },
        "item": {
          "id": "fa5d2597-6093-4614-9b9a-5f9dc4ca238e",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "6bc1c544-9928-4f07-8844-775c9af82167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660570d8-66df-42c1-bf41-459962416d80",
        "cursor": {
          "ref": "0981ffee-779f-44eb-99e7-b6f20065039c",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6dca0a18-a38c-4115-811a-5b798eda9e91"
        },
        "item": {
          "id": "660570d8-66df-42c1-bf41-459962416d80",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5d0f2e08-9c80-4a6f-a92f-4b3490064269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373b7754-30c5-47e8-9557-60b1c44d22c5",
        "cursor": {
          "ref": "06de0aa8-84f8-4e73-9e81-21c22c0574f2",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "746fa4d8-0590-435b-a018-06fcd05eb179"
        },
        "item": {
          "id": "373b7754-30c5-47e8-9557-60b1c44d22c5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a505eab1-1eb3-42cd-9ba9-7b55f27d955b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac35980-b727-42e1-8761-315e0a321e4e",
        "cursor": {
          "ref": "49a8dcb6-1727-4b71-b394-d6ae5b419e85",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b96c8917-d22c-4c0c-a0ef-0bd8c64bded2"
        },
        "item": {
          "id": "2ac35980-b727-42e1-8761-315e0a321e4e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "f74eff54-bba5-43ac-8479-9c50bfa9dbbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a76a264-457c-42e9-9375-73108fa25c1c",
        "cursor": {
          "ref": "aad01516-a0da-43f7-b3c1-2c26bf6a4e6a",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b3e4293f-5715-47b2-a3b5-c87f40bda6b0"
        },
        "item": {
          "id": "8a76a264-457c-42e9-9375-73108fa25c1c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e38e5726-75e8-45ae-a44e-5bf8ccd25478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1ea94d4-bcc3-4588-8adc-94a58962a59e",
        "cursor": {
          "ref": "3f5f95e5-a529-4f8b-a11a-5478ba154990",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "15a2111a-569a-4757-824c-53bfbc6969aa"
        },
        "item": {
          "id": "f1ea94d4-bcc3-4588-8adc-94a58962a59e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "75c4b7f4-819b-47ed-bf05-46e75d57b097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d36979-ca5a-46be-a19a-632c7f1e6c8f",
        "cursor": {
          "ref": "62bd6fec-9e4d-4d80-9236-7d563fa2a951",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ff34cdeb-be61-4d71-9ba8-6fb5b190c1f3"
        },
        "item": {
          "id": "a7d36979-ca5a-46be-a19a-632c7f1e6c8f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "72120fde-95ee-4d3a-b656-a0f01593a786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b174665-4c8f-4dea-9ea7-0bde4d46d40b",
        "cursor": {
          "ref": "c3a0970e-1263-4787-8355-60ce14f82550",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "376a3c4f-e9d1-4d38-b693-5887841a9726"
        },
        "item": {
          "id": "1b174665-4c8f-4dea-9ea7-0bde4d46d40b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "06238679-c3e8-4ddd-8732-4794a113b3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9506fd-1469-4891-a2df-0cc711c23b97",
        "cursor": {
          "ref": "4420ca54-801e-4272-9b84-d92c217f8660",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "06b70c6e-9bce-4b8f-b136-e52122ec3832"
        },
        "item": {
          "id": "9a9506fd-1469-4891-a2df-0cc711c23b97",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "0d7bb480-3db9-44ec-82c0-7149093ee1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3970d14a-d219-424e-8644-714fd417520b",
        "cursor": {
          "ref": "5c501793-781b-4367-9a8b-e64fed9f0255",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f9a23d94-8466-42ea-a3a2-4fe3583fe33c"
        },
        "item": {
          "id": "3970d14a-d219-424e-8644-714fd417520b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ac16f58b-686b-49ca-b0b1-55870643bba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e571fca-dde2-44fc-96a1-e522828ae4f5",
        "cursor": {
          "ref": "4331ab99-6260-4a9c-88fb-1e6ac465a5cf",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1929cad0-cae8-4068-ad59-d49ee1d5f3af"
        },
        "item": {
          "id": "6e571fca-dde2-44fc-96a1-e522828ae4f5",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "758699c7-563f-447c-ba7a-b9d54df0d45a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd60e26-35df-421a-b77f-68305f2e9438",
        "cursor": {
          "ref": "9b703b20-35f7-4979-a1a0-0620e17c5b0e",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d45808f7-62ba-4302-aa64-1db5461e08d6"
        },
        "item": {
          "id": "0cd60e26-35df-421a-b77f-68305f2e9438",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c679810c-68f9-456c-a5f3-c8915771e994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5543d463-1774-4a61-aa9b-381b28e85930",
        "cursor": {
          "ref": "ee1a9e37-a9df-4a67-8550-d3ca542d9545",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0ae005bf-1485-49b9-9f60-83498122bfc0"
        },
        "item": {
          "id": "5543d463-1774-4a61-aa9b-381b28e85930",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "faaf0d91-0a73-4ef4-be11-617071a156ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d48178-d356-4007-a55c-48a4292dea17",
        "cursor": {
          "ref": "9996bfc6-2f42-4e89-9f12-fab75cb0b895",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fb296c3f-52af-47b2-ae50-a9a7f277fa11"
        },
        "item": {
          "id": "20d48178-d356-4007-a55c-48a4292dea17",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2d193d47-1674-490e-8f7d-e16ebb596cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63308e49-9c8d-459d-b5f6-370ea6d0509e",
        "cursor": {
          "ref": "655437ad-5d16-4406-baad-ae911fe864eb",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0374edd1-c13b-4513-a229-89fb2158151b"
        },
        "item": {
          "id": "63308e49-9c8d-459d-b5f6-370ea6d0509e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ecddc525-528c-479e-9655-c965dbea14a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f5b544d-7917-4f2d-8e36-d9c37b4fd217",
        "cursor": {
          "ref": "e61ed559-844f-48fd-bc13-4e96c4bfb472",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b2036716-cae8-47e6-9220-2c1865761539"
        },
        "item": {
          "id": "2f5b544d-7917-4f2d-8e36-d9c37b4fd217",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "10e59701-e85d-4888-a27e-c4aff981a4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdeb4aa6-97d2-482b-9101-5b98dd57b356",
        "cursor": {
          "ref": "04afd246-e3d2-42e3-946c-3878434b2478",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9ca835f0-9444-426e-a178-54049364ca5b"
        },
        "item": {
          "id": "fdeb4aa6-97d2-482b-9101-5b98dd57b356",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ff38d506-40d7-48e8-ad9f-6a3d18df9ef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c03e20a-20ea-4b85-8953-f54de38404f1",
        "cursor": {
          "ref": "f09c4b35-5854-4500-925c-095f4fcbfb08",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bad3499b-2612-4a29-9dde-7114d231bb53"
        },
        "item": {
          "id": "0c03e20a-20ea-4b85-8953-f54de38404f1",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "88fab4af-5316-4f77-b579-d3ff6a518868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a102d2c-a091-46f2-9b2e-3085db7a418a",
        "cursor": {
          "ref": "75e0d47b-cadb-475d-923a-77edb79a3e03",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "d4ff8b60-0ccb-40b4-a722-df4811935447"
        },
        "item": {
          "id": "6a102d2c-a091-46f2-9b2e-3085db7a418a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e9b54083-2e08-4776-9343-cbbf2de6d260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d451db09-e2d4-48ff-bfe1-0ad0d8c73a90",
        "cursor": {
          "ref": "67787182-6e04-4b7c-b138-22ff4161ef8a",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d4d0cc0e-92b6-46a8-8dc8-6243a078606b"
        },
        "item": {
          "id": "d451db09-e2d4-48ff-bfe1-0ad0d8c73a90",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f0fb6b38-ebe5-43e8-a434-52ff66b96e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b437b7c5-b950-4180-a521-522128bf93c3",
        "cursor": {
          "ref": "82066460-f81f-4d18-8d8e-4f7bc37a235e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9bbefc12-f7b1-4d59-be5d-925399e7160b"
        },
        "item": {
          "id": "b437b7c5-b950-4180-a521-522128bf93c3",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b023d8bd-b9d9-4f52-9b46-f6317499b708",
          "status": "Created",
          "code": 201,
          "responseTime": 820,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "e54dc0c3-4bfa-4720-8d95-f5d8b12b1d97",
        "cursor": {
          "ref": "dc0aeb95-bd77-48b5-bae4-ebef5f5bcf96",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0e94d2a8-0f84-48f7-a3a6-776d69597f27"
        },
        "item": {
          "id": "e54dc0c3-4bfa-4720-8d95-f5d8b12b1d97",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "56eac651-6fbf-421a-b749-df8249d8e830",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e58c1fbb-3ea1-4eab-b35e-1950ea6c39b8",
        "cursor": {
          "ref": "c331f418-048f-4bf1-be9d-27d44a387b9d",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a0109f8e-bde8-4137-8958-39f1f60478d9"
        },
        "item": {
          "id": "e58c1fbb-3ea1-4eab-b35e-1950ea6c39b8",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a554d224-7192-4930-bb7a-4e23d69ab9d3",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6a778110-6b8e-4de9-ac8f-3b0da781ffdb",
        "cursor": {
          "ref": "ea4bad85-f3df-4e89-bacd-a778f9990895",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d84a9d02-7da3-44b3-9e22-d9a9398df13d"
        },
        "item": {
          "id": "6a778110-6b8e-4de9-ac8f-3b0da781ffdb",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "00445edc-1ca9-4485-8e81-342c4b428512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe7ad8c-ad72-4ca3-9727-5d8434a27277",
        "cursor": {
          "ref": "01c0ff1f-5be7-4cbe-9b93-82fe11ed5ec1",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "8a64bcca-5e24-4d37-84f1-b57af879462e"
        },
        "item": {
          "id": "cbe7ad8c-ad72-4ca3-9727-5d8434a27277",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "3f08f214-4c64-430b-8bcd-84b87f03b9d8",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "6a7cd337-3fb2-4c16-a735-b1cbdbebee0a",
        "cursor": {
          "ref": "399189ba-e3a4-45b1-9ed7-04ebb6d4cf1e",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cf279832-ccef-4ec7-bd9e-c688d768906d"
        },
        "item": {
          "id": "6a7cd337-3fb2-4c16-a735-b1cbdbebee0a",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fa3c6359-f1ac-46f6-95b5-4d71f166eee6",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8ea9fde7-1bff-4f88-9858-343cc13d3c68",
        "cursor": {
          "ref": "83d81121-3d7d-4288-9fdb-e2ed24ad72e6",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "309b8db6-6f18-4019-b1b2-b811ff61d1c9"
        },
        "item": {
          "id": "8ea9fde7-1bff-4f88-9858-343cc13d3c68",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "acc155fa-3be3-46ca-9fc8-7aa2c9c17c69",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8e2619e1-7866-49f1-9633-71a7ed53c8c4",
        "cursor": {
          "ref": "1d15a7ff-b72f-414b-81a9-28b772204279",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "38932f89-6b63-4e9c-b773-0ce37f946d2e"
        },
        "item": {
          "id": "8e2619e1-7866-49f1-9633-71a7ed53c8c4",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fde78b62-3002-4d8f-be4e-4038c89573c4",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c8335c51-17d5-4b88-8a55-61a021293f31",
        "cursor": {
          "ref": "b7808ee4-5852-4662-9d17-5c54d33428d7",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8a609b04-35a5-400b-8670-325c245a6a43"
        },
        "item": {
          "id": "c8335c51-17d5-4b88-8a55-61a021293f31",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "f969b5d9-ba73-4fe1-956c-3692f0f70fca",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "1aa17157-1da3-41f1-a263-312b5f4671ae",
        "cursor": {
          "ref": "910caa5d-91d5-434f-a64d-1c803b945c3c",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fe3c2052-a109-4e17-bd92-d523068ebbd2"
        },
        "item": {
          "id": "1aa17157-1da3-41f1-a263-312b5f4671ae",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cc2578ae-bcc4-4348-b28a-5f83889e030d",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "2866d3e8-8f7f-4c22-9274-a116a625a2ff",
        "cursor": {
          "ref": "a5e3752f-e94f-47e7-ae1a-734589462aad",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "58656e2a-4ca8-4a23-b14e-9c0e8a529b55"
        },
        "item": {
          "id": "2866d3e8-8f7f-4c22-9274-a116a625a2ff",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "53089bfd-75d3-4e85-8186-f22d2254aed8",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "afe09b41-0e4c-4563-ba9a-895bb696b7fe",
        "cursor": {
          "ref": "a78c47e2-4336-48d8-8310-0580b4763eb9",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0515bb44-5692-4acf-a39e-829e6c7cb308"
        },
        "item": {
          "id": "afe09b41-0e4c-4563-ba9a-895bb696b7fe",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9ae2baf0-6d13-41df-bbc0-9c24541ed392",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "b1068da4-cd06-4815-b9dd-78b44f685600",
        "cursor": {
          "ref": "9a4bae47-cf60-439d-86bd-e9903c00e979",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "30ca05e5-da93-4fe1-84e7-46574f21ab11"
        },
        "item": {
          "id": "b1068da4-cd06-4815-b9dd-78b44f685600",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b39f0b3c-7ac3-48f4-80fa-f83a54250374",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "761b5e60-22ba-4d62-b37c-1ec5a92aca2f",
        "cursor": {
          "ref": "47b06aa7-3f48-47e5-bd6c-2cd4dbbd6c61",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "4b6b8c36-760d-4911-afee-2cd5fe9e8b0b"
        },
        "item": {
          "id": "761b5e60-22ba-4d62-b37c-1ec5a92aca2f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f7029698-d927-417e-9cc6-4ef414e8dfe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8028f968-7e1a-4e6a-b0dd-b490b2c50705",
        "cursor": {
          "ref": "4448d9d1-c094-42ae-8370-04634429b658",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2541622c-f152-436a-876c-ec930ec36cf0"
        },
        "item": {
          "id": "8028f968-7e1a-4e6a-b0dd-b490b2c50705",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "8cb40f77-97bc-42f1-af8b-83cdfc7768a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b1cbed-ac5a-4536-b0c1-a3a64c2ed705",
        "cursor": {
          "ref": "464e9a13-889b-4ade-8b68-48d2a1a8215a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b4673833-205a-459a-ab12-145a293f515d"
        },
        "item": {
          "id": "49b1cbed-ac5a-4536-b0c1-a3a64c2ed705",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "f61c0b2a-81c9-4019-b6b5-bf4b10c16e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59da346-6257-42f2-97a6-ceffb5ff2a4e",
        "cursor": {
          "ref": "4198d604-76df-48f8-b3bf-3add025a4dd7",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "fbe60751-a44d-470c-9827-f2197c69ed43"
        },
        "item": {
          "id": "d59da346-6257-42f2-97a6-ceffb5ff2a4e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "79b3f44c-e5c0-416c-bfa8-54259c1d197d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923c6d19-1f3d-44bd-afc8-ee71e04675af",
        "cursor": {
          "ref": "1107147f-937e-4530-8ab8-46741c73313d",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3a298773-d3b2-4e42-8292-30e80341ff35"
        },
        "item": {
          "id": "923c6d19-1f3d-44bd-afc8-ee71e04675af",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "44d74368-80d0-442c-891c-fba53f143933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bdcacc8-410e-45fa-882d-90319f1b4cf2",
        "cursor": {
          "ref": "89906021-e30e-4e64-86c8-641cdd3ec2db",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6ad03947-7f02-424f-bd9a-c920f6447119"
        },
        "item": {
          "id": "7bdcacc8-410e-45fa-882d-90319f1b4cf2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8352a43d-9933-4872-9e05-91d8e2719e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffe2bb59-de1f-49a3-8d81-0b4e1987ee65",
        "cursor": {
          "ref": "ac0bf5e6-cbe4-4034-b6eb-52ec4e6b3caf",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "302f8653-0948-4cc5-8aa6-ccfe8c1509c4"
        },
        "item": {
          "id": "ffe2bb59-de1f-49a3-8d81-0b4e1987ee65",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b470126a-b267-4308-b3c8-9ca8170cc623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e04fa75e-86f5-45a5-b04e-dbcc31c6c532",
        "cursor": {
          "ref": "01628bc0-f4a0-49de-aa73-47f8b75f0cdf",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "86524787-306c-4ad9-8c94-4724ad6e0d3a"
        },
        "item": {
          "id": "e04fa75e-86f5-45a5-b04e-dbcc31c6c532",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a0f7b6b0-b846-4e0b-8ff1-518650e5748b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d04925ec-e5cb-4d28-b445-ad3693094ea9",
        "cursor": {
          "ref": "7d4330ed-0cb3-4777-81c8-22bebcf1c0e5",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "77c0a634-0638-4bbf-b922-405b6ae03133"
        },
        "item": {
          "id": "d04925ec-e5cb-4d28-b445-ad3693094ea9",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "e8d5fb4e-8580-4ef2-93be-df0a52cf46a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4b62a3-a016-4eeb-b405-240148c16d6f",
        "cursor": {
          "ref": "4ab95a4e-f5ea-4daf-9afc-8c797b268a5a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "244a4f4e-8a54-4ee2-915b-597b373f3d5f"
        },
        "item": {
          "id": "ac4b62a3-a016-4eeb-b405-240148c16d6f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6e6b3036-12fc-4a20-b804-9546dea54152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f91c250b-c00c-421b-bfe4-20cea697ea79",
        "cursor": {
          "ref": "026f2041-0572-4fba-a520-e1d6f772ac08",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "9850d00e-f978-499f-a173-7be888df498a"
        },
        "item": {
          "id": "f91c250b-c00c-421b-bfe4-20cea697ea79",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a57f6138-5414-46b1-993d-8b7d830d011b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033e2a45-151d-4490-8d57-1068ecae53e9",
        "cursor": {
          "ref": "28821a85-5bcd-4282-9c64-0b5edaed142e",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4c87dff3-c70b-415e-b809-1e1050e6bfc5"
        },
        "item": {
          "id": "033e2a45-151d-4490-8d57-1068ecae53e9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "9a671a73-1edd-45c7-a0e5-e909354cfce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf02ab20-565a-4bf0-8685-ce17b5ac7d57",
        "cursor": {
          "ref": "cced0ed8-9240-4c25-80ab-f0f277bfa0d7",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "86037672-4a10-4006-8e7c-30a4380d0765"
        },
        "item": {
          "id": "cf02ab20-565a-4bf0-8685-ce17b5ac7d57",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "afae49ae-ca36-4804-a5e7-4f08f62d8511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f95bb4c8-e861-4480-a5c7-386f8cd3fda7",
        "cursor": {
          "ref": "cd9b8f68-13e2-4325-bbfb-e1db406405a4",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "36c13b23-f7b2-4d1a-ab1d-0549583940c3"
        },
        "item": {
          "id": "f95bb4c8-e861-4480-a5c7-386f8cd3fda7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8153cfd0-7f8b-4506-9601-97dd26162e86",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3dc03281-e12d-4c91-a399-1c443dd28b9a",
        "cursor": {
          "ref": "c4b8022c-d111-4a3e-80f4-c58c48e20971",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b83df352-25f8-4c9c-840c-08e7eb6da6d6"
        },
        "item": {
          "id": "3dc03281-e12d-4c91-a399-1c443dd28b9a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "62847059-c0b5-45ab-a8c2-49373a777e4b",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d03cac69-aae6-4cd7-af77-3c7f7a57dc5b",
        "cursor": {
          "ref": "3dc445d5-3149-4aab-8fad-cc6fefaa23d7",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "53c79859-7848-4c00-8bd6-324380f21d3e"
        },
        "item": {
          "id": "d03cac69-aae6-4cd7-af77-3c7f7a57dc5b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "feee0881-46ae-4027-aeef-2b4e4ff82737",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1866714e-f5ed-49f3-bd47-bad46108fc3c",
        "cursor": {
          "ref": "e86eff7e-2c5b-40a8-b5a0-4c05d9f98c78",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7663c12b-e7ec-4cfd-9e3a-7ba867d3eff7"
        },
        "item": {
          "id": "1866714e-f5ed-49f3-bd47-bad46108fc3c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c1b1c38c-c5c9-400f-9293-fce1e4210e99",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9d9effef-ab09-4501-8ca7-4beea5142759",
        "cursor": {
          "ref": "d5a99bd2-2006-43cb-bc64-542cfbef7780",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ce1d6f61-2446-4c2e-8285-e82efdcc099e"
        },
        "item": {
          "id": "9d9effef-ab09-4501-8ca7-4beea5142759",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "dd08b112-ffd5-4b13-9783-1ba38642027d",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "51ac7c4d-f9d1-4a8c-9775-3e87f6b528b9",
        "cursor": {
          "ref": "31a51603-337c-4078-b2bf-f8af38b9821b",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "22d5a737-6ef0-496b-9cef-dcbee8afc35a"
        },
        "item": {
          "id": "51ac7c4d-f9d1-4a8c-9775-3e87f6b528b9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "90d7b1b0-00b6-47fa-8c38-b47edb0108ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce1e69f-6d12-462b-805d-eea300fcb7eb",
        "cursor": {
          "ref": "965b5bd0-c660-4297-a69b-6bbbf5c5d8bd",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "3afbe2e0-36fa-4fd2-ac95-2494fb70e102"
        },
        "item": {
          "id": "cce1e69f-6d12-462b-805d-eea300fcb7eb",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "68db53d5-55a7-4fd4-9e67-37fe2ba284e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c875c946-a09b-4c6c-b144-a6e8a9d2203c",
        "cursor": {
          "ref": "e918b109-a57e-4d9d-8c31-d0214ca30a18",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "da94cfb5-448c-40fa-8965-617067b1167c"
        },
        "item": {
          "id": "c875c946-a09b-4c6c-b144-a6e8a9d2203c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6ae40f96-76b8-4d21-9dec-48805e3d425d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a6959d1-1755-4f5a-a644-c9482cb3b811",
        "cursor": {
          "ref": "5ec0fe31-ae0c-4a27-b871-a5be4e0071db",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "796849a5-6ce0-42c3-a902-3800abed05d5"
        },
        "item": {
          "id": "6a6959d1-1755-4f5a-a644-c9482cb3b811",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "d326fd49-13cf-4c1c-b736-38f69f643954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebb1c83-cbbc-49dd-81e6-46765a12055e",
        "cursor": {
          "ref": "19473fa0-ad6c-49fd-9654-170902065ceb",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "be00f1bf-c0d1-4293-9c33-b1c7d6ff3c89"
        },
        "item": {
          "id": "2ebb1c83-cbbc-49dd-81e6-46765a12055e",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e5cf7689-8467-41fc-8bbd-dde4bd540618",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16595bff-a0d0-4d44-9d27-fa8a70596a86",
        "cursor": {
          "ref": "714643ef-8411-40ea-8108-6ebe53adab2b",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8f41fd92-31ae-442f-98a2-c968cf112dd8"
        },
        "item": {
          "id": "16595bff-a0d0-4d44-9d27-fa8a70596a86",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8dc80703-305a-4997-b91d-fbb31666a867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f00bd801-c25d-472f-b10d-5ef22ab7ebd1",
        "cursor": {
          "ref": "0b81690a-27e6-4974-9825-a02410a9270b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "17533b27-2afb-49c4-93a7-4e71830d2f38"
        },
        "item": {
          "id": "f00bd801-c25d-472f-b10d-5ef22ab7ebd1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d5a221ec-3da3-4516-ab05-aa957cb2c901",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ae413b-fc8a-4b79-a75f-6ad757ac74ff",
        "cursor": {
          "ref": "4ae1841b-8bfa-4d62-a6cf-474d7d1d69f3",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "57aa059e-a670-49e5-9176-11fe369305ab"
        },
        "item": {
          "id": "07ae413b-fc8a-4b79-a75f-6ad757ac74ff",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "05d7f4f6-b257-41e2-8bb6-895434daa98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2ed21f-6d87-4a43-97a6-2479a0c1c1cb",
        "cursor": {
          "ref": "30d26573-f83d-4c4d-a8a7-e6af93ec36fe",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "efb00a8f-c67a-4b67-ad15-91ee7430e40c"
        },
        "item": {
          "id": "8b2ed21f-6d87-4a43-97a6-2479a0c1c1cb",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "ca05b39c-d06d-49d2-96ea-1dbcecf9b1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c13a41cf-acbd-4614-9b10-f504a44659be",
        "cursor": {
          "ref": "b42e075a-d8f0-4345-9c44-027f20e43154",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "69f21701-4b9b-49e7-a070-6a075c1acabb"
        },
        "item": {
          "id": "c13a41cf-acbd-4614-9b10-f504a44659be",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "763b27f4-073b-4798-b4d9-654cb3919c83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8981146-70e4-4eee-a4c3-ffa90935345f",
        "cursor": {
          "ref": "7082df86-83cb-44e2-be69-13a30841e685",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "75f7a642-073d-4bac-a336-5f2401612d4c"
        },
        "item": {
          "id": "c8981146-70e4-4eee-a4c3-ffa90935345f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0ce217c7-6c5e-4da6-8267-6c3dc99dbe48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c390eaa-07e7-427e-97e1-5bcd689634b4",
        "cursor": {
          "ref": "ecacb182-bbad-4f2f-b523-25f8c12ada5b",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e676994d-82dd-4c37-ad14-b66335f07c47"
        },
        "item": {
          "id": "6c390eaa-07e7-427e-97e1-5bcd689634b4",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "75fd06fe-d831-4813-819b-21b8beecc947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75261d52-3067-418e-b8ec-9a3b1cc5a732",
        "cursor": {
          "ref": "9859b842-bacb-41bf-8f34-80a35a0f5be1",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8c9cf4ec-4af9-4153-97e2-49d069862b0d"
        },
        "item": {
          "id": "75261d52-3067-418e-b8ec-9a3b1cc5a732",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "18f8a460-8f8a-476b-858f-5c53039a9c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d8a33c-e7d8-4b8a-9033-50f7c4d17e74",
        "cursor": {
          "ref": "02725d06-c7d0-4d74-b2cc-646fe1ef0482",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7e94a487-20ae-4ef9-9d4d-b7a2b72d8cba"
        },
        "item": {
          "id": "f3d8a33c-e7d8-4b8a-9033-50f7c4d17e74",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f7b9f575-2cb6-4c4c-8e7b-2e0506e53136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a48280-2293-47ba-8740-ee8ac569782d",
        "cursor": {
          "ref": "bfddd767-0ea3-4749-8953-f19d69e6cf3a",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "7b057a02-38d4-4812-800f-1ff159c6872a"
        },
        "item": {
          "id": "19a48280-2293-47ba-8740-ee8ac569782d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "e52ce01d-873c-48a8-b448-c76dabb000bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "351f44ca-3390-4af3-bca2-fc74e4f67cfd",
        "cursor": {
          "ref": "23102752-7745-4e92-b9a8-981d459e59d5",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f67c263f-824f-4496-92aa-4eec00f0f788"
        },
        "item": {
          "id": "351f44ca-3390-4af3-bca2-fc74e4f67cfd",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ce994f1f-b34d-4acd-8cb2-cc6ce7f44e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77f825c-7303-45f8-b427-00cecbea06de",
        "cursor": {
          "ref": "49becbc7-8428-4cc1-9da3-ffe6279c1bb3",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8708dbd2-cb0d-4ea0-ae47-d249303f570a"
        },
        "item": {
          "id": "a77f825c-7303-45f8-b427-00cecbea06de",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "82f43117-cf1f-4b2e-8c80-545c644e9b29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f9af5d8-76e8-4fb8-bd4f-cccd4bf90cb4",
        "cursor": {
          "ref": "5b4d5f7f-9400-404f-8645-ce4a9112d893",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d45d3304-099f-4193-bf4f-d3e30037a72d"
        },
        "item": {
          "id": "3f9af5d8-76e8-4fb8-bd4f-cccd4bf90cb4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "01b22896-2ff4-4240-b738-8fe4e446a8b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6917aef9-71d2-4a35-b163-181063ff79a2",
        "cursor": {
          "ref": "449aedb6-ac06-44dc-9655-d4bc134e0f33",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d2a0b0e9-cef2-4b13-911e-205ac8c5347a"
        },
        "item": {
          "id": "6917aef9-71d2-4a35-b163-181063ff79a2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "006f02cf-e24f-4e3d-983d-d2974b21cabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5780011a-b875-47a6-8e34-8acc0e3a0add",
        "cursor": {
          "ref": "7d088fd7-21a6-4c69-a501-49da88aa0ddc",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "95080bb1-84a1-44ef-b1d6-fe32324a4d20"
        },
        "item": {
          "id": "5780011a-b875-47a6-8e34-8acc0e3a0add",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "078f0fc4-6197-4ab9-a0b2-c254d5dc9889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3dc86d-e752-4527-8133-0197172dd7e7",
        "cursor": {
          "ref": "519b087e-d821-468c-85bc-1a8e05fb9797",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ec7d2b32-87d5-4a84-a07f-92161d02fdb7"
        },
        "item": {
          "id": "0d3dc86d-e752-4527-8133-0197172dd7e7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f9522b10-3295-4d45-8297-aebaf6e51233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b16050-3fd8-4ea4-8f63-36c9f743deac",
        "cursor": {
          "ref": "f53e2898-6316-41db-b63c-298c0272f129",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "137476f3-379f-4ce1-9392-40e7a5ba520e"
        },
        "item": {
          "id": "26b16050-3fd8-4ea4-8f63-36c9f743deac",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a3f039eb-250d-4379-819a-577942345d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ecb739-9e5a-4976-9968-9dbae410fb7c",
        "cursor": {
          "ref": "4932f573-c659-4014-9878-41e0f25ad1d6",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8be3e26f-c42f-45a5-8dde-576ce2dd8c4c"
        },
        "item": {
          "id": "47ecb739-9e5a-4976-9968-9dbae410fb7c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4830b620-9981-4b1e-9d00-8395c5b1d9d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213e66b6-fda0-4453-a856-9c35c6be707c",
        "cursor": {
          "ref": "34139634-33f9-4898-9508-7af4133b5625",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ff03ae34-2a31-4919-b3b5-f1789296e895"
        },
        "item": {
          "id": "213e66b6-fda0-4453-a856-9c35c6be707c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9b8e625b-5438-4e11-9277-0cd51c908e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "453da05e-7d3b-413c-9390-46055f922daf",
        "cursor": {
          "ref": "2f544541-1f67-413d-8c50-3e0c5ca2d8b5",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "2a2bceca-3a29-4ce7-ab6d-4e9aad27ac93"
        },
        "item": {
          "id": "453da05e-7d3b-413c-9390-46055f922daf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8451340c-d36d-46f5-bd0f-38d2393e7a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacbac90-3bab-4bcb-97f9-764fe33297f9",
        "cursor": {
          "ref": "e9de9eb3-beef-4cb0-b098-850d496dcd11",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "c3a28062-edf4-41b1-b85a-cd84990db706"
        },
        "item": {
          "id": "cacbac90-3bab-4bcb-97f9-764fe33297f9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8ed12d74-9dfa-44ca-91c5-0d4f5d245a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144fc3b6-f2fe-4344-8b6a-5f99c26443c8",
        "cursor": {
          "ref": "cd836920-690b-4c8c-b910-50d81c23a744",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "94f4b3cb-1a31-4ad6-8434-1bdef6be5497"
        },
        "item": {
          "id": "144fc3b6-f2fe-4344-8b6a-5f99c26443c8",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "46183f0e-c32e-4141-9902-4663fd5fbced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0730b49-8cb9-47a0-9a0d-0a73556b6504",
        "cursor": {
          "ref": "bc0e875a-4a6d-4bba-9e8b-cb2d8fcbaab0",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a2d4b99d-5eab-4ea5-9ee1-e7eb62c7b5ad"
        },
        "item": {
          "id": "a0730b49-8cb9-47a0-9a0d-0a73556b6504",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e87767f0-23e6-4d7f-8e59-30ea19523fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25c6b7d7-7999-4df9-963b-8064b01a5a42",
        "cursor": {
          "ref": "6589386f-04e5-4e1c-8a3e-7cb103b109e4",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c7fb5a54-8990-4fb1-a7bf-5edf0e652818"
        },
        "item": {
          "id": "25c6b7d7-7999-4df9-963b-8064b01a5a42",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "bf3eb13f-55c8-4586-9e94-9d4e441c2fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f62cf3f-b82d-40e7-9616-b4d587118e7d",
        "cursor": {
          "ref": "1b1c5dd5-1013-40b3-9d1c-ce78acd20dc4",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "e2c7e1de-c3ae-4deb-af07-2ef4303973d7"
        },
        "item": {
          "id": "7f62cf3f-b82d-40e7-9616-b4d587118e7d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "5115d371-736d-4f6f-943c-65a5575f90cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d85035-8ea6-41cc-a344-4adf9ec484d3",
        "cursor": {
          "ref": "74241b62-0e18-4b72-8884-88d51c9aad84",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "2afb5b28-c0a5-40e6-ad4c-bd142773910d"
        },
        "item": {
          "id": "82d85035-8ea6-41cc-a344-4adf9ec484d3",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ca734f9b-58dc-4f10-b449-6f3a33a3133e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ecdf1d3-9fb3-49b3-b67b-bae781901263",
        "cursor": {
          "ref": "b7bbb6d4-ca0f-4d96-b40a-2866f170a176",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ce94f795-5c39-4449-ba50-cbfd88f7c739"
        },
        "item": {
          "id": "6ecdf1d3-9fb3-49b3-b67b-bae781901263",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fa9f0f23-d8a0-4bc5-a0a0-0aa24052a850",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3ca8f9-194c-464f-bad7-09ebba3d6b38",
        "cursor": {
          "ref": "ea7b31c3-cba4-4239-973a-d7e81d138b31",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f23e4b42-4e1e-440a-a2da-7d738333770d"
        },
        "item": {
          "id": "5c3ca8f9-194c-464f-bad7-09ebba3d6b38",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "759028cc-6470-4c33-b91b-f2788087bff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "7a4d6630-2792-439c-9973-4f6ee2f1c5e6",
        "cursor": {
          "ref": "1c3652c0-c17a-43c9-a8d5-aa761fd8c08d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6a9e42b8-257a-4567-be16-961c489f04a3"
        },
        "item": {
          "id": "7a4d6630-2792-439c-9973-4f6ee2f1c5e6",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b58293cd-9eb5-44ad-883d-40f92e6e2204",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a91915b-4115-4ea7-9cb0-6eceabe0be46",
        "cursor": {
          "ref": "c093da6f-ddbf-4b68-9f97-477e2c310d19",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cee5a793-b0b0-46c4-93ec-3801153f621e"
        },
        "item": {
          "id": "3a91915b-4115-4ea7-9cb0-6eceabe0be46",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "022a844c-ab33-4f3c-8f2f-985c6ce14db7",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3afb20-1897-460c-a7d3-47c7b595388f",
        "cursor": {
          "ref": "a5e15ce5-1c08-4ebf-b0ee-a22349b2479f",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2a4ddfd4-693e-4ee9-89c1-357f6510ea21"
        },
        "item": {
          "id": "8d3afb20-1897-460c-a7d3-47c7b595388f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3aeeb365-5917-434c-bd19-042577b9cacc",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a817333-5864-4695-bf7c-f9c81096c83a",
        "cursor": {
          "ref": "06d56de1-907e-4924-8b71-2a2a8a1fc1e9",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "0115f75e-b088-4988-9033-cf1848828c47"
        },
        "item": {
          "id": "3a817333-5864-4695-bf7c-f9c81096c83a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "315065c1-50e8-46ed-b2b8-008d81823963",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "402740b2-88f1-4e66-8d05-2a87605f6dbf",
        "cursor": {
          "ref": "e549190a-1510-4297-9fd9-1f3645bac4e2",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3af02777-ce02-4395-bd35-bae0581d54bd"
        },
        "item": {
          "id": "402740b2-88f1-4e66-8d05-2a87605f6dbf",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "18e90b68-1c7d-43fc-8579-fcc9298ae60d",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-17T00:37:01.508Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-17T00:37:01.508Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b6285ad9-ce75-4e4d-9d1c-1f245d0c9725",
        "cursor": {
          "ref": "7a0ad669-2f79-4338-801f-ba08a7cab9af",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "976698a8-819e-4da1-991f-7ca1cbf35f08"
        },
        "item": {
          "id": "b6285ad9-ce75-4e4d-9d1c-1f245d0c9725",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e19c0679-10d6-468e-9ab2-c169e8b20988",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f1b11d-5bb4-4d88-9679-55459432d5e7",
        "cursor": {
          "ref": "58177e18-0bea-47fc-b508-bfc63fa3087f",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "c7edb817-ae95-426f-aa05-b71acfd46e65"
        },
        "item": {
          "id": "c9f1b11d-5bb4-4d88-9679-55459432d5e7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "af5c9006-444d-49c3-ae83-679a1cc9f5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e330ba0-faec-4f6f-84b9-b242bbf8a595",
        "cursor": {
          "ref": "c7d68527-ea57-4677-b763-fb7f249c096f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "366e1c62-fb5f-4db6-b513-4b89af908552"
        },
        "item": {
          "id": "4e330ba0-faec-4f6f-84b9-b242bbf8a595",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0c0b469a-8b59-4383-84a9-1b579f31a8b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3679cdc-226d-4453-a1cc-2fb923346a22",
        "cursor": {
          "ref": "a76d725d-5093-441f-a89b-1523ab566a93",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7098ee4e-2e1c-465b-9633-bdbb24309d7d"
        },
        "item": {
          "id": "b3679cdc-226d-4453-a1cc-2fb923346a22",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8a9f06e9-3af2-4259-9e05-ab687f03f9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec5264f-5752-4d7b-ac13-12088ce44ebb",
        "cursor": {
          "ref": "090ee801-841c-4369-ab7c-373f052b1a86",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d0cef2eb-46bb-4972-b570-1c069535b292"
        },
        "item": {
          "id": "6ec5264f-5752-4d7b-ac13-12088ce44ebb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c4cb7e4e-ffdb-470b-9b7f-b5713696c536",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd34d57d-9044-4a80-90d3-2ba54fa45ff0",
        "cursor": {
          "ref": "9a6f46b1-d18c-4c68-af47-2fc05402346a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9ad7826b-a071-45fd-a20a-9cc7e0c91153"
        },
        "item": {
          "id": "fd34d57d-9044-4a80-90d3-2ba54fa45ff0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0b9f06cc-04c2-4444-9134-52be9066a739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "105c154d-0f8a-4940-b6b2-57b70f7fface",
        "cursor": {
          "ref": "147a9d2e-8ee8-4352-aa2c-1efebb64cc48",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f8ba8f86-5e70-4351-875c-3e872574c24b"
        },
        "item": {
          "id": "105c154d-0f8a-4940-b6b2-57b70f7fface",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a620ac88-12d2-4146-aba0-8901108025a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb8094c0-1e09-4e35-bae2-55d5f8b57178",
        "cursor": {
          "ref": "b112c4fa-df32-4e89-bab3-1aba4c3bce89",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ea454fca-8da5-4b13-8942-87d120eb2221"
        },
        "item": {
          "id": "bb8094c0-1e09-4e35-bae2-55d5f8b57178",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e42effe4-89e3-4e09-81fe-c6aa8a548fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7433a74-8993-4c3b-9b85-e90653f051d4",
        "cursor": {
          "ref": "f7d65a65-ede2-49f0-b084-dddabe1f7420",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "6d3a3506-8c0e-449f-8625-b10fb78bd210"
        },
        "item": {
          "id": "a7433a74-8993-4c3b-9b85-e90653f051d4",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "20c6c32b-7b79-481a-bc8d-f2b95b7b2214",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157b0b59-6d07-4f28-8382-23b30e369af8",
        "cursor": {
          "ref": "fc43dd06-5a8b-4c4d-b891-a377420c2547",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "27567f61-94ad-45b8-86c2-51f3cf595dbf"
        },
        "item": {
          "id": "157b0b59-6d07-4f28-8382-23b30e369af8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f42dbd3e-8325-4574-bbb6-3d2a67f4d9d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c41498c-8496-4674-8722-58587f2fcd2a",
        "cursor": {
          "ref": "2f284768-8b8d-4c95-9372-f7771470e405",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d20363a1-08cf-4b99-930b-26177b05942e"
        },
        "item": {
          "id": "5c41498c-8496-4674-8722-58587f2fcd2a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f25a6265-cc07-4684-aa5c-9c3e1f6a2e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92260cb-0917-400a-a0d4-99cafa818749",
        "cursor": {
          "ref": "3bcdf3fb-ef88-4bf7-8e4c-b6cb96755cd6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e788f075-a8f3-48c9-8d52-58200a0deb59"
        },
        "item": {
          "id": "d92260cb-0917-400a-a0d4-99cafa818749",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2f50f989-e179-4493-90bb-2fdc0239bce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be3d7a27-2711-4446-8472-5a343e2c4e05",
        "cursor": {
          "ref": "0527348c-1f64-4315-a2b3-db94b1626425",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dd74e997-4edd-40c2-bab5-4ce63bad1d71"
        },
        "item": {
          "id": "be3d7a27-2711-4446-8472-5a343e2c4e05",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "41a0d0bc-eb69-471c-8636-b1659ad79445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9756409a-0c19-45a6-8d57-7c4b2421bcf7",
        "cursor": {
          "ref": "3efe48fc-e0d0-46d5-be26-e065af2b8b4c",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a17a7b4e-9a8b-466c-98ca-b7a2d4d1ed96"
        },
        "item": {
          "id": "9756409a-0c19-45a6-8d57-7c4b2421bcf7",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0139f5ca-1624-411d-8e4f-e8d73c9d27c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c49dac2-4661-4a64-8a82-00e1f4ff197f",
        "cursor": {
          "ref": "b88adb91-b12a-4c14-98e0-e5272bed60bd",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "dbf56ada-b63f-47a2-8560-998348003314"
        },
        "item": {
          "id": "2c49dac2-4661-4a64-8a82-00e1f4ff197f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "787ce62d-7af8-4465-89a0-7a815fa8bc98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9350c718-52e4-42d7-a4ae-9174a76aa52d",
        "cursor": {
          "ref": "05258091-2b4b-4e3d-9500-64231640c128",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8c421743-51a8-4a58-bb4c-093bb4782263"
        },
        "item": {
          "id": "9350c718-52e4-42d7-a4ae-9174a76aa52d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "56cc9300-8d1e-4ef1-8434-1fa64f7d21c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be4fc76c-cdb0-4647-9345-44e9fb9a2ca3",
        "cursor": {
          "ref": "d34e02c9-cb72-4de4-8f58-8c3ea4bbe4de",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4bf38069-fd73-4f07-ad6b-6d947ba085ec"
        },
        "item": {
          "id": "be4fc76c-cdb0-4647-9345-44e9fb9a2ca3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "2e0acbf5-54f5-47d2-b187-2552dce55fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f750ac-7bfc-4606-98bd-037a9f224ab3",
        "cursor": {
          "ref": "89b02405-dca8-427f-8463-f8b941e0ab78",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a2fde5a5-2b3b-4bc9-ae0e-3a0863e6fd83"
        },
        "item": {
          "id": "e3f750ac-7bfc-4606-98bd-037a9f224ab3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a429e204-2435-4fc1-85c5-8aa18d3b84d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ddd7a1-def2-44d3-af63-54998025b90a",
        "cursor": {
          "ref": "7eacfe46-c0dd-465d-b274-e91ea865bc81",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "162c17c4-99d5-44dc-a714-17cab0e7b125"
        },
        "item": {
          "id": "91ddd7a1-def2-44d3-af63-54998025b90a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f63c6b5d-d1ea-4a2a-b30a-f2b88a2d28c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eff38945-9305-4839-884c-c22aae4696c4",
        "cursor": {
          "ref": "033545e6-9fb7-436e-8c3e-1a7009cc4948",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "d9f10b72-9eb6-40b3-82b7-4b24faac1d49"
        },
        "item": {
          "id": "eff38945-9305-4839-884c-c22aae4696c4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1185696a-dbb1-4342-a80b-b4c1b60bb680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac21a9ee-f893-494f-935c-b9a88336d66d",
        "cursor": {
          "ref": "f862353b-f1a1-48ca-bd8b-d53b34ffbe19",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "51a75e23-158e-49c6-bcd1-c0bc73a96825"
        },
        "item": {
          "id": "ac21a9ee-f893-494f-935c-b9a88336d66d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4411d38f-a25d-4089-b64d-34556ef4fe8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137768f8-885e-419a-926a-358b878b2b08",
        "cursor": {
          "ref": "a7e52e18-f6cd-48d4-a23a-6b3d10e12ce9",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "374dd327-26cb-4d3d-95d8-3f5e33dfd0bc"
        },
        "item": {
          "id": "137768f8-885e-419a-926a-358b878b2b08",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "dd78259f-9c3c-4057-bfd4-9ce7b4d25568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5074eec6-5e74-41d6-8fc3-396b7f87f77a",
        "cursor": {
          "ref": "7043f285-ec1d-4041-8b3a-c6fddfda0021",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f192e0c9-97dc-47ee-981f-453e92870661"
        },
        "item": {
          "id": "5074eec6-5e74-41d6-8fc3-396b7f87f77a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "fc1a98d7-ccf2-4be9-8d57-bfb265535da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7505aabe-cec4-4c2d-9b23-6a084cd40539",
        "cursor": {
          "ref": "26306689-cf65-4931-bf64-f8e30c17cf7e",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1c2cd564-1d31-4b35-910a-a38f62c54683"
        },
        "item": {
          "id": "7505aabe-cec4-4c2d-9b23-6a084cd40539",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6ebefa25-d5f1-49e2-b378-6c18a902322c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc016c95-e9b0-4603-ac71-ab32ccf402b1",
        "cursor": {
          "ref": "729bbbda-a9ea-4050-a948-0627070fd450",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d15198f5-b9de-4fff-9b47-8a14ca7dc7fb"
        },
        "item": {
          "id": "fc016c95-e9b0-4603-ac71-ab32ccf402b1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bcac83ff-53a9-4f7f-8c8a-d9b353758317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b576ff1c-f9ea-4e16-a0fd-cbd0ee6778cd",
        "cursor": {
          "ref": "9a48b941-a64d-4eef-98dc-466c8fbebe85",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7648ad86-227d-4b38-88a3-543fa09e48e2"
        },
        "item": {
          "id": "b576ff1c-f9ea-4e16-a0fd-cbd0ee6778cd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "dae956ee-e7fc-401e-a149-a5dfb74f0926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba88475f-03d5-48fb-9f97-b5d3380608e4",
        "cursor": {
          "ref": "f3cf4a52-e6fe-4f2e-823b-5d4f36712d29",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6adeb216-677d-4c23-8c4c-c472d8b4f49c"
        },
        "item": {
          "id": "ba88475f-03d5-48fb-9f97-b5d3380608e4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f9112098-0685-4029-8bcb-bb2e2af48c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86507a23-d068-43e6-8fcb-49e05129a604",
        "cursor": {
          "ref": "30ba7d6a-fa7a-43a5-909b-c1baae531cd0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e921ee71-042b-4e91-a318-023b48a96096"
        },
        "item": {
          "id": "86507a23-d068-43e6-8fcb-49e05129a604",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "ddd66fca-2ef0-4322-81b3-48909c7e9949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca73e43-fb9e-449c-8a8e-ea1caaf16871",
        "cursor": {
          "ref": "d279d248-88cb-4661-9d30-7a407b41905e",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "69b5d170-d838-49ab-ad11-189d493f154a"
        },
        "item": {
          "id": "2ca73e43-fb9e-449c-8a8e-ea1caaf16871",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4103c727-6a44-4099-8eaf-7f88b12ba7ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5c1cfe-5f62-4751-b338-6ab089c5cb1e",
        "cursor": {
          "ref": "3bbd7462-050d-4002-9237-51cf69398878",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e37868a8-f6b9-4361-9b05-779295b71685"
        },
        "item": {
          "id": "7c5c1cfe-5f62-4751-b338-6ab089c5cb1e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b6b79448-1fcf-4bb9-a0ab-46115905c285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365ffd33-07bc-4c54-90fa-fd082bc8b4f7",
        "cursor": {
          "ref": "0e828ebe-1bfe-438b-a925-a29874306fcd",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d75fbd6a-2aee-4593-8a3b-f692c31307b1"
        },
        "item": {
          "id": "365ffd33-07bc-4c54-90fa-fd082bc8b4f7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "96ccb677-1543-47d3-aac5-b6d134635872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bef470b-1da8-4016-8175-a3a00a27a0f5",
        "cursor": {
          "ref": "117acbed-ac64-47c4-8fba-c57ce819d050",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "36bb9c61-1add-4d18-a6a1-6ac6d773bbea"
        },
        "item": {
          "id": "4bef470b-1da8-4016-8175-a3a00a27a0f5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "27d41daf-0c3b-4522-81dc-961f10b5ea3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418d2afd-927b-4a4a-a49f-33ddeb5da2e6",
        "cursor": {
          "ref": "01b1d446-20e7-4af7-b8e8-08e152c8f953",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1859359a-7946-4774-9235-16a3286daa19"
        },
        "item": {
          "id": "418d2afd-927b-4a4a-a49f-33ddeb5da2e6",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "da41d97b-fe87-454c-bf81-e8c51464889a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc815818-f47e-4f1b-b1d8-c5522caf91ab",
        "cursor": {
          "ref": "9c4d7bb7-78c3-417f-90f9-404e0344eb45",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "67c81338-89d1-4c10-af9a-e580cecf2a4e"
        },
        "item": {
          "id": "bc815818-f47e-4f1b-b1d8-c5522caf91ab",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "cbb07592-f764-41d1-a5d6-d213be52d745",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b6b03b-0211-4ef6-a167-a93fb22769d1",
        "cursor": {
          "ref": "f352e07c-f2db-463a-8298-cb39fc9d87c5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "af9cc799-fe57-4324-90ff-6a1b00ab9067"
        },
        "item": {
          "id": "d9b6b03b-0211-4ef6-a167-a93fb22769d1",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "802673c5-5c1c-44ac-b2c9-9c354884bf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a8c207-75ba-47b7-9630-afffe6574268",
        "cursor": {
          "ref": "e7bda56a-e320-4388-8f22-65ac72928bc3",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "134c9bda-f265-4348-9d72-9f8406b21da5"
        },
        "item": {
          "id": "c2a8c207-75ba-47b7-9630-afffe6574268",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7c49fd76-42bf-4573-a759-20bdf2907535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a2878a-82ed-4299-a823-573c07c82aed",
        "cursor": {
          "ref": "e107d641-30a9-428e-943c-5037de070313",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "61dd5afb-fb3e-4130-a4ad-29f5fd13ec4f"
        },
        "item": {
          "id": "c2a2878a-82ed-4299-a823-573c07c82aed",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1288b4cc-1a7d-4508-bc67-40ff3009c19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9336f51-5b5b-41f1-bb76-099be3e6b47c",
        "cursor": {
          "ref": "3e232af9-1c45-445b-b1f2-4fb4d238f2a2",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5c5c5b55-3e09-4755-8d61-751452489816"
        },
        "item": {
          "id": "b9336f51-5b5b-41f1-bb76-099be3e6b47c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "691e7f8c-da6c-424b-8cb3-5b67f20abd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aa55d2b-f084-4b14-8040-8e2f728070e1",
        "cursor": {
          "ref": "f61e818d-542a-4f35-b3d9-adc09778291d",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "fcc5e4d0-1f37-4906-a5b2-d1ed9ed5d137"
        },
        "item": {
          "id": "1aa55d2b-f084-4b14-8040-8e2f728070e1",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ee3abd3f-0803-4562-9fba-4f9b4e6f50cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af74a7f2-8e86-4f6c-8184-28e11680a7df",
        "cursor": {
          "ref": "97fce19d-01a0-4886-ade1-020963736bca",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "306f86c6-7811-4727-8079-7deed3a542cf"
        },
        "item": {
          "id": "af74a7f2-8e86-4f6c-8184-28e11680a7df",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3cef98be-a012-4263-a70d-76f4805d9d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957ffdbe-848f-47f6-95ab-8a7399c40885",
        "cursor": {
          "ref": "da3b292f-6c18-47e4-b27b-ad52c301e3d2",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a76aa7ce-0f01-453c-a8cb-ef451b2e8f8f"
        },
        "item": {
          "id": "957ffdbe-848f-47f6-95ab-8a7399c40885",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "32337d9e-81de-41bc-a3e0-47a6ffb93cb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4365948-b4ee-4f4d-8400-84d9eb57253a",
        "cursor": {
          "ref": "375c0296-b630-4f12-8a12-e7de3523196a",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8bd64c22-ea5d-4c09-99b8-c6553a40022e"
        },
        "item": {
          "id": "f4365948-b4ee-4f4d-8400-84d9eb57253a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e849b3d2-2e18-4bf1-98aa-a2adaefe1a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7d4ebfa-118c-4c41-8e64-d13c8048b692",
        "cursor": {
          "ref": "b64679f3-c412-43f4-be20-cf8f45dfca1b",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "85f164e1-12e2-4c2e-bf94-8a210c697d54"
        },
        "item": {
          "id": "e7d4ebfa-118c-4c41-8e64-d13c8048b692",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "a51d051a-bb2f-42ac-bf34-2027d13d358c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa860aa7-fdd5-4fc7-9e0d-8e878775c886",
        "cursor": {
          "ref": "626f8f0c-98fb-47e8-85c6-17a3c2956040",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b79b5470-912c-4cb6-a733-d0731257e40b"
        },
        "item": {
          "id": "aa860aa7-fdd5-4fc7-9e0d-8e878775c886",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b8e4ed8a-1ce5-422b-af6c-0801ad4c6319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36f072f-bdf5-4eab-b650-f777149d1a99",
        "cursor": {
          "ref": "41f0f7e1-23b3-4a2a-a91a-f2662d27dd1a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "f2d3d7fa-2062-482a-bb00-79e434aa2dd8"
        },
        "item": {
          "id": "e36f072f-bdf5-4eab-b650-f777149d1a99",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6cb9cf7d-c409-4957-af14-43205459409c",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "4b226034-4bee-4c40-93f5-8bcc9307cbb7",
        "cursor": {
          "ref": "664155b4-b14a-463a-85e8-517dc303409f",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "582e7a5e-6e33-468d-a354-3e75804cae14"
        },
        "item": {
          "id": "4b226034-4bee-4c40-93f5-8bcc9307cbb7",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "84a8d3fb-ab5d-48b1-bf7a-54bb65b6f60f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a024d999-18e0-40fd-ba99-92c127dd2be7",
        "cursor": {
          "ref": "7df36b2c-f629-4d86-a95c-b88569b7da15",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e8e00380-b15f-4317-a0d7-21c4adc8f995"
        },
        "item": {
          "id": "a024d999-18e0-40fd-ba99-92c127dd2be7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "52559f6e-5beb-454e-b5a1-6170835ecf76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a3f06f-b0c0-49bb-a591-e8ae5b4d133b",
        "cursor": {
          "ref": "41041d19-7907-41c8-8bfd-7cd5fd3a7802",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "30ae9d04-8663-4009-b725-64d835001a25"
        },
        "item": {
          "id": "16a3f06f-b0c0-49bb-a591-e8ae5b4d133b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "dce998d0-72a9-42ea-b049-a58cbe269d64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80139a3d-e0f4-4254-ae6a-833c2572e38c",
        "cursor": {
          "ref": "0841957e-94ce-446c-8a57-6a68776b1d03",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "76149692-d37f-4267-a10e-f30d1e886a29"
        },
        "item": {
          "id": "80139a3d-e0f4-4254-ae6a-833c2572e38c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "fa0abc95-0a55-41f9-baf5-9bc51969d768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa68b3f-f48a-41ba-a5fd-54773c606c47",
        "cursor": {
          "ref": "bdccd111-6b9b-4bdf-b3d7-6b17b73d9945",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e127701c-8c3d-4234-90aa-f52497d25b8c"
        },
        "item": {
          "id": "5fa68b3f-f48a-41ba-a5fd-54773c606c47",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f2b32ba6-50f1-4d6b-855a-fa41f490c4b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a77d8a4-a408-4a66-b3bf-e1b7af31062b",
        "cursor": {
          "ref": "814facf9-7821-4451-85ca-756b507a3ecd",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ba889ae2-efc1-4152-bfa7-5ba69b0ddbc9"
        },
        "item": {
          "id": "0a77d8a4-a408-4a66-b3bf-e1b7af31062b",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9a8c6760-14c6-4303-af51-2b0b631d5443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf284ded-0646-4988-916f-bf02dede6ad9",
        "cursor": {
          "ref": "677df0a9-06f1-427e-87f4-b31d5dc7b6b7",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "6d745456-1971-415f-8841-ee5c2b5ed5e6"
        },
        "item": {
          "id": "cf284ded-0646-4988-916f-bf02dede6ad9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "eebc4264-61bc-432f-95e0-a4f83e6a02cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6c38ec-a44c-4c73-9b5c-9ac407208d9b",
        "cursor": {
          "ref": "f2df4e21-436f-4deb-8d46-6db5fcf6dc6d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "0c9a8ae7-7dfc-41dc-a367-9bc596e8cff6"
        },
        "item": {
          "id": "4d6c38ec-a44c-4c73-9b5c-9ac407208d9b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "7533910a-3b4d-44ff-9571-c99c7ce24e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1db25eaa-6490-4c8a-9cea-08882cdf5a31",
        "cursor": {
          "ref": "d8379382-b6e8-4652-8792-b7baa2085fd6",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "877c34f0-c498-406a-b1fb-0dbba5a52fac"
        },
        "item": {
          "id": "1db25eaa-6490-4c8a-9cea-08882cdf5a31",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "820c4a41-547b-4135-bf5e-847eb5acde93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc5b72f-faf0-4175-a4f3-143ca7c964da",
        "cursor": {
          "ref": "1baf2943-cb19-4c08-afc2-0ad6f76a5353",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e02c5321-1d16-49b3-adcb-5a8626282bd3"
        },
        "item": {
          "id": "dbc5b72f-faf0-4175-a4f3-143ca7c964da",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6cf4ec2d-bcc0-4936-b00c-59756b23fec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2843cbaa-72ff-49ea-9c12-6e6d7c50c244",
        "cursor": {
          "ref": "101b0f07-9129-4b98-b75a-657c751af4cb",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "cb169aff-c154-44b4-be35-afdd4931dd7c"
        },
        "item": {
          "id": "2843cbaa-72ff-49ea-9c12-6e6d7c50c244",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a26a9939-3b42-4021-bd00-1d2ec7a75f2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8784d9-1e9d-4b2f-b80f-a9138db14e50",
        "cursor": {
          "ref": "82eefc87-1cc3-4b77-afee-e0e15d235ad2",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "35782151-e0f2-4b90-b567-520a897dac98"
        },
        "item": {
          "id": "cd8784d9-1e9d-4b2f-b80f-a9138db14e50",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c3d07533-a409-4920-ae30-8df79080fe04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db75d034-cd64-4480-98e0-5694ffe7f413",
        "cursor": {
          "ref": "224a22b2-de06-49b1-9084-f0e6ad1e832e",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9a9f352d-9588-4d17-b918-bf62ac814da7"
        },
        "item": {
          "id": "db75d034-cd64-4480-98e0-5694ffe7f413",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "92201fdf-41b5-40e6-8c6c-e76bfd3a1680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8eebca0-0984-42b2-8cba-577008b99424",
        "cursor": {
          "ref": "7fdb0040-8eff-4d84-a3cd-e532e4129abd",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d1000f55-103a-48ae-901d-ed4cbe45cd53"
        },
        "item": {
          "id": "a8eebca0-0984-42b2-8cba-577008b99424",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f0c9aca0-f062-498f-b108-01a8825552c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03330746-5b91-4b15-95cb-b4d7c75188e2",
        "cursor": {
          "ref": "20b35836-7197-4768-9ec1-4cd0587d92de",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "28ee6d6c-3a02-4f94-8e88-d3b54331e6b8"
        },
        "item": {
          "id": "03330746-5b91-4b15-95cb-b4d7c75188e2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ac6c9791-f6ab-457a-9df6-2eb2737711cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907bc87e-0483-488d-a1e3-a66c15f1107c",
        "cursor": {
          "ref": "c21f758a-5a3b-478c-b808-12c310777cef",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5f2db703-02b3-4475-a0b3-fc93da153eae"
        },
        "item": {
          "id": "907bc87e-0483-488d-a1e3-a66c15f1107c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ab4b2f4c-d064-4197-ad52-3049e58d83b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b484d18a-96d3-4ba8-9922-bebd486fccbe",
        "cursor": {
          "ref": "e9a18f64-2907-4d3b-9ce1-c0bc3cffa7a4",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "166b9315-5e30-416a-8445-ebf452a5820f"
        },
        "item": {
          "id": "b484d18a-96d3-4ba8-9922-bebd486fccbe",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8624d2d7-2e78-44fe-a12c-f15d088737dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e13cd94-4907-4d38-80f7-13cfbf7b2669",
        "cursor": {
          "ref": "8d9ca9a4-2f53-4865-992f-7a7810bf1bbd",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e0bf2c9a-c038-4b52-82ad-08dabce52707"
        },
        "item": {
          "id": "0e13cd94-4907-4d38-80f7-13cfbf7b2669",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fe60b1d1-1157-4d00-affd-da9294e121bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94104bf0-529d-4e3b-8564-4f636069d496",
        "cursor": {
          "ref": "54c64573-685b-4a38-ae44-af81d432565d",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "24b81223-077f-4aea-a993-b7b56d67af02"
        },
        "item": {
          "id": "94104bf0-529d-4e3b-8564-4f636069d496",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "662aa095-92ea-40a3-aaa7-5bded4f57dfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe64e7f7-7e66-4b00-87d0-6d9cf9db5d1f",
        "cursor": {
          "ref": "e49e0efa-e1d8-415f-9f59-11019c2e1aa2",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "dada8037-ac1f-4d4a-8adf-7dac34878d9e"
        },
        "item": {
          "id": "fe64e7f7-7e66-4b00-87d0-6d9cf9db5d1f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "86599d14-f779-4e21-9506-1686ec3f46e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e363442-d9d0-460b-a19b-f00d20f2495d",
        "cursor": {
          "ref": "60a126f0-e7a7-4f85-8051-86f17637baf9",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2d40785-0894-4bfd-9a98-d9d88816a9ad"
        },
        "item": {
          "id": "7e363442-d9d0-460b-a19b-f00d20f2495d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "9d4ae3a4-6933-4688-9c2a-bf590c556393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506d84b1-8f18-4195-8928-76be416b087a",
        "cursor": {
          "ref": "c546d9bb-0704-46b0-87c1-1616b16d9aa3",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "cf3e8476-5a1a-4a63-8175-b20b2b6c3488"
        },
        "item": {
          "id": "506d84b1-8f18-4195-8928-76be416b087a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bfb151bf-d189-44bc-b843-58c189c77b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17141a60-c79d-401c-a03e-cea39e709faf",
        "cursor": {
          "ref": "b4d21d9d-5778-4c1f-8327-273d6ce8dc91",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "543746a4-8ca3-4c79-bd2c-a34e66e80464"
        },
        "item": {
          "id": "17141a60-c79d-401c-a03e-cea39e709faf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "15eded02-9d79-48e2-a3b6-b39e8713805a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e367445d-9dbc-4538-8ddb-dd276d4c133d",
        "cursor": {
          "ref": "b8270f65-c0c4-4001-9194-5b2dd5980ebe",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "609d1ee7-8d7a-4b56-8fa4-ca231f714bb3"
        },
        "item": {
          "id": "e367445d-9dbc-4538-8ddb-dd276d4c133d",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ada799f0-f8f8-4e0c-a326-40631404b0c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b47e4248-f6ec-4b05-870b-de06fbc824db",
        "cursor": {
          "ref": "0cb4a858-44ce-4f0b-a685-f1f256755d33",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ec06b402-23d0-4e4a-97b2-11b186ce6ae3"
        },
        "item": {
          "id": "b47e4248-f6ec-4b05-870b-de06fbc824db",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f1c969b9-6141-49c5-ad35-1a6a907b31f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bef666-9c7f-4512-b5a3-426f790593d8",
        "cursor": {
          "ref": "58e2cb8c-752c-40ab-9b97-538d0abaa526",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "39f3463f-1c82-4a5a-9f53-3069839a22fb"
        },
        "item": {
          "id": "11bef666-9c7f-4512-b5a3-426f790593d8",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b27bcc0f-097f-4947-8d55-d91c4ed4e258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9377c68-6066-4f91-a448-e6dd54e625ab",
        "cursor": {
          "ref": "93edfcf7-eaf8-4734-8d30-c7816d6dc9f0",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "da82e1a6-4927-4b76-ba11-2c4716090b90"
        },
        "item": {
          "id": "c9377c68-6066-4f91-a448-e6dd54e625ab",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "67c6ce79-f360-4714-92a6-c59d2a6f0d5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74262b15-3655-4ca9-90ef-16cfd99a871a",
        "cursor": {
          "ref": "b53acf52-04a8-4c45-a1ed-09efa21a9c83",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "fae64f3e-f172-4f1d-9ec8-dfe04f6d446e"
        },
        "item": {
          "id": "74262b15-3655-4ca9-90ef-16cfd99a871a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2e3962d5-829a-4384-90d1-989b7aad5534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7c3fb8-b495-4c3f-99c0-d7d4a9465b9f",
        "cursor": {
          "ref": "732ea93d-2231-4624-ae0a-59c7e030e19e",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "90f4f9dd-d9ce-4122-a685-81bb4e3c1d0e"
        },
        "item": {
          "id": "0d7c3fb8-b495-4c3f-99c0-d7d4a9465b9f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d9543d6a-52e7-4acb-b9ac-995146f355f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92a2719-86c4-43d3-b0d7-7bff3cf21364",
        "cursor": {
          "ref": "dad002bd-a2a8-442d-9da8-2e9c06b9eecb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "ee930591-2145-449f-be62-262cb57d215d"
        },
        "item": {
          "id": "d92a2719-86c4-43d3-b0d7-7bff3cf21364",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b3b0e669-9849-455c-b9a4-a3d5e2bd55d3",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "2fa24011-0155-48ca-adb0-41a42e621ac1",
        "cursor": {
          "ref": "a257c54b-e846-42d4-b157-f0fed1607c17",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ffd44aa3-592b-4d2b-961a-0ef7d987c475"
        },
        "item": {
          "id": "2fa24011-0155-48ca-adb0-41a42e621ac1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "4f538e09-9300-4110-8bf4-9d0d6b79ea06",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "1c79d883-c0e5-4b00-ab2f-00ace7596806",
        "cursor": {
          "ref": "f6ea8b03-24c1-4894-badb-239c03675d8c",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c7630799-197c-402e-865d-0fc02d40e617"
        },
        "item": {
          "id": "1c79d883-c0e5-4b00-ab2f-00ace7596806",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ea73d3b0-7b3c-47a3-addb-e88ed8af87a8",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "e794b1d0-2b97-4fce-8c13-b7905d805b61",
        "cursor": {
          "ref": "781e002f-b527-4f50-87d2-9e9067b8100f",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "84c91238-dc6b-494c-88e2-1414eea8db24"
        },
        "item": {
          "id": "e794b1d0-2b97-4fce-8c13-b7905d805b61",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "58e71ca6-33ea-47d9-bbe0-9258e5fadcd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f32adff-8608-4633-8940-9dedceeb3843",
        "cursor": {
          "ref": "705c802f-74ca-471f-b348-82c0b19e8727",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "1223fe8e-f6a5-479f-a91a-5081ebce7daf"
        },
        "item": {
          "id": "2f32adff-8608-4633-8940-9dedceeb3843",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "65c6d9df-b466-46dc-840f-0d173d5d0edf",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "fa0d4ab8-6427-4fae-b658-a2d102210dca",
        "cursor": {
          "ref": "2e771513-63ec-48fc-b271-df4e444b7ae0",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "06f219c7-7999-41a5-8878-e9584b313073"
        },
        "item": {
          "id": "fa0d4ab8-6427-4fae-b658-a2d102210dca",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bf640695-db7d-4194-9688-e5b838a1ed37",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a3bee763-f96b-4bcf-8c4d-58459e83c20a",
        "cursor": {
          "ref": "1bcd487b-b59b-403c-b5bf-8f2fc30d33d5",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a1a6301d-2901-4878-b7e7-c1e6bfd5decd"
        },
        "item": {
          "id": "a3bee763-f96b-4bcf-8c4d-58459e83c20a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "bb54dec9-9f30-4b49-9dae-437305d60e32",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "bb90c8f4-3cb1-49a5-bb25-7bd2fb57b28f",
        "cursor": {
          "ref": "b436e69c-533f-4ffa-9d73-5f07abfdf264",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d14a7927-e381-493e-a36d-e679bf22e9d2"
        },
        "item": {
          "id": "bb90c8f4-3cb1-49a5-bb25-7bd2fb57b28f",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "24a6f5fc-9378-41ea-9bdf-d686331784bd",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "f68954b7-83a6-41e6-a330-98ae88650032",
        "cursor": {
          "ref": "bcedf90b-0540-48aa-a1c2-42526c219a9f",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4f9cc728-0867-40be-93aa-6425d3d50944"
        },
        "item": {
          "id": "f68954b7-83a6-41e6-a330-98ae88650032",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "278ad0db-ab8e-4db4-985f-de9d3ebbabd5",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a57d0d78-2bb5-4abb-a80a-0d9a07173c50",
        "cursor": {
          "ref": "fec78f84-2f7a-40a0-84e1-0f059ec3ca71",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "262e1ed2-1509-4e34-99fe-1358f347291c"
        },
        "item": {
          "id": "a57d0d78-2bb5-4abb-a80a-0d9a07173c50",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a3efbe83-0ffe-4a8d-9f8b-65daac837a90",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "0cd5a71e-c05d-4393-b79b-212ed2943f96",
        "cursor": {
          "ref": "7e368730-e72b-4a88-8f65-c13f539feff4",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d3054b98-d354-47e4-9b69-61682541defb"
        },
        "item": {
          "id": "0cd5a71e-c05d-4393-b79b-212ed2943f96",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2223fad4-0457-498c-9719-0a5f272ddada",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf23b75-1b48-4647-8a2c-15921e189705",
        "cursor": {
          "ref": "573c3e7c-6950-48dc-9aa3-8c0d23669d0a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "9fca9978-633b-4b1b-8c07-5601a0cba5df"
        },
        "item": {
          "id": "3cf23b75-1b48-4647-8a2c-15921e189705",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "69d7ff1d-a4d7-4c26-9936-2c537bf2d374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6545e9d9-2791-4586-9d68-9c82ede5ed25",
        "cursor": {
          "ref": "4f2c0f4a-868c-47be-bdf8-ab66bbe9b030",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "a6ce8ef8-7fde-4860-b6b2-632ec7ba64e3"
        },
        "item": {
          "id": "6545e9d9-2791-4586-9d68-9c82ede5ed25",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fff7578c-fb5f-49df-94d7-d76bc6e36cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a65384a-eeb1-475a-90f9-f993bbc8a86a",
        "cursor": {
          "ref": "d261f953-77f0-4439-9289-dac61d0d033c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ec97e1b0-89ec-4d03-b321-26fd748cc669"
        },
        "item": {
          "id": "0a65384a-eeb1-475a-90f9-f993bbc8a86a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8b5972e9-32ac-4604-9eef-8db854014a84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998effc4-d599-4f91-8e10-d7619192b54d",
        "cursor": {
          "ref": "71045ecb-bcfa-40f6-8a8c-4347d53d425c",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2ca88eea-a91f-4653-a6f9-7f330425f0a7"
        },
        "item": {
          "id": "998effc4-d599-4f91-8e10-d7619192b54d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d0f02d75-f156-4dc6-ae13-877fa517ab79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23cca9c0-4ee4-4cf1-94c7-aadeb93a0297",
        "cursor": {
          "ref": "c72c7576-5939-4d34-8d69-107a49666c50",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b6193cb1-59de-4b67-8416-07c7c95d2b60"
        },
        "item": {
          "id": "23cca9c0-4ee4-4cf1-94c7-aadeb93a0297",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5bb8b3f3-034d-42df-874b-c2d2c3784c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479878b7-383e-4c3d-b74b-95b8a101f542",
        "cursor": {
          "ref": "476be591-eb92-4bfe-8ec7-5f04943af46d",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "edd8fe8a-9a44-4137-9d60-cd97829d48ed"
        },
        "item": {
          "id": "479878b7-383e-4c3d-b74b-95b8a101f542",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1ad5f4e7-c950-4309-93d6-2b4ec4e45c6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2867c67-051d-4f24-a094-0e0b28ccc3b8",
        "cursor": {
          "ref": "0f418064-8bfc-4e57-964d-d2b50bf0b2b8",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "9dc53731-a847-479c-adff-3b520f40d55b"
        },
        "item": {
          "id": "c2867c67-051d-4f24-a094-0e0b28ccc3b8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "19013a9a-7092-47c1-a3b3-2be98151a452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8434ee63-a4c2-4c14-85f5-14952064f9ea",
        "cursor": {
          "ref": "5c696fec-65c1-426a-9f1c-8a35b74a0a5f",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "a4c0c01c-6efb-4d81-9dc8-969ae0a02107"
        },
        "item": {
          "id": "8434ee63-a4c2-4c14-85f5-14952064f9ea",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1617c804-daed-442f-b687-de85501264d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7357f35a-0753-45a4-9022-c18c4227509b",
        "cursor": {
          "ref": "a4b885ab-cf7c-4ab4-844f-5b2ee8a84df5",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "eb3b192f-9eb7-458a-8658-092dc1568461"
        },
        "item": {
          "id": "7357f35a-0753-45a4-9022-c18c4227509b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "506d14fa-0aa4-4243-b688-71cd3774fa13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c14d637-0800-4513-95bb-9aead4088d96",
        "cursor": {
          "ref": "832c6f0d-78c4-4289-9fe2-bc20d35a5e06",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6ae557cb-ffab-44f7-9091-11626e624019"
        },
        "item": {
          "id": "9c14d637-0800-4513-95bb-9aead4088d96",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "52a29d1e-ac83-4339-b797-f4e981861aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d84da0-2ebc-4275-913f-001d07389e3b",
        "cursor": {
          "ref": "8ac05716-4b42-4b63-8ce9-cfb965b484c2",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "8dfcb726-146e-4aa4-b7f1-8a86aad8be31"
        },
        "item": {
          "id": "f2d84da0-2ebc-4275-913f-001d07389e3b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2d7050f1-13c7-423d-a2f0-fc12073bc244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2d5401-bbe0-4e6d-8856-7fef3e034a5b",
        "cursor": {
          "ref": "05b477d0-c743-4273-9449-041ef4f9a0f7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "24dd7f8d-a8a8-476f-a41f-cd8c3382fde3"
        },
        "item": {
          "id": "2f2d5401-bbe0-4e6d-8856-7fef3e034a5b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d6a22d57-b324-471b-b014-1f9273e66ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462bd1cc-e7c9-4bab-85c2-398b7a88477d",
        "cursor": {
          "ref": "ae29a5ce-1634-4567-b86d-75fc8c8f7be9",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "c6997d3c-e2e0-417f-8909-32b76b7d26a4"
        },
        "item": {
          "id": "462bd1cc-e7c9-4bab-85c2-398b7a88477d",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "33c189d4-202f-49b2-847d-2468e6923b41",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d67ba8dd-e0db-40a9-9187-6f7b07781765",
        "cursor": {
          "ref": "aa9bb1e1-4d78-45fd-86c1-2a83af1c729a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b44c81e4-7431-4e40-a3b0-5e0b39fc23fc"
        },
        "item": {
          "id": "d67ba8dd-e0db-40a9-9187-6f7b07781765",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "a5705085-edba-433e-b864-1f89322480ed",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "093f8ff9-4fec-4787-8a4f-353a3af92102",
        "cursor": {
          "ref": "529557ee-42bb-4c6d-a1d1-8e763cdde59a",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "60fffb24-4bc8-4dc2-89c3-c452f68b99d8"
        },
        "item": {
          "id": "093f8ff9-4fec-4787-8a4f-353a3af92102",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "afbd801f-f2b1-4310-bd63-60591d48dff1",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "21465a83-de3b-4759-bb23-af8b78794c20",
        "cursor": {
          "ref": "4937d98b-2c82-4058-804e-4b3b15320b50",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8bcce2ce-b194-4cc6-81ed-05f5c716d806"
        },
        "item": {
          "id": "21465a83-de3b-4759-bb23-af8b78794c20",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d19c60e2-a395-4b9b-94a8-ca49da8465d7",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "09a62db4-251d-4a02-829c-2193e77e90eb",
        "cursor": {
          "ref": "96a80449-f185-4072-87da-9b19405fc3b4",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "edafc818-c676-46d2-a8b2-87c795fe9ec9"
        },
        "item": {
          "id": "09a62db4-251d-4a02-829c-2193e77e90eb",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "deb2498a-9ecd-4368-88b1-9169a3ed0a78",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "38a762b6-096f-45cb-b589-b9be8707dd75",
        "cursor": {
          "ref": "3d379d44-348d-40bd-a418-fb7b31eb800e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4b5d376a-cbd7-46d2-a174-943cab2899ad"
        },
        "item": {
          "id": "38a762b6-096f-45cb-b589-b9be8707dd75",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fb903cc1-7ac4-48d4-a054-459d7bdb9c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dfe61d4-0b95-4000-8ad5-1c30b776bff8",
        "cursor": {
          "ref": "ca8b1158-eacb-4a0d-8bc1-0be038f26906",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2e1fc9d7-cacd-4c01-9b80-83f5536201b9"
        },
        "item": {
          "id": "2dfe61d4-0b95-4000-8ad5-1c30b776bff8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4e61c3ab-3b68-4c67-bf58-11bf19b5346b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91d9b6db-36fe-4c96-b8a9-8be2e99161fe",
        "cursor": {
          "ref": "728c07e6-34e7-44b9-8c81-b2812d8fed28",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "30fe7d14-fbaf-42a8-896e-c64d78a0d7d4"
        },
        "item": {
          "id": "91d9b6db-36fe-4c96-b8a9-8be2e99161fe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ac5b2ac4-3789-4f20-9bb9-f204d96f33d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c80bf8bf-781c-4068-ad7a-428c1b064159",
        "cursor": {
          "ref": "a2ae12d9-afa3-427b-af6e-9f5955a0462c",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d7692399-59c0-4f3e-87f3-55586843a8b4"
        },
        "item": {
          "id": "c80bf8bf-781c-4068-ad7a-428c1b064159",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "dc6ee7cf-bccf-4782-b0f0-5c72bb10f636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66e4171-8840-48f4-919c-1b3ffc017b7d",
        "cursor": {
          "ref": "a8490e93-4f41-406c-acdb-b5c24116c2d1",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "befb21c6-4c88-43e2-93d6-9e5a52d52d69"
        },
        "item": {
          "id": "a66e4171-8840-48f4-919c-1b3ffc017b7d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "259c3bc6-ca69-4f74-b339-9690c5a3c9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5338f522-6c07-4c49-b8b6-c61244bc69e8",
        "cursor": {
          "ref": "b13eac79-7ee9-4c2c-8431-8274df88d44f",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f232637b-14c6-429b-a0ed-de771804650a"
        },
        "item": {
          "id": "5338f522-6c07-4c49-b8b6-c61244bc69e8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8318fe65-80f1-470a-8f3e-e73f46924dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a8178d-8602-4335-a7f2-5361d64c5e1f",
        "cursor": {
          "ref": "c54969f7-348b-4a4f-946e-c3314a783575",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5ac92270-1943-4313-9c70-70927d643d0e"
        },
        "item": {
          "id": "d1a8178d-8602-4335-a7f2-5361d64c5e1f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6a34aeb3-6274-4e48-9b97-f9a7f563e5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebf44c7-2e82-4104-ae9b-a0173479ff43",
        "cursor": {
          "ref": "acb73caa-d381-4c67-908d-8507a0fd4d38",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a4b34642-430e-4c9e-8612-6cee546f2144"
        },
        "item": {
          "id": "8ebf44c7-2e82-4104-ae9b-a0173479ff43",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c94f621f-6af1-4a6c-8292-7a871df6085e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdffbdd0-840b-4411-b9f3-aea60c7b514e",
        "cursor": {
          "ref": "c123815d-68ca-48bd-9dfa-ad5d1a404561",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "02e9dc14-cc05-425f-a954-0535c81fb513"
        },
        "item": {
          "id": "bdffbdd0-840b-4411-b9f3-aea60c7b514e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0dc541a1-fb59-4a03-bdf8-762dd562d20b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7999fa-1c41-491b-b393-e210393fe846",
        "cursor": {
          "ref": "fe6ed7da-847c-4108-8dc8-65b900b2fae9",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "997aa5d2-a927-47cb-bf64-bd4efd1cd9b3"
        },
        "item": {
          "id": "ab7999fa-1c41-491b-b393-e210393fe846",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "68e4bf25-9b50-4745-b46d-21b6220831a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d025bf2-1eca-47ab-b002-958672af59bd",
        "cursor": {
          "ref": "30d3dc61-da9c-4595-bf8f-0637bd321d4f",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f65a8091-0673-46c9-bfb1-82d4494e0bd3"
        },
        "item": {
          "id": "8d025bf2-1eca-47ab-b002-958672af59bd",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "02c24f00-874f-4235-b17a-c8ee17a85580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f6844f-c9ec-4732-99c0-399657ed5780",
        "cursor": {
          "ref": "818d2eba-35c2-408d-a3b6-1920fa13668f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a8d16f9c-f30d-40d0-bbb5-6527c49dcee3"
        },
        "item": {
          "id": "11f6844f-c9ec-4732-99c0-399657ed5780",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "837f9c9f-a20b-4b09-94b9-b362780756ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb62ec0-f99f-4c63-93de-8e6229895b13",
        "cursor": {
          "ref": "44cb084f-0e10-445d-a2b2-f35ddc298ec8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "7a824252-4c1e-4344-a26e-9b78872be16a"
        },
        "item": {
          "id": "3eb62ec0-f99f-4c63-93de-8e6229895b13",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "70e65e7c-c5dd-43d3-a32a-4c66bacfd1a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8906d36-7e7f-4e94-b660-07f17c955175",
        "cursor": {
          "ref": "409c227f-fb02-4ea0-aa2b-6b60aaa75b52",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f33d35cb-602d-4500-a87c-9b60353e3fd4"
        },
        "item": {
          "id": "d8906d36-7e7f-4e94-b660-07f17c955175",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bba215eb-415a-4071-ad7d-791a92151b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0047c2-3e07-444d-9d20-3bb078c311f8",
        "cursor": {
          "ref": "16b42f00-9110-40c7-8e68-9200b00a9bb0",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "50b7c70c-0a8d-4a83-9b35-ac2f1ac7227b"
        },
        "item": {
          "id": "6f0047c2-3e07-444d-9d20-3bb078c311f8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0b8cdfc3-68d0-47d4-b712-916844fc5ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d2d7e2-ddfd-4a93-89cc-eb336033b3ec",
        "cursor": {
          "ref": "acdacf2d-076a-400c-a852-281a883cc6ec",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5098bddf-707c-4dee-b5b7-17a5927096cb"
        },
        "item": {
          "id": "d1d2d7e2-ddfd-4a93-89cc-eb336033b3ec",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b42ba27d-c1ef-4789-a32e-db9e7477f68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7452aab8-8024-4e66-ac45-96b5e3134a05",
        "cursor": {
          "ref": "d43e415e-f3c1-4588-bf41-d21abc0097a0",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1d04985a-3654-4319-8085-1070e0f67cde"
        },
        "item": {
          "id": "7452aab8-8024-4e66-ac45-96b5e3134a05",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1385c3a4-5b10-4e26-a8ca-ee4553b74eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dd5a523-bdb0-48fe-b803-83240c17327e",
        "cursor": {
          "ref": "02e4323f-103e-4207-9d9a-6b207bcf1232",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7bad6eb5-f32b-4672-ab0e-549e1185145d"
        },
        "item": {
          "id": "9dd5a523-bdb0-48fe-b803-83240c17327e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "a200529f-8d52-42c2-b8ec-58791745e5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695cfb09-555b-4a1a-8819-adae375f989f",
        "cursor": {
          "ref": "5bcaf4fe-d289-4039-a39e-4f43224cc966",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "de63dcfb-2113-4b34-81b8-c2bcbf1cb9a4"
        },
        "item": {
          "id": "695cfb09-555b-4a1a-8819-adae375f989f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "a234ad55-b3bf-48c0-a620-f79523f4de8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8725067f-0eb2-4c33-a081-031beef86756",
        "cursor": {
          "ref": "dfc79326-7a5f-4155-bd38-7e0079e96f3c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "279c7761-cbfb-428c-8fb8-529996c38fe1"
        },
        "item": {
          "id": "8725067f-0eb2-4c33-a081-031beef86756",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f5fb1710-5899-4a72-b45f-aeb07eb26959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce8f530-7ffe-4bdf-8b8f-f5ef15723c2b",
        "cursor": {
          "ref": "822a0ae9-b04f-408d-9ca6-4a7c1e38b7ca",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9599ebf4-0cdb-4a32-8854-3983bd656743"
        },
        "item": {
          "id": "8ce8f530-7ffe-4bdf-8b8f-f5ef15723c2b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "408f2dda-5f1e-4458-b8ef-7f806915fac8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33c3e18-9095-4e0e-9258-b6cb573772e6",
        "cursor": {
          "ref": "460209dc-9daa-4d9a-84ee-9e8aa7fa612b",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "06727622-259e-47a8-8919-e0a71cb9c219"
        },
        "item": {
          "id": "d33c3e18-9095-4e0e-9258-b6cb573772e6",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b1d253fe-c3cb-4f78-b9e5-e0ea4eef9e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05811c3c-ac6e-4ad8-99b5-b6e295d49762",
        "cursor": {
          "ref": "e5633b04-615d-42cd-b95b-07faa9432bdd",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "9c40085c-a7a6-4e95-8908-dc8fed8a44c7"
        },
        "item": {
          "id": "05811c3c-ac6e-4ad8-99b5-b6e295d49762",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f24d654b-8cb4-4de7-8def-2dd98cb83fd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83798c1-432c-48ee-9c40-a10de24dc614",
        "cursor": {
          "ref": "d2d4107c-eedd-4d80-baac-67f6f8a57fcb",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "cbb56d6b-a88b-45bb-ab69-8a6b1958c033"
        },
        "item": {
          "id": "e83798c1-432c-48ee-9c40-a10de24dc614",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fe7a37bb-dc6a-4fc9-a18f-58d8ab14415c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bd7351-68c1-4600-b53a-859e41443774",
        "cursor": {
          "ref": "000744f6-7f0a-40e6-a3b4-1c2f82f76189",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f9eadaf5-733c-42e1-858a-97d25e4d351f"
        },
        "item": {
          "id": "45bd7351-68c1-4600-b53a-859e41443774",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "338e2b63-3b9e-44b5-ad9e-fec84ba6173e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bf0e6f2-cfa9-446f-bd8c-7a1ab6f7bbd6",
        "cursor": {
          "ref": "111875be-c0fe-43f3-92a8-7ab4c8cbd966",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c3775929-5a9d-4aaa-892f-e5329bc444a4"
        },
        "item": {
          "id": "9bf0e6f2-cfa9-446f-bd8c-7a1ab6f7bbd6",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "4c8e9ce3-a36e-4f62-aaed-71271b6439fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736d3899-d3a0-4651-8990-987f8561b59a",
        "cursor": {
          "ref": "72357471-6a6e-4b9e-8c94-7f7074feb6ef",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "8b609528-e4eb-4897-838d-7f28d23346ff"
        },
        "item": {
          "id": "736d3899-d3a0-4651-8990-987f8561b59a",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b3963e5a-4199-4d6f-afdc-181acd12a258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1fe0a9-9d32-4784-9f4c-f2706f0e9097",
        "cursor": {
          "ref": "afbf344f-5f2c-4870-a83e-5bb659a8e1b5",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "958a3973-c94e-4c2f-bcf7-16f6562ab37d"
        },
        "item": {
          "id": "da1fe0a9-9d32-4784-9f4c-f2706f0e9097",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "07dbc8a7-872b-46d5-8825-711a4bb2cb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8ce18d-b248-417e-9bf8-cedbd9c0e94f",
        "cursor": {
          "ref": "56e91cb9-3222-4f2c-9869-a14ac94c7938",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a5ff3f55-04f1-41e8-96b9-10b61f757d18"
        },
        "item": {
          "id": "6a8ce18d-b248-417e-9bf8-cedbd9c0e94f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f4db87c0-fc69-4c20-bef5-05f3628fef00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c16ebd0d-0a3d-4c88-b761-ac124c16fadf",
        "cursor": {
          "ref": "c3f5c218-0834-469d-b109-b3d1f47752db",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "31c3078e-a0fd-45b5-a801-ddb7959839ff"
        },
        "item": {
          "id": "c16ebd0d-0a3d-4c88-b761-ac124c16fadf",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3cf78fe4-b95b-4a2a-ab94-5458de00188a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a7fe0f4-439c-42c6-b37e-f6dfd67bd0fc",
        "cursor": {
          "ref": "682c8cc8-a0a9-4b59-97ce-4144db847902",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "389f850b-b4ac-4e15-918f-44fc4ce3f961"
        },
        "item": {
          "id": "9a7fe0f4-439c-42c6-b37e-f6dfd67bd0fc",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "84f9f921-a067-4aac-89ee-085ddd7afa5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ab0ccf-129e-4316-b892-294673640991",
        "cursor": {
          "ref": "66266495-c241-4fa8-aa74-5577b05736de",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cbc90579-b7f2-4994-9623-7911ed81aceb"
        },
        "item": {
          "id": "d3ab0ccf-129e-4316-b892-294673640991",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "44580fbe-380a-49f7-90d5-f61dbcfefed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64bb4d1d-f356-4db1-90e5-a8eaff4c93de",
        "cursor": {
          "ref": "cec4cbc7-ffa4-4e81-892f-ed8a5c15ec1b",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "49662f9f-3140-4d84-8633-0c3f32c98fe4"
        },
        "item": {
          "id": "64bb4d1d-f356-4db1-90e5-a8eaff4c93de",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2d811ebf-55f6-4de6-a8b2-4b5b0ab4ccc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097db4ab-f715-4d12-950d-244cd44cdef4",
        "cursor": {
          "ref": "c0170c55-00b9-4220-bec6-b0a478511480",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "86e846b7-1270-4331-9490-cbfe6784ffba"
        },
        "item": {
          "id": "097db4ab-f715-4d12-950d-244cd44cdef4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2fec079f-62e0-4630-8ae5-bc4ecd64fbdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc22f17c-4299-4095-a77a-7b35a913be5b",
        "cursor": {
          "ref": "e5c7c394-32c5-497b-9873-6d5ac133a1c4",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "091dc16d-6d19-4aae-a71a-c22e3890d3df"
        },
        "item": {
          "id": "fc22f17c-4299-4095-a77a-7b35a913be5b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "df9ebe38-6b7b-4a6d-a85b-dff884e66bf6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 59,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a39bfd-c676-42c8-a450-faa8c4603f7f",
        "cursor": {
          "ref": "37a801b3-b2bc-4c75-b56a-f3124727009a",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8cb8b314-934d-45ac-a48c-0c773be40cfa"
        },
        "item": {
          "id": "c7a39bfd-c676-42c8-a450-faa8c4603f7f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a7cb0dd7-b053-40f2-88a7-4f2f34b8c6e3",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "55cbc248-dab6-4818-bb3a-21325d447a64",
        "cursor": {
          "ref": "148a1379-9433-45c1-a253-405ed6e7ab43",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b96be902-0d57-4ad1-9d67-5a52bbe02545"
        },
        "item": {
          "id": "55cbc248-dab6-4818-bb3a-21325d447a64",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ca82217d-a82d-42fa-b19d-d55e8d9aac2f",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6be855e8-fa5a-47e9-8cbf-6b579f80ce09",
        "cursor": {
          "ref": "f3138955-d762-4ce8-9db9-e24b563893c2",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ce2917d9-48da-49de-9938-0009829acb77"
        },
        "item": {
          "id": "6be855e8-fa5a-47e9-8cbf-6b579f80ce09",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0272ef7c-f239-4944-b97b-8c0c2ffd827c",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "746d9602-4654-430d-b6da-7fc4dcdc20c9",
        "cursor": {
          "ref": "d816f512-b3ca-4100-ad75-4acd43a919e3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2de96a1d-6cb8-48c3-bb47-0e9d823d65b8"
        },
        "item": {
          "id": "746d9602-4654-430d-b6da-7fc4dcdc20c9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a1ae2632-a066-4aa3-9ebb-6a5a22d1fcbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746d9602-4654-430d-b6da-7fc4dcdc20c9",
        "cursor": {
          "ref": "d816f512-b3ca-4100-ad75-4acd43a919e3",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2de96a1d-6cb8-48c3-bb47-0e9d823d65b8"
        },
        "item": {
          "id": "746d9602-4654-430d-b6da-7fc4dcdc20c9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a1ae2632-a066-4aa3-9ebb-6a5a22d1fcbc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d026a1f-0d97-48b2-9b23-fabe421192f5",
        "cursor": {
          "ref": "a8b9a844-7f91-4a75-99d3-78edfab742ed",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "74f47990-8d0c-4587-a270-a605ca4ffc46"
        },
        "item": {
          "id": "7d026a1f-0d97-48b2-9b23-fabe421192f5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2d984a96-d108-4bbb-a9e4-fd208f56b117",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 58,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bec7e23-873b-4a6e-bbaf-1dbbd8b6bfcd",
        "cursor": {
          "ref": "557eeefe-6d46-4421-8687-7d04fb24e4d6",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8403de37-87ea-4412-b966-8d0a56385d3c"
        },
        "item": {
          "id": "3bec7e23-873b-4a6e-bbaf-1dbbd8b6bfcd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "750044f3-0cfc-43a5-8d18-7eb4ecb3e352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}