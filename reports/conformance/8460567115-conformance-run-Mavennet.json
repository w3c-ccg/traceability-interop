{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f26df71b-914c-4368-a4bb-88aa5e66a48b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "495e665e-a1bc-4c22-ab47-3d07e96de0dc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "554ab33a-c3b5-445e-9d59-30ed9f2cd6b3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "149d2468-83ad-4bb3-8f78-531c0031aee8"
                }
              }
            ]
          },
          {
            "id": "a755ddce-4aa9-4da8-9050-3572b85be75c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "640fbfdf-63fa-4457-92f9-c575a50edc37",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "6d6c008c-2325-4ed4-86ae-0a3d96d2488d"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "0ddf963f-8ec1-40f4-85ac-7a6decadb5f4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "53eac534-c70b-41c2-9cc5-38d7d9bf9c46",
            "name": "Positive Testing",
            "item": [
              {
                "id": "20e47d94-422c-493a-a2c3-50023639e1f8",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "332cab91-0cdf-44ac-9e52-a86e45bbd40a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "582a82e4-97df-441c-8b93-00aaabd9ce1e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d35856ab-af5c-4f1f-a85e-183716d19c11",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "92ad0266-70cb-4e94-a540-a8b657f277d8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b7d9f106-5c80-4082-9e90-6d6a0caab204",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b731e691-a5f5-4583-a945-3837c5bf93c9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06383668-28e3-4c30-b442-40bf9c428059",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ec59c0ec-7be1-4ff1-9f34-7d1254701edc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4b650e2-cfeb-4e9b-956c-c209289129d3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f0a60dae-1ed4-4f73-a3da-7877469ffb25"
            }
          }
        ]
      },
      {
        "id": "02c9c76d-87d8-4e4e-88b5-f35e2f941dfe",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8ffcd2e4-d459-4d58-8207-7e60094f205f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d67f9c09-1034-4659-8ba5-c74ec057aaad",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6dd6e480-5a46-449f-99f4-1da74953d3cb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397c3acf-e80c-4c1f-a64f-898f437fd7ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5164b51-d83b-4125-ad85-07d1e3801a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a1a54fa-1991-4230-affa-eaee8a1c38c2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8a666b0-f903-4be1-8864-5b4ce99906e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "11794f68-1fc0-4b73-862e-3e862c24218c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd236a3-a988-4d9d-a693-05b1620f8947",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf7968a-cfc7-4ca5-8cb5-f310f9b27a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22c3ff80-3103-4272-8a76-199fe9745ae5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1292a667-4857-4952-afef-fd644a851d07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90ceca48-37e2-416e-84d0-41f19dc88245",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e39f3a-21bd-4faf-823b-cb6c77c2f2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b6a20d4-37a3-4c29-b282-c5f983fa9dda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba0d136-c196-4db0-82f8-9542db165f3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8363244-597e-490f-a10c-0a44da13cde9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7b2c7143-08ea-40cd-acf3-82b141caa4c6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ae9ddfc8-f26b-47a0-b205-60482ac752ef",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da29d78d-5c97-41dc-b83a-011e9463a3fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9ea55d8d-58f7-4bc3-ba51-6e41cd2e0415"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7c9f61d-20ac-446f-8886-ff638edd875c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a468b837-0111-4a43-bafa-68a83c3b23fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d2ae8a97-bfb4-4075-83e1-62911ddc2f64",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91ed83b4-0375-48c2-b047-17e5f829d275"
            }
          }
        ]
      },
      {
        "id": "2089802e-8800-4046-808c-b6dc91c0068d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6bf7a326-4faf-46eb-a12f-85b34b734675",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6b5fcb94-adbc-40a8-8e67-294418a76f47",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c143dfab-9651-4cf6-8566-75f7c123ca3c",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955f2e55-fec5-4201-8a6a-1afc4776801f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2bb467-d762-41fb-a82b-7e7457f82b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd96f3ae-8f5c-498f-ac43-e1b631a57bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1f39586-f20d-43cb-92bb-61366b006c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f04209-729a-49f9-9fd7-464153984765",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978da2d3-9795-4a09-9b26-60fc9756bf8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccf251b4-58a0-4c17-8e55-02296a912454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e327b3-4a45-4b4b-92a3-32b820efb6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a23c1b6-728f-4b56-b3bd-5d294724ffd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fd72da-9887-4ae6-8220-564736f34013",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a4c55b-7d5c-4449-b2d5-e94fe67803d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77f8d9e-c489-4fe3-a7d8-4f720cbd36ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2ede84-80da-41a8-bfcc-bf5f96095c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a46b60bb-a788-4bd2-bb79-0a713ad37d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0305325e-16a3-455a-82f2-54f79c47954a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6408ef5-2b27-424c-8181-5f0efce053df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b581012-4b4e-418d-8aaf-fce43b34f9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484e9980-d26b-4a80-b63a-312b40c6ccfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2028ef4c-9d88-4006-8521-cd9ceb53077a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd49340c-138d-4638-9b4d-c4291508d9f4",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "404cd9b6-9ec3-422b-a5c1-375296c79aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18cc7d60-50f1-43d2-aebc-a64f1db6cb00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b959a33e-40d7-4d43-bc97-2144d35ba58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe905e21-9845-46e7-9f59-2f40643fc82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa1ef96-0eba-4b2e-8a82-ccbc79ee93c7",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa124fd-d68e-4b9b-8ff2-834a5b1c6ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6e9878-fd0d-4466-9248-e4d547f2da9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1aca05-3421-4fbc-9b5e-f99ef02f4eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8934abd6-6ff2-49fd-83db-ad70baa6b697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268dad8f-911a-47a5-ac1c-0fa2502f98e2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257d89f5-c3ec-4535-90db-162f816a5eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c226c9a-02e7-46ea-a661-4de959e30c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63dfeaa-c23e-4c2c-84bf-70d1b8d8ebdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8f26be78-6343-4b63-bac7-6098f1d4b0dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c6d439-02b3-4001-9580-1ad3b651bda1",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f143c1f2-add7-4d92-9408-17629b8319ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38521596-0660-4bee-b07b-c6f6fcc51a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab286a2-d9ac-4bb2-b29d-929f425457b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b36b9d9b-8908-49f8-9526-1d2e68ee31ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef9c4f9-5e3e-45ac-ab57-c846a4db45b1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9fe031-af93-449f-ae40-3a7c7e99c39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5c976d8-16ea-4b83-b721-1b96549ebe0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44609d9-eaaa-4dfb-91f8-15a79e50b18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50ec07d4-b088-4620-9ec4-d9245c19782c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0aa4f2-c3b6-40bf-a1fe-cbf77e5aab2e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "075f4236-6855-4deb-a0f0-2df728c9ab0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db660550-7989-4ec6-bd59-61ab3ac5b97d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3864b45d-4b50-4624-b01c-086723607055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7df6d8a-8d7d-4eba-9c99-87dcd4a74bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d13b9d-27d3-4b2e-807b-566bb209b220",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5630d7-b34a-4e38-8890-bbb1469eb88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bc4b51b-6172-44ea-9fdd-5813f6857470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ccab96-c789-4d31-8504-92eaf919c5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ce13a92-9b84-4796-b258-e73aa8cb5025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44862bfd-1381-40ff-9414-0e7930927c12",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e0a1688-58b8-4202-abbb-3cdd45ae5b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfb6e20-9c82-4776-9061-162eab5c4417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8fe7240-db8d-4326-9299-63d1ee7c4e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eabebab2-b026-4115-af4e-30f21b34d8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab09ced7-8485-48fc-976c-007fcd5f4919",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bfcd73-9dd5-4fe8-983c-3b268e06afda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47101b2e-631a-498e-b5a7-8c4867cc646d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a3910a-fd0e-45e4-87c7-d9df0569ffb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3f3cc6f-2dd8-4ae5-ab4c-18cdf3671514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892680ff-0555-4c96-a293-530fa04e380c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13587a3e-9480-4ee9-85bc-499c103ee955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3202445d-03e7-419c-8ec1-28958d201dcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6511d8-0455-4974-8dca-a83e9bf7dd55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a532557-1dd7-48e3-8bcc-460553cc67cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b6a9c19-0959-408a-96b6-f4884d4b7b6e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4ded02-8cca-4ccf-b658-2d6ee24ecc67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda69de5-aef8-406f-9a64-7b40d5dfe5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab2dbba-f01d-450c-8eb5-4094f49bc74b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d76cc008-61bf-4f23-ba7e-b4989952fa37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d62d07f-c72b-4527-819d-ee49dcb69a62",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0208e3-7bae-46d0-af85-12dcb40a6f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3725edf-e69a-4333-a3c6-b548a3a2e183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4464a9d-c91b-43d0-bdae-ed1317b8e47b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "237a656f-003a-443b-885e-c2bd161fcb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "612a8b8f-be18-4c40-92d4-1ec9a5a57bf7",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d7d5e6-8685-46b2-b321-50c7db2807ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8468df3-b5ad-41bc-a7c4-a644d970bde3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6360b15e-93ac-449a-941a-1b2f1c32f1ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46d52eeb-1985-4140-886a-a945a01943e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca5c1a6-3139-4528-adc8-90e21afc09ff",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969bb981-ef6f-4629-83c2-28582b65c52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4007e21-2327-43ec-bd4d-022556833880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c5e425-e72e-4d28-be3d-aad43cb5a4ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "460a85ec-2b56-4e73-b372-6f4cff33f861"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa286ce7-3a60-4086-afef-30ba34edc60d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c18e0e40-02b7-42b4-8824-24bd4b733f2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f113034-3016-4759-a745-850bc16116ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b4b3ff-64dd-4002-ab1d-aabda167705e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1794e779-08b5-44e8-a5bc-a915381dd74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2994fefb-e011-46b3-ade8-399a463fd42b",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ca3760-739a-4826-936c-9459048178a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8135ba-7121-44d4-8357-7784bb2699f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2423558-b439-4f9e-b588-50199ac1e3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "185fd995-3ba5-4311-b066-895a29496964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0a2168-1570-4ea1-a5ba-1b32dfacc440",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c2c56e-4023-4214-bd42-f18c0055e3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a489d69c-ab61-45d7-8f58-457b8ac75793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a276752-93fa-4d3e-9ade-27957b87a6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af65019e-cfab-4c90-b86d-8aff866479d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20766de6-50cd-4217-a80a-5e502dbad394",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ee17ba-afc4-40a1-8ad8-f4adcba42989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c2e428c-033e-4579-8586-fdbc1c32e432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b449556-3a04-42e6-9e07-234a72818142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ccee673-2a8c-494f-89da-861e660b0e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a123090-a3b9-4698-9a26-4f229f2cf895",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "886f4a7c-6b3a-4fb8-9632-f44ec5d2faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0eeaf32-0c5a-4821-8f83-5f96f475106f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f277a0-ec61-4569-bb68-1686a85a70f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1fac7f5-587d-4553-9c7a-5f016db7e717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c032ca1-07bb-4321-a40a-89d7da96203b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "857d1927-847e-44eb-84db-216e08194358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29f25d28-d068-42d5-8efd-4fca78458b93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b34526e-872f-46db-af3f-1ab616d374ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "943ab17b-bfa2-435c-9ae8-1f121eca7e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "338a876f-32a1-47f2-a38c-7c459acfa20b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9d9f72e-e83d-4017-b97f-38011b9150f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb55957-2d96-412f-abf3-8823187658fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8d509e-b514-41b8-865f-4bbaa432add7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18d40dfb-5a95-4327-a3ae-ce31c47d510f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8c6a60-0c4c-442b-92b3-45622011d95f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b03ae7-ce75-436e-bee0-f7d85d8c03ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471d4b80-e034-4f87-b2b1-8051c64f0ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4d3384-da9e-487a-83e4-731ff5c4c5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dae4a14c-de79-4220-a1fa-0dc5d35b5bc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb7e3fc-d0be-4d51-942f-9762836cb2ca",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4548ac-9641-4303-8592-a39462d7041b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6182f80f-0bc9-498e-a1ab-715eaa92657c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57047ce4-6472-42e1-8a40-8e0b01888fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9e354c-b926-4a2e-ae52-d716f00b19bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cefb33-a569-4d08-9677-e4f479c125ee",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70bab50-d0eb-4577-9f45-9e059dd6dc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1a93e0f-befa-4d18-80ff-aae35cf6be24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e01de5-4e19-4720-8f36-a9130d465384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "989869a8-7ae3-41cf-ba3d-8e1c7d47b411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ba5075-9b9c-4718-92a4-305e975f080d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c5446c-8f72-4d0a-8baf-328c48c3384c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4384365c-d38b-4a8d-a43b-295f025a2b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec1ecce-bbf6-469e-8c19-1765aacb7f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "94795f36-f2f6-4873-81e4-805fa57d1ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254d960a-1f90-4882-ad17-6e5ced489e12",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f045a909-93cf-40b3-9309-0f611a9a8bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22536750-bb7f-4cc9-8d5a-55232c944412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86e7d7a-f424-492f-81ed-86649f62c1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "c049042c-8c7d-4e9b-b9e4-271db7c307f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7436a2ac-58b4-4c57-9f17-62d3a62e55ae",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a85ad89-00dd-43ac-8b0f-cfc60f92fbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f26c9ab-e10a-4771-8a67-ec0d947cc206"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f5cd4d-1de6-44e7-b6a3-cf668a22d0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea55a0b1-fa70-4687-b8d9-39bcc5abbf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "773c9799-e415-492d-bf6b-04b5faa477c2",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f3f6bfa-a5ef-40a1-9944-c08f44ac34fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e87a28b5-c2ab-4524-83f3-6da8e21fd6cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a85181-3c5b-4238-8186-02be50ca46ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc5bb43-d73d-4bbc-ad60-3ef06a70814c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46a7026d-f5eb-4bcf-adcd-6c8413677b6d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "649ca10c-0241-4595-b1e4-dcbb7e7a563d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4640545-f2ca-4221-8a4d-fd5666ecfc54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da442652-bada-4ec7-8433-8958e4e97393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8832000e-9af2-4c8f-9791-ae8e553d5908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0149e1db-3fbb-4b1e-aea3-d36c94c5c7ee",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e22c9f-5b79-41ef-b578-71d29a342ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e614890f-ca0b-479b-8040-6b9026c12c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f516eaf8-6521-4842-a6dd-72b3a20e8321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1cfbf61-d53e-4153-9242-b1a29d63a919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b04248-d7c5-46b9-ab21-a842cffe7dc6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3754d4ea-1c69-41c2-ab69-189ec8463fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1baa44c9-37e1-4d03-a080-d595aebf0ef5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea239a94-264e-40ac-8cc2-040827ff89ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "a20d0857-71d9-4905-a81c-16cb46dce4af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f88106cd-684e-431a-9677-0ad2d0a0cb57",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2337f7-0536-46da-a1a2-a265930de814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e60676c-e280-4f24-91b6-a7b19f90bafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d6425fb-a5ad-42b5-94da-0025d5b863f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "54f5a58e-39f6-442a-b277-d43fc3186f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c4a292-a154-4418-906d-fd5eab5ec15d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62a91a64-8527-41dd-8ef1-68d05946896c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7203b2a-bd91-4185-98fe-2660e621cb5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb74af8-4198-4bc3-8f44-4d94c309b0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c0767bf-0d6d-40ee-b707-9511585aa6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8956158-5d22-4c0b-b3d2-cae4b66a99ff",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6d6c12-faaf-4e59-89e2-f60c84ab3bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2295d6b-ca76-46ad-ae89-7d5098167696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1272bc27-1b79-42f1-9604-50168c5b0d1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4034ea3-de58-41a9-9271-81d5c1b6404e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb57b88d-3071-4d4c-aad4-7bde62a82710",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b331e96-4fe8-42ae-8122-7ec55536f92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361aa5a4-bd72-4b98-ae51-94ba3f365905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c987096a-bea2-493d-8a27-3fae3409e87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "002f3892-a59c-4358-a5eb-310e20e26152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4b8d88-0bd3-49b9-80f6-4fb6dacea8fc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b39ac3-a030-4337-baa8-ce28b310e797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12f0c64-97d0-4d46-8eb9-dbe37fb4380b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62af5490-4d56-45e4-8294-6976d1f79e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ffc16e7-8c38-4516-a774-dc82e395b7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f171bb4e-48e5-41bf-8a62-0b23f5535fc6",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4141aa6-931d-4465-a664-590068c45e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5996d7d7-0f52-4586-9b32-057ca861f4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342101b6-d6f9-48b2-99bc-038b0b4e20f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "93b9bc74-e8ac-4017-b27a-2012f7caf986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c63c078-eb21-41ea-b99d-d366faa424d5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f81555-3848-4d76-87db-a5ff0e39e464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b722ea-57b2-4347-a8c8-ef7956619a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d26b737-31e6-494f-a7fa-e159dcbd4539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f0297249-6def-43e2-9547-f9ac1dccce72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a631e8c2-1430-41dd-987a-9dacfa21e098",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df450679-1a90-46f7-afcb-e819646444a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45b3da8-f521-4cb5-8667-78d115b57066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a832c202-e274-44fd-8c66-da32112a79f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "90bf8763-f637-4b3b-8925-427abe2ddc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6411eb8d-96b9-4441-81e6-af8338cbe802",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d019cd05-7c5a-4b8a-bd63-ff554186700c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6cd3d53-ccf4-431a-8eb9-64992616c4e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f46500-99ba-450b-992a-164c210b02fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "05938851-08c4-4df0-b977-36ce4c268766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca013b9-b402-4f12-86f2-2474910f554a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85d3b43-93c0-4f89-9396-a77fd802de64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b70e0883-8f6e-4e4d-a3af-fc57a000b619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484de9db-bffd-48d3-a123-10bd9d943d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f9f5465-12ff-4dd5-a82c-f7f83e0a3540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58fb1d0-d266-483e-8da0-312c7d56448c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6fdb48e-55eb-4665-b9e1-864aefecabd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f014f0b-f8e9-4d20-8ae8-03fe0bf9d5ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd14f4c3-a5ac-4270-8ed2-c93ffb6af7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92763609-9f28-4951-90f0-30a6ec207429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a937e9be-eca0-4393-95c1-9c2bedd48837",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2cc87fb-5982-4890-8cfe-8adf118e3077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2716706-00c8-4037-a05f-51b649ec1c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "859dbb0f-c752-4d10-a2a5-dc39c70b1d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0587630a-a523-42ce-8109-2e6630e70066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209d821e-2a56-4359-80f3-39f7743e33e2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b29e69d-2355-472f-ba23-e85fa01d89e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5c8c45-b68c-4a88-ad27-5fe9c0fe6af2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28ca80b-b905-437b-8f06-33cffdc85f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "58e5df57-71c8-45d9-89fc-57ff296f11f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5bc29b1-acd5-4c56-886f-8ce461ff21b0",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397286f7-171e-4dfa-8973-f13377273667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dd49ebd-4906-46bd-ba27-cf19a6202bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e64c57-fef6-4dd2-a60a-ccdf87ea7a21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0c383b6-05bc-4a21-8583-9440570058ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbcb60e-c0c0-412a-a731-c4980a8e1e81",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d403f64c-a63e-4eb5-91ed-d0ccee1a455c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e94bb46-b3d1-4861-830e-7d86b177f3f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e813ac5-0eef-4598-a21c-51f21bd3bc30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf1ab06-47a3-4370-be28-c37904cd3809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f54050a-d896-422d-ac2c-52ac6478cc18",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc2c5b0-bddc-4735-bb14-4b0c20f2d9f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5a355d-1c8c-4c6d-b895-a0fa07ca0584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ef92676-dd18-4a77-bd68-09a6cb7b0e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc45d46d-332d-4c05-b123-3b10ff70123f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0344b4d1-05db-4797-9b5f-3dfc508de031",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cb2a75-322b-44ba-a9bf-3d204b2ee2b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b30b19-a260-4976-bf07-67d240ec71d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21132a18-83d9-4975-9c5f-a7b11f329e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e4afdd1-637c-494e-851b-3a7830ecd410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b2e9bf9-3014-46af-9161-c2200372ab37",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d8f04f-beb8-446d-bf03-1fddccd43c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8cab89-6b3f-4846-9c49-e7d4f09dd189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8559181-bd3b-4761-a50f-5c89a6ee71e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8212927b-ae53-4b20-97f4-2eecd1f275d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8346d2-c5e3-4588-9878-67c7fc131dce",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f6210f9-c4a2-4c93-9078-03e7df028e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d8b126e-f006-432e-a3b2-70250721042d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bc885d-71c7-4d4f-8431-1df87533cf18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18b643e2-653e-46df-8283-325b5ddd62b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143ebdc7-e92e-4fe5-840c-4dcc56188275",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1301733-e008-4fe2-b936-b434aaf49347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f984cc5e-66a6-4785-b648-a9ef214af4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7dfc547-2e5a-460b-a788-fe0dc94ec50a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4242e526-4519-4dc9-9853-b41182bb1ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e093810e-3672-431b-bbb5-08166ebfc84c",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "970b06f3-38a9-4232-bb10-8537c927ce0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cff0d61b-c220-4751-96d5-ad89ad1cdb50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831ce85c-215d-4e42-baea-3c256da8fc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "142d8f6c-939e-41c9-ade7-13fc05f2ca46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58f6de1d-9004-433e-8322-972745a181a5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3224e4ec-595c-4f4e-9080-5a659a388c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3d954e-1f17-4575-a4b8-a3cc667c9271"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43bc3e2b-4e21-475e-8df4-540645baad95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "656d09e4-cc08-4af1-8723-7b5f981cfadc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c44f1e0-bbfe-47bf-b792-17d9102f0873",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35d36e1e-5453-418f-8c39-dfe60a9eaf0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37484d86-b401-41f2-b389-2db4537ead48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f628f9f-2f20-43c0-adac-8a8504236456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c060b25-4a9b-4d56-92df-2e798189a6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88f5584-c9a2-4696-bf7d-4eaa4e3cb2ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c826eab0-333f-490a-8470-168e2b03befc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd078b71-2b26-4e0b-99cf-6442ce45f146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad2ad87-b07b-466c-aedc-4276a8d075d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c16f2d9-5c58-4a10-a718-7037fa25988b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce259d0-9da2-4d5f-93f6-9866920279e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84a67e2-10ed-4cab-ace6-9f34360e9754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce269ce-2d6e-4566-a6af-9be40b76dc9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc187c3-1ecd-4a41-b40b-1c6629b46e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dfd44a4-8898-4abb-8f43-4d82c4022218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f911b94-84ec-4713-a72f-9fffcd0123c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f913300d-c047-48fe-a306-f03383dbb2bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0af4855-a7f1-4995-98d8-2868f2dce77f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d80e49-1b72-43d7-b31f-3cc8e999445a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf35ec58-a7cf-426a-91ae-331a716d8eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d5760b-40b9-4fd4-b190-b1bb52d0f03b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2be0087-8d46-4d56-976e-ab23f927cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd6b78a-4018-4926-95b5-92d785cb0723"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1ab5f2-a34d-4e71-aec7-4099e68dd33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "db8bc488-3995-48ed-849b-4be524e86101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66ae4d27-d46d-43e7-910a-fc57a6beb2a9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5de73b-1587-46e4-b414-11231a9eaad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3137df38-2c2e-4227-b7a2-c0abb24784f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "804d7123-1c34-46ed-81b5-c2428f6e8ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "29f1dadc-4499-458b-abd7-911d00d0f2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a17f616-ec7e-482a-81cf-1f61bbd9d03a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8fbd2d7-3ac5-49fe-8285-d3bb7b9cb9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bbd38b0-3fb9-4dc4-843b-4c5bddd25e4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c672be-56dd-4db5-814f-e46df7aaa9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d44ac0ea-ea1c-40db-98ab-613e151345d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fece5292-911e-471b-b551-95a1e742d5f2",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3678144-7f68-4350-990d-f2f751fc999f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35cf1e92-6a1e-40c4-af01-5454d4a754d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eba7363a-c040-4535-81f1-9df9ea36946c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0adeba4-b57d-4624-9e63-844c0f98f21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a5b04f-67a7-460c-9b8a-085fa8d06934",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4e4bff-4955-44f3-b3ca-679c8ecccd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "539645bc-9bfe-45cd-9007-d82b45076557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92ad2c0e-9a13-403e-8ae0-c71326cf07d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d000ed87-ab24-4b52-84b4-b195a6667323"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a908948b-6bd5-459a-bb31-e1e41ec519b3",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7161850d-682e-4fec-a9ea-7fa0a83aa97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eb1205a-d2d7-4801-b452-79309237aca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b93e8f9-755b-4cd9-b16b-c4ef4621d0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff304a0-54e2-430a-b047-2eb8bc993c96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e438894e-188a-43a5-95bf-12f189f10048",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4993b7-7de0-40aa-83a6-1ce7f882f88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226097e6-0ccc-42c6-a5fb-7fb26b83b079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e95bb73-d059-4d7c-89ac-de7397672908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "79917807-f7ad-4d21-b915-bdb668590c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ba904a-8ca1-4f8c-add4-9701f09b0b50",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ce7f58-cefd-4ba4-ba84-b303d047080b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28df209c-8405-496b-b6df-c4963254f43e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ed3ba50-4732-4553-a2ef-fb14542a101b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "82fa861a-a462-4822-ae92-a8cc23dcb599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b960161b-5352-44e9-950c-40085a292a80",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e6c877-a242-4530-b32f-edd94de3cb71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f406b366-8c1d-486b-aee4-c47dfce4675a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3f5ebb-dfaf-4dbe-8d14-cfb318e65747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "baca395f-6603-4e89-92d1-394b647abb33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fa44a0-75c8-4b11-8713-ca6b49a47e79",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6959b0e-b0e6-477c-b592-510b9c98e352",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc43431-d259-4454-a493-b2a990d88afa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304d84cf-657a-4093-acb1-41e971973543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c8f0015-36c9-4373-86e1-06c29689aaf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4307b9cd-9e52-4139-a378-bc7f6f85d7ff",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47aecfb0-c3fe-490b-acff-ea4d3316b77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbd4efbc-223c-47c6-89dc-de84b4fcc309"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c1bbb9-9b98-4222-8581-50446d96c1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c962e685-9c3f-40bb-916b-727a4cd984dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d2a8f37-3ff9-4db5-8d09-6bf6f9652be0",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca83b4c3-f892-41d6-ae8f-a0cd1f548894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd7a9429-ccf9-4bd9-bac9-89c832febe01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79282d97-a7a8-4533-8c53-06ef74b853cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "79c78b3f-187e-4735-abe0-346b8f917544"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4ec8b5-ad6e-4564-bd50-d3c6c2dd248a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6d7dc8-55b0-4879-acb9-57d43171cc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5063b654-e9fa-4ba1-a99c-992ad1f63d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f99477-1833-41a3-91e3-f2bc7772e370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb690010-e46b-44e4-b610-93d312bc2a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96edfb8c-36a5-45fe-8b4e-4bec2640687b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738bae3e-46d1-4649-8e29-0a681714207d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff1ca5d6-22d6-4dc4-8cd2-3a76d0e7145b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee981faa-375c-4c5d-beb3-6d640e7283f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b245fbc8-24e3-4ea9-9567-7147dd27c20a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dd673e-d8fb-4870-bd60-cce77d14456f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f76048e-c6fb-49d0-81f7-676298abbf2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3e2d2a-07d0-4072-98a6-c8b8e361aa47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621813d0-6d3b-4fbe-90ef-0575e74a6769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0af91799-fe1e-4070-8c21-5230993cd4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3030ce7f-63fd-4158-bf6b-0ff486895183",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ee64a0-660d-4627-8737-78fa01a7133b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f06181-6d23-45d3-b32d-606904614f6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e093d7-f7be-4fe1-8ad1-ffaa59c4cc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3db4e308-f72d-4efe-b56c-f6ce503a4944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f652e60-9c76-4e65-bf8c-12327418814d",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b950bae-c94b-40fd-9352-c9ffc0978377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1e8a85-0665-4665-9686-4c6d08a5dd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2718ac-f1e4-4791-b74f-8e4b68efa4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df816e56-a1a7-4066-847c-fb7bb6da4ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf86bdd-38d1-412a-a5ad-d8faf5c45f36",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8bfa471-558d-4ecf-8085-facd5f58ef36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd770cd-bf1e-45d7-b3fd-107f9799694c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0bfa8b3-ff3c-4665-86de-19fb6dddcda7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c31e383-fed6-4172-ae39-666135d90a9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c7a38f-3f71-4e53-96b2-e93829b5ddaa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf083e0-3356-401c-aef2-4c83ce89ce2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60de660-0a43-4493-9b69-f55724611b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3832149a-f6a3-4b58-a54a-bca5d9ce75a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1739e718-2faa-451c-887e-1265aab3b600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9d1a01-145e-47dd-8c5d-4c55dd55e2de",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44bfcafb-45ac-4169-8a01-09b1a984a74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5c4469-628f-4582-bfe0-993f60d14b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e32156-0608-41c5-a58c-4b991225d191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "64a87e68-5136-47f0-88f7-d6a47a096b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe94f2f6-8974-42df-9e60-fd32d1afe800",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a3fe13-6f3c-479e-8bf8-2ffd1502a4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1f7b42-a914-4ed4-b8ee-76130d5824c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc32a02e-065e-4994-9b82-a2cecc5ea08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47387edc-3d07-4761-874b-83550c4584b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cecd02c0-c537-4b07-837b-dc8ddea3828b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a04e9e-899a-40ac-ac0d-a4831454382c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373d892c-118f-4800-9e96-fcd12863a841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e07bed5e-5144-46d6-bca9-815666d4f9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16b65184-0af6-4f21-967a-c8b6d0d2fa94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310e87a2-6cd5-470e-883d-98f425c317c6",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb1e4da-0e85-45af-989b-bbab426dbb09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b5875ea-c293-476a-82bc-5113de1b4624"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4900ef-5884-44ad-810b-2dc585919411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f90e8840-4f7f-4787-aa57-3c343799baa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ee4dd4f-20f0-4b5a-853e-d34c4bf50da3",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a52638-499e-4142-9d10-6386d9c55275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "328f2b45-35a9-4946-9f07-6b7232e69e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4881f1-6acb-4062-8287-48bf5de190fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b31282-2a06-4f4c-9d83-3aab5e2c805c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d222d2-cc48-4bcb-9db6-16122f794bdd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57bb0e3-b8b9-4600-a1f6-f36244c9d24a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b2a9e71-773b-45d4-ae39-4a5b2bdc9cb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54111968-3fb5-4c89-b09f-524b933d9719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3069add7-9592-4c7c-9ab1-c2cb99d8fbca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ae1450-2d7e-4bf8-b0c3-2db79653dada",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4932e08d-4876-47cd-8fc2-ce0c6b478688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a3019c6-7bd5-4a0e-aba2-b848afad384c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1cf6f6-874d-499c-b239-b5d08dda12e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9627ba33-b329-4839-8bb7-a081780a219e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d256d9-6e1b-4604-9c9e-547a8c2dca2a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8177c0a4-e9d3-48b8-872b-3559503afe1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "428cf4a3-0aa7-4034-a371-30a8d2c65373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6850898-88a7-4b98-989c-0157080f1c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd61e27-8a63-4e17-bad4-702d65ad7d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0732593d-c150-4e06-ae85-613ce13511ff",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42249648-9db0-4a04-bf4c-ac365215664a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febcc94f-5ecf-4f87-ad17-0a6a9bbc4880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75566e3f-f48f-4514-99f1-2ef83232dd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "79845cab-4e25-472b-ae8d-3dd5b1a6e998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f932d25a-be76-485e-9867-3911f1d6ebcc",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2805da4-1467-4b8a-9db3-9208689bdf5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03afaab1-51f1-4f03-9225-ca931ce9e64e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e326a3-be6c-407f-981b-23153c1f9fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5caeb4a3-b4cd-4de3-b723-e589236f6b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3623261b-72bd-4c52-971b-d7b620be101f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5791460d-04e4-4e3a-a242-19b074e927f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "708f7934-a27a-4ed1-991c-af7d7cff1869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f985cd17-3d5d-4767-8f8f-8dc9cf00881f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a66a04a9-6f20-44f5-ae85-f08b46e65968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95bebab-8f5d-47ad-ae51-5f238a8e3efe",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dcf236-e64f-445f-8d8f-cb35add73987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f1b278db-5253-4c30-8573-51303bd65e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f6f4d2-0413-4f2a-9a40-85f9fd1e6ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f444868e-0df6-41fe-bc2a-3ee84bde9b24"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "12a6c266-42cc-4c37-ac2c-ab20edb440c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ecca21bc-2780-45d4-b03a-e8cfa22d1141",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "289bf926-98c6-41d3-bb79-628ea527fdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "14f59597-7f99-4efe-a719-132675516529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe7bfd7-5528-4c04-8c20-888fb5d9033d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dc1948e-6b56-4c08-be73-71faf37839e8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8570df5-b378-43df-aace-877140558959",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d4dc226f-f21b-4e8a-bc87-19dd60f5047a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e6ab729-73ee-47af-83ee-3b8f0c0d2892",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "489d73dc-4ab3-4430-8e0e-c09987c6f330"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4caa790b-4d4a-49be-b04d-082ffec76520",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11b29d36-9c30-41e9-803d-0ae9217e8844"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "09756ccc-788e-4e6a-a071-98e139a3812d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b4829b5-9f8b-4505-8801-bd5ce562d4aa"
                }
              }
            ]
          },
          {
            "id": "8a405f59-0672-411d-b6b1-a141487b0276",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1757610-6bb4-43a8-bb4f-fa673f667a33",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "28e9a966-083e-4c25-9ba4-a8caaf8897dd",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d439bca-7657-40bc-8133-7b18b711fdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "451b07a2-2ec4-43e7-82c5-b66555468386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b45af6e-4707-4fdd-9343-4a8c966400cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ec34e52-33e4-46f6-b30a-9bed64ff4cdd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ceda76b5-c0dc-4ffc-af28-149c38124dc1",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a612903a-9006-4512-84e5-346a38b6aaae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4106ce78-dea6-46b7-bc98-97c463aec73c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eda479b5-981f-411f-8624-ea54974d2b74",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7aaeabfe-098a-41b2-9b3c-82f5c3604ba6"
                    }
                  }
                ]
              },
              {
                "id": "1029848e-c5f9-472f-9876-76efe2465afd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e9bf105-4b30-40b7-8e78-b8cb8fe69721",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a2153e3b-81e3-495c-ba90-ac0125247749"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6923f8a1-16b9-4c24-a611-ec7facea8135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7714d46c-0812-420c-b30b-ab267bf10a88"
                    }
                  }
                ]
              },
              {
                "id": "df12d775-2ffa-4bdb-bf93-12167357f08b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c27626fc-3f9a-4f22-8b85-eb0b3635f187",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8f64cfd-8765-45db-a343-a17d4fc9cbf5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49dcccef-d6ba-4546-a39b-0d75d5e98738",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d343e4f2-0d46-4dd3-9522-0a7e930d3128"
                    }
                  }
                ]
              },
              {
                "id": "25a78eaa-ddd3-4e1b-a4d0-68bccaec305c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e6070ee-7958-4915-9eeb-5500f5f71521",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e00a652a-abef-4595-8a60-a33d645bc05f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16559749-3c9d-48fc-a958-c2e4a6251a79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "dea25d28-9481-4d54-b5ba-37b236e550e6"
                    }
                  }
                ]
              },
              {
                "id": "a2c381c3-ef05-4f33-82ea-737b3efc68b1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "29a9206e-cc9f-4528-8195-fbc75a8efb78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1e29fb4-22be-48b2-a726-6eae3fa3f685"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4fdf1d04-099b-4657-9d33-e83bbb013627",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "52f8f441-252d-411a-b111-a8e1892d8af9"
                    }
                  }
                ]
              },
              {
                "id": "31531554-4ec1-47bd-af5a-539710189f95",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6deda6be-7883-4b45-b64f-18439b0ab999",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "906c3102-f507-414b-aeed-1010c67d6b0a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56a21489-aab9-4ee4-9141-9895410f8019",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "975a2ca5-73fd-47c4-941f-8cbe84f94d19"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "05d98d02-cf6e-425c-90fb-84ae94188b9c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "328e56a8-81c8-4bfa-9e13-90ac6e192798"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "60bdbc3b-5fec-4d9e-9349-50c15d67b5ea",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9449d32f-9e35-4f78-93c6-59519612043f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "47e6a579-8105-4609-b5d2-93d458c1c187",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "457403ca-109d-4aa5-964e-09654f5eedd3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f9e713c-4189-436d-b99e-ce0dcff7460b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dce84985-d8cd-4390-a7bf-bd54d78d5df1"
            }
          }
        ]
      },
      {
        "id": "66aa0ecd-624c-45ce-ab4d-69ca4edb74d7",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "97aeb2cb-5beb-4395-b901-c5687e08d325",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c8de9e8b-382b-4b38-b868-89ed0c7ce191",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "53ef0076-724a-4cdc-8a6e-9ec0422738eb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8a5893-8de1-4601-80a5-79fce28c6a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab56897a-2e3f-4224-ae8d-a6af737300dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84499c45-4ac5-4dc5-8293-4d5610773aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeb19b8a-b272-4c7e-990d-18990ce5bc26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf29e45b-0df9-4f95-a8fa-e6329a0a39b0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae25101-3ff8-43f9-9ad4-eb194a625b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c14ee8fe-1361-4ab5-a477-9401a3efc752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d3f503-37ae-4e63-a209-ec3c7bcbd9dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e82e5b03-3d98-4f42-817d-f994d7201e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4de9cd5-4484-4366-8350-a2585daf900c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac2ae42-b085-4c01-b471-9462c331e48e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97dc83da-f420-4f32-a4be-cb4bd191dc39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3838d8-00d5-43c7-8f36-005a69d46dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b1ee1f3-4382-42cc-8ff5-94b43907628f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13953ba9-4346-4508-b03f-a51e6b27cef3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423409bc-d409-46e6-9a73-b18dea1d6957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc1f355a-f29f-44e5-94ea-2ab9b9820166"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3608d3-2c0d-473e-86ec-0dafa4b106d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86676268-1517-4711-a2f6-9b93fd34842a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc02e987-809f-4b81-87b1-85462217250b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1ad725-477d-4eda-ba7f-284beaaa0ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd472ede-f788-4b82-ad31-0d9c3cd97948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13007be2-b74f-4604-8d00-3889dcf01e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46e17d70-cce5-4eb3-b4ae-7af1cf6aeebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2494b7-960d-472e-a08e-9d98359d8cf8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9782ea07-2eaa-4cd0-b167-53aca58d32b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41130b5a-e6a8-4403-863c-352ff4756952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07742344-6096-4b46-bd99-cfe20f98cbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "52d73763-6975-4dd0-8d1e-3733bf7f4b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b12fcb-7092-4251-8556-81e5c283e16b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4c5b927-c18e-40e2-86f9-21a61a76287f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7066f8-ea95-4628-8abc-8dd10dd1529d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011b2801-527d-4b3d-b07b-57dbac90d9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "352f7153-54c3-4d90-9ea8-e2796cbc2006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28497025-506c-46f7-910b-af25afafb471",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc34a7d9-12cc-406a-981a-0fc63c4d220f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0c745c-3f42-4128-927a-85ee92b94a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ff0f84-d603-4678-909c-ffaa0c88c5e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7453c57-7959-41b4-8621-3a60662a4c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd0cce6-6151-4615-a025-ac1a6810ff66",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6ddab0-0924-463a-a0fe-16aa955c36f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb85b005-b849-4894-b35a-34f6fe75437f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5790c282-db4d-419d-9b75-672e113f6cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "98e67b72-1b4e-46a6-bf5c-40c9aa4d77ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "664a2cc1-9b25-4333-8a41-af452787beb3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3dcfcd3-f96e-4d8c-a7e2-cb7ad883fa33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e6cb744-6f96-4636-bea0-6ddbcebc9120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ea2bb0-82e6-475e-abf4-690014924c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "52312d9e-b9af-4ab1-8dce-d4ef6ed37f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02513686-158b-4eec-82dc-f3fbaf2b49fb",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0218e76-51b8-4e91-a95b-0f2b0db4ff3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2332c097-82d9-46a5-b4e2-9b0a31da49e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "087a10b0-975b-4d38-963a-13c5fb96581d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "12c32a3d-7e22-4e38-9b7c-b53601fa4799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836d8759-97c9-4062-82fc-bc2e0e482aa0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "899d78a6-40a6-4eab-a3e7-f43463900e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71ad0244-6de8-41be-bd13-146e6af19915"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a89115c-1a12-42dd-b032-dd34109a984b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21d950d0-fad8-4cbe-af12-6817a9233fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e24293c-14ca-4075-b6d6-a08088f8a8b8",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fd40b6-0287-4b97-9a4c-c827ae82c840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01139993-7b02-442e-8dd2-ef37d405d2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb2a4550-09e9-41c6-b813-13a482936069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "347e90ad-97e0-4878-9a41-65d6b06eaab4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11496754-6358-4f61-947d-7e998fa46562",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bffe54a1-071d-4838-b296-c57e4a7dd2db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2ed4c0a-af59-46e2-8c23-007226734d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61d56350-b99e-401a-8ce3-a372d01d61cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fccba0d7-99dd-4abf-b962-ce4d6fcd5b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8935561b-602d-4a3d-b83f-0dc4686ebf2a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08887af-9f58-40d0-999e-069d51e8a7fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a16b328-c7af-457c-a46c-8e3c74c9248b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0144fe08-67f3-4b3a-b45c-42279ab5ce4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e926496f-78c6-4d95-9509-17b198967520"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eab6f075-07ff-4bf5-852f-36e0807b7c51",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae66c95-180f-4065-87c8-293943d6e782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c39922-7981-4f3d-b599-f368a8119cc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71cfe36-c4d4-4f48-84bf-60045753aa97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "69673eae-da24-4c31-a5af-fc3015b1da31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd63016-526d-4bb9-ac43-e48263fe573d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe0e6a8-fe15-44d9-85dd-8b1cc61b89da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c99c07c-74c9-446d-a952-4055ca3b72ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8da5c2-865d-4677-b86a-0f023373c4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aec9536-8352-4839-99a3-217cc57ffb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cce48e9-1996-4cd7-86a2-b7075062465d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e0f188-3965-4f59-8a60-e2c36f2ab050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c58a34-94fd-44d8-849c-6ae7cc9efd42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aab441c-95db-4e61-a979-17dba44e3c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e15b0a7e-9086-4b7b-950f-28f9ab009d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c34082-38b9-48f3-8fca-1a1a95b7a36b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb80ed9-aa51-4ba2-b469-71c8df417c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf4af3c8-af70-4153-b859-a5b7ada420dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3120a66-479f-4775-8465-4943ee0e8578",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40939ade-d139-40d3-9ff3-3ab7be692201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22aff753-4481-4a3b-9d54-d480404f938c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf760b33-c64f-4aa7-9a48-87537b4cd336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8205365b-e135-411d-91a2-69c8cb94e820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9404ce-2b95-46ca-a4e4-d8d200179dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0ff9fe-aad3-4e32-b3cb-a542554165c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022731a0-2abc-4252-9656-464ed0e76480",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb47489-bb5a-42fe-b946-3eb74cbca6b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4b226c-c7db-4848-8d66-19ec1f67948c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123ecef8-fa55-4ba0-b0f2-72c41fd43716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d28c4b21-7691-4f18-b99f-98347c3692fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81994611-f3ac-46cc-9996-7c8947d2f9a8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edb08dd-91cb-4870-a1fe-64f5f3a351b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd639e41-c60b-4d20-88ac-78d669b1022a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038cde1a-877b-4420-9b40-3adab8aa4bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "765051b5-b792-4ef1-8bc6-031d482a612d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ffe159f-69bc-4d3d-bdbf-de76f1c1a74d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6be420b-eeeb-4a6c-9e2a-23b39c4a2b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d77e5d7-41b9-4466-aaef-a0c5f3607845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd59516f-6d24-4502-a2d3-7e1985046135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c8e9eb3-0eb3-4839-b143-ec425c24969a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ecb5d5-c265-46e3-b6ed-efd0fda183cc",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ff9f50-b13c-4f8f-b884-8678e5150de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a005e3f9-d14b-4c0a-9f60-d533ae37ad63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "454cd839-1a8d-457c-b3fc-5a8993e799fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7858c944-eef1-4106-9e66-bc43ac93f641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36f58937-e835-448a-8029-57b9767f6b6e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "469a2697-6ecd-417c-888e-f2b054b6e479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "608c8c95-7b66-4bc3-80df-6fc48f55c765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56b25eb-ea54-460f-806f-b92225a66b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb0ee71e-1392-450e-a157-4a9c599cc5c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4b5fbb-9e7d-48d9-af90-9889698a5789",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6480e71b-0ad8-4325-846d-2d5528ed4f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7536ce0a-5058-4667-82b0-f88d93080e55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f660a0a-5062-4682-98c4-8b2ceb19cb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19ba482a-d098-4004-aced-e87dfbf3c413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9239868d-a354-4686-b548-52a4d60c6812",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82597467-b718-4479-8361-576363272a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa23a70a-43d8-4c2e-84f9-e10aea61deb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06f9986-bd78-47d5-b3a7-d6928488856e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2333c277-c742-4e05-b2f9-69bb0ce320e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b3f225-4e81-4f03-9abf-8c3bef993b1b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75049765-a8ef-4465-b03b-c659845e79b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4b35a7d-9b04-48f5-ba2a-eec0a81352e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffa29a59-96d3-434d-bdc6-f6340ad6fd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19f015c2-4a47-447e-84c1-4640cdfb10e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68548d0-050e-49bb-9b41-36fd3d06cc02",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db58ffa5-2525-4c39-9fa0-0419ba762372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7874f7e-dac3-4736-959d-7216047e5e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbf7635-9291-420c-8973-dbaa4d0cce79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db0972e3-75d3-4fec-8865-e8f76f785312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641ebf93-964e-43ce-9d14-cc0d4a8f7191",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2559653-d19a-4d40-b163-b4a21a436735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04295b54-47a5-4ffb-a095-931e225deccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7dcf2f-f927-4f49-9432-c0596f37e4c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe8ab918-2150-4d86-865a-fddf8fae1ad3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4491fd-c662-491b-9db1-91b50b79caf5",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d033d0d8-fa14-476b-8fdf-2642224b6b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f872148-9b08-4bfd-adf4-e64ba7959779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0747eefa-331a-4f52-a871-723236ed54cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b01c7535-bf22-4030-a3ef-6ad07fe725ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ec8a35-aeb1-4b77-844b-85dd3d5aebf1",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56b647e-8922-4473-abee-ee13d8374a7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d227abd8-ed0a-4607-b68b-ff9fc754bf44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bebc8d8f-ce03-4456-831d-722a29f80fec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31d9cde8-b366-4b18-8844-34535afbc32e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "349b1f15-ff27-4e82-a756-564628021bb6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "603a7f08-66de-47b6-a53a-84e60deaa956",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5af748-3412-4a83-b692-55a9b23346b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3efed2be-f6f0-4fae-8fb1-33ba0a937e89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b05e995-8cf9-4c9e-944c-8c1e1b5ba777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41623e70-b2b9-4d4a-8526-39234f1ddd67"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be70cf68-bb1e-4894-a994-02da17deaaa5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc77eb2e-4f56-4e7b-b326-0cb37894fe10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4baf944a-915a-4285-b1fd-3fc4e11163e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2fb6d1e1-8482-4255-8ed4-e2d873123268"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a45e36b2-0c47-46c9-a323-86b44bc9f6ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "06fe6936-3c8b-456f-9828-55f71c1bc4c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8eccada3-3074-46aa-a3de-796421871da3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aa7740ad-c5bd-40dc-bb79-cd94bed85d79"
            }
          }
        ]
      },
      {
        "id": "55f5fe73-225b-406c-9d70-e0c7ea5001c5",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "5ffd0d26-c550-480a-a09b-e16f8d1bc852",
            "name": "Negative Testing",
            "item": [
              {
                "id": "72e1516e-64b3-4242-8dab-c2f21a056dc9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eb2bcecb-9c4e-4289-9e41-ecb7675409b0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adcba815-9c06-4035-b552-ffa629244076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "533f8df6-7c45-4df2-a4a3-eb636c1a9f63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "687e594f-695f-4040-bb3a-39157401b015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f2a8e6-c0bc-47d6-8791-818287dae757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa0c51d-0a85-47f1-83b3-ddb45a1d1801",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba234e91-e66b-41c4-ba85-0cb47945c4c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1dde54a-751b-459c-82da-8f60b422da61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b633bc65-356b-4079-b41d-affe0983fb69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8211e729-11c2-449a-b599-ba85cd73dc5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd36cd2f-b7c9-44d4-8c0e-af6674745593",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c39b300-ccee-4b69-a12b-94b8dacd6963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "302cff30-7125-4770-9d60-41050a98f57f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b6509a-f4aa-42de-b1ce-e09bdaba696b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f6a5502-8e11-4cd6-aa3b-ff60058164a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcc2aee-f0b1-4359-bc80-6183dd2f8f20",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31ceb45-a44e-475e-847b-8194b9872da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2e8c36-6acd-41a0-9ff0-41c265994165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e082dbfd-b05f-4b43-8544-d1e9fd70a48c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "479c07b8-0c4d-45ff-a8dd-4bf08e0be265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da7be1d0-12aa-49eb-829f-2596cbc30eec",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9735ed9-01a6-4318-a153-12ee1503def2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df0ef2e-df02-4525-89de-28b28819a05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ca040f-f0a8-41e6-953e-4df6a61c326e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0454f841-2b12-46f4-9eb0-d8ea4b75d4f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085ebfd6-86de-42d0-bc18-3af4ff45efcd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000c2c06-2701-427e-87ad-e6101c8a74fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9b668f-c53d-4ddc-9f03-c418bcb27b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5398e340-c919-4373-8b35-c0d0f10fb13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14e14e4f-5933-4248-b75d-cc448ecb6786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a81ec70-934c-4a90-a232-7033c61876c1",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c208bb7-a682-4b1c-8183-6194c367133b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5803f1f0-b0bf-4560-8652-dfbf1f937bf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0138ae81-6653-4427-a98d-f5fec5b11be3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0f99dd-6f45-4e0c-8255-3de7bdf67d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87503f07-f9af-43a8-b3b9-29fbb6daf843",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030e73c1-4975-4813-8a79-fe87702ad162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2e094da-d09e-4572-8047-98c78cd196a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4bda80a-3609-42f7-87d9-883af9b280eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "319887e0-981c-4fee-ac73-1970acef4349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d092bf77-6b50-45dd-b5ab-69902576223b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26477584-f85d-4b66-a99e-7b3efb8d7630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fc1c010-7b13-4a31-9bac-f3d3abe92225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fac5cb5-66b2-4509-947d-fd213159a064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0206b4-64b4-42b0-b1e2-8afc751f8b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743b7539-4882-4d3d-9364-37bb4d3b4f68",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aca4b315-e497-4059-bbc3-c1e7ba75d9a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281206dc-b6ca-41b7-9eca-804a113af74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d806da-cde6-4ab1-a358-be2553612d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f28057a-ab80-40cc-b354-143a62d691fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054ccac7-c8c3-4f88-938c-f3c70ba2be83",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d874ba37-8da8-47cc-9207-5427b1f2857d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360212ea-1786-42ab-bbc3-9a4c977d1cda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e02168-03fe-4565-b91e-d9078fecbb21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4f95c614-7d0c-4857-8566-2135959c1410"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430035a7-eef5-44e1-9783-2bad4580be89",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4437dd1-aa7f-47dc-8ec6-79f97443c583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4bf096a-55e4-4b75-ab9f-b6886927f423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40144c6d-abd0-4746-ad94-d990ad8f9bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2db2adac-716c-48b9-962c-393e5eec2a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b137383d-dae1-425d-8f9c-0bbb8c380150",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9cda242-5710-4a17-ae15-7388992f5cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9442758-2dc0-4ad4-91a2-de7d26cc34b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29199ed-d18c-4bfc-81cb-a4afbe8abd5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0726f52c-4103-4b8b-8cf7-e5a26ce7b391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8a511e-a530-4153-98e8-c8a5eb28e869",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31fd69d6-a27a-48c5-bf04-87ca7a128adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce3b34c4-eb22-4345-8647-901655476865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d582f80-4992-4053-bf3a-ad9a370f582e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "dea82dfd-4aff-4387-a5f1-bde32ea3898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b339359-32bb-4a0e-a6d4-c756f5bcaeb0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1992fc0c-7725-4139-aefa-3f0050054fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2d594a-00fe-4e8c-addf-8e3764845932"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358014c7-b549-490a-b6c4-02421bf18054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c819a26b-bf9e-4d17-917c-f1be699c687b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60180934-6c47-4a0f-92ff-da99a31eeb90",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a39ec7-3838-486a-8f09-989837245e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3e12a0-700f-4ec6-acb4-eb97d80603e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e832cfcc-9118-42b6-980f-c3160338c19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b01f032-362e-4667-9b4c-c5c0921e2527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89a5f05-3c36-4919-9b68-ef05015a9e6e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61e108c0-1f13-4501-9808-b0152ca0196c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad91309e-c509-4c28-a689-f51a5e8671df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ecd0198-c159-49d7-a748-ae3d93295a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce10e23a-ac3c-40ec-895f-6dbdceec8bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1ec7d3a-ea61-4c2b-849a-27f2a0801124",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fea9f32-0dc9-4983-a8f1-2ff46f4a811a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "995bdddc-44a8-41a8-86b0-aa6d53eec337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c9eb550-5f3f-4954-a427-dbab87d6aa76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bae3f31-f82c-449b-93a4-6560c3fb2983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b588edc2-44e0-4c57-8d33-d0320714dd90",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd825c1-513c-456e-a6c3-5b4fbc017ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "340422f6-5aed-4c3e-b75d-ebd75ca9e4a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c107f1d-6e75-4447-b13f-6ce527111dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37e4403c-f3f7-449b-a1a2-1cad71b224f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f636c5c4-1e70-4fbd-8c3e-b811959507ff",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce61f01c-df4a-4631-8440-b504362bd0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3b79d9-14fb-40a1-9e6d-259f5874cd81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4deb321-f6fb-4611-86c1-0031181cce6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3841060f-b692-4418-b2d3-2b7aa731753a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3123f7-d810-4bac-977b-dd157926b5be",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53783971-3516-446b-aa39-3f09bd067451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8f07c4e-143d-4f22-8564-dce174ebc629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29abcaab-58b3-424f-b88c-c152679d10ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b84223f-0e5b-4f19-ad28-b6b6bdaa8b48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad38322-dfa1-4b79-9bff-d8cb8c403745",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1689e99-5b34-4f54-9012-5ca1af059ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527253e7-1dba-452d-83ce-41a1a4e7fa5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9efd8a-01a8-4917-95cc-f4caaed8a671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f60098b-f8dd-454a-902d-8d8093d7010b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00eeb6af-2731-4045-865c-23a40a5fe01e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d88f38-6936-4ab2-8b78-2c64cc81a8ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478bca8e-b4a7-4b8f-b517-76b105d5184e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92e8c70d-5003-47cb-b4ab-2d52639ee863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea0f1368-214a-42dd-8c7e-3ee5e5ee1957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1ebc84d-30a5-462d-9150-3bb0ae32e149",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c3b873-0f88-4ec6-9d72-d2f90105386d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "434e46cb-f209-492e-b12c-b298109e4d51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287dd9dd-fc89-4cbd-b37d-94c1ec0213bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f57bc78-db0f-4048-aefa-f17bbcdda3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf031440-d2b4-42b6-85c7-1269970146d4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8499a69d-e93e-4bb1-b806-b6a469f41e23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ac42694-8896-4c23-a391-4f1b490bd9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4249d492-d289-4a49-9f9c-c927183ab359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78bd7e50-d09c-4ea7-add6-f1da1f975dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11feaf8-bb1a-42e0-8be9-89b66f291e87",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa0aa49-bf4d-4dc1-bfa6-72e74da45ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075108b6-b74e-45cc-ae4b-f64eabc58aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bcdfc17-2a85-47ba-b3c8-3cd7e03acdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ec25a6e-1249-4849-871b-2930727dd028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa71d5b-fa7b-47a8-afb4-f41481f493aa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11bab8e6-e41e-45f7-a27a-b413099ec9ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859c8c7f-7520-425e-ad67-d7c26d5ab9df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ebc0ec2-95d1-4737-97ad-b1f4269ac259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c747dd1-1f91-4c81-aaea-e05d10c1118b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2284aac0-82bd-4063-b5fb-f56107162633",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a47baf8f-c241-4dfa-b1f3-8bf089661aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f0cc67-9a52-4525-a1cf-2dde21cf6648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "610cfdca-7caa-4f18-8fef-f834fe6fec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60fa95d7-137e-48eb-95b8-6a5a0731c721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "314cd6f8-5271-44a2-8602-4a88842607bf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d06e946-0651-4175-88ba-60dc064d66d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e104a787-d0c8-4d10-a569-2e18d39fd9a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d93db0a-e8b3-47e7-bd81-23aed9095cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4495fd1-2037-4f4f-94be-c00471f11d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b88264bb-89cc-4236-8f1c-4c6965bacf35",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2d9325-f244-475d-99ce-2fe4b3f5b8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50fd0eb-b0c7-4140-91a7-9d20032835c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee92c9c7-1bb2-4236-a223-3361a5be2468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b875933-2ed9-466e-b8ba-4ccc87062518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad977928-6444-4f5d-9e21-c112693bf846",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa88e21a-2831-4569-a551-898a503a8c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af00e4a-7d5d-4a42-8464-445c5c9d70e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8c0986-d15c-4d23-8d73-be186ddbbd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b0fb0d2-b36a-48f6-be1e-b7c4042fec8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4baaf3d-fbb9-4210-a052-59ec6ec771c0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f41f176-0622-4bc0-ae22-6bd417323b78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d1e652-93e2-46a3-9f24-54d79de9a09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69bd57ac-e015-4032-90c8-32442750387f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d9d341f-9a1d-49fe-9f14-dd204580d1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d264e383-424c-47d4-92d5-be03abc1601b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edc200e4-f1c3-4b5a-b37f-c033af61dbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a9deffa-2cc2-4a0a-bf53-9fb8daa47f3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3109cb0d-dd6b-4d50-b11e-e2dc307344f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b57208-30b7-41a1-9d45-61c59a426c23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "559850fb-c416-413f-b4eb-92914510c938",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d48168-fd30-4a0b-bbd4-f5dedde7970c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e370f28-7cad-4c50-82f1-fed13137165f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee73b6c-a7a1-475b-9600-181d0421443b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3fd1ff2-6ef6-41cf-b5fe-6fdb04926e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ce35f3-3c04-44ae-bd9e-644f242f7b1b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ae9d69-3633-4913-a9d9-e35e021dcf67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c4175b-7ee6-44bd-969d-3f248b7a2449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10a3743-9e63-45c8-9575-511cf3923826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eda23a88-d505-4a52-b0a3-0b6c1cb17178"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd810aaf-8d84-4c86-a89f-8a3ddf365d35",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7cd199-c0a2-4546-9a95-910dcdaaae84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91948f5a-55a1-40db-88c0-dd9007be4eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7597f8f1-e665-48d1-bac5-023a95ad5385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49c765da-2a67-44c8-898d-9b8ad131bc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386fcfa1-f340-4898-a84d-5bf1c745a332",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad708cda-6753-4be7-8407-4c61f598df1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76863cf4-335e-4786-8632-214064a389d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2fb533c-5e58-4edf-9054-fc1c2161b987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b01fc4ce-876c-42cb-bc26-6e9d65dd5f15"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8f02a071-97d3-40af-b777-4eb40f867b8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12ca1a91-da62-4fc4-abbf-75e8c36afc66",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ca5fd4-b20d-4bd6-b38d-5a8e549af667",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a87c8e-b682-44ba-b554-366ad2706b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e803470-9b37-4ce3-bb0c-324e1e742240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "295c8039-d479-472f-8b91-9583daf3c9c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b88eb73-b7d3-4d38-b100-465687e0dd4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "016a0cd3-b8a3-458c-83d2-a022881e4143"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d20fecae-b1d2-4c33-b6e6-b689f6a0ce10",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cbd01c1a-32e4-43a4-a44f-d81dd69100b6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6cca0587-d497-4c30-852b-6cabee3f2ea1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "60300fc4-6b56-4570-8af6-d8ec3c383297"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f73dcff4-58c8-492d-a1a2-bc5600a96f7a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b451f35-1ecf-4fb3-a4ff-31094197aae1"
            }
          }
        ]
      },
      {
        "id": "09b764a5-2e7e-4e52-b4b8-6c193b188c43",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7a40d482-c881-4468-808a-d472e613e18e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "954ddbda-5d11-4a78-99e0-ea8619dc8e79",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "54d2ed7e-da82-4e08-b450-d85b5e137c70",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32341b4e-a784-4197-a137-28c18bb09de7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b31d87-8a3f-4b6b-a799-f29d2952f91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7926356d-1208-4744-8a9d-1f2847f35420",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5bb89a-39d1-486d-bf73-eb51b8d9d2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c468cf0f-e03a-41d7-ae4f-e604998a14ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507ff8d7-d8bb-4984-a3e9-3c9dc9e7ecc2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e530152-81cc-4c0f-85d6-efb6ca440952",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3514d6c-0f0f-40b4-88b1-938cf9fa8592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c99103b-bcb7-4644-97ea-e3491342a21a",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "966628a8-5bd9-4330-8f98-42b3fdc86a4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf254c68-4499-4b8e-bbc9-48a468f14439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eecda55-c3dc-4bbc-ae35-d7026f17f3ad",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3c91ca-03dd-4ac7-8a78-939f607c0cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d6d7ea-f5f8-47f7-b7fa-4f826cf9f279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbaa68bd-811e-4a05-b03a-b8f871db7b13",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7526ebd2-4ed3-4617-a6f3-9386252f0596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a347e6d9-5d40-427e-8739-a1df139353a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c3cb42-a51a-49e2-9872-5a2b45c7e84c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb847c1-de10-4007-a112-59851414ee12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10c05b94-b79a-4f6c-bfb3-f444433a3860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e92d87a8-00db-40c1-a4b6-2b107596beb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f16baba3-cd7e-4aa6-afdd-c0afe478ca77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b5369a-7c42-422d-afe6-944c454000b8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808bd323-7de1-4282-a6cd-a18f736b3340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8a4b311-8a26-40c1-8d94-502e291b4ca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd432296-f3c7-4535-90c2-a35feb446117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c2eec5-39b9-4708-92e0-7fb44b843913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb3201a-5941-4ad7-9eee-3694a73ce90d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365ded63-d949-425f-8b0d-4b8fff89bcbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd192386-6298-4b36-a443-d62d2947b181"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a39ea0-99fe-4e3a-b871-63dc932d3541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85232eb8-c334-443c-a976-1f05b501074e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3906553e-ab19-4633-a796-a5054f6d41fe",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5920c86c-2236-4da6-829f-61d4eeeabe64",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b48bb5b9-6b27-4729-a521-234090954dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77aeecf1-98e0-487e-87ef-5c16607dffa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b1399e-fcc7-4731-9090-7d652ee284aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a12fb12-876a-40fb-8164-859698f0ba45",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e097aaa3-1811-427d-a67f-084732b2efc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39904ed2-a748-487e-99fc-9aed8afe7da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91905e3f-b131-4d19-b6a8-411cb1c8ae67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ecc7f0-37c5-4296-bfa8-add6a4d358aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c46a6e1-f55a-4686-a7f6-772c64590a3e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a29fa1-6568-4c44-9c76-127509f8c33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "908ff9ee-77ee-4b3f-8cdd-6f0671b1214a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbebcea-acf2-4da5-9c09-ab45df7794ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff85a99-d11c-4dfe-992d-8c3078be830e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb3d234-ef56-4d4e-89e9-d4b6ff582f87",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497cf432-357a-4887-8459-b9b33ac3569e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "405050ad-8e6d-46c1-8d24-bc732233db55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd54c284-7dc5-4b70-87fb-d13f75c3f615",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd890c02-765b-4949-9222-1c270e8dbb1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a53bc0b7-d4e0-4555-92c2-b3d57e23ed48",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20577fd2-6a67-4337-a9c9-3ae89e1ff12b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ce89320-40aa-4d4e-96b3-e553f5463ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebfdecd5-b9ca-45f2-a869-ea95e6ac4d25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e40d9a7-c5ab-4737-afa8-9b0338588a1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "788071c2-6b9e-4230-b340-8da81ad21589",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72dbe568-8dc7-4a97-8c50-c6ed0264382a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69b7a291-57e8-4518-8528-1f4ba7862f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d69d2e-2702-4075-9d40-333968e8fc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a8e49a6-b732-4d73-9f4b-60c27843d5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a5fa4d-a7e5-46d3-9a03-35fca7329366",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d1b215-f8ba-4501-94d4-c3444136849c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29497064-5ced-4953-88af-569eb9743946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5418f1e-5938-4036-8ac3-e4496de54486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e74f050-9312-46de-8c51-c3f9741f01c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfdf0ddb-713f-4f97-aa5e-ad6919528822",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12b7109-f6d1-4b96-92c2-22539800c77b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb9f2055-fd3a-4605-abb7-62089ae62ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e062376-5c90-4108-9af1-f1c7b6c73bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eef2676-be5a-43fe-b8e6-a464b473f272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64881cfb-5a18-4298-aa35-8b517f738709",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e1da84-3e3a-4f64-9f67-f4e19e8eff6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b35cb53-9a28-482f-9a12-09a04fb4cfa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bea783e-6cd3-460b-acf3-61e2612594ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796b874d-3a30-48ce-a9c0-632a600d1e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733dcf6c-1e2d-40cd-90cf-5678fef5cef3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a5de0b-9303-4aff-8a84-a2f6f55b3383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee372282-ae98-470e-8817-176b05ee83ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576d5613-b9e8-4c5d-8a4c-6369c2b62746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "691d2006-9766-466e-8b33-4997408159d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83345e0b-2f9d-4a28-812a-0298892abfdc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f287c32b-d9e7-4bf9-85ca-c1bb347498fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "391d8364-efbf-403f-be5f-adfa8f3f5f66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c131bfad-b2e5-4dad-9a87-0a8cfda50255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2318e40-88cf-4d9c-839c-328f3e16917e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9a0492-35e5-47b8-ba9c-64322c490382",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cabb7e3-ae10-4748-bd08-87cc31a35471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b996ed30-98a1-4cf7-bccd-660b68bcbcd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10134b1a-6fd3-43b3-b8b6-0f8dccaebf5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bdb4520-0319-4ed5-adcf-31c8d4365929"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40edc09-4c80-41fc-8db6-5be78538e444",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b31a307-cd07-4539-b027-705914b211e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bca3f8b3-db46-4938-a20d-b15d63708429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e452d8-6b98-4da3-9c59-b669ee55c000",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef0d288-67cb-4972-b6a3-57f228b78dae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea9b70d-87eb-437f-b38c-b5df39f129dd",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb3579a-4ada-4af7-9657-1f19feffc3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "014caba5-c0d1-42a2-8cdd-601cfeca2731"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e4e84f-3230-498d-9fcc-d81a98e5092b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b364bf-9a44-4a8a-a8f2-82b7d1ac7c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cf46085-b100-4fc0-a13c-eb8948872581",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0983e79b-6ffc-4816-904c-e0b52fd53b25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7153907a-83fe-4b96-8ce6-a49a04d79250"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ced70c3-859c-4db0-b161-5ba4caf040f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77662c7a-68c8-43dd-8df2-41be2d71c928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035e9355-d5e0-4010-ac2e-022e81d08dc9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c073b0a-1108-4b73-8a9d-6f00b74fa4ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98bf3acf-c2f9-4656-b750-669989fd8986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2242a584-5780-4c9f-b4de-fc4a07e83ea8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258778ad-0dab-402a-85f9-ec5baf70666b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3094125e-e670-4a26-b8ca-f117710f929f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd27c6c-ca1b-4211-a43a-9d61059c1323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393dcfd6-e6a6-4658-afe8-6f1479aa854e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ec16b4-c668-4435-852e-8383468ef971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdbff42-713e-4612-9948-dadd29405a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4dd2a7-e3d1-46c6-8fd8-332abba4daf5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9dd877f-f9bd-4490-ab1e-c2a30adad588",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0328d0f9-1ab6-4ef5-8ba6-5d2f7ee33285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "909ec43f-996b-438e-a398-1a1dad3e2983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb884eb-dc82-4fa9-a256-6375b5ccf38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f468be88-03ba-4b14-ac5b-0050ef9b02c8",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58f2a713-1f7f-4858-94e6-63858e7a4c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d273d7d2-a30a-4365-8ca4-5dae29825bb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a35e1bee-ead0-4d42-af84-be8029f1ab8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895ad3d8-6725-4666-9634-2eec295bfcb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4b731f-1f46-4074-8b68-ca5ba868b9e3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12c9b185-f4ea-4915-8242-5f0c27e5df34",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd5585d6-cd3d-4487-84ac-46a06b95c702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "734f6eb9-25b1-4172-864d-d967a46df339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b7498c6-31e7-43b4-ada4-f63b674a8087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2050ff0c-b710-4cac-b48d-57207b74837f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eacdb03-c1f4-4bc1-ad3f-e5779f12d91e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25595cc2-e399-417a-844d-c44726d128e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19d1992-14a5-42e7-9c47-bbc0785ab6a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7771aff6-9598-4271-92d0-6417e7bc5aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3920da0a-e672-41e2-88f3-69c895421c55",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912c400f-bcce-422c-9c81-abccd3282ca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "572dfb6b-78ca-40c4-9064-90a36b37e190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a2b8aa-6a88-42fa-88a3-3543b8bf951e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4595dd-bb2c-4b5c-9bac-9d16a19998e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392e9d51-d425-4271-bf61-00f6557dd149",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56a69a5f-a54a-477d-8a14-27296e05f0e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04d8c105-e50e-49fc-abb1-a405c28caedc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef0e074-4faa-4ca3-987d-403ee47d0bac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "046acca9-3e13-447d-a35c-9ca7658153f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99df490-74e5-40c9-baac-21e43171616b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad56b5d1-805b-4405-946d-7590bedf8a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fde0ae8-48e5-4511-a1bd-f35977836717"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f5e5ae-dc97-45f1-be0a-10442bd3bae6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7508155a-516a-404e-9b0a-c342f0aee1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8b68b8c-8f02-4ea2-8c6d-efafa61e761d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b590d3-d1d9-456e-8bff-5044a1077388",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfab4b48-1e58-44be-808c-5b6f2a46effb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f363197-f06b-4641-9013-7be5ecacd62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6556802f-8f93-4f79-9f4c-69da74427111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed733aa2-6956-4f46-bb04-21f90878d80f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c592fc4b-d4c4-433f-a0a1-665533afa30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f8ece3-0862-4140-a62f-1323d8ed0e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "788b8746-45ef-4be7-bd15-f888a88c17b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f6baf66-a98c-4ad7-b895-fd2259523e43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0a556a-f187-4bf0-b6dc-c985a95485c2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00a5467-02a7-4710-9e3e-216deca32393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45cf725-abb4-48a0-b51d-536989be4793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6fc9750-b109-40a8-9e50-09b4ff873ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbdb4e81-1470-4f62-ad84-27658aa24130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2247ef5d-ddb7-4b68-87cc-66b54abfa5de",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be7c96af-649b-4b48-9168-c364215ea1f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5109113-b1f6-46a5-8779-b6a72e5e99d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccc259a-96fa-4b38-933d-f96f1069cf63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe481f4b-0994-45bd-8a5e-05e9e7e429c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5187360d-6910-4ce6-a70c-b082d0df7c82",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1ded490-f545-4fc1-90ab-360f9c58e82d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855ed1ed-5516-4bc3-ac5c-c237f4704eff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2fd99e8-0329-437a-bb17-93aaf0f34c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c53663d-dfd2-4b95-be2e-f9515de7be04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1eee894-f9f2-4e67-b1f7-1638c628f124",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1dbf1ae-1524-44c6-a843-3eb92ee7531b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba6143c-2958-4580-97f8-a2eb387cc3e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aa07bbb-6def-4041-b9f6-6ef072a70d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258aa2e3-6269-46cc-92c8-4a9967e2dfe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd91f8f4-7e78-44d4-8fcf-22be55634941",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a795c98-32df-4e35-a79c-01feeee99462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fff3cfa-6f34-410c-9260-9da06d7d2a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e999ae4e-2b38-4bf8-80ff-20524bee0d5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af46b6f-5901-4e90-a291-1d9000f178e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc55dd3-2fe9-4752-8f3f-9e72cf869819",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593e12fb-0453-4b83-b0b6-b1dd00190afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aa95b5a-bfba-4b31-8cd4-7364b8e148a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768e0bb5-af12-49bc-a5d3-124000db2707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "305f20b6-16a4-4b64-8371-c53003e1f1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dab0a4d-00f0-4dc0-879a-da2a6eaf3010",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115cbf4b-fdab-47f5-9953-af72ffc55fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ce1594-8c8f-4dee-a45f-bfa9655cad13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1139a8-3a10-43e6-8a52-3cf0d4b434c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8eb1f3-87ba-4546-a986-03a0080a747f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e844175-777c-4e61-b336-913cbda987e8",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a20af9-69ba-4592-8e86-8133b7e86681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13b723b-4f72-414f-abe8-02f538d408c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8872562a-3aac-43f9-b2c4-89d4bf05d6c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c08cdf8-5767-41d0-901e-59d3fb781677"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354a1aca-e283-402e-803a-f343e2ebffc0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b098a64-8b73-4355-8e94-bb1cd09b11b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc3b56b-8b0e-43df-bd95-753eb7939c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b7e05b-960a-4962-aa6f-094c6e3ff9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066daca8-16cd-4308-9bf7-4fecef67d282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc40de7b-f773-480e-bced-910e734bca59",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1caede48-d7dd-41fc-82b8-e90c3f561f1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a7761a-1477-42fc-9764-cb0e8bd5b254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4168dbdd-4af3-4055-83c3-d095e9452ff2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088cdfbf-36d3-480c-a5c8-2bbeab72df9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef68d21-8a3d-4f7e-a427-aaa9a9fa6c21",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e14c78-8bc9-41ad-a253-f91beb7a1d20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b90c9ad-afd0-4cee-a603-fc29f9e8d216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01eb715c-e166-4a70-8d3f-72d3a5cdf7bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd45e26-d4f0-45dc-82ec-a14374f0aec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c534bfe3-9433-41e9-b521-46cb7613ea86",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be386b39-b0e6-4c8b-b325-0c6585e1234c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4613959-7ca0-4278-95c7-0469e51d0f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c27b92-0b17-4ff6-a7ff-30f938344ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04222fa4-8c0a-42db-ade0-a80ec5afdb8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12c34c0-909e-45ea-b4dd-3a95bdb268f1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2265fbbb-47a3-4323-ac25-5bf246334f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b6a849-007d-452f-8ab0-5d46ae882558"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a09eab9-d2bd-419a-898a-73fe7867048c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883e79f8-4e61-4426-9953-24502c8c662a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e172584b-1612-45a3-9c6c-7e3937436a17",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9056a1a5-e325-473a-8f08-497dd2f23650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247a0a84-0e2a-4fd8-bcff-7f79fb6e8aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf6b589-e912-44c3-b036-0a1b05080c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20a9f2a-c8cb-401b-99b4-8e24a6e4f841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baee857e-07aa-48f0-b544-99c6a3aee365",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66501c1-2d09-4d3f-95cc-83fe1c6cc710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab3b28d-a274-4350-8d08-9ed61d231626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd72406-be81-4c38-9db0-4bf2c4281f69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b96d3b95-da00-4d45-9349-e2b044c5139d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18dc87a8-e1fc-4d67-8aab-854882ffb5d1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dcb667-0bc7-493b-bea2-f66ec74ef163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73545382-6338-408c-8bc4-051dcb9e1651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc79715-c21e-4621-a0ba-0eb35769bb6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebc620a2-a40c-4b3f-8b0d-61197f42b67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1ab7a7-db87-40b3-b94f-49ca9c9e8e4a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a88dd27-4b82-4950-aea1-4e997de1f91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2f21fe5-ec9d-42f2-ab3c-f53327ffbbaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ad34a3e-4cc8-45f4-81bb-22042f077616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8a94d6-4c8c-4c10-a2e0-5ce3bbbee90a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9464c7ed-d885-46bc-98bc-1eb623c60136",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decd8dc2-cadf-406d-b0a0-9a38e26fa4b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43ee55d4-4037-4cf1-8aa1-65414a2a2d2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9714fc86-0de1-4f00-b619-604c2dea5822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389d959f-b146-411c-9b92-d160848a9936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d83e8c8e-17e7-45f7-b735-d70b223d7640",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6314df3-5781-4e92-a394-1b68250ca1d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9852c12d-5a01-454d-94d2-cff25a76ddb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcc8e867-27af-41a7-b393-e9194389d39c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1818b1-b3fe-4d00-931a-3b72c2988edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be69e34e-add1-4d56-ab5e-f809320605c1",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67724d0-490e-4f84-9a6b-64b70c420bae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83652c54-7b73-48c5-8d5f-9c50834cf114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c038bc14-686c-46bb-bc1e-a3ed88c35604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1007aef9-d5f5-4f73-adf5-5589141935a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9cc632-98ab-4966-9937-59df82ff034b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4e8f0a6-21e7-4e91-9ea0-9d5871f73687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb71c0d-4fff-4ab8-be64-ecdc0fddbd98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ec0d71-aea5-4712-8616-efa1efebecf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8038974-39c5-4107-b138-b69466036d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df03478-0dbf-4f5d-b22d-ea3affc7c4c3",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b15540d-5034-4c8d-97b2-2c6a214dc942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defb03cd-66aa-4baa-a6a8-cc0020a313b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aedc863-8fcb-4891-b655-521c77b4e7e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fa18df9-e438-4d5e-8c44-e2d80bdedb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb99cef-389f-4346-9648-992ede13ef36",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f694a43f-1525-48a2-a31b-3cce16a53397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcd8bfe4-63ef-426f-9db7-5844ee9a722b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26e0772-c038-4131-b786-f337aef4aa05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c39e7b8-c603-401b-8020-088a1217371f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097c208b-45c1-47e6-a77b-73f45702e760",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbcf8dd-dee9-4064-a1b8-8e0e693d5ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7dfa051-52c8-4aba-bf39-633335f2596d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b78f43a9-bb62-4f88-a022-413e42a3cc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18cdf67d-2e4a-4f5f-8574-23974c34913f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dda1c4-9e83-4b34-878c-8cc1673930d4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72dbe52-9613-477e-9ddf-6f0f342861b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec74667a-21ca-4aec-8199-cf7a088740b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2270fefd-2c23-4ef0-b77e-fb8b94d53a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b4032dc-8a4b-4d8c-97f8-834e17aa7e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2473b28-e57d-496b-a612-a72dcf6215a8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce70bd43-b3b0-44e3-9a9d-e5d905211b8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6e1b0a4-e3b7-4aab-959d-d9c2e3f6c920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "861c4948-4849-4180-884f-3e750de34e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f93781-c478-4d43-9b1b-2f3d9e362177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850815e8-b03f-469d-b137-c68c551886e9",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d63ebcc-c97d-4b9a-8b67-d5a7204bb0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f20e5a-c401-414d-be82-c9ed2e634157"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88541f15-27b4-4af7-a5e3-e22c5d57bfd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f933346-4e73-4f4a-bff8-949e269a0124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae8f9fb-9bae-470a-93b9-63248fec3c35",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564a4bb2-2a46-4665-a11b-635555ed82ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8ec56e-e96b-46dd-9365-bf69ef447f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd209d81-2ab1-4be8-bcb5-2f5ecf18c191",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdda7ba5-ce55-436d-9637-16f351be9437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9616c3db-8c5f-46f7-a3c9-a0df1998f200",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bf7aa0-73c1-4cb7-9510-72ebb9afe85f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c163db5-0270-445d-a14f-70570dfa9950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2367823-796d-4f57-952e-29aa888adfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45c414e7-93ac-40f7-a970-c8880fe33e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbd5a633-9846-4831-8c92-c7ac9aeab1dd",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "609fdb10-d72f-4233-848f-3438b5b3bfd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e228982e-7283-4172-a81e-6fc81d9870a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b674c1d-709b-485a-bf3f-5ade372ebbed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5382ebe-4496-4927-9ead-e5e96494fda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e1c000-de23-4285-861c-10c14aacb2d2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aaf6d45-c345-4768-8233-04a9f4e653f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78f6be4d-31d6-4eb8-9480-7fee33c1aaa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe88961-0451-4f1e-a02f-d57a5a7e4558",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f10a44f-eaed-4ab2-a788-a08b1334487f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6a5910-4655-452f-9629-8d14a7611972",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48fbaa5-4b91-402d-bf15-3f8feb370e2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32b4c06e-6172-42bc-9178-153971b413ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ad398e-b91d-4934-803b-1ca8cc6997e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95f58575-05b9-4ffd-a20c-451dc4886a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c4033f6-6ff8-4a82-9270-6081b3addcde",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f11915-59b7-47b5-a972-1ecb710e4d93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2c7e4ac-c1f5-467c-94ab-74045fe08c44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63effb92-2178-4637-8f2f-dbc6b4c289f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24cae537-9061-4dc2-bc83-b98d7098322a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d89762-a7dd-451e-9fcb-dd8c6ea16ce3",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc9e163-998e-43c5-8dc2-975a5e7a94a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cd148f4-b683-4938-983b-135c28ed9389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d77f98a-204e-4994-9ba5-7dd00f103a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36dbaf6-136d-4e50-aef0-f0024673205a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2dd87df-774b-4bfa-a287-99ef6cce18ed",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0bd7eb-834c-4230-b270-c2ade68d57fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "280ed7f7-9373-4283-964c-0d20e84a18c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a6cf41-5f63-4482-9324-e5e466cc6721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5872cf70-1845-4473-91e7-f629feb3bc85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a2faac-12e9-43f6-96ce-61c4e0af869e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082100aa-b8a6-4907-8dc8-1a240be8a843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2db11e8-e14f-4a6a-a858-e7c53644ef46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d745516c-e538-436a-8017-4ae447a2346e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09273293-5118-4cce-b19b-6bed04a14844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da4154e-e905-453d-b0e0-b68020985e57",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7014a1f-1397-4b36-82bb-e56879398d66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd5697a-9fab-4c26-b70e-0c0da6e2b8e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d45e43-38d3-48cd-8e75-64dd943e22ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8a25a0-6744-420b-b83e-43611fc03541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fec7d4-1222-487e-a231-8c32f4fa376d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8390ca7b-f279-418d-bc97-5a0f0982429c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fef81c88-fece-4d14-9721-1b1fa97b3494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f078111-7dd7-4e72-8024-bbaca3cef281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bba0dc7e-5680-41b2-96bb-3f4eea80b006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc0c9cf-1fab-42c7-8cd4-a8157b682725",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a312c7b-fe2c-4e9a-b595-80adbda0783e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57598a6-69e2-42e5-b14d-a32412d16d92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67650be4-982e-4a62-838f-d0267ba2d52d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b7d571b-f008-4b06-b387-bbaa9ad6f3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46761082-ecb0-4510-9eea-83339ef415e8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59afc751-0e6f-40af-8895-38e302ea49b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47325d93-904c-4986-8f28-a7102179ae35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e18f3e-4bb9-4ae0-bd22-91430b114dc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f9a895-45e0-45dc-a0d3-df769ee20c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e072054-42e0-43ca-8683-3e2c28d93a76",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dea89ad-91a5-48ee-9cbe-cfbc55240a57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4829e43d-424c-4be4-a83d-9c8ffff5994d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a22cf0a5-e741-48e2-b9b5-42cb679f7679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa2a011-a09b-4c87-89ae-7231614ff037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868379ac-85b3-4327-89a4-ca587adbe98d",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a43589-210f-446b-a120-1451f014f7f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3016669-9589-40e3-9607-3c12cf3a7137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13d2e03-fd56-4a16-a935-1669b72031e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee7f069-51ea-4220-b611-00958b8ad485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95018424-980a-4056-944b-8b6c2e309b2e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372d364b-45f5-475c-8423-1bc7e0d8e340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb78c054-a54d-4797-9ac1-e1b419c60e07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6755f820-d95e-4f73-9e36-75946af8667a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9474e9d3-af4a-4784-8371-0250a4b8c765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e375bf-27ed-460c-a9cb-73a90bb05609",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5e2232-9806-45e0-a3ec-aa867d6b2547",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aaff6cdc-c848-4d83-ad58-07c35e340aa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e12e7d-ba3b-4abd-8365-e3b44ac21c64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88908923-071a-4e57-a899-9f5cdbcad036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1a69c3-9634-48e6-9224-bc38e58eabb1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95dae4d7-5709-47a7-89c4-5abe2d8c7b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd9cf61-43ae-4698-a2e4-430977202e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ea8292-72ba-47ee-bc66-aed8119f3829",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12255e00-3875-4ff1-a390-1c6355a6fe57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17dcabe-7555-4f2b-ba80-57c34ba96697",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e68bd4d-dda6-4cb8-bdb5-9668450c3485",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7f087f9-826e-4c20-a3a5-62b1e85869f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656ece99-459b-4942-afd5-6cd2ae513ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4af69382-2d45-4987-95fd-dfa19c63ff9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c64e35-34df-4476-a63b-ba22349bf50b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34b710ac-a2ba-46c0-a8e7-8bcf166e990c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "594d624b-2fbf-41ea-a9f6-2aea3e83a2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee96275-95d0-4d46-aa14-27d700d9f676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a48aca8a-b726-41d5-8267-b0a63413ab10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9894289e-a7db-4461-a2ed-a6c42287c000",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729b1fd7-42a5-4e5a-8bda-5a386518ea68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4679a22-cd70-400a-8499-57b8da8c00fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc31f43-f157-4fc8-9534-b581a8c6bbbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221d97c9-f966-40da-8d19-bcf7446c1b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "184c9ea2-fe20-4bf3-9537-81b9331940b6",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "753c58c2-ddd0-4e2b-ad9a-c96ad82f5c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff192fe-1549-40f0-89ed-d4388cd960c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49499fb7-a584-4829-b187-a1a12ab50592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea89f05-b46e-4908-9f10-eb8f73c0ec84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445e98dc-2d80-4cd6-a444-99b83bc037ab",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba056e0-ca38-49fd-83e7-16814858d3be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "178482d7-7864-49fa-ab29-21354c2edcd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e565b7-e873-433c-a0de-6ca78e67531e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247c2099-7a54-4c42-abdd-949d10da49dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5107d78e-84c6-4855-a1d6-d0728d7c0221",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0807a59-5ed5-4f48-9ea6-2c6432ff60a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "103f5eb9-505d-42fa-9ad2-c72eca2029e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac7ab5d-36fc-4c4d-a57a-3ce5c750ea69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1466df9-2f5b-4bdc-bc78-222da2f0c2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f1aabc-93ed-4b28-919b-0854f67bb278",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da291cb1-f823-490f-99e2-8fedb000fad2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2640474-43da-4e09-aa82-f8219dffa8f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3b6a3a5-2816-4000-a38b-4f07f61e3f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f81157-4777-4dc8-b5b6-c8d56a072138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d79324-3995-4407-ba3e-f2d63389e5d9",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96ffa182-58a2-4b0d-91dc-c6c59af56ce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0677fa88-3371-4f48-9f2a-9ddfb50145d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89c0497b-eab6-4de3-bb62-efc011eef9f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5232436-f8c0-4e18-95d7-a80e4e78cacc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9c2cd6-a94c-4a55-a61a-0feb7bfca534",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10480047-cf51-4301-93c7-382208d4039e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b580b93f-cc3f-4dad-9d57-c5034e97898e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92dd0436-641c-4e2c-a8a2-fd0733136d45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f9f4554-7d86-46d2-94f8-1dc1255c7a2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f85ea3-6e8e-4c2c-bb89-d71f02a996a3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736b90fb-738e-401a-912b-b2c9b2a3600e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dae3b840-37e7-490e-8659-46ee380df056"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fca2fa4-d140-4988-9b22-5a8bc0428938",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8361089d-70bc-4756-95e5-d50e9053b3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef7fc58-3070-4bc8-8d6e-9e41d017a189",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2711205-d3fa-4815-beb1-da59280a98ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae51d269-eb5a-4244-b881-b1a3c3a79a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ae7e78-fd08-492b-9d70-e5cbfe3bab9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f325cd5d-3419-4797-a079-75617501839f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d742667-5954-40b0-bc38-9d40ede35fe5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d6e96d5-0534-4557-8d91-01bac2bfb1e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d340b706-d047-419c-ad5c-066527e4967c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40a63c6d-161e-4219-ac89-6849ce64b033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed777572-2a03-4850-8b24-5c2ab26c8344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1713ff2e-79ca-49b1-a83b-62e3227d0e21",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31e3aae-cf20-46d4-b409-726140a35cee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00d92143-68b7-4c4d-af70-399bbebf66fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe91921-05ad-468b-b2ca-03aa907eaaed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096f8985-83f8-48a9-8eeb-3627425674ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c14950f-5940-4461-bc66-7d8abc255538",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b84b01-168c-4cd8-bd19-7d9ee9826107",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc3cee9-4b8c-4bf3-82a9-47b6cc9e2e0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51851cca-df7a-4268-a9ca-5409f43f1df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8926fa1f-d911-444f-98c1-128694796017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2200d9-9ce1-4560-be5e-7bb566dd0faf",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18237a2-e3f0-443c-b62d-947514497b00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea34e0ec-0eec-490a-8057-f8639963bee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2cc0d1c-ac5e-4619-88c6-07ab707eddf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8047689e-75df-4fbb-a3fc-8a55c11a7869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f713c8-899d-4e31-ac2e-e4c8ef77324a",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64437674-0f67-4a9f-ba3f-845261ea529e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b51800d-941b-46a3-ad64-a9f5295721cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a1aa3a-c903-482c-9712-4eb310b7f44e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3976076a-011a-4819-a494-182469320b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79667a8-c832-4152-b50a-4c6021794900",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea0cd0f-47ab-4742-a160-be8a5732738b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80bd8bc6-0798-4ed4-b454-20ff00f6d6d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9450768b-3870-4136-b8c3-6357b426fa14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a45ee6b2-9b44-4cc8-97e5-a4494f9f4e9a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26f3767b-913e-4ccc-846b-5ffa77b6a53b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "85a516ec-45e3-468f-8d97-f909bc80fb5f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1d7bd189-61fb-4c02-ac0b-c3fc86b6d4ad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "268b4b6f-dc60-4028-9701-43f9233405d4"
                    }
                  }
                ]
              },
              {
                "id": "4d13a6ff-2e09-4beb-96fd-9a104afb3a2b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ccd2e814-8760-425e-9617-c55212bde788",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490c27d2-e2e8-405c-b31c-aaf9310aa7b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "458ded9d-3e33-4ba3-872c-e31396c81bd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32943ad6-dede-495f-a5a5-9a24ff7bf97c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "663efef5-5951-4db5-9bd1-605e8824f24f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf3a6e54-99c7-4451-bb43-9550e459d711",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a93677ff-c126-4d42-b133-4e90245b8351"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "903ba5ea-14d9-4bb4-aa70-2e87148373b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc6e5c3f-f844-49fd-b16b-b6a17171a07c"
                    }
                  }
                ]
              },
              {
                "id": "dd18ea0a-ee9c-4acc-b52d-79451693daaf",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2c9e1869-46b4-48c4-83c7-2299fd911099",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b740ee2-003e-4b1c-8149-4dd84080c416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e46aebf2-8240-4349-a86c-cd6b5c23a216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "709c70a6-5f25-4949-971b-106fa6481d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f8ea07-8c22-4d70-afc3-b6ba842dc470"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ca9c104e-c472-464e-814e-fa00e5b09c38",
            "name": "Positive Testing",
            "item": [
              {
                "id": "357f127a-129c-4d61-88c4-3d24cdc77618",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90086790-425b-4d7d-b7cd-d123a8094633",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8d0a391d-f489-4bd9-907a-ed4582675243"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0e7b3975-a6ce-4c2f-9247-71caaf6124e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41fb9e2a-80eb-4ad5-8c08-c18d123db534"
                    }
                  }
                ]
              },
              {
                "id": "66559698-5e2d-424b-9bf2-b4e9d0d85bd0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17c7de37-6d11-4b0e-bec2-3911ae192681",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "acb81e63-cccb-46a4-90cf-49385fbe42b6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "075dff8f-1497-41b4-bea8-6b0fbf415080",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cc20d8a-018e-454a-81d8-e0434547f919"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d0ccf42d-c7e9-433f-b1ac-931f28a85070",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "217eb7bb-7a6d-4cf4-ba3a-c4a458ddf583"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3face211-17ab-446b-a596-fe1685a40971",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a572cb9e-1b05-417b-8e78-256d96db3190"
            }
          }
        ]
      },
      {
        "id": "b2fd0085-ddb2-4219-be2f-3f66e24bcd4d",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ff94dec1-6e34-40bc-adc2-5cf50018fa26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8b05d22-afc8-4438-8cbe-445707c91789",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2834f1f6-6214-408c-a732-ea3dfc4172d1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9528a8f5-ba5b-44f8-bb7d-9e5adf93db08",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8576a73f-5dd7-45a1-9e8a-35aef8519a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecdf2e9-026f-47b1-aea5-b93a0f3cc4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8912fb0-eb55-4c45-80be-32011fbf6bd3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8fb72ffe-c010-4e23-923a-be826adedd6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6993cb2c-1a2f-4d6f-b663-84e98c6cf52d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "016f395e-017c-4435-abbc-d40c2be9d19f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "db0f23c6-e8ac-4b91-bbf0-a6cbfbdb202a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86b55963-9cff-46d9-af1c-94a55fe4cfb6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9f8ba9a3-6491-4849-bc66-0850b6ba1a85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1cca3c92-98d3-40cc-bc7a-6df5d7727029",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ee88120-2d4f-407e-ba92-40c635ac54b2"
            }
          }
        ]
      },
      {
        "id": "0c848184-698f-414a-80ce-c2af9a66e5c0",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "240c4ce6-e0a5-412e-a9fe-61cb57acc434",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ff3717f-22f1-4ee0-885a-73821a8e9cb3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "430732f7-5d52-4ba5-bc46-399ed4578c28",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "677dcb9f-7833-4ff2-a016-d41065d00ebb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "640ad0a5-e980-4353-9739-7936e3dccbb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2bd173-3cc6-4b0f-a66a-c6b27a9cff49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d94bd6ba-38d8-4751-9058-838f067da188"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cbccfe3-0d8e-48a0-aabd-b07d5f314559",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "41d4ac08-9164-44de-abcf-ddfc33ca2900"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "789aba47-c217-4737-8a0e-d459fdf347fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55b48716-c223-4209-aff4-027faad56f87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "69163349-b5f2-4921-9c3a-bb50082f2e92",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bd85550f-3c0a-4725-be5f-a5fd98edbdce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3808e326-ee56-4e8a-9136-c6fe2f0ae9ea",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba576238-9796-4dd7-ac40-1ca7569c2ff5"
            }
          }
        ]
      },
      {
        "id": "37ea8b27-0c26-4056-bab9-313d1205f546",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "59efef01-28f3-429e-91bc-2f744f377023",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c486f654-c111-4900-a515-cd7175e00361",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eb5f7b8e-d5c7-4f86-9712-2341b9794103",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e461893-5b81-484f-bc68-4176789ae841",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a00e74b2-8274-4210-82aa-642e63492398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d51c61-81d5-466d-a439-5a124122cc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d88c029c-0f76-46a3-99c1-4e94ed552c69"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8eb1b3ac-0231-4ee8-b27e-d768916f3eb9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "085d7aee-bfb0-4be1-b019-7ca9b301937f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8c771c14-a9e1-4f3c-8752-6686665cb416",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f6ef6db-8b6b-44fc-a193-d56de740f876"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ab88902-404e-4c59-af71-d5760cdf9d5c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eb575c38-75dd-4f8a-817d-ee8941f67fc6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "737038ce-9dd1-40a3-9981-716845340aaa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3608ad3-1c14-415e-913d-f7bfd13ba124"
            }
          }
        ]
      },
      {
        "id": "94d42741-9b56-47cb-8c5a-f2e16c25dd74",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b6ac5e5-7a07-4a81-ae88-8d6924fd21fc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32e0dbe3-6b50-439c-b017-1ae9fa22c934",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "65e81e6f-53ef-4d3d-bf41-bc405ba9ac14",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7c4ae1ad-01e8-47fa-be88-0fcb4606cc74",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "133ea737-db80-4f9a-8ee8-ce442a93dfe3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 53.028070175438586,
      "responseMin": 9,
      "responseMax": 669,
      "responseSd": 67.84734607897349,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711586053560,
      "completed": 1711586078108
    },
    "executions": [
      {
        "id": "495e665e-a1bc-4c22-ab47-3d07e96de0dc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e18d9119-4cce-426f-988c-db1c3c699688",
          "httpRequestId": "d20a4335-a83c-4526-81f9-b9d7e195cd24"
        },
        "item": {
          "id": "495e665e-a1bc-4c22-ab47-3d07e96de0dc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "710c4535-c447-408f-af70-0e1ffb6ecbfb",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 0
        }
      },
      {
        "id": "a755ddce-4aa9-4da8-9050-3572b85be75c",
        "cursor": {
          "ref": "cee239bd-dab7-4881-9582-8c492d70c323",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7c8dd3cc-7760-4272-9da9-8574da1d33f8"
        },
        "item": {
          "id": "a755ddce-4aa9-4da8-9050-3572b85be75c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7ec26fe7-fb45-4615-b437-cc81f7eea72b",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "20e47d94-422c-493a-a2c3-50023639e1f8",
        "cursor": {
          "ref": "cc8f7e9f-e3b5-47b2-b73a-7a4880584806",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "075d3a75-6fa1-4928-a14d-7a15c45771fd"
        },
        "item": {
          "id": "20e47d94-422c-493a-a2c3-50023639e1f8",
          "name": "did_json"
        },
        "response": {
          "id": "a50cef1a-85b5-427b-a716-9e710881f18d",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd6e480-5a46-449f-99f4-1da74953d3cb",
        "cursor": {
          "ref": "9954f377-4141-4c41-9e04-d959d22edec8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8ddb47d3-61cd-46e1-8b1c-6628dc4d5368"
        },
        "item": {
          "id": "6dd6e480-5a46-449f-99f4-1da74953d3cb",
          "name": "did:invalid"
        },
        "response": {
          "id": "f436a1cc-1ea2-4c08-8e3d-5cb2deade6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd6e480-5a46-449f-99f4-1da74953d3cb",
        "cursor": {
          "ref": "9954f377-4141-4c41-9e04-d959d22edec8",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8ddb47d3-61cd-46e1-8b1c-6628dc4d5368"
        },
        "item": {
          "id": "6dd6e480-5a46-449f-99f4-1da74953d3cb",
          "name": "did:invalid"
        },
        "response": {
          "id": "f436a1cc-1ea2-4c08-8e3d-5cb2deade6b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a1a54fa-1991-4230-affa-eaee8a1c38c2",
        "cursor": {
          "ref": "2c087c4f-ada6-491c-a89f-9788d0fc2898",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "74a46d4f-9e71-48f6-a8db-fabc4f3deca2"
        },
        "item": {
          "id": "1a1a54fa-1991-4230-affa-eaee8a1c38c2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0a06cc7d-0f54-41d5-84bc-9f5ca8a35149",
          "status": "Not Found",
          "code": 404,
          "responseTime": 85,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd236a3-a988-4d9d-a693-05b1620f8947",
        "cursor": {
          "ref": "44ae2bee-e0be-4ac2-b637-569ca84de3b6",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "77ed18ad-2313-445a-84e6-21ef58058f32"
        },
        "item": {
          "id": "7dd236a3-a988-4d9d-a693-05b1620f8947",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e36388c2-86d5-4449-b366-473aebb26b2a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90ceca48-37e2-416e-84d0-41f19dc88245",
        "cursor": {
          "ref": "28dc8c6d-302e-4caa-899d-9d2028039507",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "01e230be-ef79-433f-a66d-8cfdd7c9d805"
        },
        "item": {
          "id": "90ceca48-37e2-416e-84d0-41f19dc88245",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d5698d96-fe78-4366-8c28-5385259d333a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae9ddfc8-f26b-47a0-b205-60482ac752ef",
        "cursor": {
          "ref": "0c54b947-d5bb-46ba-ade5-1a7c34e8572e",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "becc793d-5f7a-4169-9a00-63b43bd4fc08"
        },
        "item": {
          "id": "ae9ddfc8-f26b-47a0-b205-60482ac752ef",
          "name": "identifiers"
        },
        "response": {
          "id": "f4e0aa14-cdb0-4db8-9a84-a0ee714e26b5",
          "status": "OK",
          "code": 200,
          "responseTime": 196,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c143dfab-9651-4cf6-8566-75f7c123ca3c",
        "cursor": {
          "ref": "b4fa41b1-17a8-4a98-ab51-5f5c6c0e77a2",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ba7eaadf-09bf-45e1-95d2-c43e045712ac"
        },
        "item": {
          "id": "c143dfab-9651-4cf6-8566-75f7c123ca3c",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b772d76b-5c83-45e9-9cde-2a5710858743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f04209-729a-49f9-9fd7-464153984765",
        "cursor": {
          "ref": "1330830a-2719-4294-882c-9cf5dfe95453",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cb1de948-0527-476b-8c67-aafaf390c88f"
        },
        "item": {
          "id": "16f04209-729a-49f9-9fd7-464153984765",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "5fe4b3b5-5f92-4801-b991-aa703c104a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2fd72da-9887-4ae6-8220-564736f34013",
        "cursor": {
          "ref": "91803ad1-c773-4cbf-8743-dd0eb6f734a4",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d291d661-8faa-4f28-b558-35edf6708bfb"
        },
        "item": {
          "id": "c2fd72da-9887-4ae6-8220-564736f34013",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a57bf943-9227-4d2a-b958-8e21b244c89d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0305325e-16a3-455a-82f2-54f79c47954a",
        "cursor": {
          "ref": "3ed16a0a-9a28-4ffd-9dea-aac0b4dae440",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6761aa53-a635-47ec-851a-a9dcd97b2ddd"
        },
        "item": {
          "id": "0305325e-16a3-455a-82f2-54f79c47954a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "396c42dd-7491-426f-ad36-8408a433d2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd49340c-138d-4638-9b4d-c4291508d9f4",
        "cursor": {
          "ref": "3b29ed5c-e981-4a69-afdc-55c05dfc9761",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "94d5d477-8cf1-4129-85ab-16347166276f"
        },
        "item": {
          "id": "cd49340c-138d-4638-9b4d-c4291508d9f4",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "699addfa-e062-48de-904e-15415ed33fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa1ef96-0eba-4b2e-8a82-ccbc79ee93c7",
        "cursor": {
          "ref": "e575d74b-e109-4225-bf7b-ec49d0563f10",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6da6a4f0-ab2b-4128-902a-15bd1f91943c"
        },
        "item": {
          "id": "3aa1ef96-0eba-4b2e-8a82-ccbc79ee93c7",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "410f8ad2-c5f0-4842-acd1-a6aeb093f7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "268dad8f-911a-47a5-ac1c-0fa2502f98e2",
        "cursor": {
          "ref": "99a9a862-20a7-4896-9bac-7d33bc6fa4da",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "88dc24e6-eb7c-43eb-a133-56eb3fd6283d"
        },
        "item": {
          "id": "268dad8f-911a-47a5-ac1c-0fa2502f98e2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "48c02785-edfa-4fc2-9800-98ec2a6adf9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c6d439-02b3-4001-9580-1ad3b651bda1",
        "cursor": {
          "ref": "cbd03eee-67c8-49b3-988d-2e265ab5ea7a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3560656b-8a7f-4596-a807-462aa1b4969f"
        },
        "item": {
          "id": "48c6d439-02b3-4001-9580-1ad3b651bda1",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8baac14a-c23e-462a-8644-59c3c0455c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef9c4f9-5e3e-45ac-ab57-c846a4db45b1",
        "cursor": {
          "ref": "dc37637b-80fe-4f36-b9e4-c67577bc72ab",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cecf738d-fef9-4416-96e8-c0b9d3f000a8"
        },
        "item": {
          "id": "cef9c4f9-5e3e-45ac-ab57-c846a4db45b1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c7784fc3-2945-44d0-9742-819c47e34d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0aa4f2-c3b6-40bf-a1fe-cbf77e5aab2e",
        "cursor": {
          "ref": "086bcb34-fd77-429f-adbb-478c39113218",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6301b871-1129-43aa-b80a-f00ef3ba7db3"
        },
        "item": {
          "id": "bf0aa4f2-c3b6-40bf-a1fe-cbf77e5aab2e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8a9f478c-b909-4161-a64c-4b84d49e5ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d13b9d-27d3-4b2e-807b-566bb209b220",
        "cursor": {
          "ref": "a8a3400d-1d86-4c2d-aab4-d7dfc8321a06",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "1e54ddf2-6506-448b-82bb-75454b5d980d"
        },
        "item": {
          "id": "e9d13b9d-27d3-4b2e-807b-566bb209b220",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2e52c8bb-921b-4ac6-994f-8396030aaa36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44862bfd-1381-40ff-9414-0e7930927c12",
        "cursor": {
          "ref": "7365d252-65ab-4384-8c62-45a37f495099",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cc50c0b4-d063-4fdb-966d-d4f38820ab31"
        },
        "item": {
          "id": "44862bfd-1381-40ff-9414-0e7930927c12",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ebab728b-61ca-4bca-bcb7-eb36195448b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab09ced7-8485-48fc-976c-007fcd5f4919",
        "cursor": {
          "ref": "9632c5df-4814-4804-ac86-ecf0718fc9af",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88859d23-924e-46be-8db7-a24194ee102c"
        },
        "item": {
          "id": "ab09ced7-8485-48fc-976c-007fcd5f4919",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f3def987-7b3e-4b8a-be42-1176d34ad934",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892680ff-0555-4c96-a293-530fa04e380c",
        "cursor": {
          "ref": "5719ed09-a6d8-4b67-88df-2a66e166325b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5bfe382e-c1d4-4b31-a20a-f1bd028d7fe4"
        },
        "item": {
          "id": "892680ff-0555-4c96-a293-530fa04e380c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2dc475cf-82ba-4b49-8914-8d1f636b12a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6a9c19-0959-408a-96b6-f4884d4b7b6e",
        "cursor": {
          "ref": "e2ea0bc7-8afe-4807-8b93-90e3fbf539ac",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ad167fe0-2a01-44b7-b29d-2d12024a4155"
        },
        "item": {
          "id": "4b6a9c19-0959-408a-96b6-f4884d4b7b6e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "20091630-0527-4192-888e-f21473e62dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d62d07f-c72b-4527-819d-ee49dcb69a62",
        "cursor": {
          "ref": "344637ca-52cc-4f4a-ad76-d5ad33c90fe6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6ba1cffc-d2b1-4f5a-965e-d36fcdeeab19"
        },
        "item": {
          "id": "7d62d07f-c72b-4527-819d-ee49dcb69a62",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "91361abe-6ea1-45bb-9533-4224171eed31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "612a8b8f-be18-4c40-92d4-1ec9a5a57bf7",
        "cursor": {
          "ref": "9d21eba2-3a91-4266-bffc-913e6d9df009",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "985fd43f-5dfe-4571-bef6-64e4e123bcc9"
        },
        "item": {
          "id": "612a8b8f-be18-4c40-92d4-1ec9a5a57bf7",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "de7c0720-f231-4a0d-9beb-da830ebf4e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca5c1a6-3139-4528-adc8-90e21afc09ff",
        "cursor": {
          "ref": "774b961f-b953-4ef1-9719-0abc8fe77351",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e6c3417a-1f0a-474d-bdfe-cb6e27455ef3"
        },
        "item": {
          "id": "fca5c1a6-3139-4528-adc8-90e21afc09ff",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "adbfbea0-af69-4f8d-a92c-4fe91a2aaadf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa286ce7-3a60-4086-afef-30ba34edc60d",
        "cursor": {
          "ref": "ceb3164d-5920-4052-a039-3d63da0372be",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "377a1b92-3eeb-42f8-a415-1e249f132c67"
        },
        "item": {
          "id": "fa286ce7-3a60-4086-afef-30ba34edc60d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "eef7591b-f9dc-4e89-b631-234495df5150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2994fefb-e011-46b3-ade8-399a463fd42b",
        "cursor": {
          "ref": "21fcbaeb-3bb5-43f9-b801-b8c40e3343b3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "1f110537-5126-4418-9905-ab8c36cd2b63"
        },
        "item": {
          "id": "2994fefb-e011-46b3-ade8-399a463fd42b",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "71b40e83-2830-4f8a-a3d8-da98b60a74d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0a2168-1570-4ea1-a5ba-1b32dfacc440",
        "cursor": {
          "ref": "079e87ea-027b-4375-b4b0-3c1de42ee4c3",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c49bb3e2-de5a-4f37-a618-55321aaffae7"
        },
        "item": {
          "id": "7d0a2168-1570-4ea1-a5ba-1b32dfacc440",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "01d3a3e0-7ee9-4b71-a58b-b62c4ec24fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20766de6-50cd-4217-a80a-5e502dbad394",
        "cursor": {
          "ref": "cc16fefd-5cfd-44aa-a8e7-2f1dee9f4c51",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0104ff54-2964-4561-85aa-a4720f7ced40"
        },
        "item": {
          "id": "20766de6-50cd-4217-a80a-5e502dbad394",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "113957e0-5c35-4cba-8095-684f519f1dae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a123090-a3b9-4698-9a26-4f229f2cf895",
        "cursor": {
          "ref": "9edf0145-c487-4fc7-9831-8a42a60e2d5f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "53749587-f09e-4563-af73-5aceff670e25"
        },
        "item": {
          "id": "3a123090-a3b9-4698-9a26-4f229f2cf895",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4908fdf9-1a3e-4740-be0f-1f67e4278150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c032ca1-07bb-4321-a40a-89d7da96203b",
        "cursor": {
          "ref": "563e85ec-f176-4781-a409-0858649ec219",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "a17e3baa-43a8-4697-b847-c2322c5725e7"
        },
        "item": {
          "id": "5c032ca1-07bb-4321-a40a-89d7da96203b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a4a9a83d-f569-46ce-82eb-00b0f2f6e59d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "338a876f-32a1-47f2-a38c-7c459acfa20b",
        "cursor": {
          "ref": "41233ca4-2325-411e-a859-cf8862e295ee",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8a77c752-5d75-438a-87be-5d75395efd9d"
        },
        "item": {
          "id": "338a876f-32a1-47f2-a38c-7c459acfa20b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "be342dba-b7d5-4ddf-857f-ccf64c04f5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8c6a60-0c4c-442b-92b3-45622011d95f",
        "cursor": {
          "ref": "1ae1c169-9f32-4ea2-9891-3313ab4d2dc2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2cb8364e-b50e-4d08-b1da-12c6aa3c7585"
        },
        "item": {
          "id": "3d8c6a60-0c4c-442b-92b3-45622011d95f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2623518b-2c49-4133-9c91-b4071702289f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb7e3fc-d0be-4d51-942f-9762836cb2ca",
        "cursor": {
          "ref": "15b265c8-8b70-44e1-9349-09f78954ff92",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "580e4055-8328-4ac6-8c0f-b20f6635ee94"
        },
        "item": {
          "id": "2bb7e3fc-d0be-4d51-942f-9762836cb2ca",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a055819b-bd75-4c76-96a1-d91e5e399d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cefb33-a569-4d08-9677-e4f479c125ee",
        "cursor": {
          "ref": "910ee8a5-2b09-4a0b-91cc-0eaa866357a0",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c677c0ba-0f5b-4ad3-b333-5cf69ea53e5d"
        },
        "item": {
          "id": "e7cefb33-a569-4d08-9677-e4f479c125ee",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6a1d3ba6-fd7b-4e57-9879-e3e94831a323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ba5075-9b9c-4718-92a4-305e975f080d",
        "cursor": {
          "ref": "f6e535b8-6009-4a65-8d2b-0b2ecb53ec92",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "02eab736-0ea5-4466-9507-992476458d41"
        },
        "item": {
          "id": "c9ba5075-9b9c-4718-92a4-305e975f080d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "54e5fbbe-778d-420b-a5e2-f893c679acb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254d960a-1f90-4882-ad17-6e5ced489e12",
        "cursor": {
          "ref": "0ae7ffb3-10b7-4ea6-b933-1c88f6b28c35",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7523e5d8-49e1-4978-af08-b5ee4d990e0b"
        },
        "item": {
          "id": "254d960a-1f90-4882-ad17-6e5ced489e12",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "dbf26be2-b0d8-4147-9b7a-d49025a2ba77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7436a2ac-58b4-4c57-9f17-62d3a62e55ae",
        "cursor": {
          "ref": "85bf3201-21e9-43ae-81d9-1ac5d4a41a21",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "790ed4ee-b9d8-485a-ae3e-da0b65d6083b"
        },
        "item": {
          "id": "7436a2ac-58b4-4c57-9f17-62d3a62e55ae",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9c63abaf-6430-4c68-94c2-0a1ee53fe10a",
          "status": "Created",
          "code": 201,
          "responseTime": 669,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "773c9799-e415-492d-bf6b-04b5faa477c2",
        "cursor": {
          "ref": "4a0b2fa2-985b-4986-b604-ae1dc2d20b8f",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "daf0f746-0d42-4c2c-8846-4e3ce792eee4"
        },
        "item": {
          "id": "773c9799-e415-492d-bf6b-04b5faa477c2",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8fb0f689-30ba-417a-9b1b-ca5f26eb2354",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "46a7026d-f5eb-4bcf-adcd-6c8413677b6d",
        "cursor": {
          "ref": "073e2f39-a907-4eef-be34-3504151a8dd3",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c82e82a3-b584-4532-ae72-3d29fb06f43b"
        },
        "item": {
          "id": "46a7026d-f5eb-4bcf-adcd-6c8413677b6d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "22411192-e1f4-4a7a-a348-5ac22d9ca439",
          "status": "Created",
          "code": 201,
          "responseTime": 201,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0149e1db-3fbb-4b1e-aea3-d36c94c5c7ee",
        "cursor": {
          "ref": "7b9964d8-1fa2-427c-afb5-0706ceaa54ea",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bf2fbb02-d3d5-419c-9e4b-7c296da1c840"
        },
        "item": {
          "id": "0149e1db-3fbb-4b1e-aea3-d36c94c5c7ee",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "565e42f0-b92a-4b29-bb9d-6921cf7ceca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b04248-d7c5-46b9-ab21-a842cffe7dc6",
        "cursor": {
          "ref": "75955723-1fbd-4a05-889c-a813f8bca1ee",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "73f9638f-fc5a-411a-bba4-79360ea26b0b"
        },
        "item": {
          "id": "09b04248-d7c5-46b9-ab21-a842cffe7dc6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a8b68988-8e9b-47d1-8845-976ca42203a5",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "f88106cd-684e-431a-9677-0ad2d0a0cb57",
        "cursor": {
          "ref": "71737cfc-3d3a-43f9-bb2c-6d5147a2bf3f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c686eeb4-07cf-4817-a25c-a2c5eb589dbf"
        },
        "item": {
          "id": "f88106cd-684e-431a-9677-0ad2d0a0cb57",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "a9156f06-29e1-4350-a1d5-a4755b0bb879",
          "status": "Created",
          "code": 201,
          "responseTime": 208,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d2c4a292-a154-4418-906d-fd5eab5ec15d",
        "cursor": {
          "ref": "7de80704-8364-42f3-ba06-dc8aac373ab1",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2063b723-a506-437f-b58d-24fd7bd465fb"
        },
        "item": {
          "id": "d2c4a292-a154-4418-906d-fd5eab5ec15d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "587693f4-b736-4c0c-b439-26dc11fbf71d",
          "status": "Created",
          "code": 201,
          "responseTime": 201,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f8956158-5d22-4c0b-b3d2-cae4b66a99ff",
        "cursor": {
          "ref": "792602d5-72e0-4f9c-ba47-0b9b64076803",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a6a641c4-1a7d-43c4-a8f8-5211f65508a0"
        },
        "item": {
          "id": "f8956158-5d22-4c0b-b3d2-cae4b66a99ff",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8e1bcef8-32fd-4a12-8acc-e6892a7b7a9e",
          "status": "Created",
          "code": 201,
          "responseTime": 220,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "bb57b88d-3071-4d4c-aad4-7bde62a82710",
        "cursor": {
          "ref": "6a30d839-e1e7-47e3-a72e-7baea5c24009",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "482b5dec-fae5-435a-9cb7-cf29fd797185"
        },
        "item": {
          "id": "bb57b88d-3071-4d4c-aad4-7bde62a82710",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "7a59de48-75ca-4031-90a0-e068f447d4d7",
          "status": "Created",
          "code": 201,
          "responseTime": 200,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "8d4b8d88-0bd3-49b9-80f6-4fb6dacea8fc",
        "cursor": {
          "ref": "f4c49358-0629-4901-b532-1736a958b3ef",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "21f93b48-cae1-455f-8898-5f18601aa383"
        },
        "item": {
          "id": "8d4b8d88-0bd3-49b9-80f6-4fb6dacea8fc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c255d546-4bc5-4def-b8a4-1b928e8e9591",
          "status": "Created",
          "code": 201,
          "responseTime": 190,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f171bb4e-48e5-41bf-8a62-0b23f5535fc6",
        "cursor": {
          "ref": "78335645-a220-4905-9d86-c9f3ec464373",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f192dae2-66cf-400e-abc8-a3b756346d60"
        },
        "item": {
          "id": "f171bb4e-48e5-41bf-8a62-0b23f5535fc6",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e53d8847-0ec9-409b-af0c-d131637b431e",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4c63c078-eb21-41ea-b99d-d366faa424d5",
        "cursor": {
          "ref": "584de9a7-6be0-4f55-a24f-c6d082c46f1b",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8443e721-7a33-4a69-b1ab-39bee6a359f5"
        },
        "item": {
          "id": "4c63c078-eb21-41ea-b99d-d366faa424d5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d02ddd9f-a10d-4bf8-a4d3-365fba45305a",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a631e8c2-1430-41dd-987a-9dacfa21e098",
        "cursor": {
          "ref": "0c738fd9-cdfe-406c-b53d-9a0e03018a39",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2465480f-e37e-435d-9182-77c5aa8d07fc"
        },
        "item": {
          "id": "a631e8c2-1430-41dd-987a-9dacfa21e098",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "698773c8-1978-418d-aeb7-608e9f23fba6",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6411eb8d-96b9-4441-81e6-af8338cbe802",
        "cursor": {
          "ref": "2bc1aa67-7af7-4a64-8982-0fe5c37eddc4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1ddf8248-d56c-4c08-9020-10a8e2ab6f62"
        },
        "item": {
          "id": "6411eb8d-96b9-4441-81e6-af8338cbe802",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6a619e88-4332-4a64-a97e-d8e179cadc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca013b9-b402-4f12-86f2-2474910f554a",
        "cursor": {
          "ref": "741cd6e6-5d7b-488c-88d4-dab1fb6cff4d",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cbeb8f08-7ef3-46f4-9ff5-399360c8012e"
        },
        "item": {
          "id": "7ca013b9-b402-4f12-86f2-2474910f554a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4c20290a-2cb1-4b05-9225-93cfb65a18eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58fb1d0-d266-483e-8da0-312c7d56448c",
        "cursor": {
          "ref": "4444f907-1e98-4756-8728-e732d2648f41",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3fa42ade-044b-46fd-84f2-8422f7d0b14b"
        },
        "item": {
          "id": "c58fb1d0-d266-483e-8da0-312c7d56448c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "6edb1ae8-fe51-4fc2-a5d1-91f2bc304e1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a937e9be-eca0-4393-95c1-9c2bedd48837",
        "cursor": {
          "ref": "d792c5a2-f495-4f04-87a1-2beeb1ccb4d8",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "345c8592-d58d-41ac-9e55-3ec36108e6da"
        },
        "item": {
          "id": "a937e9be-eca0-4393-95c1-9c2bedd48837",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2cb75324-5405-4f11-9444-cd2d62dc8bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "209d821e-2a56-4359-80f3-39f7743e33e2",
        "cursor": {
          "ref": "ffb5ea42-e81f-497c-9ecd-75eb4272366b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c661f08a-339c-4717-932e-59419e89b577"
        },
        "item": {
          "id": "209d821e-2a56-4359-80f3-39f7743e33e2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1b7e52c1-83f5-4bd5-a6e2-35a0a0280cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5bc29b1-acd5-4c56-886f-8ce461ff21b0",
        "cursor": {
          "ref": "864c4405-69be-4a16-b86b-4f119d5cdafe",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "afe0dbe2-7911-4efd-840a-dfd9643c5ec9"
        },
        "item": {
          "id": "a5bc29b1-acd5-4c56-886f-8ce461ff21b0",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e65455f9-fe33-480f-a2ab-0f9c2a29a2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efbcb60e-c0c0-412a-a731-c4980a8e1e81",
        "cursor": {
          "ref": "18a50f1b-6d06-4306-941a-2586f15221eb",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7a338726-335d-4a13-a34e-7de0defd05e9"
        },
        "item": {
          "id": "efbcb60e-c0c0-412a-a731-c4980a8e1e81",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "63453f9b-de8e-408f-be2e-5b2aa0812571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f54050a-d896-422d-ac2c-52ac6478cc18",
        "cursor": {
          "ref": "f9b7ee47-bf5f-4ed2-8058-94083e919b81",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8762b1f0-02ff-4254-a1e4-c2a6297c4410"
        },
        "item": {
          "id": "3f54050a-d896-422d-ac2c-52ac6478cc18",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c76b97b6-9cd5-4a5b-9588-13afc1fde1d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0344b4d1-05db-4797-9b5f-3dfc508de031",
        "cursor": {
          "ref": "de80609a-b004-40fd-b627-04b5ac885b0e",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "90687f30-6c4d-4d1c-8ec1-ff108b76ef3d"
        },
        "item": {
          "id": "0344b4d1-05db-4797-9b5f-3dfc508de031",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "57be6f68-042b-41d7-8f01-b25705ccc5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b2e9bf9-3014-46af-9161-c2200372ab37",
        "cursor": {
          "ref": "6796bc23-2e30-429e-ac53-344fdf7535a3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7313e266-7aa7-44a9-8370-85c0b918f51b"
        },
        "item": {
          "id": "0b2e9bf9-3014-46af-9161-c2200372ab37",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f4844edc-eaf4-4d9b-a3b0-9809b4a088fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a8346d2-c5e3-4588-9878-67c7fc131dce",
        "cursor": {
          "ref": "e049a3d4-89ea-4a67-9d7c-ac4119d94ab8",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c1652586-266c-4727-857b-ab83c1ad4a80"
        },
        "item": {
          "id": "7a8346d2-c5e3-4588-9878-67c7fc131dce",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b43f50ad-ffaf-42a3-aad6-ca23f8cc78e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "143ebdc7-e92e-4fe5-840c-4dcc56188275",
        "cursor": {
          "ref": "9b1ec01c-174d-4362-8d7b-bab2b076cce3",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "18ff7225-1a23-40bf-8c39-436ff44c0022"
        },
        "item": {
          "id": "143ebdc7-e92e-4fe5-840c-4dcc56188275",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "afb50bdb-1fa6-487d-98cc-6153405dd845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e093810e-3672-431b-bbb5-08166ebfc84c",
        "cursor": {
          "ref": "15826405-59ee-44df-9b76-4d000ecde81e",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a850225c-cfe3-4c19-8c5d-7e97f8746de0"
        },
        "item": {
          "id": "e093810e-3672-431b-bbb5-08166ebfc84c",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "40c33fee-096b-4a7d-9b91-42cf73d7aa42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58f6de1d-9004-433e-8322-972745a181a5",
        "cursor": {
          "ref": "1ad23a17-d074-4150-948f-e72085cd2318",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "07c61a07-6dc9-42ce-b1ff-e7a7d5f5ae2c"
        },
        "item": {
          "id": "58f6de1d-9004-433e-8322-972745a181a5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7670369a-d75d-4791-9dca-fd1f85388e4f",
          "status": "Created",
          "code": 201,
          "responseTime": 191,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1c44f1e0-bbfe-47bf-b792-17d9102f0873",
        "cursor": {
          "ref": "c3cccec2-ad76-45ac-8002-458679d1c2ee",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b2ffda3a-ae94-40ca-8130-056a426dfffa"
        },
        "item": {
          "id": "1c44f1e0-bbfe-47bf-b792-17d9102f0873",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "eed65e72-0e4c-4c18-b184-d5825249375d",
          "status": "Created",
          "code": 201,
          "responseTime": 202,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a88f5584-c9a2-4696-bf7d-4eaa4e3cb2ad",
        "cursor": {
          "ref": "70c7dc0c-67f2-488c-a31c-fa21fdb21d34",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6836e1a1-b923-4808-9a56-70d548064c45"
        },
        "item": {
          "id": "a88f5584-c9a2-4696-bf7d-4eaa4e3cb2ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f307416d-24d0-4384-8cfe-a841f6cc5996",
          "status": "Created",
          "code": 201,
          "responseTime": 203,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5ce259d0-9da2-4d5f-93f6-9866920279e0",
        "cursor": {
          "ref": "66a87563-81d6-4c95-a546-9fdd4d9bde22",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "648496b8-4c2e-4531-999c-2aa1021769f9"
        },
        "item": {
          "id": "5ce259d0-9da2-4d5f-93f6-9866920279e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "8c3bf6dc-b572-4a54-a1d8-81e293b33387",
          "status": "Created",
          "code": 201,
          "responseTime": 510,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0f911b94-84ec-4713-a72f-9fffcd0123c1",
        "cursor": {
          "ref": "dd85d67c-e608-4883-8118-48bb8d52ab38",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0bfc9805-5b41-489b-87a6-0e37e0cca5f5"
        },
        "item": {
          "id": "0f911b94-84ec-4713-a72f-9fffcd0123c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "481d8ae7-99be-4c20-9144-703e8142f6c5",
          "status": "Created",
          "code": 201,
          "responseTime": 211,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "51d5760b-40b9-4fd4-b190-b1bb52d0f03b",
        "cursor": {
          "ref": "d405f8bb-6c27-48a5-8b84-a3449825fc7e",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1fff6f65-297e-449e-b83f-19da886ade48"
        },
        "item": {
          "id": "51d5760b-40b9-4fd4-b190-b1bb52d0f03b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "eba9c486-bbc4-4ef2-aae7-ed1fee1eade5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66ae4d27-d46d-43e7-910a-fc57a6beb2a9",
        "cursor": {
          "ref": "a8aa6086-971d-453f-a3f1-4e496bbd2bf8",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "a6f6109f-94e6-48d7-b8e6-cfba01d881fc"
        },
        "item": {
          "id": "66ae4d27-d46d-43e7-910a-fc57a6beb2a9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e6d10e8e-a929-47b1-8f9c-73ca27a3761c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a17f616-ec7e-482a-81cf-1f61bbd9d03a",
        "cursor": {
          "ref": "2df08ac3-b65d-400c-9918-86fdc487b868",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4d206f9c-46e6-4f97-9cd5-a9819ba7b7f7"
        },
        "item": {
          "id": "1a17f616-ec7e-482a-81cf-1f61bbd9d03a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b4e97202-bf4d-430c-b446-7e166479aa75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fece5292-911e-471b-b551-95a1e742d5f2",
        "cursor": {
          "ref": "d15fe022-b0b3-40fe-8c9e-96f02b2f36f4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "36beb31f-7d3a-4524-8882-8411673dd550"
        },
        "item": {
          "id": "fece5292-911e-471b-b551-95a1e742d5f2",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c7159411-aaa2-4edf-aa77-ba25620c2e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a5b04f-67a7-460c-9b8a-085fa8d06934",
        "cursor": {
          "ref": "0364288b-6dc2-454e-b2b0-1270613bd443",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "54aa66fe-af66-4b1a-9739-f7457f95a8bc"
        },
        "item": {
          "id": "e5a5b04f-67a7-460c-9b8a-085fa8d06934",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "58a97d4d-3a5d-46ec-97d8-dd45519ce70b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a908948b-6bd5-459a-bb31-e1e41ec519b3",
        "cursor": {
          "ref": "89b00da9-b96e-4e97-830b-c313408a8417",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "e8df6d80-db53-4cf9-a464-7754b491444f"
        },
        "item": {
          "id": "a908948b-6bd5-459a-bb31-e1e41ec519b3",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bec07b8a-2e81-417d-b960-6b33166d0f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e438894e-188a-43a5-95bf-12f189f10048",
        "cursor": {
          "ref": "ebfcd4ad-ff1b-41c7-a6bb-590e0953d711",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "46277f3c-b134-41d8-8baa-77c47760896c"
        },
        "item": {
          "id": "e438894e-188a-43a5-95bf-12f189f10048",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9f9859cf-6a5e-43e5-992a-0b6efb87ad93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76ba904a-8ca1-4f8c-add4-9701f09b0b50",
        "cursor": {
          "ref": "8492e4d0-e762-46ee-a3c2-5ccf30573005",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2d40112b-96bc-4a65-9351-6fc24e1ce920"
        },
        "item": {
          "id": "76ba904a-8ca1-4f8c-add4-9701f09b0b50",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "236f68fa-7ade-4ca8-8333-d91f495bbb91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b960161b-5352-44e9-950c-40085a292a80",
        "cursor": {
          "ref": "6d2cd0cd-109e-4a2f-a0c6-5dfcc1e35176",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "33634efb-c2c6-4b99-b053-c006550b6b32"
        },
        "item": {
          "id": "b960161b-5352-44e9-950c-40085a292a80",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d75343bc-eb2a-4418-8288-ed397f1c0c68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fa44a0-75c8-4b11-8713-ca6b49a47e79",
        "cursor": {
          "ref": "6e2e74fa-b85c-466b-b437-a0f1452fe6fd",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7262a417-d883-4971-9360-4d23c32046c0"
        },
        "item": {
          "id": "02fa44a0-75c8-4b11-8713-ca6b49a47e79",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8ad0dd56-4fe1-4472-8b13-58f25424ccb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4307b9cd-9e52-4139-a378-bc7f6f85d7ff",
        "cursor": {
          "ref": "632403a8-332a-42f9-84f2-6232a193fc2f",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "19b0f989-e6f2-4eba-acb8-8cb4e4bd94fd"
        },
        "item": {
          "id": "4307b9cd-9e52-4139-a378-bc7f6f85d7ff",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "64ea47ea-f15e-4941-833c-42bbd1bedfeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d2a8f37-3ff9-4db5-8d09-6bf6f9652be0",
        "cursor": {
          "ref": "92961774-f397-404a-8043-f6e2a6173cbc",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7d1a9c17-b49e-4c1d-a2bc-d6fd622e413c"
        },
        "item": {
          "id": "5d2a8f37-3ff9-4db5-8d09-6bf6f9652be0",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "d34bd651-12c8-4c5e-ad96-087cdd9955f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4ec8b5-ad6e-4564-bd50-d3c6c2dd248a",
        "cursor": {
          "ref": "c9964ecc-4755-4faa-8969-5b8de2e1443f",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d300103e-bb31-48aa-a4d5-a51cbbb67c69"
        },
        "item": {
          "id": "bc4ec8b5-ad6e-4564-bd50-d3c6c2dd248a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "389eba9b-17ad-4be3-91a9-abbcfa9326cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96edfb8c-36a5-45fe-8b4e-4bec2640687b",
        "cursor": {
          "ref": "3aa3b6a1-9bdb-485b-918e-bab8d78cfb37",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "a86f6ddb-00cb-416b-ba5b-61aa1034f734"
        },
        "item": {
          "id": "96edfb8c-36a5-45fe-8b4e-4bec2640687b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "27936dc7-e848-45f0-9d03-11b2e8a3d5b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dd673e-d8fb-4870-bd60-cce77d14456f",
        "cursor": {
          "ref": "5bdf4f96-ab0e-4bd9-bdbb-d8d1dbfd14f2",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e5842632-d355-47a8-8c27-1cfe57b5e841"
        },
        "item": {
          "id": "d8dd673e-d8fb-4870-bd60-cce77d14456f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9e529121-6a30-42b8-8152-badc2bb2cacc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3030ce7f-63fd-4158-bf6b-0ff486895183",
        "cursor": {
          "ref": "388a3ca6-5a2b-443a-8a37-fc6621cf573a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d5482b4b-6145-46d3-85c9-62d6c14f429e"
        },
        "item": {
          "id": "3030ce7f-63fd-4158-bf6b-0ff486895183",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e640fbd6-d71a-47a3-b8d5-e17306cbec4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f652e60-9c76-4e65-bf8c-12327418814d",
        "cursor": {
          "ref": "2d59d096-e4b1-440a-aae1-3083a29d6b14",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ade4b9d8-b999-4ddd-8744-ce669a7206d0"
        },
        "item": {
          "id": "6f652e60-9c76-4e65-bf8c-12327418814d",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3c16c45a-6ef0-4d69-86c7-3f3ef6565c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cf86bdd-38d1-412a-a5ad-d8faf5c45f36",
        "cursor": {
          "ref": "cb881c90-dc4d-4946-a954-f21f43a99221",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c8e553f2-6ff8-41f8-a387-f0c93184630c"
        },
        "item": {
          "id": "6cf86bdd-38d1-412a-a5ad-d8faf5c45f36",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "e7e7bbc6-dadb-4dc6-9a61-e1446e81ded9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c7a38f-3f71-4e53-96b2-e93829b5ddaa",
        "cursor": {
          "ref": "b72175f0-064f-414f-ac93-c32a44151479",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5d89766b-7d51-45a0-b633-f2d60fffe40f"
        },
        "item": {
          "id": "11c7a38f-3f71-4e53-96b2-e93829b5ddaa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "564253e1-d56b-40f8-9218-85c771f829e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a9d1a01-145e-47dd-8c5d-4c55dd55e2de",
        "cursor": {
          "ref": "17184e95-5722-4095-8e1c-4cb0b1d7ac9c",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d6866074-cd6c-4dc5-a833-84b1e87860d8"
        },
        "item": {
          "id": "7a9d1a01-145e-47dd-8c5d-4c55dd55e2de",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "62e28800-2c1b-4e85-b875-b6facfb95320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe94f2f6-8974-42df-9e60-fd32d1afe800",
        "cursor": {
          "ref": "0e826c41-31e3-46c3-ac87-c2c37249d025",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e639d3cc-0fe9-402b-a0ed-c1093a46479d"
        },
        "item": {
          "id": "fe94f2f6-8974-42df-9e60-fd32d1afe800",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6b60f774-6673-4c8a-b465-96c5d61f46bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cecd02c0-c537-4b07-837b-dc8ddea3828b",
        "cursor": {
          "ref": "33e91150-f958-4b07-b647-ff8c5637dc35",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "af6ac3de-4bec-4ad4-9a30-3ff0ac446e0d"
        },
        "item": {
          "id": "cecd02c0-c537-4b07-837b-dc8ddea3828b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ce15d7b1-6aec-4a90-8361-7cce6c54359a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310e87a2-6cd5-470e-883d-98f425c317c6",
        "cursor": {
          "ref": "b552564c-219a-4afc-97f8-a10a31f7f524",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f1bcfc69-99ff-410d-90fa-1a1ce21c2067"
        },
        "item": {
          "id": "310e87a2-6cd5-470e-883d-98f425c317c6",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "2c636152-0f42-4ddc-b9f3-55a31aa4cce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ee4dd4f-20f0-4b5a-853e-d34c4bf50da3",
        "cursor": {
          "ref": "09f624c3-f91e-4f35-a2dd-c3803dc53a0e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "afa2bd76-703d-4a3f-8437-16ee095eab98"
        },
        "item": {
          "id": "9ee4dd4f-20f0-4b5a-853e-d34c4bf50da3",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "06504a6d-9cd1-49db-a61d-870ac021c899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d222d2-cc48-4bcb-9db6-16122f794bdd",
        "cursor": {
          "ref": "9bddf1a1-1cba-4aea-949e-402df3fde99b",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f05b7299-fc58-4fa1-a31e-5b816f0d4d4f"
        },
        "item": {
          "id": "31d222d2-cc48-4bcb-9db6-16122f794bdd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "00bc4423-243b-44a3-b22b-1bd25a943721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ae1450-2d7e-4bf8-b0c3-2db79653dada",
        "cursor": {
          "ref": "c4e45273-3fab-42c7-96f0-d1dfb589b154",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "79e2436e-77c1-4f7f-b02b-bf85f24b47c0"
        },
        "item": {
          "id": "02ae1450-2d7e-4bf8-b0c3-2db79653dada",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ba762f74-0b56-4036-b9eb-38246d0f5ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9d256d9-6e1b-4604-9c9e-547a8c2dca2a",
        "cursor": {
          "ref": "764e5951-cdca-4d63-968a-f9186ca6b898",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "81065207-02a9-48cc-8329-7cf3a22c8945"
        },
        "item": {
          "id": "d9d256d9-6e1b-4604-9c9e-547a8c2dca2a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "21447b8b-faad-421b-8f00-222da6261ca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0732593d-c150-4e06-ae85-613ce13511ff",
        "cursor": {
          "ref": "9e7cc855-31c2-4aa9-8eae-c95d7e91cd94",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "10435e4e-e0f4-42e0-a0b8-d545c7d1a7b1"
        },
        "item": {
          "id": "0732593d-c150-4e06-ae85-613ce13511ff",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8e107f28-892e-4e0a-90ac-4a07bed3133a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f932d25a-be76-485e-9867-3911f1d6ebcc",
        "cursor": {
          "ref": "bf01a17b-6054-4320-9c70-289417ff6037",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d793e8b8-fcdf-4ee4-bcaa-a04eae197a79"
        },
        "item": {
          "id": "f932d25a-be76-485e-9867-3911f1d6ebcc",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "469c62c7-40a3-4d00-b979-a59d1167d8d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3623261b-72bd-4c52-971b-d7b620be101f",
        "cursor": {
          "ref": "01fb4826-c57f-4cb4-8d0a-0a1e5d426c0a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "88389e02-c6d0-4b1b-afaa-347694394c98"
        },
        "item": {
          "id": "3623261b-72bd-4c52-971b-d7b620be101f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3cfad034-cee1-4e6f-abf4-1da97e22b5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95bebab-8f5d-47ad-ae51-5f238a8e3efe",
        "cursor": {
          "ref": "9da20d62-9dfa-4bd8-866f-d0debd6db162",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f0e0f452-a0ed-4c45-a9fc-98bf679ddf56"
        },
        "item": {
          "id": "c95bebab-8f5d-47ad-ae51-5f238a8e3efe",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e67fb597-0a30-4171-8690-05504304d69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecca21bc-2780-45d4-b03a-e8cfa22d1141",
        "cursor": {
          "ref": "db3f4dd3-5596-4d1d-87d0-bde18f399edb",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "16d69e60-1fd6-4f6c-984c-0582b774ac22"
        },
        "item": {
          "id": "ecca21bc-2780-45d4-b03a-e8cfa22d1141",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "00f1cded-6e66-45f2-acbc-21f816e83ef5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28e9a966-083e-4c25-9ba4-a8caaf8897dd",
        "cursor": {
          "ref": "b58642e6-f369-4c9f-9a4f-e4da03c1d37d",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4c385292-6a31-4ace-85ac-1edb771eee93"
        },
        "item": {
          "id": "28e9a966-083e-4c25-9ba4-a8caaf8897dd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "06714a72-0b08-49dc-91a9-54d2a5225806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ceda76b5-c0dc-4ffc-af28-149c38124dc1",
        "cursor": {
          "ref": "2b7241ee-6379-4f92-9613-5a3bda502fbe",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cdc7f6e6-75e9-42ea-a216-fa8b62c9e59a"
        },
        "item": {
          "id": "ceda76b5-c0dc-4ffc-af28-149c38124dc1",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4f5990ad-079b-4e4c-9813-58f63a696efe",
          "status": "Created",
          "code": 201,
          "responseTime": 199,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1029848e-c5f9-472f-9876-76efe2465afd",
        "cursor": {
          "ref": "2f49604b-306f-4cd4-88e1-21e293ac3076",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "58f8e707-623a-457a-949f-eb9dd3782049"
        },
        "item": {
          "id": "1029848e-c5f9-472f-9876-76efe2465afd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b158cbe2-a1dc-4982-a7aa-9bcfc1798adb",
          "status": "Created",
          "code": 201,
          "responseTime": 194,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "df12d775-2ffa-4bdb-bf93-12167357f08b",
        "cursor": {
          "ref": "46216c63-700a-4247-9133-9a8b6c7fae06",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c6ea6186-519d-4a29-b060-f0c5bc238ea3"
        },
        "item": {
          "id": "df12d775-2ffa-4bdb-bf93-12167357f08b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "25e623d2-9100-4713-a93c-35329eaaa03b",
          "status": "Created",
          "code": 201,
          "responseTime": 201,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "25a78eaa-ddd3-4e1b-a4d0-68bccaec305c",
        "cursor": {
          "ref": "4996c603-daa3-4589-b009-8121291352a7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2279f830-1050-4946-a1f8-78d85d1c4d5f"
        },
        "item": {
          "id": "25a78eaa-ddd3-4e1b-a4d0-68bccaec305c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e76964d3-b48f-4eab-87b5-1558b75ff733",
          "status": "Created",
          "code": 201,
          "responseTime": 217,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2c381c3-ef05-4f33-82ea-737b3efc68b1",
        "cursor": {
          "ref": "89ad986f-a674-462e-a79e-1b9bef3f83ef",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "d0aa593c-a986-4fbb-bdb9-c65dfc0d6c0a"
        },
        "item": {
          "id": "a2c381c3-ef05-4f33-82ea-737b3efc68b1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f47b8506-416f-4bc2-b379-f24bf340c8f7",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-28T00:34:26.130Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-28T00:34:26.130Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "31531554-4ec1-47bd-af5a-539710189f95",
        "cursor": {
          "ref": "09530c88-44f5-4b62-b0fb-92f9cb42f5d5",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7eb5ddb9-066c-4580-b86f-4843f1cdc0e2"
        },
        "item": {
          "id": "31531554-4ec1-47bd-af5a-539710189f95",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9dde2244-0fb3-4013-9b0f-81d19bd8b1e9",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ef0076-724a-4cdc-8a6e-9ec0422738eb",
        "cursor": {
          "ref": "ecf2bd94-5cdf-4c00-bc55-a284e38a8045",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0e8a966f-95fa-42de-b057-f9c91805a9c6"
        },
        "item": {
          "id": "53ef0076-724a-4cdc-8a6e-9ec0422738eb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "81970b02-ea1f-44f9-80dc-d691e0931370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf29e45b-0df9-4f95-a8fa-e6329a0a39b0",
        "cursor": {
          "ref": "e3d396dd-3b19-43f4-942a-978956b42827",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "776dd7e1-5f7d-4e43-a246-8e86295b235b"
        },
        "item": {
          "id": "bf29e45b-0df9-4f95-a8fa-e6329a0a39b0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f74cea37-2b2b-4cf6-8027-452e1e6257d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4de9cd5-4484-4366-8350-a2585daf900c",
        "cursor": {
          "ref": "10e68e83-c42c-479e-9c1e-8c44bc961959",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f8bb8d27-95a1-40a9-937a-603ae348661f"
        },
        "item": {
          "id": "a4de9cd5-4484-4366-8350-a2585daf900c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a46e7293-9441-487b-a1f5-6990ce7178ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13953ba9-4346-4508-b03f-a51e6b27cef3",
        "cursor": {
          "ref": "72534b59-7fbf-4623-bdc1-ca1694ab4afd",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0593e7af-7724-4e43-a0a8-f0c3f72a61ec"
        },
        "item": {
          "id": "13953ba9-4346-4508-b03f-a51e6b27cef3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "417bd68a-6abe-4906-9aaa-d79cee999c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc02e987-809f-4b81-87b1-85462217250b",
        "cursor": {
          "ref": "0440c950-8872-4445-aed3-508fc7506880",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "69b66eb3-477c-4353-901c-c996bf35646e"
        },
        "item": {
          "id": "fc02e987-809f-4b81-87b1-85462217250b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c6c80a16-64c1-4742-bd9d-dc0bbbdf0838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2494b7-960d-472e-a08e-9d98359d8cf8",
        "cursor": {
          "ref": "7c62fa2f-9aed-45dc-be47-b306dfa9b378",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "5d80509d-2d6d-4c95-8d4e-9c911be4de8a"
        },
        "item": {
          "id": "6a2494b7-960d-472e-a08e-9d98359d8cf8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "98a05bfa-7db2-4654-9208-a08f4751bdc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b12fcb-7092-4251-8556-81e5c283e16b",
        "cursor": {
          "ref": "83cc958e-d87f-435d-8e75-f4f726fb0ad0",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fc54dd2f-1906-415c-a97d-fb182a0112e6"
        },
        "item": {
          "id": "72b12fcb-7092-4251-8556-81e5c283e16b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2c52b265-9fe6-49e6-8d2c-f8e6467ed71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28497025-506c-46f7-910b-af25afafb471",
        "cursor": {
          "ref": "a4c3d378-b021-466a-8748-615f82c15a71",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "653cc1de-cb63-4549-b5b3-43375060e97f"
        },
        "item": {
          "id": "28497025-506c-46f7-910b-af25afafb471",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8e5843bd-b8f5-475d-a4ca-48be11d50641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd0cce6-6151-4615-a025-ac1a6810ff66",
        "cursor": {
          "ref": "cef50c67-ed7d-485d-9f2a-549481297893",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "fca35ce2-c0c8-4122-9743-a01d4774c5f0"
        },
        "item": {
          "id": "3cd0cce6-6151-4615-a025-ac1a6810ff66",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f77822e1-8936-459d-95f1-bb070983b3cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "664a2cc1-9b25-4333-8a41-af452787beb3",
        "cursor": {
          "ref": "482ac218-f79a-44a4-8ca7-8ac18ccf1f82",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "1afb0213-f03d-4daa-8852-a5261e8c9023"
        },
        "item": {
          "id": "664a2cc1-9b25-4333-8a41-af452787beb3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e93f72aa-d6c4-4213-ad75-a6bed5c45c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02513686-158b-4eec-82dc-f3fbaf2b49fb",
        "cursor": {
          "ref": "8d8a5270-b720-45a4-b380-74cef3db99cf",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c2315221-4018-4c04-8d9b-0ac1fd72f480"
        },
        "item": {
          "id": "02513686-158b-4eec-82dc-f3fbaf2b49fb",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5ea76c68-7062-4308-bc57-4c319e92ce11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "836d8759-97c9-4062-82fc-bc2e0e482aa0",
        "cursor": {
          "ref": "46ab9735-bc54-4531-b0b4-14b42006a4e6",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8bc91c44-f6e8-4ac3-a98c-410f5cc51e5f"
        },
        "item": {
          "id": "836d8759-97c9-4062-82fc-bc2e0e482aa0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "890e5ce0-978e-405b-b0fd-0a875f787e62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e24293c-14ca-4075-b6d6-a08088f8a8b8",
        "cursor": {
          "ref": "db25b6c7-790d-4033-bd2e-910a07f87598",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e8aad13e-2840-4117-8eed-b20c237c1a48"
        },
        "item": {
          "id": "6e24293c-14ca-4075-b6d6-a08088f8a8b8",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "697e709c-f854-4ca3-ac4f-2c2251ba3f6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "11496754-6358-4f61-947d-7e998fa46562",
        "cursor": {
          "ref": "1ddcda69-35e4-4fb7-9eab-40e670a0a8ec",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "5fcd338c-bcbd-47fd-9353-16d25551e31a"
        },
        "item": {
          "id": "11496754-6358-4f61-947d-7e998fa46562",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2d96aa75-f2d5-4a74-a89a-fb6dcb6db38c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "8935561b-602d-4a3d-b83f-0dc4686ebf2a",
        "cursor": {
          "ref": "c5e8ac30-d3a8-4d00-acc7-c29d0d6121d4",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "62012c6c-a6ef-4028-b976-bb7e45a1a02f"
        },
        "item": {
          "id": "8935561b-602d-4a3d-b83f-0dc4686ebf2a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "62a49edc-574c-4785-926d-467bb7ad5f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab6f075-07ff-4bf5-852f-36e0807b7c51",
        "cursor": {
          "ref": "a8ccbb59-049f-4588-95bd-e7165fc00637",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "2289b48e-92b6-4f9e-9fff-ffb9a6881126"
        },
        "item": {
          "id": "eab6f075-07ff-4bf5-852f-36e0807b7c51",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e26fc951-8efa-46c5-81da-ec98c77fcae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd63016-526d-4bb9-ac43-e48263fe573d",
        "cursor": {
          "ref": "b91a38d9-0868-4de2-baea-cc7bedba00f6",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "5e4a9d97-450f-4ae4-99ef-c107d96bdd86"
        },
        "item": {
          "id": "efd63016-526d-4bb9-ac43-e48263fe573d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "07ed28a5-951b-4a10-a0f6-277bbef1fd1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cce48e9-1996-4cd7-86a2-b7075062465d",
        "cursor": {
          "ref": "46f6a40d-434b-4b80-a7b9-f8a66a209015",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0572d852-c33b-48fb-9ec7-05d3397edb01"
        },
        "item": {
          "id": "0cce48e9-1996-4cd7-86a2-b7075062465d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ee69e312-f703-49d4-8039-a97641f43663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c34082-38b9-48f3-8fca-1a1a95b7a36b",
        "cursor": {
          "ref": "028dc5ff-661d-4904-8c1d-f8a83be54630",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "377e12f9-f727-43f1-b974-20712d3d468e"
        },
        "item": {
          "id": "b4c34082-38b9-48f3-8fca-1a1a95b7a36b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a1db8218-7eeb-430f-b28d-006b04aecae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22aff753-4481-4a3b-9d54-d480404f938c",
        "cursor": {
          "ref": "698d5d28-7562-4002-a78d-9c96e6f13b3e",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6c3144ce-0d14-48d0-9ce9-ad0cbc1fc805"
        },
        "item": {
          "id": "22aff753-4481-4a3b-9d54-d480404f938c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "174f6048-f654-4bf7-9649-501584c2c714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "022731a0-2abc-4252-9656-464ed0e76480",
        "cursor": {
          "ref": "6bfcd306-f97c-40db-8af6-ba1a93927d29",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "827cd4d1-78be-4c86-b6e6-a02414730007"
        },
        "item": {
          "id": "022731a0-2abc-4252-9656-464ed0e76480",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b626e6a-bb28-41a9-be03-8e956e410c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81994611-f3ac-46cc-9996-7c8947d2f9a8",
        "cursor": {
          "ref": "cd1de2cf-43d2-4103-9e41-147b0034b6b0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ec6969c4-93a3-40f9-b756-0bc4dc42b299"
        },
        "item": {
          "id": "81994611-f3ac-46cc-9996-7c8947d2f9a8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4b61545e-d27d-4d5b-af96-7b822df0335b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ffe159f-69bc-4d3d-bdbf-de76f1c1a74d",
        "cursor": {
          "ref": "43bc43fb-7098-43bb-9241-0a89eb5d5177",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "0d6300d8-57df-4765-afee-762096f487f3"
        },
        "item": {
          "id": "8ffe159f-69bc-4d3d-bdbf-de76f1c1a74d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c4d7c980-5b34-4807-9975-fd35bc5c3dc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ecb5d5-c265-46e3-b6ed-efd0fda183cc",
        "cursor": {
          "ref": "29dd4eb1-f021-4f2c-bbe8-cc1038de7bae",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "f3345748-7859-40b8-9296-ed7b8da9de54"
        },
        "item": {
          "id": "34ecb5d5-c265-46e3-b6ed-efd0fda183cc",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "53ed48a8-1100-4570-9476-fd195ad65a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36f58937-e835-448a-8029-57b9767f6b6e",
        "cursor": {
          "ref": "50afacb2-bd51-493a-b9de-50e957f7387f",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4acbc09e-e60b-4e73-b49c-ce1d55b3e811"
        },
        "item": {
          "id": "36f58937-e835-448a-8029-57b9767f6b6e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "70be2da6-fd58-4fc2-89e8-a36bc510ed77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4b5fbb-9e7d-48d9-af90-9889698a5789",
        "cursor": {
          "ref": "40902c21-bae7-4ff5-9712-7db388c084ff",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "311a9454-ef34-4f52-bb47-6d92ef616561"
        },
        "item": {
          "id": "eb4b5fbb-9e7d-48d9-af90-9889698a5789",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cfab472b-4afc-4df8-9d0c-f5fda2214dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9239868d-a354-4686-b548-52a4d60c6812",
        "cursor": {
          "ref": "7c8883bb-305d-4768-8b2e-7c41f66fe156",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4e9f81c8-eb89-43b2-9ef8-cf91592e859e"
        },
        "item": {
          "id": "9239868d-a354-4686-b548-52a4d60c6812",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9398a36a-210e-467b-9bf7-69726d638f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b3f225-4e81-4f03-9abf-8c3bef993b1b",
        "cursor": {
          "ref": "b22ea3f7-d0f9-47bd-8db9-01391ab8f3b7",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "61d15d3b-507f-453c-903d-fa9f43e496a2"
        },
        "item": {
          "id": "d1b3f225-4e81-4f03-9abf-8c3bef993b1b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7e8873cd-eadf-436c-8b9e-ccbd34b4b32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c68548d0-050e-49bb-9b41-36fd3d06cc02",
        "cursor": {
          "ref": "16d58df4-f0e9-4ada-8a47-686e1a8ce12c",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8964e9f7-2e64-48a4-a047-eb620068e25c"
        },
        "item": {
          "id": "c68548d0-050e-49bb-9b41-36fd3d06cc02",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bebddc45-f0cd-48fd-8fd4-995f82234daa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641ebf93-964e-43ce-9d14-cc0d4a8f7191",
        "cursor": {
          "ref": "6db65f7b-e952-4239-b50b-b8f9fdeaa8f4",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2dc00b70-a930-4bf5-9d3b-7af2631a157d"
        },
        "item": {
          "id": "641ebf93-964e-43ce-9d14-cc0d4a8f7191",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c692d385-9f90-48d7-92da-c700ec4bbc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4491fd-c662-491b-9db1-91b50b79caf5",
        "cursor": {
          "ref": "fc7f9abe-c58e-4edc-bf18-8a73b822f4ea",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f5ca066b-99a2-4bd9-8196-67283e4eae23"
        },
        "item": {
          "id": "2c4491fd-c662-491b-9db1-91b50b79caf5",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "16fc9ada-01ab-42a5-acc3-57301e5d6b22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ec8a35-aeb1-4b77-844b-85dd3d5aebf1",
        "cursor": {
          "ref": "bfacdde2-dae0-473c-abce-f7458a24cba3",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "71821459-95c1-4a18-8d1f-a7e3442c3cbd"
        },
        "item": {
          "id": "08ec8a35-aeb1-4b77-844b-85dd3d5aebf1",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "f5f61f50-d0b7-4e52-89f5-02c2e44526c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "603a7f08-66de-47b6-a53a-84e60deaa956",
        "cursor": {
          "ref": "a7ba7121-19d3-42c2-94b0-009e562bbcca",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dee3052f-c35e-4241-bf29-228775b5e9eb"
        },
        "item": {
          "id": "603a7f08-66de-47b6-a53a-84e60deaa956",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a863868f-e2b5-42f9-9a73-8d9c6de6d661",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2bcecb-9c4e-4289-9e41-ecb7675409b0",
        "cursor": {
          "ref": "b4f7e1f6-026a-495f-85ea-1da76956e36c",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "337f0298-f0cf-4b1f-ade6-e37af306b03d"
        },
        "item": {
          "id": "eb2bcecb-9c4e-4289-9e41-ecb7675409b0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "31f17637-ef3a-4108-a024-08bdd3f20349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa0c51d-0a85-47f1-83b3-ddb45a1d1801",
        "cursor": {
          "ref": "737239ca-3cab-4e21-a839-2492cfcbcb4c",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "47bf6ab8-8c22-40c3-b095-53ce65402141"
        },
        "item": {
          "id": "4fa0c51d-0a85-47f1-83b3-ddb45a1d1801",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fa6f8ca8-ebd0-4396-ae5b-cace3d76be43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd36cd2f-b7c9-44d4-8c0e-af6674745593",
        "cursor": {
          "ref": "bdec8f0e-d9d2-4c78-9966-19225706fdcf",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2e2ce197-a533-4c30-a3b5-9aec7088c7dd"
        },
        "item": {
          "id": "dd36cd2f-b7c9-44d4-8c0e-af6674745593",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "aeca6f3e-b298-4d57-bc14-fcdaf9f6b3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcc2aee-f0b1-4359-bc80-6183dd2f8f20",
        "cursor": {
          "ref": "d0877c62-fd6a-4c93-a038-d1a6ef3fb2c8",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "e469c1b1-5a17-4dba-9380-5b8738725427"
        },
        "item": {
          "id": "6dcc2aee-f0b1-4359-bc80-6183dd2f8f20",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8462fc14-454e-40f1-924d-2be1b7fd81d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da7be1d0-12aa-49eb-829f-2596cbc30eec",
        "cursor": {
          "ref": "fe8df4f0-f166-4ee8-bf52-aa90714d27cb",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c911550e-4dc6-4a27-8f3d-568ff89c5fe4"
        },
        "item": {
          "id": "da7be1d0-12aa-49eb-829f-2596cbc30eec",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "14ff57c5-c6d3-4fb4-94d6-cef0ff79f53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085ebfd6-86de-42d0-bc18-3af4ff45efcd",
        "cursor": {
          "ref": "f4b7bc13-8580-4d0e-8515-fa7508eb2a2d",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e4f79970-e253-4615-828c-73735aab827d"
        },
        "item": {
          "id": "085ebfd6-86de-42d0-bc18-3af4ff45efcd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2731c120-29fc-47f5-a280-3907690ec0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a81ec70-934c-4a90-a232-7033c61876c1",
        "cursor": {
          "ref": "8387d1e6-7ca0-49c2-91c4-5f3c7b49f034",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7a393c6e-e3e4-448a-ad66-94132ef3ddaa"
        },
        "item": {
          "id": "0a81ec70-934c-4a90-a232-7033c61876c1",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4736ee8b-6afe-4019-af93-f3edf5ee31c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87503f07-f9af-43a8-b3b9-29fbb6daf843",
        "cursor": {
          "ref": "80425868-4197-4856-8a99-61b6485599f5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "2b7d180d-09a4-47e5-bf61-0dbc8c767ee8"
        },
        "item": {
          "id": "87503f07-f9af-43a8-b3b9-29fbb6daf843",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f322d0c8-b596-43ce-a3ce-68f318a86c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d092bf77-6b50-45dd-b5ab-69902576223b",
        "cursor": {
          "ref": "f32d7391-8304-4bcd-ac99-c42ab4e1b8e3",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6cdd7896-d26c-465b-9350-eca36e56f136"
        },
        "item": {
          "id": "d092bf77-6b50-45dd-b5ab-69902576223b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ef4e7a88-f4c0-40a7-a2f9-e5b03af13414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743b7539-4882-4d3d-9364-37bb4d3b4f68",
        "cursor": {
          "ref": "183fc467-637e-435e-93bc-f708ad1d1593",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6bad9553-ed29-4f10-8b4c-08f11ccbce35"
        },
        "item": {
          "id": "743b7539-4882-4d3d-9364-37bb4d3b4f68",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "93f715d8-0666-4250-963b-98a9a3b9b1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054ccac7-c8c3-4f88-938c-f3c70ba2be83",
        "cursor": {
          "ref": "838e615a-e06d-459b-949d-360bb246e6d5",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4eaaa97c-af14-47f6-a093-29b98be89ba8"
        },
        "item": {
          "id": "054ccac7-c8c3-4f88-938c-f3c70ba2be83",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "c9ab6c24-ab8a-4024-86d4-538b9e974c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430035a7-eef5-44e1-9783-2bad4580be89",
        "cursor": {
          "ref": "ac658cb1-a3ce-44e4-9bc3-52517eac9f47",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "4dab32e5-2ccb-4262-8e19-206bc40a9a7f"
        },
        "item": {
          "id": "430035a7-eef5-44e1-9783-2bad4580be89",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6f7b0ac3-7c2d-4444-911e-c91b56c57444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b137383d-dae1-425d-8f9c-0bbb8c380150",
        "cursor": {
          "ref": "52e11832-12b9-4115-8434-a50c298e0d35",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "5884d4fb-d71c-436d-b9c3-a0c2609e2bb6"
        },
        "item": {
          "id": "b137383d-dae1-425d-8f9c-0bbb8c380150",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "4edb4841-95da-4ee4-a685-0ed7f6e8fa80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8a511e-a530-4153-98e8-c8a5eb28e869",
        "cursor": {
          "ref": "f29a2972-23c9-4a6a-80e9-73fab800b663",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a50ec566-2dce-4674-871b-1b833395f6eb"
        },
        "item": {
          "id": "4f8a511e-a530-4153-98e8-c8a5eb28e869",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "d071e19b-34a8-4bac-8a29-ba1dbed1c843",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "9b339359-32bb-4a0e-a6d4-c756f5bcaeb0",
        "cursor": {
          "ref": "2ba25a9d-affa-4130-986f-a07a8bf1bc7f",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "66de1295-c2c0-4176-b057-071c802526f1"
        },
        "item": {
          "id": "9b339359-32bb-4a0e-a6d4-c756f5bcaeb0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b6c236fc-c0d8-493a-81be-45cdc9b506c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60180934-6c47-4a0f-92ff-da99a31eeb90",
        "cursor": {
          "ref": "e19815f9-6762-49c0-b21a-33cda6fa8798",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b333663b-b8bb-467c-b9b6-c0b7052c462f"
        },
        "item": {
          "id": "60180934-6c47-4a0f-92ff-da99a31eeb90",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c9f397a6-73d1-4612-8574-eaca816efdcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89a5f05-3c36-4919-9b68-ef05015a9e6e",
        "cursor": {
          "ref": "a3744ec0-d7f4-4cfe-a0d0-38f285f9bf5b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "fcfb7278-1455-48bc-aa3a-76e786b624e6"
        },
        "item": {
          "id": "c89a5f05-3c36-4919-9b68-ef05015a9e6e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b5fe6ebb-a469-4cbb-af0f-6eef9326c8dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1ec7d3a-ea61-4c2b-849a-27f2a0801124",
        "cursor": {
          "ref": "da5490f6-f4e9-4be7-84c6-04b87e69899f",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "40a6b4d2-1126-45a4-a493-063aef2ea0a2"
        },
        "item": {
          "id": "e1ec7d3a-ea61-4c2b-849a-27f2a0801124",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0facee9f-f491-46bd-8877-595e4491a47a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b588edc2-44e0-4c57-8d33-d0320714dd90",
        "cursor": {
          "ref": "63d09d51-ad79-42ff-867e-16c70859ef3f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "678f99bc-9b80-4c3b-a4b2-19c9e5efc4dc"
        },
        "item": {
          "id": "b588edc2-44e0-4c57-8d33-d0320714dd90",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "be06858b-e9f0-4ada-b2b1-977210d948ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f636c5c4-1e70-4fbd-8c3e-b811959507ff",
        "cursor": {
          "ref": "35eb91fd-aa4c-4853-b748-39e8f73a9d57",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "85f530b7-4e1d-4cf5-998c-2b9a7535335a"
        },
        "item": {
          "id": "f636c5c4-1e70-4fbd-8c3e-b811959507ff",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e66de3b0-52f0-4aa1-abbf-48b726736e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3123f7-d810-4bac-977b-dd157926b5be",
        "cursor": {
          "ref": "05426d17-edce-4862-9878-e641a30af926",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5e2629da-0a6c-4a75-8837-dbffb56ae014"
        },
        "item": {
          "id": "2a3123f7-d810-4bac-977b-dd157926b5be",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "621d30bd-4192-424d-a246-4a7b86efb0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad38322-dfa1-4b79-9bff-d8cb8c403745",
        "cursor": {
          "ref": "96b9971f-4a50-4dff-bf22-762d70ce17ab",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8a95bbe6-7ca4-445c-ad25-a9fff454407f"
        },
        "item": {
          "id": "0ad38322-dfa1-4b79-9bff-d8cb8c403745",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "511dcff8-5bff-4422-8ffe-881ca467fc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00eeb6af-2731-4045-865c-23a40a5fe01e",
        "cursor": {
          "ref": "fcc7e9a9-2313-4485-ae4c-240427971a30",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9db6429a-d582-4714-a762-bb3efd6bd4b0"
        },
        "item": {
          "id": "00eeb6af-2731-4045-865c-23a40a5fe01e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "25fc48f9-45ff-4fe5-ac50-97329f5c4f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1ebc84d-30a5-462d-9150-3bb0ae32e149",
        "cursor": {
          "ref": "e245fa35-5bb4-4ff2-be57-b67b6d4bccf8",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7d3309cf-9113-44bc-825b-6ee4fb9301a3"
        },
        "item": {
          "id": "c1ebc84d-30a5-462d-9150-3bb0ae32e149",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c45a0f94-3104-419b-bc9b-5c9190c31adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf031440-d2b4-42b6-85c7-1269970146d4",
        "cursor": {
          "ref": "d33ff44d-c9b6-45b1-91ce-134a0f6a42d8",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "cdab0705-b58c-40e9-bee4-c4ea861462bf"
        },
        "item": {
          "id": "cf031440-d2b4-42b6-85c7-1269970146d4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "569c2048-3145-462a-8f1f-2e9f70ddee24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11feaf8-bb1a-42e0-8be9-89b66f291e87",
        "cursor": {
          "ref": "b94dce6c-bcb2-4ad0-ad61-cec1fe7396de",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "85d453fd-f9c4-4f9b-a8f0-2996a6074739"
        },
        "item": {
          "id": "d11feaf8-bb1a-42e0-8be9-89b66f291e87",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3a783dce-3fc2-4593-b2b6-91b00b2408e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa71d5b-fa7b-47a8-afb4-f41481f493aa",
        "cursor": {
          "ref": "a11b8adc-12ef-41dd-9f3d-b286140e4e3b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e1b9d179-88aa-4ee0-8563-888b469a8d95"
        },
        "item": {
          "id": "5aa71d5b-fa7b-47a8-afb4-f41481f493aa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f02f2f67-ac25-453e-9c13-6c631ca8928a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2284aac0-82bd-4063-b5fb-f56107162633",
        "cursor": {
          "ref": "e7ee4324-9f4b-4bbf-90a9-1911879b3654",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "34e13915-9047-4b58-8d7c-51acd07c4a6c"
        },
        "item": {
          "id": "2284aac0-82bd-4063-b5fb-f56107162633",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fe3355cf-d712-48e8-8a8a-ae8e7a41a375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "314cd6f8-5271-44a2-8602-4a88842607bf",
        "cursor": {
          "ref": "9cab34f1-0133-45d8-94fe-df5e305cab19",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "51d33873-48fb-4645-97da-d635cb47f948"
        },
        "item": {
          "id": "314cd6f8-5271-44a2-8602-4a88842607bf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "dc475d4b-3468-4066-83b6-c829738ac0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b88264bb-89cc-4236-8f1c-4c6965bacf35",
        "cursor": {
          "ref": "58725560-ee6a-41a0-bd15-6a76fec6bda5",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2bc39036-1983-45b6-b9df-1adde798131c"
        },
        "item": {
          "id": "b88264bb-89cc-4236-8f1c-4c6965bacf35",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6d5a9b7e-3abc-4a5a-859b-a69298db04f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad977928-6444-4f5d-9e21-c112693bf846",
        "cursor": {
          "ref": "7c21cc52-59f5-4b2c-879a-5e26a96e1718",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c376ca55-5970-4cbc-bf71-c64b74951373"
        },
        "item": {
          "id": "ad977928-6444-4f5d-9e21-c112693bf846",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "528fe23e-9f7a-400d-9252-c04148df06cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4baaf3d-fbb9-4210-a052-59ec6ec771c0",
        "cursor": {
          "ref": "36fe8465-2e2a-4bbd-9545-cc55780d4421",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7ed2fce9-37ca-4ee1-92a2-c1d8d171d674"
        },
        "item": {
          "id": "b4baaf3d-fbb9-4210-a052-59ec6ec771c0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d8024804-bafa-4a38-a22c-6c56e75552a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d264e383-424c-47d4-92d5-be03abc1601b",
        "cursor": {
          "ref": "685698b3-ef15-4b3b-8805-0cea70d3bd23",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d5b7d201-a607-4255-ab0c-8ffd3d296aaa"
        },
        "item": {
          "id": "d264e383-424c-47d4-92d5-be03abc1601b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "90abfe56-9fac-46e9-8988-49ceba0f6c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "559850fb-c416-413f-b4eb-92914510c938",
        "cursor": {
          "ref": "11e4a3e3-72ab-4fda-92c5-e7632abfa996",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4bda918e-506e-4f95-911e-c6a5d7be4189"
        },
        "item": {
          "id": "559850fb-c416-413f-b4eb-92914510c938",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a690905b-c220-43ef-af04-3fef4e004a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ce35f3-3c04-44ae-bd9e-644f242f7b1b",
        "cursor": {
          "ref": "264af729-771a-44e0-8663-e351d18597f4",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b8971607-d7a2-4ab4-aff5-cb774c7a3d23"
        },
        "item": {
          "id": "42ce35f3-3c04-44ae-bd9e-644f242f7b1b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "99be00b6-7a92-4c27-9e3e-8cc37d1190c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd810aaf-8d84-4c86-a89f-8a3ddf365d35",
        "cursor": {
          "ref": "f3803196-9c90-4d90-b76f-0ab41a76426f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "027247e3-9640-4487-b62a-b672f7cd138f"
        },
        "item": {
          "id": "cd810aaf-8d84-4c86-a89f-8a3ddf365d35",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "78354307-4f7b-4f48-8eaa-ac91af9ca664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "386fcfa1-f340-4898-a84d-5bf1c745a332",
        "cursor": {
          "ref": "65e08a20-479e-424e-9300-ce3fc6620248",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "64927e74-b5f9-4405-958e-fb9b5b5668b7"
        },
        "item": {
          "id": "386fcfa1-f340-4898-a84d-5bf1c745a332",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "5708403c-c563-4505-bd05-257f73bab2e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ca1a91-da62-4fc4-abbf-75e8c36afc66",
        "cursor": {
          "ref": "4cd7e4c8-aabe-4f0d-a115-c5ef3cd85ea6",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "bff09fad-77ef-409a-956a-905bfab71be5"
        },
        "item": {
          "id": "12ca1a91-da62-4fc4-abbf-75e8c36afc66",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b1e48ab5-1c09-4f66-8c7e-cc73af91a6c4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d2ed7e-da82-4e08-b450-d85b5e137c70",
        "cursor": {
          "ref": "f81baec0-2397-476b-a0c6-00b0b822c21e",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d3cf994a-b64d-4c30-ab4e-2016d0cb11cf"
        },
        "item": {
          "id": "54d2ed7e-da82-4e08-b450-d85b5e137c70",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "17f05fec-49d8-4ba0-812e-14a1459ae4bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7926356d-1208-4744-8a9d-1f2847f35420",
        "cursor": {
          "ref": "c8fa502e-04cc-49bb-ba8d-3bf3a2c3aa0c",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b9c9ff3b-7fb7-4e99-898b-c71119762052"
        },
        "item": {
          "id": "7926356d-1208-4744-8a9d-1f2847f35420",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "cd5b5c08-46a1-403f-bd67-57b59b4a232f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "507ff8d7-d8bb-4984-a3e9-3c9dc9e7ecc2",
        "cursor": {
          "ref": "fcfe1130-b0cd-4837-8bcb-94c366372345",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b9619975-0fde-4c8b-82a0-719ed4ed7edf"
        },
        "item": {
          "id": "507ff8d7-d8bb-4984-a3e9-3c9dc9e7ecc2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "19f74b45-8f3c-45a3-8da8-a09cd6f6cbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c99103b-bcb7-4644-97ea-e3491342a21a",
        "cursor": {
          "ref": "5597b342-6dc7-4cc4-8e4c-362a86d8fc0c",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "2f5f8c83-ca3f-43c0-b624-f51a127cdfd9"
        },
        "item": {
          "id": "3c99103b-bcb7-4644-97ea-e3491342a21a",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "41339382-e811-477e-a940-585ce2fb20d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eecda55-c3dc-4bbc-ae35-d7026f17f3ad",
        "cursor": {
          "ref": "6d3b71d0-b01e-4389-84df-f68eaf35f6c9",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "dc1ba0f2-8a4f-4008-859d-1cb779199ac7"
        },
        "item": {
          "id": "4eecda55-c3dc-4bbc-ae35-d7026f17f3ad",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "91c22d8d-172e-4de3-951c-48ada7583403",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbaa68bd-811e-4a05-b03a-b8f871db7b13",
        "cursor": {
          "ref": "c8d24ea0-b379-4409-88e3-40312d9f4ff6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fdd1d482-b271-454e-8bed-6244c321d4b3"
        },
        "item": {
          "id": "fbaa68bd-811e-4a05-b03a-b8f871db7b13",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "783bd0cb-abbc-45c9-99c3-6c7f6a2fbbc1",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "62c3cb42-a51a-49e2-9872-5a2b45c7e84c",
        "cursor": {
          "ref": "0a6f641b-308e-4525-b39a-9484028b0075",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3b957150-1425-460b-84dc-731abe4e1f2f"
        },
        "item": {
          "id": "62c3cb42-a51a-49e2-9872-5a2b45c7e84c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "b3b12d28-b805-4ece-b590-6be6d5e34232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46b5369a-7c42-422d-afe6-944c454000b8",
        "cursor": {
          "ref": "4a266a70-ec22-47ec-a0f5-224f3b8c97e8",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d2dd25ee-5031-4a47-bc25-70d43c0f76d3"
        },
        "item": {
          "id": "46b5369a-7c42-422d-afe6-944c454000b8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f232cd23-a79f-4912-b9a8-3d1084c3ce92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceb3201a-5941-4ad7-9eee-3694a73ce90d",
        "cursor": {
          "ref": "48dc6325-a629-442d-b71f-6da1ab6c17cb",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fa4b0f14-228f-43b9-8c03-f80b2e1d851d"
        },
        "item": {
          "id": "ceb3201a-5941-4ad7-9eee-3694a73ce90d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5450df2b-5838-456b-9d7b-1b55f1e201ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3906553e-ab19-4633-a796-a5054f6d41fe",
        "cursor": {
          "ref": "dd2ca89b-bf3f-457b-89cc-7787eed19de7",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "02063409-0cb5-4505-8c88-efbe16fdaec3"
        },
        "item": {
          "id": "3906553e-ab19-4633-a796-a5054f6d41fe",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3f0d2ee6-cd4b-4c2e-bdf9-33bbf001d010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a12fb12-876a-40fb-8164-859698f0ba45",
        "cursor": {
          "ref": "abd890c6-9984-4dbc-85b6-7403d26014ec",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "5964840b-3dc1-47b6-be09-2c5dfc6f7e42"
        },
        "item": {
          "id": "9a12fb12-876a-40fb-8164-859698f0ba45",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "738b8ab7-2be7-44ca-a503-d84260ac2327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c46a6e1-f55a-4686-a7f6-772c64590a3e",
        "cursor": {
          "ref": "22b3104e-d5ad-45d0-af57-35af8aa2e9e8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "aa24fd7d-ef2b-41c1-b425-9ab29a555003"
        },
        "item": {
          "id": "4c46a6e1-f55a-4686-a7f6-772c64590a3e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "963c7f00-f837-4865-bc10-68834103d408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb3d234-ef56-4d4e-89e9-d4b6ff582f87",
        "cursor": {
          "ref": "8c8e5804-2611-4372-b213-aee0d890de3f",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9d9b36bd-6444-49b3-8bfd-ec025caf10d1"
        },
        "item": {
          "id": "deb3d234-ef56-4d4e-89e9-d4b6ff582f87",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8b93ba67-1e34-45a3-a224-386d3894d0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a53bc0b7-d4e0-4555-92c2-b3d57e23ed48",
        "cursor": {
          "ref": "06dc7a33-8026-4f01-94da-b7d6c2c9409f",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8c1a1299-58cb-4f01-bb3b-fad0b9926fa2"
        },
        "item": {
          "id": "a53bc0b7-d4e0-4555-92c2-b3d57e23ed48",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "53e8b5d3-be8d-4dbc-9949-7e8e8809e51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "788071c2-6b9e-4230-b340-8da81ad21589",
        "cursor": {
          "ref": "21b703d7-f54b-41fa-a2f2-a0e1a665682e",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "38960410-541a-4ce6-a4a4-c5a476a41346"
        },
        "item": {
          "id": "788071c2-6b9e-4230-b340-8da81ad21589",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1a9028f7-c4b8-4565-8958-c315a36c715d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a5fa4d-a7e5-46d3-9a03-35fca7329366",
        "cursor": {
          "ref": "5c5b33c2-304c-43a6-9fbc-2f1723dbef48",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "9eaf5818-4f4e-4aa7-acd7-ddbc8ac72ccf"
        },
        "item": {
          "id": "f1a5fa4d-a7e5-46d3-9a03-35fca7329366",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d9945133-b327-4cd3-a661-ef28e3dede47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfdf0ddb-713f-4f97-aa5e-ad6919528822",
        "cursor": {
          "ref": "75ef8e06-c6f2-4ae4-a39f-17f18f1b5c74",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f71eecef-0384-4aee-a244-910128315e9f"
        },
        "item": {
          "id": "dfdf0ddb-713f-4f97-aa5e-ad6919528822",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9d306ad0-ea63-4031-98e3-13d09b23c5e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64881cfb-5a18-4298-aa35-8b517f738709",
        "cursor": {
          "ref": "2ba0e235-7824-437a-9410-6352dbc1a6c3",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "397a8a0e-d249-4c43-9a5a-6e66d87521ee"
        },
        "item": {
          "id": "64881cfb-5a18-4298-aa35-8b517f738709",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4a8258e9-182e-4f1b-87b5-c524bf3f346f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733dcf6c-1e2d-40cd-90cf-5678fef5cef3",
        "cursor": {
          "ref": "1304d330-d6fc-4af1-8268-6ecc4d9e6a2f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a8b3378b-9aa6-495f-9604-a4b377d214d8"
        },
        "item": {
          "id": "733dcf6c-1e2d-40cd-90cf-5678fef5cef3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1192f471-2912-4d13-bba5-31566f20b305",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83345e0b-2f9d-4a28-812a-0298892abfdc",
        "cursor": {
          "ref": "fe991c28-d427-4c3b-b7cb-e710517a649c",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7dafaa55-1423-4788-98ba-7652ce47c6c0"
        },
        "item": {
          "id": "83345e0b-2f9d-4a28-812a-0298892abfdc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "04ae18f7-c8a7-4f8e-8d41-caf2b4ca9d11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9a0492-35e5-47b8-ba9c-64322c490382",
        "cursor": {
          "ref": "4c09158a-5276-4ea3-9e29-82be336c4456",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "707f2362-8255-42a3-a93b-787b71dd6690"
        },
        "item": {
          "id": "ad9a0492-35e5-47b8-ba9c-64322c490382",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "89cfe24c-328d-4a91-82ca-87f76053104a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40edc09-4c80-41fc-8db6-5be78538e444",
        "cursor": {
          "ref": "930a289c-7fff-4156-acce-518a77dd4ef1",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "fd042428-d719-44ab-bdd0-1de07522a354"
        },
        "item": {
          "id": "a40edc09-4c80-41fc-8db6-5be78538e444",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2f881e8f-9aee-4819-8443-ed90dfbef929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea9b70d-87eb-437f-b38c-b5df39f129dd",
        "cursor": {
          "ref": "d1c5e87c-2300-47f4-bfcf-f141355a20ec",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5470abd0-0600-451b-a5f1-f0852607dc95"
        },
        "item": {
          "id": "fea9b70d-87eb-437f-b38c-b5df39f129dd",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4369527c-8587-463d-8d9c-ad9df32cce37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cf46085-b100-4fc0-a13c-eb8948872581",
        "cursor": {
          "ref": "9449702b-d807-40fb-9b9c-369bc67b5718",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "19146cd8-7359-4cc7-957b-0fc8ff1ebcbe"
        },
        "item": {
          "id": "8cf46085-b100-4fc0-a13c-eb8948872581",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9fb72f09-48c7-4e77-9f82-5429a2fae77a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035e9355-d5e0-4010-ac2e-022e81d08dc9",
        "cursor": {
          "ref": "cfc68894-5a2c-4d76-94c9-abf494fbac6d",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "018f7c1d-5274-4b5e-b9fb-e2a6195ef831"
        },
        "item": {
          "id": "035e9355-d5e0-4010-ac2e-022e81d08dc9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bd25004f-4324-4141-a27e-c1ba83b5f879",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3094125e-e670-4a26-b8ca-f117710f929f",
        "cursor": {
          "ref": "66e93bfe-e528-487f-961d-0cce2fc721c4",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d5dec155-2d9f-4766-ab20-00798e380830"
        },
        "item": {
          "id": "3094125e-e670-4a26-b8ca-f117710f929f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "42f1f987-edc3-4247-ba8d-b447f54cd3ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4dd2a7-e3d1-46c6-8fd8-332abba4daf5",
        "cursor": {
          "ref": "4f90ba37-4d85-4e5f-b11f-741ec9d30016",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "082deed5-6b40-4721-9889-a6df8f377acb"
        },
        "item": {
          "id": "2c4dd2a7-e3d1-46c6-8fd8-332abba4daf5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "cf5c58ff-52d7-4148-b6f4-d554ef0cf633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f468be88-03ba-4b14-ac5b-0050ef9b02c8",
        "cursor": {
          "ref": "02c3e36c-6d0c-4135-943f-00c61ff2614f",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "b480811f-fb4a-43b5-8869-f407c0bf48ff"
        },
        "item": {
          "id": "f468be88-03ba-4b14-ac5b-0050ef9b02c8",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ffe06413-be89-43d3-924e-58ad5b4c6174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4b731f-1f46-4074-8b68-ca5ba868b9e3",
        "cursor": {
          "ref": "542e759f-4cd7-43da-ae9f-5624a224943d",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "67103e96-8d36-474d-8e83-f3d26d869c7b"
        },
        "item": {
          "id": "8a4b731f-1f46-4074-8b68-ca5ba868b9e3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7129975b-6b65-49fc-baa6-5e30b7b72f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2050ff0c-b710-4cac-b48d-57207b74837f",
        "cursor": {
          "ref": "536e420c-9a8f-4948-b122-e97cc048d124",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d0cdd2ff-11e1-4d36-ab66-1e875056f752"
        },
        "item": {
          "id": "2050ff0c-b710-4cac-b48d-57207b74837f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "f09c26a4-4b3a-4b38-99a1-ea46206a83c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3920da0a-e672-41e2-88f3-69c895421c55",
        "cursor": {
          "ref": "6aa84803-a480-462f-b16b-6211b3085b35",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2359df31-cea3-405c-9cf5-9d1c28e0e050"
        },
        "item": {
          "id": "3920da0a-e672-41e2-88f3-69c895421c55",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b25f293e-0b41-4f2e-925b-5dbd11b5570f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392e9d51-d425-4271-bf61-00f6557dd149",
        "cursor": {
          "ref": "0230ccc2-e4ab-4a7b-87fa-233a13a8880b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6864c875-f635-44f2-9fa2-fee8fa7335c0"
        },
        "item": {
          "id": "392e9d51-d425-4271-bf61-00f6557dd149",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1a006696-dd20-4fe8-91f7-aad820898c20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99df490-74e5-40c9-baac-21e43171616b",
        "cursor": {
          "ref": "2fdbd369-534a-4cfb-aed1-19bb4281b81b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f452bdb0-f3ea-46a8-bd21-b1c1158b4627"
        },
        "item": {
          "id": "b99df490-74e5-40c9-baac-21e43171616b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fbadf59f-1aaf-4bdc-8df7-d610b1bf293d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8b68b8c-8f02-4ea2-8c6d-efafa61e761d",
        "cursor": {
          "ref": "ff8d6413-4992-48ba-973e-de83382b3753",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7c8a859a-aba4-4fd1-8c8e-b982f17b9f14"
        },
        "item": {
          "id": "e8b68b8c-8f02-4ea2-8c6d-efafa61e761d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7a288ded-2c43-44f1-86a5-c6ad466921ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed733aa2-6956-4f46-bb04-21f90878d80f",
        "cursor": {
          "ref": "91c252bd-c0b3-4c75-a7ad-40319190f47d",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "5786034e-9c58-4c49-8396-2356b9c268b1"
        },
        "item": {
          "id": "ed733aa2-6956-4f46-bb04-21f90878d80f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4bbe65c6-b44c-47f9-bb83-c65193ed3491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0a556a-f187-4bf0-b6dc-c985a95485c2",
        "cursor": {
          "ref": "b3a2f4f6-e654-4747-80fd-0043e3706ae0",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c6e9ede8-5f7c-4abe-abba-c74730a9e07b"
        },
        "item": {
          "id": "aa0a556a-f187-4bf0-b6dc-c985a95485c2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e01a8dc0-32e5-41cf-ac44-d54564eb50c7",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "2247ef5d-ddb7-4b68-87cc-66b54abfa5de",
        "cursor": {
          "ref": "33e6c61c-2287-4eb1-8cb6-439bd1b30e9d",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "07f96c0d-212d-4988-8549-56f032ef9de3"
        },
        "item": {
          "id": "2247ef5d-ddb7-4b68-87cc-66b54abfa5de",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7eda1d07-a5d3-4b5c-ae8f-3d80f8cc973f",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5187360d-6910-4ce6-a70c-b082d0df7c82",
        "cursor": {
          "ref": "393d9b60-810d-4ebd-b86b-65d4b6afa7dc",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0d3edcd3-487d-4546-b911-5f7f64ba3c60"
        },
        "item": {
          "id": "5187360d-6910-4ce6-a70c-b082d0df7c82",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "48204523-da06-4663-80e3-317e10a1dc55",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "e1eee894-f9f2-4e67-b1f7-1638c628f124",
        "cursor": {
          "ref": "4c97e113-52b8-4000-8ece-5806d6a2002c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cc19b03e-5938-4fdc-822f-69f833c97534"
        },
        "item": {
          "id": "e1eee894-f9f2-4e67-b1f7-1638c628f124",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0c8a18d2-2ecf-4f54-88dc-ef433d27dee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd91f8f4-7e78-44d4-8fcf-22be55634941",
        "cursor": {
          "ref": "0b3efb27-5a1a-4f58-b69a-ef6028160cfc",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a4bd3b2a-e6bf-4b5d-9427-280b7adbfc09"
        },
        "item": {
          "id": "dd91f8f4-7e78-44d4-8fcf-22be55634941",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "66f696d7-f22f-403b-a46c-b8fdab91d90e",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "fdc55dd3-2fe9-4752-8f3f-9e72cf869819",
        "cursor": {
          "ref": "c515fc0d-3cdb-49e7-b196-a043e4648874",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "e3ceaed1-a2bc-46b3-801f-1e24a547b1a1"
        },
        "item": {
          "id": "fdc55dd3-2fe9-4752-8f3f-9e72cf869819",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "86c5d232-01b4-4bd9-80ec-c4a3e53e52cc",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2dab0a4d-00f0-4dc0-879a-da2a6eaf3010",
        "cursor": {
          "ref": "aa9fb8ab-bf2b-4167-a3bc-38d56e38accb",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "72546578-69b5-4ccc-a5b9-ba6ca7a8989f"
        },
        "item": {
          "id": "2dab0a4d-00f0-4dc0-879a-da2a6eaf3010",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "8d59c5e2-0f70-45b0-a3f9-33d5de37315e",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "5e844175-777c-4e61-b336-913cbda987e8",
        "cursor": {
          "ref": "fac769a4-802e-4beb-9fef-a0ae1fbdd193",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6b7bf33c-2055-449d-9c51-12ac560aa2fe"
        },
        "item": {
          "id": "5e844175-777c-4e61-b336-913cbda987e8",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b1454785-5dba-4f22-92a2-b92b522db23f",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "354a1aca-e283-402e-803a-f343e2ebffc0",
        "cursor": {
          "ref": "c096cfe0-c497-41bb-9201-d762674e997a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ba4731e6-a513-466a-9485-10fe253aac91"
        },
        "item": {
          "id": "354a1aca-e283-402e-803a-f343e2ebffc0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4e13600e-7422-4e6b-bb48-371486e8b97a",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "bc40de7b-f773-480e-bced-910e734bca59",
        "cursor": {
          "ref": "a2c898f6-7025-4470-a1c4-dcbe2b6007e4",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9e48802c-093a-404c-abf8-56e6d83b8c99"
        },
        "item": {
          "id": "bc40de7b-f773-480e-bced-910e734bca59",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a3afb5f4-5387-46bf-b678-521e96c2cb6c",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "9ef68d21-8a3d-4f7e-a427-aaa9a9fa6c21",
        "cursor": {
          "ref": "3df5a5ae-c782-4d90-8245-b04b610207ac",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3b3ef055-3f49-4124-91e4-bcd4121f117e"
        },
        "item": {
          "id": "9ef68d21-8a3d-4f7e-a427-aaa9a9fa6c21",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "27c69f76-ad2c-4601-9511-c19a8f154d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c534bfe3-9433-41e9-b521-46cb7613ea86",
        "cursor": {
          "ref": "d0d51bd6-bce0-494d-ae36-bf4dd1a7bc29",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f2031afa-1832-42a0-b04a-1d427a5f3865"
        },
        "item": {
          "id": "c534bfe3-9433-41e9-b521-46cb7613ea86",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "66792fd4-b77e-4a99-874e-69b037b1e58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12c34c0-909e-45ea-b4dd-3a95bdb268f1",
        "cursor": {
          "ref": "c3914347-b58d-4931-ba83-e5e672846c1b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8ff17642-d84d-4f76-9326-960ee8744e70"
        },
        "item": {
          "id": "e12c34c0-909e-45ea-b4dd-3a95bdb268f1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0795e144-14f6-4d65-a789-55c87f4a4fa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e172584b-1612-45a3-9c6c-7e3937436a17",
        "cursor": {
          "ref": "0b5139f9-28e9-447b-bbf1-39374dd46f29",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e13a46d6-2681-447d-93ab-938899816644"
        },
        "item": {
          "id": "e172584b-1612-45a3-9c6c-7e3937436a17",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "c3494df9-29a7-4aad-b885-1f191b97ad1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baee857e-07aa-48f0-b544-99c6a3aee365",
        "cursor": {
          "ref": "7dbc6564-cbfa-4e0a-b9fb-be1f15b4d8ef",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab5b769c-3021-4349-b59f-e531bcacd273"
        },
        "item": {
          "id": "baee857e-07aa-48f0-b544-99c6a3aee365",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8932f642-3bed-47b5-8a2c-1bb2e8160a75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18dc87a8-e1fc-4d67-8aab-854882ffb5d1",
        "cursor": {
          "ref": "fee5fc91-f4f2-47f9-929c-af2ff58f9797",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0bc907b0-b479-4c73-9e60-c68c33fdc97a"
        },
        "item": {
          "id": "18dc87a8-e1fc-4d67-8aab-854882ffb5d1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b170a059-49fb-4fe1-9b35-ab24beb0b1d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1ab7a7-db87-40b3-b94f-49ca9c9e8e4a",
        "cursor": {
          "ref": "8d8b9bac-cfaa-4502-b9b8-7334eb0e1369",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "b1ae04ad-1106-4e5a-8993-7eff8cd12b73"
        },
        "item": {
          "id": "2b1ab7a7-db87-40b3-b94f-49ca9c9e8e4a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f24cbfb6-a5e2-4033-944b-234acfafd983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9464c7ed-d885-46bc-98bc-1eb623c60136",
        "cursor": {
          "ref": "e25f790e-8b38-4e83-b09e-5025fd0e42d5",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4914b28f-7e8f-453c-9fc2-e89306cf237a"
        },
        "item": {
          "id": "9464c7ed-d885-46bc-98bc-1eb623c60136",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "76d6acd8-ee06-4abb-8b54-7ef38275498e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d83e8c8e-17e7-45f7-b735-d70b223d7640",
        "cursor": {
          "ref": "aa3f0364-b9f7-46af-bddf-f95dd187db67",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e3cbc25f-685e-42f4-8c81-7e8439c06e1b"
        },
        "item": {
          "id": "d83e8c8e-17e7-45f7-b735-d70b223d7640",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a94175d2-2d22-46ec-99fe-51f5f712a12c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be69e34e-add1-4d56-ab5e-f809320605c1",
        "cursor": {
          "ref": "68cac620-12b3-4382-a8d0-40c76eae7e4c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5506e645-223e-469c-a4ae-c2a42db226f6"
        },
        "item": {
          "id": "be69e34e-add1-4d56-ab5e-f809320605c1",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "10692f54-d698-4d2a-82ca-bfccb3765142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9cc632-98ab-4966-9937-59df82ff034b",
        "cursor": {
          "ref": "a46c55c0-197f-4fdf-95f9-5eafa37df724",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "afe5bd54-e241-4e93-aaab-46fd788a6479"
        },
        "item": {
          "id": "2d9cc632-98ab-4966-9937-59df82ff034b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2d34febc-5142-4e44-9217-6871ef370224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df03478-0dbf-4f5d-b22d-ea3affc7c4c3",
        "cursor": {
          "ref": "7fd71206-bfe5-42ae-bd69-cf654defaa54",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7823622d-feb9-4620-bc2c-ced4ff6b7139"
        },
        "item": {
          "id": "9df03478-0dbf-4f5d-b22d-ea3affc7c4c3",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "52337ed8-9a50-49b9-aa24-f655c36ef79c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbb99cef-389f-4346-9648-992ede13ef36",
        "cursor": {
          "ref": "15750ab9-4674-4e50-a0d2-2d6367303976",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1ff0dcbf-7f59-410f-9d86-91e81c9940cc"
        },
        "item": {
          "id": "bbb99cef-389f-4346-9648-992ede13ef36",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e9c81c81-8e6e-4020-85d8-1fe779277ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097c208b-45c1-47e6-a77b-73f45702e760",
        "cursor": {
          "ref": "2cb28bb0-a576-45a5-bf28-5547d6b47a5d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5d7d9dae-2271-447a-b4a6-c87b724fa3a4"
        },
        "item": {
          "id": "097c208b-45c1-47e6-a77b-73f45702e760",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "354dc4c2-7edd-47a0-98b4-5ef862692a6e",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "87dda1c4-9e83-4b34-878c-8cc1673930d4",
        "cursor": {
          "ref": "640321fa-3302-4066-b198-1affa5c088b3",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "764f81b8-c311-446e-90f7-afc47cf6ab27"
        },
        "item": {
          "id": "87dda1c4-9e83-4b34-878c-8cc1673930d4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4a43913e-d276-47c2-b22f-8db151abd730",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f2473b28-e57d-496b-a612-a72dcf6215a8",
        "cursor": {
          "ref": "3b47b333-8246-43a7-ad47-1aada997bcd7",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3e98b668-fa07-4be6-a573-d069b0383f17"
        },
        "item": {
          "id": "f2473b28-e57d-496b-a612-a72dcf6215a8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "728c56f3-fca2-4909-8c21-e410bd95f2dd",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "850815e8-b03f-469d-b137-c68c551886e9",
        "cursor": {
          "ref": "ee867bf4-78aa-49b4-a092-79a46d3868b8",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "08877dab-c180-4f9d-82d8-157a3c9b825d"
        },
        "item": {
          "id": "850815e8-b03f-469d-b137-c68c551886e9",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "8e493f26-d646-420d-97de-3de42f518e97",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "4ae8f9fb-9bae-470a-93b9-63248fec3c35",
        "cursor": {
          "ref": "8fae1f6c-daae-4378-9ffc-480867df32c2",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0974337c-3479-41c2-981f-a5258bfd1a1e"
        },
        "item": {
          "id": "4ae8f9fb-9bae-470a-93b9-63248fec3c35",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0548050c-247f-4c83-b75c-eb834c7dffd2",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9616c3db-8c5f-46f7-a3c9-a0df1998f200",
        "cursor": {
          "ref": "4847b7af-712d-46c2-b615-07f243c96255",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "36da87b6-20bc-408f-a48e-d7dbeffcb6b4"
        },
        "item": {
          "id": "9616c3db-8c5f-46f7-a3c9-a0df1998f200",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "271737b0-f470-468e-874d-0414b029744b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbd5a633-9846-4831-8c92-c7ac9aeab1dd",
        "cursor": {
          "ref": "ef1995b7-2d18-46b1-a54e-bd8b4ea4db3f",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "92b6a7fc-b93f-4252-bb73-4b81354b35d0"
        },
        "item": {
          "id": "bbd5a633-9846-4831-8c92-c7ac9aeab1dd",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "20ba0e78-894a-45fa-ac9e-92f1b28559f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e1c000-de23-4285-861c-10c14aacb2d2",
        "cursor": {
          "ref": "b102f51d-3270-4886-b3bf-4af3a8a36a67",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b02cb549-1bf7-41a5-891b-3c405387f91e"
        },
        "item": {
          "id": "05e1c000-de23-4285-861c-10c14aacb2d2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "24d43f20-b0eb-4745-85f0-60bd658648db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6a5910-4655-452f-9629-8d14a7611972",
        "cursor": {
          "ref": "14b4bdd4-87fc-4967-83ca-090a0f8be570",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "66437818-cff5-4aa1-9a89-ed9410e44f7e"
        },
        "item": {
          "id": "ea6a5910-4655-452f-9629-8d14a7611972",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "224eefea-ffad-480d-8d31-b80b979f214d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c4033f6-6ff8-4a82-9270-6081b3addcde",
        "cursor": {
          "ref": "478eeddf-2ab0-4d7a-9a81-a59dda66e89c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5df994c3-281e-4c04-bf7c-bcfdc423de24"
        },
        "item": {
          "id": "5c4033f6-6ff8-4a82-9270-6081b3addcde",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "59f98c25-a8eb-48ac-9c2d-bd086a8c9a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41d89762-a7dd-451e-9fcb-dd8c6ea16ce3",
        "cursor": {
          "ref": "333bc012-a719-41dd-b93b-4fb8f222a290",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "67150b67-b7f4-4d9c-93f2-19ce3fb4010a"
        },
        "item": {
          "id": "41d89762-a7dd-451e-9fcb-dd8c6ea16ce3",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d48db9c0-860b-4850-82ee-2b437b3b6d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2dd87df-774b-4bfa-a287-99ef6cce18ed",
        "cursor": {
          "ref": "0ccea9aa-b269-42d6-859e-009b445a6232",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "55dd09fd-5084-41ed-ba26-1dadc1df1046"
        },
        "item": {
          "id": "c2dd87df-774b-4bfa-a287-99ef6cce18ed",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "d2c0536b-83c5-4bc8-93be-a828297cf0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a2faac-12e9-43f6-96ce-61c4e0af869e",
        "cursor": {
          "ref": "47e79c58-c689-43a1-85c2-629ccd2a2466",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7e76588a-fde4-4420-82c7-80462dc0d653"
        },
        "item": {
          "id": "30a2faac-12e9-43f6-96ce-61c4e0af869e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "46ce706c-6def-4553-9b75-5eec636ad432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da4154e-e905-453d-b0e0-b68020985e57",
        "cursor": {
          "ref": "7de6a03e-fc72-42df-9cbc-03ea666e72fd",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "301e5ed6-0abe-4601-947e-6acef7232888"
        },
        "item": {
          "id": "5da4154e-e905-453d-b0e0-b68020985e57",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0dd229b9-4031-4948-ac1b-9cb28a524ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fec7d4-1222-487e-a231-8c32f4fa376d",
        "cursor": {
          "ref": "eab04d31-09ab-40ce-97c4-9260c5f63707",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "6b253357-2e3f-4b17-bd73-db077e4a3936"
        },
        "item": {
          "id": "57fec7d4-1222-487e-a231-8c32f4fa376d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "60e31b48-6091-4e76-a13c-71079071c27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc0c9cf-1fab-42c7-8cd4-a8157b682725",
        "cursor": {
          "ref": "49a27aad-6e82-4ef8-9596-af6b1a076b6a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "7eb41389-de46-421b-86ed-3a4ab11e151e"
        },
        "item": {
          "id": "7fc0c9cf-1fab-42c7-8cd4-a8157b682725",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8d9e48ca-2d64-45d1-8b65-37abd8c6a496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46761082-ecb0-4510-9eea-83339ef415e8",
        "cursor": {
          "ref": "4d5faeb9-c1bd-487b-a95a-ee550ea08757",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b0cff89b-a7ed-44ba-a7e8-996093599697"
        },
        "item": {
          "id": "46761082-ecb0-4510-9eea-83339ef415e8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3cef5fab-9bfd-479a-b3af-264b15886aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e072054-42e0-43ca-8683-3e2c28d93a76",
        "cursor": {
          "ref": "3a98695f-63a6-424e-a237-d8ad7f43764f",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "13f2dc3f-8249-494a-9a6e-51695389f405"
        },
        "item": {
          "id": "5e072054-42e0-43ca-8683-3e2c28d93a76",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ea0dcefc-a134-4d2e-a4f2-f6ad05b7ab6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868379ac-85b3-4327-89a4-ca587adbe98d",
        "cursor": {
          "ref": "1c98a94f-fdd0-4b7d-b2df-c7b418cda767",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "901713a5-af2a-4328-8eae-23841bcb1d57"
        },
        "item": {
          "id": "868379ac-85b3-4327-89a4-ca587adbe98d",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "49efd722-ab27-4d79-b586-04d5b87722c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95018424-980a-4056-944b-8b6c2e309b2e",
        "cursor": {
          "ref": "e71b7e86-9394-456c-bf9e-e1ebc13e3e5d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3b3dbf9a-4e72-445c-ae03-49a71d719ced"
        },
        "item": {
          "id": "95018424-980a-4056-944b-8b6c2e309b2e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6b09b3be-4857-4329-9ff0-fde8eb7dd7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e375bf-27ed-460c-a9cb-73a90bb05609",
        "cursor": {
          "ref": "0765d5da-9d5d-4cc0-91ca-5cebf60cc1f9",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b49af08f-5033-4f18-9b0a-2ffe7dd638da"
        },
        "item": {
          "id": "e9e375bf-27ed-460c-a9cb-73a90bb05609",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4781117f-0e56-494f-b7f9-171f19db6b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1a69c3-9634-48e6-9224-bc38e58eabb1",
        "cursor": {
          "ref": "d8edae97-ec8b-43d8-a3db-db2ae0d5900c",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "83d1e912-9489-4934-b7cb-64572a7284f4"
        },
        "item": {
          "id": "0c1a69c3-9634-48e6-9224-bc38e58eabb1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "73d1eca7-a2d0-4ad7-bd64-d48eabb4f1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17dcabe-7555-4f2b-ba80-57c34ba96697",
        "cursor": {
          "ref": "df163a8c-daa8-408a-8a46-262dd86d1c1c",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "5b01d1fb-8420-4b2c-afd2-e8c502eae181"
        },
        "item": {
          "id": "f17dcabe-7555-4f2b-ba80-57c34ba96697",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "080e4be9-a66f-4b1a-be9a-7ca8cbd32da2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c64e35-34df-4476-a63b-ba22349bf50b",
        "cursor": {
          "ref": "aa1ce941-2f75-4de4-9cd3-dba54b03db3a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1a48c625-48b0-4e26-b97c-eee4ba688b94"
        },
        "item": {
          "id": "d3c64e35-34df-4476-a63b-ba22349bf50b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c39bbc8c-b4a1-47c8-8dc8-165fc40ec13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9894289e-a7db-4461-a2ed-a6c42287c000",
        "cursor": {
          "ref": "2df51175-437e-43b3-beb0-65ba8054e1d3",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "3574976f-914f-4b47-93ec-6fb2e722ee18"
        },
        "item": {
          "id": "9894289e-a7db-4461-a2ed-a6c42287c000",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c910447d-d156-4259-a6c1-2ac72a360851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "184c9ea2-fe20-4bf3-9537-81b9331940b6",
        "cursor": {
          "ref": "64c9d325-3fa3-4039-8f24-a2e816fd2a43",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "41e81846-7c7c-4713-b5a6-4a1453e5b930"
        },
        "item": {
          "id": "184c9ea2-fe20-4bf3-9537-81b9331940b6",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "914ba08b-fc33-45cb-aaf1-23a210f4ffa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445e98dc-2d80-4cd6-a444-99b83bc037ab",
        "cursor": {
          "ref": "0ac0f343-13a2-421d-bc9f-427f26fa1ed7",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "508c49ed-890c-4a52-8fd5-a2f5eff33ed9"
        },
        "item": {
          "id": "445e98dc-2d80-4cd6-a444-99b83bc037ab",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "121189c0-bb0f-41c7-902f-5d9f1393e150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5107d78e-84c6-4855-a1d6-d0728d7c0221",
        "cursor": {
          "ref": "ee1174bd-fcdd-4b76-adbc-2173baee5a6e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1e69165b-e75c-4e39-98f5-8ebe0d15b26d"
        },
        "item": {
          "id": "5107d78e-84c6-4855-a1d6-d0728d7c0221",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ac298f78-e768-46d6-8027-3cf823d5c016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f1aabc-93ed-4b28-919b-0854f67bb278",
        "cursor": {
          "ref": "df037da8-3dd3-4cd9-9f10-0342eb7d8448",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "bfe6987a-5a8c-43de-ad96-fd2d3084be55"
        },
        "item": {
          "id": "16f1aabc-93ed-4b28-919b-0854f67bb278",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9e52a2ef-0930-4801-a4f7-34a4cb8a5583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d79324-3995-4407-ba3e-f2d63389e5d9",
        "cursor": {
          "ref": "5b3dc08b-86b1-42c9-8846-b5bce23c04fa",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "dc1dd41d-2f4f-40df-ba23-294f9bc996bf"
        },
        "item": {
          "id": "d0d79324-3995-4407-ba3e-f2d63389e5d9",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b0b12d02-c00b-4958-824b-9dd72676fc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9c2cd6-a94c-4a55-a61a-0feb7bfca534",
        "cursor": {
          "ref": "9ed547c7-0e42-4df4-99ce-462d70ea91bd",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "a44bae01-00cf-471f-8af6-8b87eb16c259"
        },
        "item": {
          "id": "0d9c2cd6-a94c-4a55-a61a-0feb7bfca534",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "a4afab77-225b-47a2-a541-17cc3411b203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f85ea3-6e8e-4c2c-bb89-d71f02a996a3",
        "cursor": {
          "ref": "0d8b902e-df0d-4087-9fbc-faff915a39aa",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5b91a533-e79d-4ef3-8b27-9575dcb3bd12"
        },
        "item": {
          "id": "55f85ea3-6e8e-4c2c-bb89-d71f02a996a3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "36a0c26b-aae7-472d-a671-d206fb9adf9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ef7fc58-3070-4bc8-8d6e-9e41d017a189",
        "cursor": {
          "ref": "46ab5166-d02e-4ef4-a161-7dd5a0a55fa9",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7daf6f1d-1f0c-44f0-869f-d22522bef4d1"
        },
        "item": {
          "id": "9ef7fc58-3070-4bc8-8d6e-9e41d017a189",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f430a1be-8580-4153-9ba0-337c973703c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d742667-5954-40b0-bc38-9d40ede35fe5",
        "cursor": {
          "ref": "999b2ed6-f449-472b-9c16-ef164b7eec88",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3833401a-c480-4319-8e07-b08ca6684f84"
        },
        "item": {
          "id": "7d742667-5954-40b0-bc38-9d40ede35fe5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "cc167f4f-f079-4809-99e3-06f575ea4afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1713ff2e-79ca-49b1-a83b-62e3227d0e21",
        "cursor": {
          "ref": "791f8b69-f217-4995-989a-2ca370044ff4",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "8f0b6bc0-5e5e-4d6e-8df2-9cb5d3c6a8d7"
        },
        "item": {
          "id": "1713ff2e-79ca-49b1-a83b-62e3227d0e21",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "6007d6ce-2b08-4bff-bfca-eb1303e962cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c14950f-5940-4461-bc66-7d8abc255538",
        "cursor": {
          "ref": "6cca4f29-3a66-497e-ae31-041c2c062695",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "84e85d5d-44ef-43da-b200-710044ed3aba"
        },
        "item": {
          "id": "1c14950f-5940-4461-bc66-7d8abc255538",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "2463d807-85c4-4fad-bd1d-e8c0cd75b207",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2200d9-9ce1-4560-be5e-7bb566dd0faf",
        "cursor": {
          "ref": "58c08375-809e-461d-b1d5-cdcdc5457a74",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "3cfe1597-34a3-4200-9cd3-8c0bbec160e4"
        },
        "item": {
          "id": "5e2200d9-9ce1-4560-be5e-7bb566dd0faf",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "937a517c-0661-4acb-ad3d-20ee48f5d3d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f713c8-899d-4e31-ac2e-e4c8ef77324a",
        "cursor": {
          "ref": "46481066-d8fe-4b61-a43c-5f24b71a96a3",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "0a22f90b-7488-4529-9d5d-5bf37b75ada4"
        },
        "item": {
          "id": "70f713c8-899d-4e31-ac2e-e4c8ef77324a",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4883f2ea-7770-4682-a3b7-36ab8013f0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79667a8-c832-4152-b50a-4c6021794900",
        "cursor": {
          "ref": "bac5a3f6-e70d-4508-b839-0e025056b615",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "5df02444-ec01-42f2-b100-a694b6df4063"
        },
        "item": {
          "id": "f79667a8-c832-4152-b50a-4c6021794900",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "36d89bd0-5f18-430d-8efa-5ddda08e52f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccd2e814-8760-425e-9617-c55212bde788",
        "cursor": {
          "ref": "bdee4142-1ba0-4a98-ad2d-094f1de1ebd5",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8f048743-cd80-4f81-96cc-30df33bec4bc"
        },
        "item": {
          "id": "ccd2e814-8760-425e-9617-c55212bde788",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "aad07892-4fb4-4f20-a9e0-adf89cbc09be",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9e1869-46b4-48c4-83c7-2299fd911099",
        "cursor": {
          "ref": "3f153192-bc00-4624-bb10-c4ddc5cf59dd",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "aa7604d6-1db4-4f8a-8d86-514b408b27fc"
        },
        "item": {
          "id": "2c9e1869-46b4-48c4-83c7-2299fd911099",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "88c58ab7-3503-4d2e-bba3-20ecbdec21b4",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "357f127a-129c-4d61-88c4-3d24cdc77618",
        "cursor": {
          "ref": "3b3082a2-8833-4c53-b221-1bc0b15ed1c4",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f49cd002-91ee-4d6a-9069-cd429c776db2"
        },
        "item": {
          "id": "357f127a-129c-4d61-88c4-3d24cdc77618",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7da11975-e373-4e96-9906-3c31a5027cdb",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "66559698-5e2d-424b-9bf2-b4e9d0d85bd0",
        "cursor": {
          "ref": "0f250e1c-706f-438b-8c38-704b69b26d46",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2751feaa-8c43-4b87-9f8b-5f2fe1d50cac"
        },
        "item": {
          "id": "66559698-5e2d-424b-9bf2-b4e9d0d85bd0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "6826b3f0-97fa-4fdb-a32b-addd3fc89bb5",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2834f1f6-6214-408c-a732-ea3dfc4172d1",
        "cursor": {
          "ref": "7ebd612d-4d60-4775-8ff6-60db307519e0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "dd128bf7-f2e3-4c6d-bdfc-38b04e184996"
        },
        "item": {
          "id": "2834f1f6-6214-408c-a732-ea3dfc4172d1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e392af43-3555-4fd9-9c4e-f0ffb11227fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2834f1f6-6214-408c-a732-ea3dfc4172d1",
        "cursor": {
          "ref": "7ebd612d-4d60-4775-8ff6-60db307519e0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "dd128bf7-f2e3-4c6d-bdfc-38b04e184996"
        },
        "item": {
          "id": "2834f1f6-6214-408c-a732-ea3dfc4172d1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e392af43-3555-4fd9-9c4e-f0ffb11227fd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430732f7-5d52-4ba5-bc46-399ed4578c28",
        "cursor": {
          "ref": "978957b2-6c90-46da-8669-bfc24bd948a7",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b25578a0-8349-4132-865b-067270d91fae"
        },
        "item": {
          "id": "430732f7-5d52-4ba5-bc46-399ed4578c28",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "aed08cef-3b30-4b5d-bf56-fa6b1ed5206a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb5f7b8e-d5c7-4f86-9712-2341b9794103",
        "cursor": {
          "ref": "cd7f0c30-6fe7-4d16-a1ce-78de07d97c74",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5fa48025-4de8-4af7-a5b7-76e9127b08d5"
        },
        "item": {
          "id": "eb5f7b8e-d5c7-4f86-9712-2341b9794103",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "fe633d7d-c583-4db0-84de-906240963390",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}