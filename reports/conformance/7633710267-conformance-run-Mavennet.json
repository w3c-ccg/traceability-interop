{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "4fc2b42c-4055-48d6-9066-83a96e035e3a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fd709807-4bb4-49bb-96e9-d05b06d7f1c4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb5addcd-9751-4f64-a51b-34c980c957ee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "34301dc5-193b-449b-9b92-c16d496581ca"
                }
              }
            ]
          },
          {
            "id": "1da89a9b-0521-4281-be92-c219c9d82564",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc4f569d-5927-414e-87bb-9fc73a9534a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7d68b782-4345-4994-ad3a-d1d27f341be1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "62240ccd-427b-4dc6-a62e-e9428c7f2140",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "44509239-feec-4ba5-93ae-91e8ec3f78de",
            "name": "Positive Testing",
            "item": [
              {
                "id": "06bf5068-3812-4888-a751-c59a53cf5b13",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8df2434-3f9e-4ba2-8cde-0ee620eb2475",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b66e6144-bbeb-45d1-8c97-2efb2b642eb1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f2784800-d284-48a5-b0b8-3b2ca1fb7b28",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4cc50c77-992f-4327-83c9-088149f5bde2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "454cae73-17e1-4f0f-9e03-6d52c166f50b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "385caaf1-5f1e-4a57-9a46-7b5d7feb04cd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7a707b8-a44e-4cd4-9e08-6a7bcb09de8a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "716e6151-3a1c-4798-8d87-92d07f96d925"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51de0f43-c7a2-41af-9cd1-561307eee5f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8404954e-8d56-40d0-b4ba-5fc98712a3a8"
            }
          }
        ]
      },
      {
        "id": "8de23ca0-1b9d-4537-aa42-9312983fb610",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "dbe6564b-7563-4c67-a315-b2ec475143af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8a5978c2-5d56-4775-8dbc-741e92bc8ae2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3edd05da-2e4f-463f-a6ec-fc6dbd050c89",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adee130-ca2a-4cbe-ad67-6b3a49cd0039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32590266-9369-40d2-82ab-939d8188de9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47979420-5fbf-4160-b163-fe05a4d44f20",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e2a7f9a-7171-4770-89a3-5ab6ea80ba61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff3005b3-c400-4ddd-bd2a-1da65143a325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d653c0-5345-42cd-bb3b-68469583c94b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd969cb-f859-4454-a7d7-18e4cc3cb8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5caf36f2-200d-4627-8193-9c03f8a1e68c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eec61aa1-d329-44c4-b7bd-c5a4eec4f406",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de8c9f8c-1c7f-418c-8d09-bf698fc303ab",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f997ee1-f5a8-4ef9-9aa9-e1cb43609e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b3c352f-ec91-47cf-9aea-6a45d21b20d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac4bea7-ab43-4582-91bd-ae330d5abc1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd8ca5d-6435-4b51-97a9-a33aa15e97ce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2b67c75b-ae6c-4f73-bd33-2c9e70b6e551",
            "name": "Positive Testing",
            "item": [
              {
                "id": "88dfc5e0-d8b3-464b-b300-700392a78e80",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2acc473b-1c5d-43de-9a28-cadfdfd72f87",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f7c99c56-f47f-4a80-9a66-293999ca0f99"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "285161b7-86f6-41b6-be74-a73213a75584",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8d0da899-4123-4afe-942f-7ad1dad741d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46a166bf-59d7-44cc-9092-840ff8d2b112",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c282003d-5df8-48aa-9ee6-8c66d3aea9c4"
            }
          }
        ]
      },
      {
        "id": "6c447e49-266d-4472-a95c-135efe5e3137",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f56cf42d-5e21-4f72-b394-8eeabe9ef701",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93842906-9065-416b-bb40-d8dff487d0bc",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "57adf702-36c0-4c77-8b9a-907c6fdd49b3",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a79209f-d62c-4776-af84-b14e7253be4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2d7750e-4cfe-4764-aefa-63dc9d6687aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6d281d-ed29-4aa4-b5b5-a2bd75029c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5616c68-f644-4df6-aab2-d71002f8a56e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0b4bf1-bc05-49ee-88ad-d8db16fcad95",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cc0f76-6372-4bf2-be85-22bbe09894f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064c3572-b6b7-4649-8735-18221d5e298d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6196c033-41c5-40e6-aec0-2f414a49cb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8bbe0910-6329-4035-b5da-5301790efed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f2f840-9a06-47ac-915b-4ae33519df34",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a18e1f4-6cdd-4ffc-b0b6-3ec9fd556371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038079b6-bb77-4bcd-accd-7ce3d331cec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b186667-2fd6-4ed1-a00f-5cb3e24f118e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8126202-0af0-4030-badc-4db95bb42018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72865a8-418e-49d6-a0ae-fcc614a22e32",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b21ae7-76e3-407a-ad90-61ba3ca945cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c16040c7-9f9e-4a72-9d53-e473b3eefa04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f2c402-aedb-453f-b87b-693ddf36a27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1b6486b-5e35-4953-a34e-469a185b5fc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f5378a-fa38-4ece-8939-340007b16ff6",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2631e50d-4ec8-4f95-9d22-63d534601dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932625d4-122b-4c24-a6b0-98651f3ffce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea1ccf9e-ff12-4640-b729-552e5b0599b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fd69cdc-ae1b-4295-8015-c8fc71f28825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0587ecb-7f5f-4bfc-a3c1-ffa1aaeb3066",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2dfe9e-e7c9-4952-b475-299d1b4d52b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "955f4da2-b9f5-4e96-a382-e8dc0410fa77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4fd2d8-41f5-46a5-a823-9f94538dc3d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6149e5e4-c02f-450a-9e8e-e5a702520383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b53f48e-d44c-4ca3-9681-81526a9eb9b2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a7d1126-be07-493e-9c5f-95e797056ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fac0a3f-8ba1-4428-b55c-80f7f94e431d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7262c5-8dd0-47bd-88e6-3ec86cfdff65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b2b1936-1705-4097-8fbd-3a2f3aa2de47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d601b83d-8569-43fe-846e-cfca98e979b9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b88d1da-6357-462e-b3a8-171e7eb0fdf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f98ec34-fe88-46b1-a5cd-810afd3eabbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a9553e-dfea-4712-8e3c-7d033f2218d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4baadf41-8eca-470f-9c17-057b885ece9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff27621a-9100-4d53-b725-b71dc8141220",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55e0a79-19cc-418f-8cc9-952e02c21819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cec0a291-20b4-4bd0-9625-0182f85c8634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "548f96c6-a36c-4c1e-aae5-5854d58ac8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f667b10-8a53-474a-96c7-84be852fcd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7215f0cd-eacf-4b08-a391-616eb7b2be87",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d793a0d4-2714-4b97-b3f5-b0b091352c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2013bbda-dfcf-4ed0-87c4-2379204f153b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5577a4-eb67-41f3-aea9-f9a28768bd80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89965068-c613-4da7-a37b-b41a101bcc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0110664b-f6f1-42b9-824a-17ecbf8a2a62",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b00627b2-9e81-4063-848c-17b1a03d1f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfe3a380-b947-42be-badf-3aa197ef1496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbcccbba-982b-486c-9da8-b144dc80aef6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf025866-1d83-4e3a-a0b4-3a528529e1d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d4d2d1a-36ec-4dbf-a96c-73fe96055a31",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e61ffe-a16f-4abc-8cad-e08c71008262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f85e1c6-6547-4ef9-98e3-93788dcf3ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167cba24-2c17-4d71-b73e-3c262fa62b2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfc118b3-4fc8-4d12-9234-04d165941394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61900be8-499b-4b90-9e10-2f142bc53b9e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "503ec470-2b33-453e-84da-8ecfda0a7b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9664878f-73da-4f32-a942-e28dea08aabb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06336fae-b480-4315-80eb-f30cabef65ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69392130-6277-4d5b-9805-80dadaf391a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988d490c-5b98-413a-9685-1042c44af09d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f52558f-08bd-42df-a850-5a52e3045a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad48c51-8dd7-4dc0-895c-9f1b57c2b186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e3c733-3721-4952-bc5d-749dfe28ba94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c5e0d262-de49-4289-ab76-f65c8fe5b63a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08fe507-5fac-44be-8158-1e835159ab6d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253d8237-a67c-447e-90e4-90d7a995e5a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85c8da2c-ad8f-4241-a4d7-13d9f8558aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9fe408-1fe9-4503-8039-519e39bac4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30f96868-bfb3-4a53-8cf3-b185426bd469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c805fc9-9ace-4e6d-9d08-5b7a125cab52",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088db05a-bdaf-44ff-8532-a47e195e4621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ffee29b-fa61-428d-967a-0526ff1f6317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2661b888-f4c1-46d4-9701-40642029d2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e46623ff-5c60-416d-bc6b-8f738618797f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3da89961-457a-4ec2-b898-1a0a03569244",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "401c05bf-80b0-4541-8695-bc62b5987646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15165add-6b59-430a-b63a-2844a4da3c97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cf6bc2-950b-46a7-8dae-83fd653f170e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd8ecab2-6fb5-4c3b-b401-8b33bcf655d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5732ea3-5b01-48bd-b155-6be6136495db",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a3788d-c66b-47d5-9284-82b9d54b09fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df82577-34a9-4bf5-b67c-41be8c5d21c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce95b4d7-63e9-4b29-b917-57d37e6a41a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc17a372-788f-46eb-94b0-bb2807488e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898cde47-6395-470c-a006-594561c3a690",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91c0c518-a1b8-4451-bbe1-b150e98876ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80506669-f99a-4e7f-af1b-2cc68b9a0754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efe933c-ed91-4f18-8e10-b0c76a9d3229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60becf11-c4f0-4d7e-b8ca-b86f6c3e4d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a63a241f-35e1-4e55-9496-e952ff7d7bc5",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5278e755-1222-44ce-b962-aec189f41036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "098e17bb-8827-4ff4-b847-e230462bf03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faf2f42-dbad-4248-bb55-d2b1af054f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d11dc56f-3ed6-407c-9b81-804f784fcd6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab854604-aaef-48cb-bde1-a6d73f785398",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4926c6-9d64-4803-8050-a6b68bcba79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b77ca7aa-8c09-4ec7-8fd2-23d763ed38ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2efad79-7e9f-4fe7-815a-da4a5614c7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e463e39-9eba-4f49-88b6-d5ad14493a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00a1fce-67e6-4cad-b653-e166ab1c7dc0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74ce2204-9642-49d5-92c6-e0873c27a852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7f2182-5683-49a7-9a85-88ea19f8a0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b21cd1b0-bd6b-47a0-99df-543600744698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57779154-9b90-4d24-8594-40826a11604f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c743a2fa-621e-4790-8b5e-519d6b323a73",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79e1dcc-cd3f-452c-9619-a182be874a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e50291b-9f80-4459-a050-fdacd4896408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ceca30a-a1e8-4ad8-9c66-efb7cc21d9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71724819-a608-4798-b726-3479d764f673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec2a6f3-006b-4a5c-b4c5-3608b3300364",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30eaf6ed-a4b7-411d-95e1-34b8fb1c8f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d8843d0-c27c-4994-8159-57d737d69b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b52253a-d041-4570-a01c-b39dbf19f887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7c53563-1d82-4c47-9f62-2994a33ff90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f5af04-1da2-4ba3-aa79-02dd10ae0cb5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78e7c298-c910-491a-af76-759b9a041355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f056bb7-5998-4e9e-812e-1086372fa337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8faae254-d319-4d16-9dde-8db1a0ccbc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "613783c9-5f42-4ed0-9542-f16e4a185b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e5f610-10dc-4a5b-98a6-a6cb1d3122f8",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad782d5-36b4-48ad-b1cd-0c97b90de395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd07f73e-c7b6-4ac9-99b7-4e31fb8270f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a19ff0-9961-4f99-8348-04faad0cd8d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a08ad03e-5170-4df5-a588-2b0ca9008227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb9a502-6286-4067-a265-a2b4b54c8912",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12cffdf7-cba8-45ce-b712-8d12f9a5f144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87db4709-6f13-490a-9427-f0bb5cb386d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6166969-56a6-4951-8360-dfa86f2b7a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c983d04-db5a-45c2-96be-a5130e84c7ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73d4fb4-d3f7-4f43-baae-34554699a4d6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaf3a2d-aa7c-46d8-83fd-4b655f849307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7841b92-7e6a-473f-b140-7927d718b248"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5eb9a6-ba89-495a-8a87-4536b7410c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b14afa2-ed8b-4ddd-a7c5-c15de3db819b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1faecf39-0735-4374-ad73-6a1843b1b051",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b4544f2-8bfc-4b02-8087-c90f792d7c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a455bbd8-0e92-44f7-862c-1281d3006f18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56dc384e-1042-4b24-96d0-7e1a665d53f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f6ebe0-9126-42c5-b659-fe0730419597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620afbb4-59da-464b-9c9c-57e3b3566fbd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c01fb971-10aa-449a-8d3d-458a79e4facb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb34e6a-152c-49b5-9fd2-918a9846a4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd47bf2-9da8-4d58-8c9b-62b2d5201c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d55f7f6-62c0-47cd-af8f-bf4d3faf7676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d26bec6d-c15c-4e32-a886-fda1d0ccb0d6",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9898b6f6-9b4d-4499-8f59-a2683e0958a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6988e28-f2d9-4893-83b9-373b386d225a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7937d574-b878-4864-ab85-480c6dc9a3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9422ee34-7f1d-4a9b-8fd1-d7e551742a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a4c65c-05c8-4f7c-b797-073985ba89d1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4c17f6-e69b-46d2-bd82-7f9a8a82537e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db1969ea-cc26-4424-a200-1f6e4a3b1a07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64cd1f6b-25c7-4e6c-b63d-20a6b9cb16d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fad1d21e-c067-4aa7-9bcd-c9c821c1360c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7550f66-5ab4-451e-868d-bb55666acd4b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "519fa39e-286d-470a-b06d-78d7f55470fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53b56236-fb04-4be3-832b-157c89d1022d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7443f03b-eaf2-4846-a9c2-72548650ead5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cb200a-4145-4eb2-8ace-769205529b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab68cee-1be1-4299-a70e-9fb3ebd48741",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2883f3c-7cdf-459f-a0be-05cf8413dff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5652e9f-df88-4eef-8e35-bd738091e195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e9a0ea9-5a1c-4b2a-ad18-79552e28db9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce428b1-176c-41d5-8611-90b20fb7da26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6256d4d6-f0e4-42b5-884d-491d7b014996",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d540e33d-0a18-49dc-a2da-f7a63fee38f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a0e8707-eb61-4799-a68e-1308290127cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8759f87e-3f22-4e75-a526-62328a578731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "396d29d2-230d-466f-b940-abd6008fd0ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82559c5e-7c24-459f-a480-5717591011d0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88453b7-0a80-4852-a48c-ac8e73cb48d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c91e2619-5eeb-4274-bbb1-dd5be6ed0cdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92298cb-cd54-4a40-bb7d-410d044f8898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c2ed9b7-5324-4b59-9dd2-4f24ee9f3978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c957ab76-004d-438c-8aa2-fa01f0326016",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c797364-feb6-4892-b114-7b63fee462a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f41d1515-6bf3-46cb-8b19-77339e19c8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10690590-8273-44b1-99b9-d50008f3e0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "667b8f8c-9f55-407d-a2e4-4d50cce176bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10791715-ee98-431d-8bb2-3928ef177897",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c58ffd-dbeb-4b1e-9399-1612c638e016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "880b07b7-659f-444b-86ec-1919dbec6baa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da6cebc-8061-4506-87c7-c36b004534f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e35e5f8-4295-48d7-ba2f-09c1cf4fc2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aeaab5f-4cb7-449e-acc8-02dd3c1da4b4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6768d6bf-6477-49de-ad94-9a549f2b260d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d56d60-8613-42db-809b-8bd4b0dd294c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a8520ae-25ec-45e1-8c5a-4cffdb85b595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "846777e9-a825-47f6-a2c0-0a631065508d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e531ae-d544-413a-baa3-20667e59e47e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e1cc47b-a2b6-478e-a30b-4dedb53e4930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e404f201-1a63-479a-ad2f-8e1e66630262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "574fef50-67d6-4470-8e35-ae20ccb58c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "25db42ca-577a-48a9-b105-fa12f90285b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "209a30bf-8fc9-45a0-b0bd-6a499e840955",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e6621a-6d3b-4005-a106-63ab00882a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbbeece3-66c0-41ce-8577-07d7f4af5d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83be8b0-f1b8-4125-931d-1349ed470cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "718f2dbb-1e72-4529-a72e-6cdad50c6399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a10a6e-4423-45f6-8345-7ff125355744",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a07eb1b3-b2ce-4ac1-8e65-52450c8b8d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb40aee-3ac0-46df-b543-7b02877d76e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6809ca7-2280-406d-8bf4-8ccc6df01057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c6f822-af35-46fa-8eb9-c91df0bfbb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2d8c3a-4135-43e2-96ae-2f04b1cd992a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c44b359-760a-409c-b106-0157353ae465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a76ac46a-81ed-49f4-a2f0-9c5f8c132f8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbe5142-383c-4488-83eb-d5d1de64e4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "218e8ab0-653d-4777-ac6e-f2b7eb36f83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad7b875-94b7-43fd-b2bf-399ed7368031",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2cae251-d9f5-4688-8766-44ba683527a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59407099-62e1-4a84-835b-b80fa1ff3e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6d597f-130c-4a4f-9153-10769af1531a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9380bd72-864a-465f-941c-74c92244f5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "119cd0b5-9494-47cf-93fe-045f6d180245",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ae1eee8-d333-43ae-80fd-1888be817041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dd6eef-21ad-4d4c-8310-7e1466668035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cb4e34-7d47-4602-918b-5048791e9231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec462c2f-0388-45df-8c38-d8893da5c67f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35e05806-73a3-4ad6-8f97-5e7f727dffc7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0affb76-57fc-4688-acca-7f7212a6d6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea29dbb-8139-4752-bb11-aaefd111f684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1e18e28-8e6b-4b65-953b-2d406332a808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1d2d56-30a9-4518-8982-d4e0375f2c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40439d05-05c8-4db2-8557-599971991000",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e22143-e818-42a2-9bf1-e529a87b8173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e884fcd-951b-4ed9-98c5-83e3fc2d5c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8c7c05-bfc2-479c-ad28-47781ee4320c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2fbb89d-996d-487d-b38d-e1289110b881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ecbf1f-3877-450b-89ac-576972e5fbc3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2af83e-2dcb-434b-b7dc-8d3b59ff253c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a9d5c33-bb63-4f8c-aab5-da30241f2d6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "084fbbc8-3df9-48b1-9318-cd9d29ca0d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc53ad5-9346-4df5-b6d3-fea108c9c34e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d62ede3-bd53-43ba-a72e-d5692e12e9d4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "487b7a8b-029d-4d59-a184-c9d41e15d752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f2cc02-ada1-4a8f-a9a3-5b192a9d3f6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bff5198f-e994-4b9e-aaa0-2de24f8e9bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "49384c1a-ba81-4256-9785-f094d794b453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01942c1f-12f5-43be-a3bc-8500eeb58885",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "278548d8-bdc4-4cfd-bfb6-b248c2e58448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e67c96a-f2d6-4d48-9c6e-fe14325c8acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5ee09ee-4f81-48cc-b05b-9b9de19cee07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b08d2c83-40b9-44e1-9786-4090dc522ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483b4ff8-484d-4866-a58b-12b3024bcc2c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "701d25d8-9da5-47a6-be4a-a1f8bbd3cb28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ac9bbd-02ad-4f69-8aec-0507120933ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d272f395-e886-417c-828b-f826b5c02756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9483a45-a2e4-4c3d-9575-3100da4e2be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5931558c-ac48-405e-be00-cdddb28a740e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a984919b-000c-472e-b1b0-67a1f2cc3f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5352b5a9-c6ea-4e90-9c51-52282f9faada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fb85ad-c80f-472b-acc1-dc143295894d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd270e81-9b5a-47d0-b20d-21ebaa7d0d8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b7c007-0235-4f9f-a5a9-b593a7c0bcc9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e911fefd-111a-406e-8345-36648e4b32a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc0f3cc-b58b-46e0-bccf-a9ebc1950fdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3b978b-7d26-4fb9-88d1-4784d163a31b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f25aebb-f5cb-4d0a-9ca0-4995cc48add2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d13f3fd-e34f-4bf0-8ff1-e4fa492298e5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "068e892a-4477-4979-8300-cbe105aca755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b018047c-864f-4950-9d1b-e2634fec6f9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3993ff8d-0ad3-472f-83e5-954b12a2847d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80a008ba-4522-460e-9f53-634f27f162c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "884377fd-c8ed-4fe2-9dbb-c5d0d63e1225",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "defa2cb1-e450-4c0e-8ae2-1b1863a7ed8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2b98ef-c640-4034-addc-c9feb82547a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3f66b4-1814-43ce-88ba-0b3710f44049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd61f680-b4f1-4b77-bbc4-34c78f91acea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f406dc5b-531a-4034-b660-1f772659c6cf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d2c8fb-ea11-4e68-8d39-b276fd7f78af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3a7eb15-297c-434a-9761-11512d879808"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e4cc45-6f4d-4a68-aa96-a3839c32fe7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2b849e9a-876a-46f0-bda9-cc19167aa0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca39d39f-8af0-46f0-a3e5-116a5d19e601",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cfee68-359e-4f4c-a27f-59cd982d2686",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56fba29b-78ce-4e6f-a1d9-9b70c1242177"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc7313a-8a0f-4751-9f33-36407e425581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d907715a-68b5-4be5-96b0-e7fe06d83184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ad2431-03e6-4a30-8bb5-998536109ad0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c28213-b82e-4d86-b39f-54f6b26bc2df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb99acc-e68e-4360-a7f2-ad5c70b60a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163c25cc-75ea-4964-926b-10845624bfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "29337f45-2aee-49a4-b1c3-cbdfdee326e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96588078-1167-4606-a5ca-459382c5d369",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23728d72-5272-4f02-8e5a-2ac8eeb8fae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9bf5c1-c111-48a1-a8ea-1705261fac7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7e5a550-04d0-43b5-ae21-ec27067d84db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "710784b7-b63b-49ba-bddf-d4b22186d0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fa1ae0d-4445-4c37-8d62-6f0ab1fbbb92",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b70dab6-dc25-42b6-b866-a2af26df603f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304d63d6-d98f-458f-bfd8-3691c0e2bf12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d15fab0-3eb3-4070-8105-4e8768cea276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d028e22-5413-4f9b-a80d-22d153d33a4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7178ff-a044-4e5e-b3f1-be41020d5ceb",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819927a1-9ce1-4ef2-975a-d942612c9cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45c0b3a-f388-4f20-b3eb-433cc84bb1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b22afee-8fe3-458e-8158-576446db5df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b6bd78f-b2b6-4495-9167-962574c82e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e958de7-6ada-491c-b059-e82e2f08cb33",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696c6d4d-8089-423d-a4d3-fe6e2f6e1d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fa7705e-e202-41ae-959c-270def0d539e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d053479c-2594-4a3a-8789-288c25631147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "48e7553b-368a-4831-9cfd-935fcb3456ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a9d409f-f0d5-4696-bbe8-2b96dc7353ab",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d5b6f3-9987-4893-9ace-d002c392f7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af33d8b1-2439-4146-be1a-23783af18b03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aeca06d-5994-4896-8ce5-6ab91f73a622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "475704ef-b1cb-46fb-bb2b-d5974fbd2d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a1bc04-3598-4a4f-aa35-310f10d11f7e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4172d94-0239-4f9e-adf4-f4992f36de80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51826708-1210-4b7e-a61f-bb36ed5a0ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66db60b-0599-4e3f-ac99-637366bfeb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b50fe39-6ee4-4701-9a4b-2a04f292615f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b615265-e83a-4da9-97d7-1867f5a574aa",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8fc29df-c3a3-43d3-b56d-badb27d2dbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b912b60-def3-48e3-ad88-e155dc602012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed58c687-449f-4f92-80e4-018c30b287f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89e2c02d-02df-4d64-8ddb-1657e10fa40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774cc23e-f3bf-4210-8b22-db72ad42424f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aab027ad-7ee4-44c3-914f-c1d8f26518d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd739205-d143-44b7-bec7-206e8ef14391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba57684b-a83f-40be-af32-34b692c4d935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "346502d1-d72e-4035-af89-95e4a3007650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c7d173-5b3d-49bd-9d6b-f17fbf1e819c",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad4922e6-f9df-4a54-b3b6-86a914b44652",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fe74b2-9d66-413c-b31a-ce061956ea27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0d64aed-07c4-4fa3-93d0-8bcfec32804d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "178b78d9-e488-4aa8-9228-1918127891b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2c3d8c2-79c5-4438-8f2e-0ae0d04c2f69",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f053b3f-0287-483a-9607-411de50bb635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1306a127-532b-428d-a1c8-1ed8fce8e708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a352b6cb-9c68-4c5f-b1dd-98988b78c5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3495be-99a0-4643-b402-e33301ffc2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6c5eed-6cbc-4e7c-b701-dfabc614adc0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406a0662-7ce6-4a74-81cf-a132ca73df95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f424038-6b5b-446e-9181-516fe7bce1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b884df7-c1f6-406e-923a-383d2d6cbbac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6e382f-12c7-497a-8f43-b3e88783968c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed72619-dc43-4215-9e14-e11ec31605b8",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01ff5f70-a48f-4c5d-a167-ed19a2df3fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bee309b-e6f4-4056-80d9-c0e08954ee1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08796d74-6165-49bb-8e67-65ebdf17fc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67e674f3-0ed9-44cb-bb3c-9a15142d10bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac38a6c-c5f8-47a3-8e7a-5e2240c4960f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68caaef8-0a76-4f45-b716-d1c186394d17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38cd9d7-4843-4044-a6ca-0522388b8d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c36c304f-26e7-4e1c-b1e0-e170696608be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee8a0f3-0647-4554-ab2f-ad22ee0c726d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad34e15-1dc9-4a96-a1be-1924c49a117c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66e97b9-d33a-4f6f-ba17-aab153032aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "373fecd0-b4b5-48fe-9610-2e06ce3b63db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f54ff3-1ad8-4c4e-b4e3-cdb1da140579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd04461-5baa-4d56-9634-ccf0c634d4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c689cb8-8b1d-4ec0-ba43-28b2134041d5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02223c8-e18d-41c8-af61-3d623af18ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13221ac5-4e39-48f2-a6f8-1777a460badf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a2c52b0-2732-43b8-b79f-d46b20834ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4624e0f1-c913-46fc-89a9-10333668af9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4f7ef56-f6da-4d76-924e-67c7041d3fd2",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8639a79e-b0b5-44ea-94e1-f8488f5b0e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98b3137a-d43c-495d-9437-95ba569487a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12b7995a-6e19-4093-869b-47a0e16b9be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9d7f6abd-1ec0-42bf-a4e5-56dd165e911c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc3e006-d074-4a3b-a2a1-8b9ec5bf75e2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da20a8e5-fbe7-4266-a436-e373e8855b9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1fecd62-4742-430a-a003-af48a48eed34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fbbe835-7d70-41c5-9182-1c1d70478c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "553c5224-3925-4210-9535-662005fb3343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03989be5-6936-4b4f-bada-38eb1f563891",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eec5b75d-20a1-4dae-a43f-f73aff7cc8ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49cc7993-a5d1-4802-a196-93f96b0976e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291a977e-b30e-4c7a-868c-3f51c84c502e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70426469-8876-4ae4-82be-7703150c1cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb9c132-a940-4a16-b856-82fa83624161",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bb394ba-953a-40f0-bf6f-43d042a98227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2caab6-48cf-4e43-b010-f2c32fdc8292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd630cc5-c54d-4e2a-8b8f-3a1d631f9743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d853009-6707-4a96-a42d-2df9c741d947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a62712-c46b-48cf-99a5-eff5c971d0b9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9219510-d7ad-45c5-923e-90747b3d1043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdce1fa2-be60-4441-b3d7-c0d844a7d276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd6c8e6-f9c7-4e4c-a1b5-da4cd155f2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b72d68f-e7cf-4809-8696-c84ee43ca153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6259664e-1981-415e-a4e6-13e803080ad8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b991111-ae67-4a41-a76a-db797260a0a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d89e0b8-f739-4d27-aa25-f601e86c495f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c903f6a-adb3-4b12-80fd-4e1a14b231af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecbb20f4-cd46-494c-bcf7-33cd0b235656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c6ecd7-6f44-4b02-8df6-a15fb933d0bd",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac70cf3-5ef2-4fb5-9bd7-1fc95cc2a5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32c27df-a677-49e2-b333-5875b462168d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4e0053-9a78-4c14-8124-da7e72128609",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f744af7-ad53-43b5-a678-51829272afc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f27e295-2197-4b19-9fb6-8e39bc0d6d43",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe07a077-0213-4064-80bc-eea98f2b3ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac6ff038-fa8a-41da-8a58-472b39c5ad0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c71f6a-e72a-4357-a0e3-212b3c9379c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "62581f8e-d762-450c-8604-46ad3ab0c8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4439b747-7ab1-4f0e-b010-c1e1a621c3f3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17854c6f-043b-44c3-86f9-ff82821b4220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac8de48-988f-4041-946c-727f75301b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68721fee-03f8-4d14-83d9-cc28e1fc5ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be6d1e58-6e42-43de-bedc-084b88437322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c1ef895-7ff7-45d8-83c2-a911c36d1d87",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13aeb599-4dfa-483c-9e5f-00757d6752ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be8881ce-6321-4ee8-8f2c-21b9025cc15d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255eb629-6948-43ee-9b68-93507195c65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8090701b-6bf8-493e-a3ea-78d81290d0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b26a7b-1de0-4aa1-954e-e5aa74eb82b9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4a80d25-fce3-4dfa-aa22-c06ef4fb7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e84399-189c-4d36-aab1-3d8e6c6c28f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aaff3dc-a852-4c9b-ab59-6cfccfef6ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f40a44ff-563e-4419-a77f-e44372bf03ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31833081-87a1-4189-8308-21fc6dc17544",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd81197-658d-4528-aa2f-e162248be794",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae8c5e8-02f5-4711-9e55-7102d58941f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ec40e9-e96d-4fd3-970b-5c8e83bd40a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7db9ad7f-88a4-4243-88bf-8a72c7b33f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194c85c3-fa4f-4ff6-a2b3-4381ab03a933",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7878d71-f410-45f2-8f1a-f389fbe082ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f70ce446-0823-45f3-8330-beb641145fd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62833cae-7794-426d-bb78-8a7102678644",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a59d7e-e58c-48d4-847a-0646b2ed81ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee060cd3-767c-4480-b9a2-1aba4775e225",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4288bd04-2788-485c-bcfc-5a8317ce82cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ee1bcf-904c-469b-9601-93a3fec66ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18f92347-51f5-4d63-9e55-f0cfddaf05f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cea5648b-752e-498f-b771-713a3e542938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c7278d3-65b9-4bb3-8f56-eb32e520be39",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dac2557-5de2-4e6a-af7e-4feafeb056e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "556c89d4-fcab-41bf-9e48-bf171f50d39b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586737ec-25e5-43b5-9e7e-de302ca19d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d29d319-2ff5-4dd0-ae1f-7736ad7cb65f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1f1fbaa-5cbf-46e9-9cc9-e3d19981657f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca4514e-baaa-4841-bd64-bdd266fc02a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d104ec08-2b71-450e-83ca-e21c494a3d14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "433b1958-a2af-4643-8654-2793d0d93aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7aaf8eba-d57c-4d4e-ad77-48f40b174690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd0ddb6-a6a6-4347-9410-44f64f70304d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364dd3a6-4f9a-491d-bac9-66b6ff3cefbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d383d3d9-dc79-4513-a57c-776a6b225baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66070fdc-eda8-4403-8f7d-405d4dff0259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a172b14-7e06-4aa0-b0d2-87dbc22e0e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45bf7feb-7bd3-4dcc-8e7e-022ca45e578e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a67cd5-bef9-49ff-abe8-b54ce01cff13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0258b88a-977c-4d51-9e73-007eafd9de75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313d7d1c-ed18-4703-a81f-e0c51317fabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4379d594-6a09-481e-b948-9a50f5e34763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8388d914-25c0-4acb-84c0-abd278efeca6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e26b6af-c81e-4e13-8ae4-66c607bae9b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1bc795de-7160-4f44-a8c1-9b3ab55e5a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0eca95-eeaf-4049-b5f3-01c2791d1672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c275c851-31e6-47a9-9f6f-e832e6977179"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a06bbf7-9b13-456a-9d5a-0edb6bc72832",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90eb966a-e8e8-49e4-9bf3-80d9e0d8201e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44800b11-7cf3-40c5-98e5-79ffb1fb9682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e9d4108-f7d2-4bb1-ac45-37754afce223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30348be-3dd0-448c-8edb-05bfcd8b01ad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bcaf559b-60e4-480b-a0c7-b36a949ea07b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e1b303a-8bd2-40a0-a239-ca36e24b7097",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e4f945d7-ba3f-4790-8306-179a08e84175"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d578a86c-d4b8-457c-95b2-8d53af1adf72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1fceb684-1758-4d23-8c15-8dca8e9c570e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14ffa6f0-b3fb-4a95-bffa-f3a441e33e47",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d4b66c1a-7d37-4349-81e5-9d7a444a3fc4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0c5ae08f-4915-457f-9a13-88b2cf583b6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "16608ac6-5ff0-4110-9902-835ad1501cd9"
                }
              }
            ]
          },
          {
            "id": "8ec895d6-bcc1-45b0-b1d5-3077489afad8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f8d6f33e-b221-4623-bcd3-a7f86d36f4df",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "5e864151-3249-4cae-ba66-cf795dc36fa0",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62abaa8-c5f7-4ef2-aae3-c6ef0158957c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f492cb67-963b-4aa1-b014-5168c0c8d91f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6b7557-4a59-4631-a039-1320a4479376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6f7f09-67f4-4196-a0f0-6e0cedd344b8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f212d8cb-2e1e-408f-bce9-0e499f624c11",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9af35868-683f-47d4-98e3-38cdb02c633c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5fbf0f08-3a73-4f51-9890-ce2f3959eda5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0b88eda-ea98-45c3-8b7c-d4905e793935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9e313e4-3f33-411b-8676-ad646ca47f09"
                    }
                  }
                ]
              },
              {
                "id": "e4fb6670-7f7f-4073-92d5-769d5b643921",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e15a7adf-1f83-413f-b967-21405fef837a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6918a7eb-26ab-4993-a373-66e984e45f69"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "785f18e1-ca30-4a8c-b89a-0e005e5893b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e78f6f7f-2443-4ac1-b7ce-b289b7143fe8"
                    }
                  }
                ]
              },
              {
                "id": "a8f9db38-b695-448c-bc7e-b228e11b56f1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6554f09-cd48-41cd-9a83-740206746290",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "958aa909-68ca-4a29-807b-71eb09fcba29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2a5cf6c2-3a93-4312-a792-729a21167c7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5f0c3978-466c-4d10-bee9-853ea691a82b"
                    }
                  }
                ]
              },
              {
                "id": "06bd032f-89e1-411d-a291-a51bc26d2d01",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d604635f-fd42-4bc1-80d6-8c1bf365db1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4222c75c-5932-437f-b396-c3f3ce50dcf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2106b89-969d-435b-b3a5-4d5fcdf5c6e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d43020a0-d083-4220-bf4a-fef195422ca2"
                    }
                  }
                ]
              },
              {
                "id": "a1776180-2438-447f-8229-59b7a347dfd1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59692b5e-3493-4691-b68c-d8eac979820d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c92466e9-f946-414a-aacf-974f25cecd02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bcff9ed-79d1-44d8-8c7d-3a421769ee4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "04762d39-addf-4c37-9612-9a334c3fbf6e"
                    }
                  }
                ]
              },
              {
                "id": "70937abe-de72-48dd-a39a-e4320de54621",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77814f81-323c-4937-9e55-0461220ae0ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "94a6d921-9860-4ea0-80e4-3b59f4f1f5e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97a2e9ea-a8d4-4b16-b2c6-637c88e5f671",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8dc714c5-6c2d-4b33-80d2-92d0995779da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6175ee00-dcb0-4e48-8436-7d4e2e1b7f72",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93c6b5a0-ed76-4aaa-81a0-35aa14dd56e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "283a0ad5-14fb-48e7-93a4-66f3bd3352bf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a81f2ee5-55bb-4d98-b457-91e2bffe0bd3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bfa657f5-546e-4d43-9d19-cd93a1145fbd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "3c304779-fcdc-4113-b298-e3db60baa8c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2c176de-73fb-4994-a153-fba59941a5b2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a03871b5-66e7-42e5-b30f-659f6c82d28f"
            }
          }
        ]
      },
      {
        "id": "986b9fb5-ce66-43b4-b29d-ce2df9f0e2a8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "b333737e-1e3a-473c-9101-1241caaf7f3b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd00f2e8-0fa5-4069-8586-17d858b41b82",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ba4488ca-489e-4db8-8346-e833b1a87292",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "498c4988-3b75-4fd8-ad03-2ab72e711349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a113da4-9651-4ae1-bd3f-f9812da1c95b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9713fd-c770-4052-9ba2-bc2ca665cde3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce0a0493-8bfa-4d88-99e8-43ce63bed0e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b575d0e1-d00c-42e5-b277-26ccd8480eec",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a25d95-8da0-4545-801e-bee1a9bfba87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787a32c4-e7e5-43a5-a188-e7a8476a56a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964e25ae-1ef6-4d1e-99c6-366392c9179e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca20fce3-5a51-4e20-ba3d-ba3d6a613ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8a7e9a-c300-4020-97ee-2d4c3aa6a7e3",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f87771-4631-4d69-b688-2a943ca2d062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a9beb37-d259-4740-a6e9-ad3a92e6fc64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe4f8ebb-959e-4ebf-9132-da66a12b8f6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f484bc81-2ffb-41ca-a76e-74bec0f0b279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48880c40-9bab-410c-b786-369d3c6bdf8f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23886678-793e-40b6-b2e9-bb1e728887ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc1d8177-8edf-4dad-a37b-8cd086f3f5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d3e19fa-8a93-4e3c-9753-9ec1b4f5ba32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "103fbe83-b3d9-4095-b0bb-c2ad368ad538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5ba58cd-9397-4af6-842a-f737e551c50e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f225bd31-fcee-4adc-b100-41749bb26665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee809c1f-d9de-43ee-953c-f567228edfc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f758fe9-a04f-4cef-9c1d-39473e2d9af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "13635682-775f-4e9a-aa35-89c32b87f879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aead7ae-e396-4f6f-b64d-1a22b803761c",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa85b786-b7b2-4121-93a7-7a3d24a16c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "758865ed-8355-4ba2-a643-5fcc85a0a3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c327822f-d481-46ce-b8d8-5acc0c10726c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4cd2c1-e77d-40b0-991d-a78dd099863d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c758ca6b-63cc-4b62-bbaa-2a5f3401b168",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcd38a9-c94a-42e0-905d-a87fdbdbc552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2a038a-f5fc-4357-961f-da2ae200987c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b0ff17-7e26-4a99-a5c5-6fe83d9b5be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8106a6d5-d811-41a4-9470-3f7373f14267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee89ee1-10a5-4dc2-9c7d-4d1ff2142f5f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d33fdc-7c0e-48e6-95ad-8861b205b76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecccef11-ac15-44eb-98eb-dfb2c185e790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffe010cb-42c1-4624-874c-7530555cf415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb500f1-813e-4fde-a1db-ca9d421ffab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b18d02-cf9f-4dd4-bc5a-8a1a375e9ffb",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67c489a4-0b20-4748-982f-fbd0658bd23c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b10bdee3-fe0e-41fd-b1dc-460930e39013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b58906-4a14-4c01-a1b1-60f0f4f203a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9224e81b-8523-4234-9cdf-4cf10c5a5d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cc1157-dc0e-4847-8a87-1e9568969230",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf093ad9-0c9e-4214-86c7-e78c0f7000aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4508e8d-edab-4921-828e-fefad95562e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef10566e-3b1b-4642-9788-dbecf94963fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d92f9c59-9719-4214-b1d5-9888afa20172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d47336-9b0b-479e-ab49-0a8908cf86b6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf9d58c-c474-465d-93e3-b8886ecf99a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e573d1-bc13-4275-a174-7d159b77737d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "344dc248-647f-4d62-aa2f-25736bc02ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b07e0fa7-a9bb-431a-b773-559466d410db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2133330a-8631-4a7d-b67e-81fda5e7d32b",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17edcf5-b72d-4f0c-9779-d0305763680d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4631b9c2-7726-43f8-944d-ba067b6069de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16afb09d-1ce4-4bc9-8f53-fcde092c2338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "204e160b-f4e1-4be9-8af1-eb921177bbb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d12b09-80f8-49d4-8df0-8f44fd81d6a4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "292f11a9-86a6-4deb-9f8b-e857adb13719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "614738ab-1a53-4a1b-8ca0-ff856ff7c12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31616c7c-a22e-43bf-b28c-776c5575dbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7459df25-eed8-41cc-a8bf-bf2077ab8839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a5e192-2a2e-4d44-9634-41fd44a43980",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d16c2861-d76e-4857-abb8-a4291f9f8707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f34a4ba9-bea3-438d-b66a-ff01f5420fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd63b58d-3c6e-4cfb-b890-cf01dd3039ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2e42b9-715b-41ed-b16b-7e7f461070ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4884a4-e678-4b11-a85e-610439123216",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947c3765-2923-4ee2-b31d-db3024de1c93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b3e379-e1e9-408f-a391-372a62875cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1684686e-6ade-4b73-81c2-05def29c3c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa35481-a539-4a32-9c53-b10f9a38a97c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82672f17-7760-4a81-8d19-9015207fa8f2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a833f71-1b77-4bc3-be37-49d5e4bdf655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d7771b4-2539-43e2-82fc-cd78688b9c75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b153c6-c17b-4f7d-a93e-a9177218736b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e36ca45-2bb5-456e-bc19-83ae65f6b375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d268246-e63b-4a49-b83d-c7e836cc086b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "641a919d-e111-4275-b642-5bceef47909f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16a58704-215a-42db-8e8b-ca1692118cd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5305a8ce-3622-402f-8d53-8245064bdd82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6682a0-aadb-481e-88ec-837998ff02a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7ac5e8-15ad-48f6-a3b6-fa9a89d9f566",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bbaf14-a0a1-4f68-91db-768b01f57d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3825f45-b593-44ba-b89f-7fca588d1837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0ce42c-c614-4bd4-a5cc-746a23c5be48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3e3b0c-bd4c-43d2-a922-315f2f99a311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c8e537-ab41-43ec-9c6f-ed763c63c06e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc62db33-ed89-45f9-bed0-50043decd46b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b688699-1f7f-4f64-af59-755a13b7b9d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2a169e8-9c9d-4d5d-a676-ff9cf58f4534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b271e3c-bf0f-4141-9b3d-8d486f1faebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72400a27-e748-4ab7-86be-926227b77990",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc2a26c8-2a07-46a2-8825-89738aae1856",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e261c9c3-940e-467d-af57-b5b7a735a20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3ab486-5674-45d9-903e-72b556b8d7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03c6fbe8-e1e2-4886-a418-449776312632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d046641-c1ea-4d9c-b1b8-154107e37cdc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa29c63-b36d-4a6a-90a2-8e200ab0eab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02df4ba0-b828-442d-b4a3-324f33a4de8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d0e875-3193-4ec2-8141-3cca28057ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c529f99-e31f-42b6-b10a-05de6030c644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff5057e9-1dc9-447b-a226-653857ac8a47",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d0e8ec-747d-4870-9799-ca82001fdd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c51c4bc4-f533-4ef0-abcc-c8b3751552a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6288863f-b87a-481a-9f84-6b2daca4b0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9de0e4b9-8a5a-47ee-abe2-e242cd025b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d7a8bd8-4231-4a37-a016-e42cf3940053",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea2f1ce5-ed63-412b-b270-c85b3bb7dad1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94a8cf4-25e4-4c18-9194-eca9ce4ff42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e1a440d-53ec-4b9e-8136-5a2a76d295b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "425d4389-02ce-44eb-b795-df052f8385d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca75d02a-2933-4e19-90fe-590f7161d53f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "992a14f1-7f22-44fd-af79-8c1cf5bedf56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "620e818c-b92a-4bb1-9c21-b7daa971e3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449b2670-fd0a-4a64-be80-46082ca9cabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "958a59d9-d76d-4a2d-890c-8f18558e5c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b224b31c-7e1c-4a2f-91bc-06296a5d9ea4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6003aaf8-43da-4e35-af48-ce2e82a2d50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcaf98eb-d97d-4ba3-9df6-82694ceaeff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab1766d-991b-40a1-870f-ee2acdda1807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2596c7-0daf-4e82-9bd1-068156c2082c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfd5ab5-3c0a-4368-8790-03b7f44ea3f7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf76ce96-9491-439b-86bb-60a256e0bb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4603bc42-357c-40a8-b09c-b2fc520de2e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12fb7de-47f3-4787-98f1-a3564a252f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "933dba83-3e1c-42c4-8145-7d87f0384acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928daaed-397e-4a0b-b06d-86e1004c36ed",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39661e2-5e99-4d7c-aa6e-7e22543af2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "584e7977-eed6-49c1-aaec-3c4c37b6a923"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb0c51e-8e9b-4f93-bbd3-79757faeca5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "535e5326-08c0-4ea4-8dfd-18119a1b3d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ac417a-747c-4b45-abe6-228958c44ea3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02315b8f-08f6-42df-8f48-b6aa429bdec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac60f8e-842e-4216-8770-d5e47be08244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a151f016-52a5-4002-8c98-8bcabfd025bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8844f24-49c9-456e-a575-1bfc1573326c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ab3da0-f4b8-414e-b954-cb28dc929083",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73d83e1-ff0e-4658-aadc-7f432910be58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a403ef5d-85a6-4957-8e8b-16cd9de394de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f5014b-239d-41f8-961e-b07a8546a783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a1ba6b-1337-46a0-8ba0-ad80f692fdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4a5f73-dc98-47ef-8ceb-c5b39e231d15",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847af241-ff7f-4cb6-9292-8e4c2a393a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a677d6d9-4530-4daf-ba35-c4774cae5f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885966e6-b541-4fc9-83ff-bcc9ab05a3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bff0af25-413d-488c-8878-cb0811825d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31a1efe-5c06-4c91-8096-83e6a23c1bc7",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2c3c1db-a23c-4247-99fb-8b3ebde82a70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "281ebb3f-22e7-4587-8f9e-be83cdb99b86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40391383-e789-4d83-a6f1-a4e8c4f62841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfcc80c8-b7b4-400b-bd61-b3fee280f733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff3aa74-27ad-403e-b0a9-2a2a6657d0ba",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9861ab8c-10c3-4165-a3be-53fc5b0792a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886f632f-48f0-428f-bd2a-fb70b5c61da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb269f1-9feb-4259-8e1b-e734eac12485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aff41cdc-8150-4880-be86-69f728e5a890"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a8332300-8eb8-4c53-a32d-ad91d7d3cfba",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "90ef7ae4-7758-435c-bf41-15d7147c2000",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b6a8c95-0714-4128-9eef-4536bcccc0b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "98f12062-28ee-4d69-936e-9269fc23fe18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65d7e0e4-ce9f-479c-b261-ff94cbe54006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66caf7e0-8660-453c-abf6-305381c3daf4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9f094ed-5214-4554-bbc2-c09912bec4e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dfa05896-7858-4903-9376-7f4263c70317"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "72aa0a9d-fbd5-49fe-bef5-d217f792fdf6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cae52fda-261a-4838-b3ef-c5596607b0c1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10160afc-005e-434c-949e-03f1a02f1b81",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eff8f59b-bb43-4409-ba40-5f70237e57a1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "76b65be4-272f-4ae3-9e54-9f833c81d866",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c1819966-2c77-4960-af56-b0e355037329"
            }
          }
        ]
      },
      {
        "id": "666c0863-839c-478b-accd-128e54e3a276",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "f6ea5692-014e-4a10-be39-3d16f09dd245",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29a7374e-37af-4374-884a-85e07d430d8f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fec698c3-2402-42c4-8451-48d22b8165f4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0f417d7-547d-4eed-a199-4bc9039131c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa4702b-ed33-4fc6-b991-4f00cfada296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd95842-3b8f-4b14-af41-9c553b9f36c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "46a300e1-ef33-4991-bf1e-46082f9d5d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c166c6e-5b95-4536-82a1-44e3eec44196",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac27a0d-6d46-4dd5-a9ec-33cd76e7de16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d08bd37e-491a-42af-8f47-9fd8d866d7d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861dd13b-0a0e-4cf5-b7f9-2c2438015289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "48f26484-2acf-4e9f-8494-8ad42d13fe80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4f2d52-f559-40a0-85fa-bbb345b26c38",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24b14528-382d-4684-8c57-aee897089036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3be137-4bc5-43cf-832f-7da5b46e58fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6100004-d69f-4b75-882c-6500cb8f9675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6de1f557-c958-44d8-b7e3-69430122e86a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd957cfc-fb8a-480e-8a90-d81d0b68da90",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e77b943-37bc-4564-81e8-47f99a839dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8d9660-ea8d-4294-b8f9-01120d40ccb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4ad05b-ca4c-480d-a916-04c27cf3a50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "91f2f4e0-6db1-4453-a58e-63de7fd17868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b81804-bcac-4211-92f6-d754c9b6c3af",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928617ac-312a-4600-889e-80aa31b91f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a216cfe5-dc64-4b16-80a2-af817d6d44db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0105d14-f608-41bf-bdd4-a6ee09d05590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c64e6fb9-342b-4843-92ff-98b52c8d3286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2707f192-048a-4eb4-ac1c-6316e3aba4e7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0fa1d3-fcfa-40a6-869a-3a6cd30b9c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "655d3f6b-0261-43f6-9e3b-f5dc9f14c266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f408097-423d-449c-8a94-3524ccbc7967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8829ed48-14b2-487a-b4da-f9319dc32cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be63b99e-0980-48f1-8eba-4d0f2982ee40",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a869747-9acd-4d57-ad8e-ba775710a437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5db9615b-9ccc-401c-86d3-ad3c5fd203f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e536108-63cb-4941-92ff-b83b55b1cd41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff0ce44-4383-4549-b439-60334fa1dfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b0fe0a-5dda-41e5-9227-2c71f945a1eb",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e22de561-45e6-46fb-b959-063ab9fba8e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fbd4552-b326-402f-a7ed-87c74a90bc6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b80c735-373a-4511-a94c-60b83b7d5459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "36522243-125c-4a80-aa0e-85a883733f0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acae708b-98ac-4bd2-9a2a-60d09309ec1f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6999b59d-b532-42a5-a05a-2671b9c1c913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efce43ba-b022-4350-8556-e8d8cac0c133"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a1fe614-82db-49d9-9a74-d59c1bf5266c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6718896d-18df-45ea-9b8f-eeb21d776843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b8febbb-5261-4012-b89b-edb8528dbbd0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8aa7e1-6d3e-4173-9a73-3f14e8c6aada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdbac2ef-ddc8-433f-96af-4c41f0b164a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a479d703-92c1-47e6-aaa6-9de93e4d67a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f03c794-a202-4b38-a971-b96512ab1d3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d305ab-3f36-4149-bc6a-3f20da50a91e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18578603-0f1a-4930-a3f5-bff392146b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeaf0c26-1b28-4f60-b90d-210efbcd0ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3cbd77b-7c6a-465e-bb86-0433830c398d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "89b47ab7-575d-4234-b511-3696fab0d3b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24206d3e-f6a3-4358-8763-d98f94cb7614",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba058ee-f18e-4d68-8c55-646bd06f200e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7fb723-b71c-4dea-9b99-5df7d695d3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54eb063-0918-4a95-91a8-06910569d6fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e00428-e7c5-4a98-8fd3-f5c1a2894f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862b9012-c9de-48a2-a310-56049345551e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c280f1da-4752-4399-92e1-610bef759d0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14c64b4-3866-4b1f-a2d3-e7c5fa1e202a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc328eae-c76d-41d3-8c3d-6b7aecde75ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d6818a9-5204-4b3c-8f8c-dd070af2a1a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a3258e2-4af9-4d59-bd3a-e6f23bf15f5f",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a6eae9b-ffb6-4214-8ca8-453e7d88fa0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e146046-932e-46cf-84b4-5ffb81c1eb93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9af44e-8d89-4165-9375-f7341e25ec26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e733fac-caa1-48fe-8acd-5554efc493fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3297fab-3d20-41dc-b3fc-f0d94feed9ef",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a8a7a7-599c-43af-a754-1f5ce512300d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f04b1c5-352e-4282-84ee-d1e8d8f9824f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246306eb-ec6a-46db-8b92-92aae7395e20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b112d47-3c8b-474c-817d-dbabd94beed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473064c8-eae7-4597-af08-dc2f9fb82990",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f4e138-467d-49c2-bef1-f760471d1129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57989847-95a1-4d0c-a86e-b734e6eb187f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2feb2776-9ddd-4d73-8966-42b133f7f0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "621fa2ea-561a-4fa6-b055-0fa009a42a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29555562-9b31-4cbd-acb3-c96a7a584246",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39e56e4-1f2b-4db0-9e00-e16767a7ea86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb112f31-7ecb-4580-a445-5c1c6cc99c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6035dfb4-57c4-41b9-a905-51f641d741b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f3dc00c-2ab6-49f5-8aa3-4cf7741201b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1614376-1596-4547-b2e8-f8ef1e4a249d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0065cb0f-ff86-4392-a3d0-13d2031a326b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "043fbcc2-3d33-4ae4-9c83-19bb665be9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd6982f-e910-44a8-a916-850cd8b3fc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "04d03eb1-0fc8-481a-8408-ecb4e567d298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47670df9-bb04-4f24-a867-707ad6217d7e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d166e6c-a72d-4e73-b9e0-3924b6f06e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "284a3ff7-eb92-4a25-8974-66f985841fe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbcbbaac-0bc8-49a5-b86e-6c81eaff7133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2cf95fb-adc4-4f3f-bed8-8c5b7447c206"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac3e889-5734-490e-a0b7-cc7a2a7ba84d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a97c95-43ae-47ca-ac33-76ca7a179fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f93dfb6-8c44-40c1-958f-d9a3c864e0fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877fd656-59fe-457c-87c1-cab5c0bd02af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9bb7bad-71ca-42ba-9b5f-39aea1f8ae73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e040edb3-7e1f-4e09-b0c5-852988008838",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ddf5c8-9f9b-4d67-abb1-4e01c1372514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "518cab04-6522-42c6-b886-e415728d5b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38f2755-341f-4cf5-b72c-290750a599fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87bfd600-093a-4bb9-8edd-f12c7fa04361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c47d48e-e6f3-4630-baef-b86751ebf16b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ef2fb8-068b-4de0-9f3e-4a651782cc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4bdc2d-3909-4054-87b7-de7837459be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faefbfbf-d187-4813-91d6-7471674adb77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c17a73d-ee16-4234-8932-059644eaf6c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87f5ba08-b3b0-4ea4-b444-220b55ad85b1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b20f3f92-e7a4-45d1-8c83-babf828fb67f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5a87da0-278a-44c1-bae4-18e7c3839ef1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a0b5882-d2b0-41ae-b841-d1ae8902f8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1732639d-77d4-46cf-8e4d-c374292cb398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d445d2b-9e90-420a-83ab-625521469fd9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce22d843-683a-43d5-aa83-c046e97d3af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6585f783-d42e-451c-8e66-0bea9cb3e763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0215521-8a71-44b0-91c6-47558b887ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54f1f28d-64b7-4246-8f72-1d3ae3936196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb96d71b-b1fb-424b-bdc8-5eeec4234555",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973c39a8-e482-4d6c-adf6-c3993e727c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619a8905-8e90-42f4-b46a-1140ba6304c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a8a242-2062-4db0-a442-25ed790f1c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57803d7c-8709-4cbe-8d46-5ebc2d639c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156a6bbd-48bf-4d56-9250-7215b89debc1",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71db0766-c7dd-40c7-94bd-2aa15bee3496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8359ddf0-736c-49b4-a4c2-286410641501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d922860-7a70-4b5d-9ac8-59e2a74eaa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41f8747c-203a-4e42-966e-5cbffa65edbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a587da-ec41-4c67-8d7a-57e1fcadd306",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "134b1f81-63cc-4636-b7f5-4d7fa44cece1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfe15a6-5c4e-451d-8c0b-35345bbb5bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8588e3fe-a46f-48d4-b28a-e6bc11f01fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78259fb7-4560-4f3e-99b4-2f3d6ba02253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec1dc9f-2610-41ba-95bc-cf69247321ce",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "645e0630-5742-4e5e-b09e-0e02d081e201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2afd4055-8d41-4d1f-ae71-e4480637655b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2800a088-881a-4208-93bf-4c3147187bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a73c2b4b-4c65-46fd-925d-84e3b93c292c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36ad094-12ba-4667-aa41-d24b88414134",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bf1d08-849e-478f-9832-1cffffeead99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "825313bd-d441-464c-b7fc-2b2d9801268d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c58bd6d-9021-46c9-af6b-9d0b21e6ac2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc0b8416-d3d6-4a40-b1b0-254f83120807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55aa6622-a039-4eeb-a3de-45b41beb2dfa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76c8684-0dc9-4bcb-b419-6179b612e084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "752e2a5e-3b17-4b62-abe4-e740de4751b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0763c7df-85ed-4efe-9986-994e0e789691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "345c9654-f67e-4355-9be7-620aee6881db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75004d45-40af-4b3e-bb80-8e661a301b23",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d477a7-f48a-4a6e-b1bd-93eea1d6e4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cf91c77-3632-4009-9182-46b9eafe7fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a9a2d0-4578-409b-a89e-d8a65e827fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d59d5b74-9cac-48d9-a5d2-5276c56570c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc65e003-1210-4a86-8b08-493800ebcb8e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e68915-d361-4b7f-807b-65af31c42d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e5af2fc-a454-4f7f-a2e5-cea2daec1f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6fdad8-dca3-4c78-b4fa-7869a88a94d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa2f76bb-d5da-42bc-8c15-3f137ec09d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "573dae90-637a-45fb-8def-20f60cd19ec8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375bfecc-4402-4cae-b6bd-e9f998df2588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d09ee0-7d14-4506-81cb-af757e5a16e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf931b1-3f05-4d4c-a4ed-50780fd660a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48cba48e-1652-4cde-bb88-d03a09a8359a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3d8669-1cd9-4ddf-97c9-bd0a6b9016c7",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "456b6be4-2b37-4286-b297-d9e271f3c4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6821ec-54cc-44d8-950f-dbf08f52f189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc2dfc0-491a-49bf-9aa9-b55a61d3beac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5950200d-d8df-4a3d-b9cf-fd4421301194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f71a7b6d-5ae7-4a52-9412-88a6ef943a71",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52195bda-1bc5-4269-bcc8-a5b799ea3cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdfa186c-a359-4f94-925a-09e7424b385d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c29dfb9e-f49f-4a3e-a187-eb045b536f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d590fa10-f0cf-4831-b249-e3d1cf0caa8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b63de7e-543f-4d97-b6fa-884146012d84",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b817660-ec62-4d95-9ae3-552695ccf107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450621a4-b267-49be-a677-5477f412ae19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e528cbd2-e7a9-4fde-9eb9-c7fd0ab6d2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2de0d5a3-bcb5-4298-aed8-97905b3a25ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fda8e6-93d6-47fa-baf1-c67647f022b1",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7101db66-3678-40a2-b159-5eb6f1597d06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1612be-191c-4753-8cd6-87e55968edc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "276ff260-18f4-47ce-8685-a47f75793bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "387634f0-d33f-4787-8c23-4c0e22640937"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "efb6d159-45ba-4e19-a0d3-08749ab175ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84715cc4-cab6-4b6c-acc1-604fc460d207",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92c0098-b47f-4421-8384-a1ed1f4d8135",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8b9e9e5c-ffa4-4745-84d4-0fcae5b89079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42e64f7-99bf-46f4-9df3-979e7b5c9a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9ecca26-9d20-44b1-a059-00c3c636a511"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "72f8ce29-28b4-4694-a0a5-8537f6d604ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14198459-4d18-42a6-b294-c2038ae7ec3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1150ed2c-0cd8-47c1-b096-20671b70b46a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea338448-ed8a-4308-852c-f181eaf55409"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "75d6f539-5ddf-4329-a984-1b4da5894f2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bbdd2a9f-1f5e-4541-9547-72913178bee1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6df0bb9e-0724-4687-a54a-6912771b8851",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d9418df-e8fa-4788-bd64-dfdef906fc51"
            }
          }
        ]
      },
      {
        "id": "5cd7e526-1857-4b20-803d-702546377475",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7c5e0a61-1f8d-4904-8bd5-e0c430a3dfbb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "220731b7-7a63-46dc-bd60-e705d83c8c48",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6b6defee-ba56-4bd8-8033-faddfeacd482",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035ff124-1d20-405f-9daf-56a53b546926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb80719e-081d-423d-890e-4a09cf49bcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a90338c-6ba3-4382-bd26-e2a1a619dfee",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e8ec09-e417-48fd-b3d5-2005f754df85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e34b956e-963b-4b53-9abe-17e5d11260af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128a1bcb-62ed-4e53-8fbb-35c0978177cb",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189ee907-72e8-4006-b203-f55bd6ea5cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f08e3e12-23e1-4804-93a6-e3846d1702cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d22775-ea68-457f-ac08-c5fe9a49d8f1",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff261e0-ae58-4834-9e13-5dd98afb8ed6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d85025-49c1-4be4-aa9e-9c6e12fda714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e2645c-4551-4f78-9075-46f86763ebf4",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d94ae68-2509-47da-873a-b17836a0dfaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ae94dd-d27c-4eb6-80a3-8debb77c23b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1c2a6d1-3fd1-4bb2-8913-4c7bace10c59",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e728dff-fb2b-4d51-9926-eee6e6b122ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4464e21e-a730-414f-91c0-d5390682cc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2703ff-28fe-4272-a22d-608c6e3b6de9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272d099c-f7a2-4928-b8c6-b89219f66ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d67295d7-86f4-4f38-8462-daeb722b093d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3daaa1bb-65f4-4b15-a21c-a8a8632ccf9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73884e71-e13b-4c5b-9e52-314acdc7e9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39098f59-f478-4324-adb4-1f272d094738",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3af177d-5977-44f9-ace6-8fd288b30551",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d452056-3ce7-4c3f-9a4e-908d838725c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c35026e-1aae-4973-9a02-0bdffbd3c050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50fd15af-0a81-42fc-af01-11711c50a52b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d87ccc6-e38b-4df1-8b9b-4cfa4383934f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1edece8b-f1f4-4604-a1cc-eff7d5ff5bc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b101ac9-86e6-42ee-88ca-0c90c10089c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae0ac67f-26bb-4486-ba06-c4d927bfb05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7fc88b-9af3-40d7-bff4-1f37fb0ffb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d6199f-6b82-44e7-b712-0dfce1d344fc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe3555e-e214-4f2b-b4ba-f4d6a74b205d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3488d8a-ad49-4bb2-a37c-7e0077ea0795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ee9e8f-dc58-45f3-a797-51bead53579e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8d937a-a1dd-4fa6-b09d-eebd72e1f097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef52e6b-7624-464a-814f-199e6fb17665",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42db8df-a431-4468-932c-d54ec3dc09fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8647d0-c93d-479f-84d4-22a92a8c79c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c660c0f1-550e-4c88-9e46-e8a160dbbb71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "689f8be0-da33-453f-ba8a-5c6dbb854c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7bbb4a-31b8-4a6c-ae0d-b5862581fb08",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f488b6-32e9-4dde-b611-8ab9a9aa41bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae1f864-5094-4432-ac0c-0a3948c8d1ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f8095e-d6c8-45aa-b55c-836ea41e2eb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "611997af-2673-4ea9-85b4-0390043501b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd76f20-d3b1-4bf6-9658-95d34b7e57c0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb101d4b-593e-4190-aff4-b63699d584ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21508f2c-950b-4253-be75-1ae507a41e40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54c1eea-0e36-4a2d-ae0b-4c2e4970d7e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a4f8425-c6c0-4b56-a060-8c5f83751c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd7cdcd-a46d-44a0-a481-1fe6fbd2a757",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25696c28-cb0a-453d-9170-a09bfff541f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e21c5e5-eac6-4597-9fb8-ab59c990f3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b777ec-024d-4f86-aae8-58ff6c2cd181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c81f43-2517-4cee-91e8-463c8806e30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de960539-c234-4e5f-a9b0-0bd848999d09",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360db421-626d-45dd-89a7-5102592000ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28bb9bd2-684c-4743-91ac-dbc35afe49a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d68056-4c84-4b7c-b652-5aa86587421d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0813fa-0bd2-40e6-873a-d46b6329c837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4930bf-e38c-4f69-a98e-07d70c552ecd",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70d9d6e-e6aa-4c1d-a3aa-dbc215e25eee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3801bf06-71b2-45a2-bdb5-5dabd72e2b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22699d4d-ef0d-46f2-aa91-b5886838736e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e2c8804-f19d-4fa6-ad75-04cf487f46d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d5d90f0-29f9-4b5f-8055-dce74fe54483",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "addd50fe-c9a0-455c-8cab-5a8ef21a0f83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4126a38-5611-46bf-b6c9-dc24c0c95557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30797f4a-1523-4610-8da6-f6d703c0083d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffac3f30-a4ce-4369-bf80-afa665a484b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382920c2-dd27-4e35-a4f9-aeac1b46c359",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd96d92-1c39-4712-95c3-fbcfa8abc60a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da597b6-6371-4fb2-b6cb-0c41f59983d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ae9b890-8362-4759-be47-0b67ca680d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceaba0e6-2f5b-49ce-9ec6-b281252463c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ade785a-562a-47ed-9cba-5a6cac7db58d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "035233ac-ab93-461a-9692-61506f41adaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb4493cf-2321-40b6-931f-620c39e92a24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6aeb59cf-8a01-4e31-b9a8-264d742f6bab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "275ca8c2-9ae3-4c0a-8e09-22e714e5fdf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80635250-076f-4658-bfea-f944ee588687",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e9aa255-b8bd-4dc9-967c-2fc7f9ba7166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ab4282-ff79-437b-bc99-a2c2dd9c795d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1895644f-0555-4a40-8d0b-60643a951ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e96730-2cb7-4971-bef0-de4ace253885"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5178f35-265a-4da8-9e46-d01f3d1e4aed",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca3c8fc-49bc-4231-8469-b960ac8ece3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eda3be3b-1f60-4d83-98b8-1a418ad6e665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a84421-334e-43d4-a211-74672cb0cf3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44e52f9f-3766-437b-ae4b-33f4d995166c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2831b225-8fda-4548-8a31-26f45a30b4a9",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19f047e-72b9-4ed1-a1cd-bb893bd9a6c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe1eaa3-1a2e-4ee2-98e2-d8bd15f165d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db947c7a-bd7f-447e-8afd-ae532df0e21a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de4017d-ee29-468a-a39f-c70e5377a845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e6fd83-e540-43ad-83f4-d865610b573f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb3627b-1253-470d-962e-6a92e07b1285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3b1ef2a-3205-4386-bd99-8e07d812971a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60aa27e4-42a5-4624-958c-b398c35c29ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ff6a66-01aa-4075-9930-36ab06999749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0898df9f-77ea-4a6e-a90c-3dbee266090c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99fb1a4-7437-451a-aa83-e74d2659af7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ec93e27-4b00-42ec-9c16-819fe43f5444"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "776af22d-d633-4f92-b376-8f929eddc4ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3833d3aa-7984-49cc-bca8-6e6a82442e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12600206-225e-4e75-bf2e-f0df0eb2d805",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e74baf67-7aaf-4094-aaaa-4ff76233787a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87bb3f0c-a055-430f-a61e-4dc144da041b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3774ae97-8243-46b3-8ff7-a4181cd05715",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05edbf86-cd9c-46a0-bc38-83b3d5d389c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9247401-2270-49f2-a6e9-cdb15d451392",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcf6d7f-e632-4c6d-ac0f-b0e04bbb852d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbb27fc7-9533-4230-b59b-db56c002c029"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a07ee3c-aae6-4e53-906c-01e8e658b001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde1d3b2-4dd5-4cc3-a1b1-7cf10eefc9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33175910-5ef3-4578-a23d-89662d2d984e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475949d7-4b65-4574-8b23-8c54bca3a6d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e23dc55-9976-4115-b26d-03e94c46847b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42747742-3fbb-4be9-9868-1f4406431cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb32d47-0091-411a-9c9e-b69640083cb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f723e30-d7dc-4465-8a99-113d2247ad3c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6441989-6b64-4bad-8f7e-b45e6b132201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029c3d14-8245-4460-af62-2a77887e2d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8faecf3a-9303-4dd6-ab86-a8d5106a1495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3cbebef-05a6-49b6-943e-54ddbf482627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567aed8f-7a5f-41d1-8e5e-f82ca90c1c24",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316c2fa2-3fa7-477d-993a-39f5f76e83b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d4a88d3-1c88-4952-a152-78b75a9ec5ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4a1e98-16bd-4f7f-9993-29d752403d0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751a0238-a60d-493d-b439-a48046028403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf8e1fe3-93bd-4767-b5ef-5ada9d5fb0c0",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc45c07-b471-4204-b557-bc025222f547",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4324567f-7fd8-4364-a9cf-2218693f3c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57dbc1d9-76d8-4067-9566-a74d2cb5d66f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f182e72-7ce8-4c01-b9d6-021e9296bfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9861b9c-201e-495d-ad6d-1d374afe759c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a345a17-1335-4f6b-9920-650660eb76d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76057077-25e1-4235-911a-9e52b8c053c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa4349a9-48ab-47ef-80c6-7949e4614eb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0735daf2-3a0d-4d8f-99e6-61b84b25fbd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7e9970-088c-4287-b980-5ac884118ac2",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38171166-117c-42f3-8057-708823ea9810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7eec358-7349-41de-bf4a-685961b175a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15cec3f1-1150-46bb-bc30-5c495d3a9032",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677b7672-f5c6-4dc3-bfd0-15f4465b1d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d41314-2d70-4d41-8cec-173b5dd3d953",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3488b6-cf44-4c3e-a0ab-9d4912b6401e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "156ae95f-225f-4858-9b3e-200a85defdb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "212d2d45-1f7a-4899-97a0-a797e4dcbcbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52830de-d969-4347-851c-56ac7e47d35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d532ed-f3fd-4d2f-a14b-f5d73d6ad9a8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "072b30f5-56e8-4df8-bf72-5f602d3edd3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdabf72d-f483-4ca9-9ccf-03f1811ec54f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddcb01ad-b172-4eb2-89e6-2f2c7ea18fdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a939fd-3ac3-4fe3-be46-3ef579d4f8bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8cfb81-92ac-4e4f-8c07-2a2bc89c1396",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca98951-c9ef-4bb4-827e-265f71eaa433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974418bd-9062-414e-8dc1-ba356d939b97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36adb3d6-5ef9-46fc-b92f-ec2362de765e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe3172b-e696-4b82-b6ce-d00a73a1581e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25fd1bf7-f43e-4e80-a38d-eca61eb519f3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e99277e-8619-4ce0-8c51-1cd0e68d5802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f99c6d-2b30-4051-a184-f93e8aa912a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30782e24-59b6-4521-8292-a49012ae899e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f34804f-ea66-43c3-bcbe-4681befab3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b4eed8-3464-47e7-99dd-240cd0a2ebde",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abcd3319-902a-41b9-8932-5f67ebf6b836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69d8e6e9-24e9-424d-a4f1-d846ca41e418"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62f5e46-8d68-4813-80c0-eee25507faf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87873bf9-807f-4e0f-92e0-8c15533855af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efb79ab-45f1-4694-92f4-8f83e93e6989",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c470d1-cffc-48f6-ba36-62d024b3d4f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffbab9c2-826d-4cd1-acbd-120963d6cd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df1ff3f-a3cf-4aee-9022-defbaf6c2573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d837b81e-e8b4-4e10-a4d5-f748e5ccc93c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b54d8fe-3d56-42eb-8962-4d84919b2246",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e1156d-d278-43f3-b059-472286230c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c1781c1-b2b7-43b8-8273-af80c5cdb291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac113506-fdfb-4c4b-b627-310c213b7943",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d4080cb-506a-4c9c-a6e2-d244a20bcc23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ab8194-b402-4969-abaa-b0d34448b3d0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fab7a37-5f54-40d9-9934-8f3f62941209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a957e52e-cc62-4c0d-9191-46ff5d3887ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6810e9-7d48-4cbb-8d2d-8cec17aeb26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a3eb62-2651-497c-b423-94715b236041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3915effe-05b9-4191-a875-95933f6fd08d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5504ce17-e3a7-4a9e-ae98-dac152bfb183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f0caf15-811f-4748-94c0-f6352663dbfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b0d1022-e219-4118-bbd0-49822b9ec8b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6545416-6730-4120-9afe-6a69d2217778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde5a133-58bb-4629-b2a6-2fab73642110",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd06209-24f9-4288-b445-5e9566bbf3a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3811fcb-a426-4ba4-b27f-e2d65bfe0d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7af57e9-b12d-4428-bf89-16e962cdc9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bbb62ff-2a01-48fa-887a-c0fabe8581d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f362bd-c648-4538-9a52-2f0976d07843",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b85bd7-4b89-4714-b4df-89016659e97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a088ae-7eb2-4d01-ab4b-238d512c7c10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32988f71-cff5-42fe-9896-343acd5d4ebd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a47466-430c-4ef2-8d09-690856cf1587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1405829-4fe8-49d0-9f30-e24ca517717a",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f1ea5e-aafe-43e6-bde3-32cd36e69107",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7017f1c-95b5-4bc3-9553-8b013a62700e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2794e6d-8650-47c9-8a3a-cdf06eaab544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68fc443c-f6a4-475b-becc-530af19c3721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b39431-fe3b-44df-830d-770e08c531b4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1119413a-ad34-414f-bc30-2d8d7ac5d3f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b44d50d-13c3-4b0f-83dc-6684c5db6d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc9ff17-3aae-4d5f-b251-0fd0d3d3455c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb4adae-b1c3-4bb0-b8c8-096ad31ed6dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e1a57e-5cf8-4826-bc49-53814099b4d6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4712d852-2f23-40f6-95bc-c106765d0415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b94233af-9ec0-4dbc-baa8-5be2bb7c38db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e745242-702b-4fb7-ae0c-16a814a85134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c666b5-4ce3-4878-8ea6-5b5f74b4c8fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed3f573-8664-415a-a806-4b5dc0993a23",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a2593b-44a9-4713-90bf-ff898002c427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716f4d04-14a2-4434-a8be-7806fe022bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f683c20-f10c-4c52-a4ca-f80b80933141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce73491-0438-4530-b4ec-6441660308be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29279371-3e2e-4baf-9cda-94e4fa62de54",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585eed6b-8c39-4602-95ad-75a6de035ac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f9d3b72-e146-4321-9e62-6da0346374c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efeba8a0-b837-4034-9d47-299798be82fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceffa386-fd7a-4b3f-99f5-b3bc3e06c143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6960d997-7f74-4a32-9e19-d9a146a60262",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4489bf-575b-4f53-ac54-b43a441e5281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "651f83fb-9add-4473-b38c-b50849161add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92620ac-bed5-430b-a679-95f312041c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdacbd22-fa1f-4a2f-bcfd-d17a9809b844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0f7ff3-4a7f-4947-8f91-41bb03282988",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a2a8e82-5f90-4656-b7d6-5b505d18487b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d979e0-e601-4200-afb2-1cbc0d205f94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adb5b8c-1ac2-4b34-b58a-bdddad124f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c47bfe-50b0-4b03-ac37-2913fb8bc094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de882ac-358f-4ecc-866b-5b6f6d496f93",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b881d5e-fa69-4cbb-968f-8a5efdac4acf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7410dc-fedc-441d-bf5a-d908f803da67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27299cfb-75f9-4bf5-ac20-1280d5dcd6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d1ce71d-7b85-4787-a3d8-d1ee48ba0da1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0738dc-83ce-4a2f-83d1-fa50763082b3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00275c47-10ca-4041-af07-60372395acea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3489f5a-4bc8-4eb4-8ca2-762883b78b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7049ad-8311-43c8-a621-09e3df80be48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "782fbb53-3d6e-4639-8226-60af439542af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba8ab22-d880-4c2a-8d43-576123b2ecc8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32556c9c-28aa-4162-bd42-c14469bdcec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2256b47-b816-4dd0-8acb-4e26e71449a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99efbc7b-55e7-480c-a7f7-021924f4a678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7970675-d5f4-46dd-b3e5-00f23adda175"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594c986a-a60f-4a5a-a6ab-c3e3d77dc79f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761d6c69-5393-41b3-8292-9728b3b53173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e35d0d3-3d93-49af-8a67-af3d7d8a1396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362ef1f5-66f4-484a-b212-9345f4800859",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81e0526-8dbe-45d7-b490-36d897bb79ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f8533b-d731-4627-9f6b-87c00262adff",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44e574f-c618-4fc8-a3bc-3142a9fabadf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58aae9bf-2f55-4860-8a84-0a0d51cac0af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c7047a-e37f-4c8e-ad52-ee742eb0bb95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78ebdda-8fb9-46f9-b717-af3f53ad4eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02dd123-1a10-48e2-82b5-00ea0571d9d2",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33b508c2-da0e-4cbc-9448-d8a99990ae56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d210a06-3f79-48ba-82ba-9f14da1a4647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e727de7-022b-4b5e-94e5-2f6dcfd00621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a6d93b-54da-4a81-ad86-0f58cb6e7a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de2dd3e-e4fe-49a4-bec1-72c439e81366",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940b0f39-64f9-4a86-856c-05cbc09cfbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83756dcc-ce24-4908-bda9-df1df366a28d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c93cae7-1e77-42ec-a45c-c7a5c217be0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2ce408d-015c-408c-bd9b-6a13304759cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652a6e1f-ce0f-4c49-8988-4bdb5418da3c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8405003a-9226-45d2-9350-37dbdf5c793f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2176361-c8d1-43bc-bf39-63418a49fb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "facca575-b193-4c14-bab3-438f30556c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "810bdaef-12e4-4f28-9194-b6131a238b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f403804-2e73-4c26-bd92-62cacb3eebe0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3cc01d-9ddd-4b47-bf55-e3ec21aa5ae4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "535effd2-d155-4b06-8dbc-0522d799d472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0de52347-d288-41f6-98bf-99f6a8450be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd076d43-24e3-4654-a49c-18631518a6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592c2359-8c9b-4654-b366-2d247d9e0380",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa42460-d65f-4b5e-995d-dcb062be8748",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c576b67-7153-407b-9137-ba8bbd9c3f59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246c7797-a24a-45c8-89db-a4531e98312d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a30cbf-4bca-4ba1-9b79-55a29664fb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b5db1d-2216-458f-8c36-c76f8194e417",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1092848-7065-458d-a2b2-1b8e7a7532f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e241dab1-0d67-4078-9e13-0478c5eb7c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90740f66-011b-4b36-8b06-d0b094991d01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd36bafd-f686-4c0e-9abf-88543727e43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be82ab03-695f-4c9d-8992-5f501f5ecff2",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb35d31-be00-4e2c-b427-3d9ea7947427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a907a4e-1d18-42e3-ba28-a0834c58db3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1e61df8-2d37-4dca-ba44-1213da1cc47e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c095751-121b-4da3-aa17-d72a85a8f170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da80f92a-af2e-4a65-9128-b7142f827e7d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecd09fe-6b5d-4fd7-a10e-66c434b0f469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521411db-c4bc-45d5-a897-ab30e12fc3f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ef596c7-9681-4db2-a2e0-96a0c36daf37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad63ac45-5d3e-43a7-8792-6010809d95c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c13610-11dc-4b1b-9197-8fbf8a9069db",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360ece8d-b232-4565-870a-c89bdb3ee911",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6e6919f-697e-4268-b9ef-908bae57dc8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376c0762-3c59-493e-aa57-0eba6ec3a9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96493a5c-0746-4a8b-9b54-ac92b801990d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e59152-4190-407c-81a1-726c8f7af87e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb179a1-0a79-48f2-a56c-3e0c3226007c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3dc2d4-6c23-4254-9ceb-dcaac9d6ad81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1e872f-b338-4ad3-8fdc-c77ddbc96b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb999c5-8650-499f-9e21-4bdc92f8752d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65f57e4a-0223-4033-92fc-c6ac27f8f703",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3d170b-2669-4db5-b391-0d3bf4addddb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c882950-3072-470f-bc8e-e48c8d696c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a96c7bb6-b26e-4642-944b-c8d7915ee93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79cb13fb-fe26-46a4-b510-f7930e28e2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8943c9e-3d28-42d0-b5bd-e4ea80b74456",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9257a8c0-6da1-4701-afb6-99e5c81be7b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b896f462-4d8f-4480-a862-209a6535f166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486d03ae-4b8c-49c8-8f84-4e677708706e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd86a00b-db9d-46db-bb82-8b87855d0a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490bea40-4b87-4835-ade3-375b9ae73a3b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "388e063a-8dee-481d-9431-8b3782898f65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c02fdf57-6854-4e1f-9076-b1f669c032e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c11c95-ae70-4fc8-9b1c-9ecc4848dd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a625293-7a2e-4b83-b587-16e30061196e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a983ee-1b5f-464a-9e3b-f3b7be60054e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b019bb7a-0961-4c78-8a69-83e91ac31133",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3802ce23-b490-4bb2-826f-21667e6341cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52608c41-73af-4b0b-a043-b4acf7419146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a7ac55a-748f-462d-8bfb-8a119a1dbdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1478dd9-ccf1-4dfc-a1dd-2f3d62be4b5a",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f0b4ef-b1f0-4056-ab27-ada2d5a11c61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "deadf1b9-b8e4-4599-9c2d-90957d2bfb07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5661a1e-772d-4a21-b8c6-f5decbaa16fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e16ce20-c78b-4408-a09e-e3fcaa8c7b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3ccf267-8114-45d8-818e-93c0508b1f38",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456db9e4-17e3-4773-867f-f24d5d8426e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "831d94e4-5fa6-44f4-84dd-6b866b1e6732"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f878523-7abc-4910-981b-1fb00f0e2264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8582c4ea-9d99-4854-810f-122bb3436fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f912fd60-4147-4b30-9a07-5baaa8a40ae6",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32741a26-753f-4e5a-9578-499941f3f005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ad7eb08-ceb9-470d-9b66-679e27a081a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7b6fab-a904-4b69-a7bd-de05e540a3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68dda1b-c299-4e20-8db2-0355d7a6718c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c143ce2-eb12-49ae-8827-a9308f16cffa",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2f9eb8-a196-4445-881f-26489a8ce9da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc5ef15d-b107-4ab6-aa4e-6baab18d0307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28da806-44bc-462f-b239-d92a63f55378",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0fd70d8-a83d-460a-acd7-85e4dd506cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0be608-aa17-48a3-bf68-307375f173a0",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55f63bf-2d71-4507-832d-f06d67465f87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd439ab8-c523-4320-9613-eb939d0156c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79685b81-0fa5-4e4b-b07a-89c59338935e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb304360-aad4-4868-a383-bbc491dbc0fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0ba27a-9eb6-4a27-89df-6b55bff6720c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b65c2e1c-9737-4de1-8f8d-a29b1b31c643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a652b503-ca89-4885-a89b-570dbe1f957f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32168e01-e84a-431d-8384-bfbd4b460e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba4c7a8-4d7f-4598-8046-d01c41695525"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bdb33ba-52e2-4ceb-b7be-d3e6e03ef490",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b058f7-b2c7-41e2-8a4b-67042d632c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65540afd-cff3-4041-ac8b-333b0ef475f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85e52d2-ef66-4c9e-8880-4f1234c1a256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e320e872-2c33-40ba-9b0d-d41d3d5aff38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2648fc64-3236-4a4e-8935-aa28f8c1464f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7043c1ac-3e02-4d9c-9b45-91133b0a2c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b452880-f1b8-497a-9261-e6e8d698ee09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cbffdb7-dc13-49ec-b355-d5074b9c7a39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4397aacf-e3f1-44f3-afa3-90f835c60731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88d4322-b7d0-4ec6-9717-71a76f0a92f9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f899e93b-24bf-40ce-9318-9ffe3823e246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc3f0711-c78d-4469-8f4a-7d8dda00c6b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8aa4a85-ca63-46bc-b044-d0d9689e8421",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0692d2d-ea25-4989-805c-a03649d4d11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541455c1-3849-4349-8a9b-4460115726da",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd5ac1d7-f69c-470c-940a-adddb430ac5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dde84689-3aa3-409d-9b8c-929cd94d6e73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af4e9ab-65fd-4ce9-806a-c6ad4ed101c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407b118b-274b-46e0-82f3-98839e02969d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e6d40e-a0a5-4282-a857-b4080dd992a3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0e7cd5-5672-4dff-8fe0-19b22da7756d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ced4cf-83b2-4712-9e74-0c64ef6cc32a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a7be3f6-736e-4ac4-88c9-11d7b6032340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b5edad-c6ba-4117-b9c3-4379e08b4f2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31ed1119-93c9-4407-aa72-5c654119fd0b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9c02d1-8e08-465a-b9d3-e6ba7329d4f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6087e074-5776-4070-a2f4-9ab71724fce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9058df31-1da6-4a34-a0ab-7740bf902726",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c2ddbd-eecf-47fb-87fc-b308a1d8bbff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36343caa-d8b8-4bea-8724-569420b9f490",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58eeb7d3-cbca-4887-a0bf-fdab99b5348a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a55c7016-f377-4817-8666-20a17348f3bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1600ca48-164f-47c5-aa3e-eb83939052f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd52e9a6-d54c-46ce-90fe-f68450211cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01707a5-e959-4c7f-aca0-f13ead4fa24a",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db00a23-96f2-4c17-9fff-ba92fd015fdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4763e1be-6f0c-4321-8c3a-ea064308f6d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd917f0a-796b-4752-8c02-a2c23b182b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1b3745-4e72-4370-8353-a880b22051b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd3066f-b1a5-4de3-99a8-db2aaf47727e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4b05ba-082d-43b4-b8a3-6bfceb087ac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0efd9032-0eb6-4ad9-a1ae-232c409b9f5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09e9072-02db-4224-9d39-1a0023dc6f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3a993d7-1a89-410b-ba82-67b490331774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc72566-5baf-4232-a31d-c1eeee755997",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7cc7be4-9cea-42b2-8106-a01ac5c8d3af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2b62361-ce18-4606-833d-6f748c2d2586"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738201ed-abd6-4a31-9eaa-0f08a3aa9dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf8f22f3-e9eb-49bc-ba26-f82c81718848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2c6112-c982-4789-94d5-9be5e6cad7a9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944fb55c-d40b-490c-84d2-3e23bc455fae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7eead316-adba-4f47-848f-a28a02e1715b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2db5738-7faa-4d0c-b6f9-2217f8d723de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ae86fa-14a3-4393-a727-fccb9036880e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b3d77e-6dfe-4fda-ba9b-a4552994f96b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241a3dad-fbd9-4317-a38c-39010b38030a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5c4befc-225d-4060-9cb0-95c9b115f8f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aa7d2be-6e7d-458f-9fe5-66992e086c49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f85c617-91ec-4f80-95ff-ac9d894e9066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e695ac-aee5-43b9-845c-ababc07e67b1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1262ca8-ee64-46e2-8fa0-8654d693e923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce9d2c39-d188-4c43-aa68-7b56465db655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17cd0c7-d970-4a2c-8413-622f315d35e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1eace1-5d23-45d6-920d-bf5dbd76743a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc51974-8de5-4a5a-8be0-b8ba5b17920b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83ecc9ca-8975-46a6-b26e-527741562084",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9039e9cc-c196-46ed-b4ab-5eea9bf1d837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dab129c-5804-4b01-b6a2-15cca49afebc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41fc945f-ec2c-4573-99f8-a2c8ab46ed50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914d203f-f36b-436d-a3e0-36f81b22d0c4",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0608d464-d5b0-4caf-8763-ae88d2608013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80f1211a-ad55-44ac-ba30-cc3e48d6cb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c4f9ae-97e3-4d45-b9c0-9dcac7caa2f5",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7764b4ab-be07-463b-aed8-797d4dda997f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94550aa-0df3-40ff-890c-a58a89518c3f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbf41ab7-1070-411e-942a-851a880e4e77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fe8af74-5d80-44e2-82c6-0b6d055618b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41802a6c-187a-4f27-ab61-fcd9a60dbce0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5f493f-92ad-4d32-a65e-ac3e357c3bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb307a5-4349-454e-bf5d-4dce7a6514c6",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb9685f-a080-494c-83fd-ca1880d4fc56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ff8ac4a-bc4b-4440-b8ae-acef3a83c564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e50fc07-27a6-4154-9504-48a435348939",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "492891e8-ccb8-4574-bcbb-df8e9ac333fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ec75bc-20c5-43b9-87d3-bcd46760c7e9",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c4a190-af65-4670-a687-530f2dd8fd0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a53b3e38-e50b-4191-a296-154f99901177"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "032f3c1f-fbf3-4aa0-b0dc-cd91c0d3452b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af16323d-0453-4eb5-a3b5-032e1c081911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54bc5cf4-8d2c-4438-a788-6bff8143f2e6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c30173b-a123-4ff8-8cec-520f177768c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ce371c-2851-4e46-a4ab-086283569482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f6ea779-f937-40e0-a851-a3567e5009a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60a8dc76-56ce-4604-9045-f09e54660814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc829f66-953d-44b1-82c8-32db4b40dd83",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f7fe4c-1c5b-4249-bd03-a83f6b4deed8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ed4b80-4e74-4b95-be39-a5c94dc5873a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13391798-77b3-4772-a8f2-6ca4b005256c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a27228-9500-4135-ba8c-37a3a12e80fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072c100c-7fa5-4bf5-ab4f-2b1fa2afb4b6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4e4487-5d0c-444d-bf68-56a1b3a349b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f2a003d-1763-4053-ac64-d356e7715fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b810e96-949d-4565-a234-ed4988b60555",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "437aede8-bdba-4a2a-861c-ef818b5a4548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f656d97-0bd4-412f-b1bf-ee0c4be5bd81",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d83b6173-3c6d-483f-bb4c-4aa1fbac5acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32dc22ea-c1ed-42fe-9301-5e3ec6887fd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ccf7dd-6810-46f4-9050-d42f88b7d50e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cb92e5e-cdb4-46a8-a206-5b417a4198c2"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3e3f6a5a-8a34-422e-85d5-c07713e43f8a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63a08b3c-a0b2-4fc9-98ec-79c6f025adc3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f7faf1de-6811-4cfd-897b-4ec14e748cfd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2411155-a29d-4ac4-ad19-0d57eedaa981"
                    }
                  }
                ]
              },
              {
                "id": "4fb5da0d-baf6-437b-8ed2-8aeefaa24c78",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e4d064b2-dfd3-4bf3-b835-520dd551686f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee780fa-6ade-46c7-a1fb-1613961aaef2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f663ca80-8957-4a79-b2f6-3c02ae47e351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "334d306a-8148-4754-bb5b-2bdbf4beb8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "db474eef-ad14-4d5a-b949-f5b072533756"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7fe00b4f-92b7-4ac3-adc2-54ce69888ebc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2a9273a-f46f-4825-9e71-3e31b524ce39"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "323e737e-e5cf-4807-a56a-3773862793ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1396059-387c-4f60-96fb-e77243e987e6"
                    }
                  }
                ]
              },
              {
                "id": "695f772a-2ad5-4925-9b6f-d330de512324",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "fafe9125-1796-45a0-b10b-7bc7c6b5ee03",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6bfc2c-4eb6-47ad-9a76-6924d744a660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "546ff36c-acf7-4e7e-9ada-10fdc199cd49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91c1715-14a6-49d0-8ae9-ed8fd984fb4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "897ec175-bbcb-45a1-a229-c56971e831a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1422f061-96f4-4887-88da-78ac31874569",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bcfed474-9373-4f14-9b95-c083b23e3463",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ece87a5d-89c6-413b-8342-03a91b325d14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "14daf9fe-5b05-45fe-b771-dc9cab696385"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f6bb67b-46a3-4c12-91b6-b10e16d926b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce7a89c1-3754-497f-ba6e-3b28f23a7b36"
                    }
                  }
                ]
              },
              {
                "id": "14fce766-ae4d-4df7-9bb0-1ff7a172a4f1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0d9773a-b2c9-46e1-8bec-cd3f73fe982b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "992d32fd-8173-4de8-9e8e-d85c17fadb33"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bd620ef-9a5b-4e2c-9ec2-7f13014f4699",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8532e97a-d4f9-4c49-b1a6-3aa6e23d73a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af76319e-81dd-44b1-a3b1-e3ac8435c1d2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "5f3423de-c6c8-45b3-9a08-7fa3ff50975e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab503ef8-40b2-4ab7-a258-2f0541f78b22",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c25c30bd-029b-46e6-8891-35e686b59a93"
            }
          }
        ]
      },
      {
        "id": "3b1a9ab4-756d-4e6a-83ce-fdfdc1181848",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f2b6d03c-87d5-4685-b312-cd00bce9ddbd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3afbe6bf-f40d-4c80-876f-210918ebdc40",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1266fad1-2fd6-44e4-801a-477a2e9dc5fd",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d47bd8f-4879-4637-b4b0-99c212531dbf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d0c20eac-f10c-4c78-9ccb-580b8ff1e301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9813cb9c-3590-4648-b8fa-d1919bf60f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0ddda10-103a-4d46-a030-449cd4f4bff4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b2da4477-1676-4b63-b0ea-4922f2625884",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9335fa2-9348-4909-98f4-e2490afde429"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5dd9630b-cdbb-4eaf-b447-9d200da9cc50",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a35d8f06-c4d7-4dfe-96c5-f0266d88e2ee"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81dcb581-7dbc-462c-94b5-72df63b9183d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6b8d2781-69ce-422a-866e-667f73b1a0da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9f8d5f4d-84d4-4b1c-b9c3-f84ee24789af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8dd5a197-6c31-424b-89b5-fe6ccff9c5e9"
            }
          }
        ]
      },
      {
        "id": "472a9e9b-80fd-4b40-8707-cee251a8ed83",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6e767530-7401-43f8-b29a-c76319211e93",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b044500b-36a2-4946-8be3-5ad15a6b4ab0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e40a1871-6276-4af1-a007-3fe1c8849a83",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74d52e8-3d99-4fbf-a139-9b58625db122",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae8d2767-c480-4709-9d51-5ab854b0d983"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a28e3f98-8fb8-44d1-b81d-433ece64d3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0063fbd8-37f4-4255-8651-4a0b3a9d985e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ba59700a-a49e-4b16-859b-4355f582833a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0e37362-e7fa-4038-8db7-8debc382390d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "856b65a3-de34-49ff-8fd3-e4ce7e33c939",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de7246c2-34f4-47c4-94bb-0e332cb2dc50"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66aee398-8789-452d-81d2-9a8cb5a231ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4a761235-a53a-44f3-bacd-b30ed0884576"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bcf193de-b54f-4438-8f6e-774d1ec04583",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c94a8a6-becc-48a8-afac-335bd599756c"
            }
          }
        ]
      },
      {
        "id": "a0b927e1-b068-4a09-8266-3cbcacdf3e3d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "dd364b4a-3a0a-4694-b254-8f20095e911a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b3cccbd0-7035-4732-b336-f09f9daf5d7c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c2754cf8-94cd-4074-8fc2-1d3fa33b50ec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64898584-67a7-4fd1-aaa8-78129ae26910",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8965f19a-6769-421d-8218-0099173efaff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b501f3f-2bb6-48f3-9009-71d7441bc52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95839c0c-aeee-45f2-b08c-edf45792f700"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "314bf0d2-5f73-4c2b-8647-202a6a1e09b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e41b6ba-9c0b-457e-9adc-ad989b971ae6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e7520dd-efd1-4005-8449-949e37398e02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b74bc390-a722-473e-a85b-e589671041e7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "285b1d6f-76e8-4ecb-85c1-aaea07646da2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bdf9b5ba-0484-4eae-9916-429ffacd5296"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f271c45-4076-4f7e-a388-84915751632d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3db94e2-1f9c-4a7d-ba5e-439bf1a819e0"
            }
          }
        ]
      },
      {
        "id": "fc9b5fa8-4700-44be-8969-ef6409fcdd00",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdb4d493-fe80-4935-9359-4219add0eb12",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2a75bd1e-0ddc-47ca-964c-4d45c4a53577",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "fa1348ce-d94f-4207-ace6-9b8eba78ea62",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fcb1e4b9-d6b5-4a26-b50b-ccb6d0123b6e",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d702ef90-48e2-4a3f-aa3d-fcd9a9aa0588",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.16140350877188,
      "responseMin": 7,
      "responseMax": 520,
      "responseSd": 67.90107808457614,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706056627215,
      "completed": 1706056652762
    },
    "executions": [
      {
        "id": "fd709807-4bb4-49bb-96e9-d05b06d7f1c4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "900b30f6-0501-4c66-a340-1b0ce7d0983a",
          "httpRequestId": "809b48a4-8ed1-45c4-b4dd-dbafce41d45a"
        },
        "item": {
          "id": "fd709807-4bb4-49bb-96e9-d05b06d7f1c4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "48d3e8aa-38a1-42f5-a322-5876f6597f0b",
          "status": "OK",
          "code": 200,
          "responseTime": 40,
          "responseSize": 0
        }
      },
      {
        "id": "1da89a9b-0521-4281-be92-c219c9d82564",
        "cursor": {
          "ref": "418012e0-db12-4676-ba30-7fcb00f9d687",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a0d736f3-7c4e-40dc-b2a0-be30fb215f8c"
        },
        "item": {
          "id": "1da89a9b-0521-4281-be92-c219c9d82564",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0d88efaf-37a4-4734-85c5-bd4b22a606e6",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "06bf5068-3812-4888-a751-c59a53cf5b13",
        "cursor": {
          "ref": "1e1735bc-cd54-44b7-a402-d3904568cab3",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "470d8b4d-6a98-40b2-ade0-fc579ca66f6b"
        },
        "item": {
          "id": "06bf5068-3812-4888-a751-c59a53cf5b13",
          "name": "did_json"
        },
        "response": {
          "id": "15591a7c-a5a4-4897-a8e2-8bc8257cc687",
          "status": "OK",
          "code": 200,
          "responseTime": 452,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edd05da-2e4f-463f-a6ec-fc6dbd050c89",
        "cursor": {
          "ref": "912d2c9a-a989-4bbf-9868-c6d0ddce3e1c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fd6dffeb-e138-42ed-a54a-187b670ed528"
        },
        "item": {
          "id": "3edd05da-2e4f-463f-a6ec-fc6dbd050c89",
          "name": "did:invalid"
        },
        "response": {
          "id": "2a69f51c-2189-4efd-bfb5-7b561e28867d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edd05da-2e4f-463f-a6ec-fc6dbd050c89",
        "cursor": {
          "ref": "912d2c9a-a989-4bbf-9868-c6d0ddce3e1c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fd6dffeb-e138-42ed-a54a-187b670ed528"
        },
        "item": {
          "id": "3edd05da-2e4f-463f-a6ec-fc6dbd050c89",
          "name": "did:invalid"
        },
        "response": {
          "id": "2a69f51c-2189-4efd-bfb5-7b561e28867d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47979420-5fbf-4160-b163-fe05a4d44f20",
        "cursor": {
          "ref": "d085e538-dd04-4595-9c06-7ec4a92740ef",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "78ffa8cf-5481-4dad-abf9-61ffd7853174"
        },
        "item": {
          "id": "47979420-5fbf-4160-b163-fe05a4d44f20",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f43be74b-fbbb-45b8-a02b-8a37b21f0548",
          "status": "Not Found",
          "code": 404,
          "responseTime": 81,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d653c0-5345-42cd-bb3b-68469583c94b",
        "cursor": {
          "ref": "48980c09-be5a-46ad-bfa8-a9264f790f4c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "85d6b9e0-5295-466b-ab12-07aefc490252"
        },
        "item": {
          "id": "11d653c0-5345-42cd-bb3b-68469583c94b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "3dd203ba-eefb-43fc-8283-bef58afb264d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de8c9f8c-1c7f-418c-8d09-bf698fc303ab",
        "cursor": {
          "ref": "f6dfb644-8d02-45e3-ba59-b1a7412b4366",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2d137cd0-bccd-4d7d-b572-cfa9c3aaf09b"
        },
        "item": {
          "id": "de8c9f8c-1c7f-418c-8d09-bf698fc303ab",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "3c603142-3ac9-4120-bc89-fc7d59701b4e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88dfc5e0-d8b3-464b-b300-700392a78e80",
        "cursor": {
          "ref": "f58e636d-4b95-4a4e-ab8a-b52d66bc5456",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2d02be36-ef6c-44dd-9d9f-e8922ab5070b"
        },
        "item": {
          "id": "88dfc5e0-d8b3-464b-b300-700392a78e80",
          "name": "identifiers"
        },
        "response": {
          "id": "3d0e061a-cb51-4a7f-8600-576b6e514650",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57adf702-36c0-4c77-8b9a-907c6fdd49b3",
        "cursor": {
          "ref": "779976e6-2eea-4d3e-a545-3435a3b397c2",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1cc0edfd-6017-4d2b-a7a9-c3d9c35db9c4"
        },
        "item": {
          "id": "57adf702-36c0-4c77-8b9a-907c6fdd49b3",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8050aee6-da4f-44e4-a398-d1e0d937a965",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0b4bf1-bc05-49ee-88ad-d8db16fcad95",
        "cursor": {
          "ref": "f8309903-cca9-4290-951b-d22535898ee4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "380041c3-cefc-4949-90b2-fbad9913b07b"
        },
        "item": {
          "id": "7d0b4bf1-bc05-49ee-88ad-d8db16fcad95",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c37eead2-6c32-4f9d-8664-8e963345ab9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19f2f840-9a06-47ac-915b-4ae33519df34",
        "cursor": {
          "ref": "f06a0afb-0d98-4678-9d13-8b266530cc4a",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0139954a-404a-4250-a3d7-5d96b08efc90"
        },
        "item": {
          "id": "19f2f840-9a06-47ac-915b-4ae33519df34",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "12fcb9fe-5ee1-4db9-bc7f-f23fef3dffbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72865a8-418e-49d6-a0ae-fcc614a22e32",
        "cursor": {
          "ref": "ba2657de-a18a-4ca0-996b-170fe55d7b3b",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "5cbf782b-9b8d-4e4b-b8df-6258379297a9"
        },
        "item": {
          "id": "c72865a8-418e-49d6-a0ae-fcc614a22e32",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f665e6d8-ab38-4a8a-bc18-43f14b431623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0f5378a-fa38-4ece-8939-340007b16ff6",
        "cursor": {
          "ref": "61c77e92-4049-4d92-8fc4-cf2e8917a47f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2aa44ed0-b529-4804-a0b9-809a16c336a2"
        },
        "item": {
          "id": "b0f5378a-fa38-4ece-8939-340007b16ff6",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "27edc08d-57e7-455a-861c-010976e7e462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0587ecb-7f5f-4bfc-a3c1-ffa1aaeb3066",
        "cursor": {
          "ref": "7be503de-22f3-4463-8e44-7c5269f16d73",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "23265f9e-d8cb-46e8-a668-f6a242aec026"
        },
        "item": {
          "id": "c0587ecb-7f5f-4bfc-a3c1-ffa1aaeb3066",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9c01fa0b-c3e3-4540-97aa-050d0153fdc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b53f48e-d44c-4ca3-9681-81526a9eb9b2",
        "cursor": {
          "ref": "61efb689-5247-4e3a-a453-176a4336f377",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3fb246a3-60da-41c5-8256-3ae68029951d"
        },
        "item": {
          "id": "1b53f48e-d44c-4ca3-9681-81526a9eb9b2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4ee97e2a-d934-4246-abb3-aad4b94e35f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d601b83d-8569-43fe-846e-cfca98e979b9",
        "cursor": {
          "ref": "0c9b05f6-bda4-44c4-8a85-87c3e3d8a572",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cd982f4c-4d22-42b5-905f-2070aab0d0dc"
        },
        "item": {
          "id": "d601b83d-8569-43fe-846e-cfca98e979b9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "8b980de7-f0ac-42a5-a5c7-df38e0629ea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff27621a-9100-4d53-b725-b71dc8141220",
        "cursor": {
          "ref": "af45c1fc-3328-4fc4-8167-3eaaccfcde5c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "2c7f7f97-8846-4f86-aeac-189bd30ce7a3"
        },
        "item": {
          "id": "ff27621a-9100-4d53-b725-b71dc8141220",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "0f8f6933-b54c-4121-bdb5-af79522697e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7215f0cd-eacf-4b08-a391-616eb7b2be87",
        "cursor": {
          "ref": "28153dd2-0df6-4dc1-85fb-e5ec317f859a",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0d01b2a4-f824-4024-bb06-6947e4445bfa"
        },
        "item": {
          "id": "7215f0cd-eacf-4b08-a391-616eb7b2be87",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "42e44292-9bf6-4434-bf94-55162366c307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0110664b-f6f1-42b9-824a-17ecbf8a2a62",
        "cursor": {
          "ref": "fd081b96-ec9f-478a-8b90-1cf358745050",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3e61d616-ef18-4732-a1b6-982a3ab8a8be"
        },
        "item": {
          "id": "0110664b-f6f1-42b9-824a-17ecbf8a2a62",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "da91e189-afba-42b0-8150-3aea595c0fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d4d2d1a-36ec-4dbf-a96c-73fe96055a31",
        "cursor": {
          "ref": "e71084f2-b6c8-47af-bb4a-e04f2ea12d46",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "560515b7-ab4b-484f-9d2c-43fe47da92c8"
        },
        "item": {
          "id": "7d4d2d1a-36ec-4dbf-a96c-73fe96055a31",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bfcc9a02-b8e0-4864-9208-b959e8192689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61900be8-499b-4b90-9e10-2f142bc53b9e",
        "cursor": {
          "ref": "f9253fcc-373d-46c4-8f7f-b744526f4069",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a57872ab-7636-4afc-81bd-f1697747e54e"
        },
        "item": {
          "id": "61900be8-499b-4b90-9e10-2f142bc53b9e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a843106c-53db-4911-a3f5-3cef0cfcffaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "988d490c-5b98-413a-9685-1042c44af09d",
        "cursor": {
          "ref": "a488f1e1-3281-42bf-b942-08cd48056e7a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "bae3d2f2-eb0f-4bd8-bd2d-bf3b2c74829e"
        },
        "item": {
          "id": "988d490c-5b98-413a-9685-1042c44af09d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "7cba30fd-db00-4471-a154-0ca3d19d8bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c08fe507-5fac-44be-8158-1e835159ab6d",
        "cursor": {
          "ref": "627c1831-6e39-4b49-a404-01360ac590a6",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b5f51f65-506f-40a6-a9b7-7b66c43abf66"
        },
        "item": {
          "id": "c08fe507-5fac-44be-8158-1e835159ab6d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "255dca5b-4b4e-4db5-a3c7-137eca1c5d6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c805fc9-9ace-4e6d-9d08-5b7a125cab52",
        "cursor": {
          "ref": "3f723635-4884-4b01-ac81-f2179de6f084",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "d60fb8d7-0a3d-4709-958d-23a1b3dafc14"
        },
        "item": {
          "id": "8c805fc9-9ace-4e6d-9d08-5b7a125cab52",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "d6b1d277-c93e-43b0-aa1d-6c3b0ddc5520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3da89961-457a-4ec2-b898-1a0a03569244",
        "cursor": {
          "ref": "a1cd9911-fbd0-4d6d-b973-fe096a26b13e",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3aa2c8a5-dd38-4eb3-9474-a86446fbdb52"
        },
        "item": {
          "id": "3da89961-457a-4ec2-b898-1a0a03569244",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "55458ac1-33e8-46da-80a2-4ed190d43855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5732ea3-5b01-48bd-b155-6be6136495db",
        "cursor": {
          "ref": "2a5d896a-d290-4903-9445-0e5eaaeaff25",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3f1637b4-3705-4269-a437-072502d830a8"
        },
        "item": {
          "id": "c5732ea3-5b01-48bd-b155-6be6136495db",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "53e57192-6390-4963-b016-414401286e29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898cde47-6395-470c-a006-594561c3a690",
        "cursor": {
          "ref": "564289ad-588e-4b4c-a15d-a3f05f322e89",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "bc2d8583-6c35-4128-9125-c438c6f00e2a"
        },
        "item": {
          "id": "898cde47-6395-470c-a006-594561c3a690",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4e098992-01a0-4aab-afde-298d5a1d24bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a63a241f-35e1-4e55-9496-e952ff7d7bc5",
        "cursor": {
          "ref": "e5c1f028-9b59-4f56-b773-ca9bae9d72e5",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0ee59ee2-dc9e-46e9-bddf-8d93f93d4ae1"
        },
        "item": {
          "id": "a63a241f-35e1-4e55-9496-e952ff7d7bc5",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "1dffd87a-b523-433f-b8da-bc8226823231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab854604-aaef-48cb-bde1-a6d73f785398",
        "cursor": {
          "ref": "d3210a50-87f7-47b5-a450-ac713276e102",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f29ad8fa-e1c2-49dd-9cc6-dd9b2060ebe3"
        },
        "item": {
          "id": "ab854604-aaef-48cb-bde1-a6d73f785398",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "659d397a-4310-4657-9ea5-afcdc3f9bc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00a1fce-67e6-4cad-b653-e166ab1c7dc0",
        "cursor": {
          "ref": "ab221a59-c016-4a13-9ed3-eddf63605771",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3112bfbe-4c76-4e3a-824a-e0ad93d5d3eb"
        },
        "item": {
          "id": "d00a1fce-67e6-4cad-b653-e166ab1c7dc0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2e1d9c8b-63c3-460b-a15f-ac66da46da71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c743a2fa-621e-4790-8b5e-519d6b323a73",
        "cursor": {
          "ref": "2591f728-6cda-4034-9d43-0741c19ea248",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "d49f2410-c656-4e7f-a354-41cacdad1385"
        },
        "item": {
          "id": "c743a2fa-621e-4790-8b5e-519d6b323a73",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "874ceae8-0337-4d25-9648-664cc1c81b92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec2a6f3-006b-4a5c-b4c5-3608b3300364",
        "cursor": {
          "ref": "502989e7-3044-44a0-b400-aae92859f864",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "14094f56-579b-464d-b997-9ac5f2b2b251"
        },
        "item": {
          "id": "8ec2a6f3-006b-4a5c-b4c5-3608b3300364",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "73c34354-994b-447d-b92f-6e6dc85bc09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f5af04-1da2-4ba3-aa79-02dd10ae0cb5",
        "cursor": {
          "ref": "7485f2b5-6dfb-4276-959e-9cc7dc9d59b8",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "bdff2047-ba1a-45b9-999c-77236add52b8"
        },
        "item": {
          "id": "79f5af04-1da2-4ba3-aa79-02dd10ae0cb5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7e5b7532-4a90-496a-9bc0-efbcdf1257c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e5f610-10dc-4a5b-98a6-a6cb1d3122f8",
        "cursor": {
          "ref": "579a46da-8550-4dee-bdd6-25b60d60b915",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "406f9f3b-43d1-4f6b-8614-f36033803241"
        },
        "item": {
          "id": "82e5f610-10dc-4a5b-98a6-a6cb1d3122f8",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8936f05c-c124-42c9-98e2-348835f1a9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fb9a502-6286-4067-a265-a2b4b54c8912",
        "cursor": {
          "ref": "0666d40e-04e6-4bc5-b482-7b8901e9ca7c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "1d8397b6-199d-40b2-9fc2-004afff77341"
        },
        "item": {
          "id": "0fb9a502-6286-4067-a265-a2b4b54c8912",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "aff59f27-a5a0-41fd-8a30-02e5b5d70c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73d4fb4-d3f7-4f43-baae-34554699a4d6",
        "cursor": {
          "ref": "d8e33379-bd2d-4346-a7a0-33b2927ab744",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1fe20c67-65b7-441e-8d61-59131d0d7c3d"
        },
        "item": {
          "id": "e73d4fb4-d3f7-4f43-baae-34554699a4d6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d7e8f542-19cb-4388-bdff-e137d1c6ffe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1faecf39-0735-4374-ad73-6a1843b1b051",
        "cursor": {
          "ref": "d5c3087d-4c1c-4b7b-9e59-e740878f8f57",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "74480fa9-01fc-4b4a-81a1-5ea0523da665"
        },
        "item": {
          "id": "1faecf39-0735-4374-ad73-6a1843b1b051",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cb0e9658-67fb-4a61-ab5a-144128be83c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620afbb4-59da-464b-9c9c-57e3b3566fbd",
        "cursor": {
          "ref": "fb966782-c583-43b3-a29c-d93bca246088",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "43d91e7a-449e-45b4-868a-b42a8c6496c1"
        },
        "item": {
          "id": "620afbb4-59da-464b-9c9c-57e3b3566fbd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a03af654-6c4d-48db-aed8-168c229068cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d26bec6d-c15c-4e32-a886-fda1d0ccb0d6",
        "cursor": {
          "ref": "4de3f3b3-a3b4-4892-bda3-5b46dc2b316a",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a699556f-e845-4c8b-afe0-8e16f8e8fe27"
        },
        "item": {
          "id": "d26bec6d-c15c-4e32-a886-fda1d0ccb0d6",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a47ba1ce-3ebd-41aa-a72d-e5022164658a",
          "status": "Created",
          "code": 201,
          "responseTime": 520,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "42a4c65c-05c8-4f7c-b797-073985ba89d1",
        "cursor": {
          "ref": "70727865-4da4-4a2b-bf5b-32cc1f79c68d",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8ba1dcce-2a9b-4ac1-925b-f17a0f4a95f9"
        },
        "item": {
          "id": "42a4c65c-05c8-4f7c-b797-073985ba89d1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "4f0bc74d-da48-45ad-a5a9-dfd9eb1bf393",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "f7550f66-5ab4-451e-868d-bb55666acd4b",
        "cursor": {
          "ref": "6b21c981-f898-43b2-872b-57427bae59e4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7e979e14-2c7d-4d04-92e7-c888e61ef7d3"
        },
        "item": {
          "id": "f7550f66-5ab4-451e-868d-bb55666acd4b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "f4f92ec7-2f8b-4f63-b4b3-00398d923e02",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "aab68cee-1be1-4299-a70e-9fb3ebd48741",
        "cursor": {
          "ref": "4c8af0bc-8c44-49e7-b470-07bf892af13e",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4a6bb9b3-b1e7-4b9f-bb0d-6eb343a7d1b2"
        },
        "item": {
          "id": "aab68cee-1be1-4299-a70e-9fb3ebd48741",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "29e6d31c-4ddd-4270-9446-c65eca79e7ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6256d4d6-f0e4-42b5-884d-491d7b014996",
        "cursor": {
          "ref": "2f6c07eb-6ca8-4178-9a0b-9f928691e290",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "61d74e55-9099-4280-8dea-51c450d5c85f"
        },
        "item": {
          "id": "6256d4d6-f0e4-42b5-884d-491d7b014996",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "051eff1f-fdb4-4bb2-b6d8-53861cf16f31",
          "status": "Created",
          "code": 201,
          "responseTime": 216,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "82559c5e-7c24-459f-a480-5717591011d0",
        "cursor": {
          "ref": "6d81052a-380c-44c0-b1ed-ea7a1e29f203",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a0a95d8b-2312-4696-90ea-fd044a32e42b"
        },
        "item": {
          "id": "82559c5e-7c24-459f-a480-5717591011d0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "49e949ba-227c-4859-96e4-158643fcac00",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c957ab76-004d-438c-8aa2-fa01f0326016",
        "cursor": {
          "ref": "a2d68be7-1a0b-4c11-b4b8-e72463b561f8",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "fb30da24-b4bb-4d3f-a7ac-e4278a63a075"
        },
        "item": {
          "id": "c957ab76-004d-438c-8aa2-fa01f0326016",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "7e8a3b7f-2144-4fd6-aa08-e816ec49de70",
          "status": "Created",
          "code": 201,
          "responseTime": 214,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "10791715-ee98-431d-8bb2-3928ef177897",
        "cursor": {
          "ref": "911a3382-2797-4f18-8658-f056ffb086fd",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "02671697-9c07-445f-b490-0986f71d06cf"
        },
        "item": {
          "id": "10791715-ee98-431d-8bb2-3928ef177897",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fbbdf729-d56d-4002-83d4-60d16610556d",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4aeaab5f-4cb7-449e-acc8-02dd3c1da4b4",
        "cursor": {
          "ref": "1355fe63-067c-40fb-94b7-58632ae06660",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c5a82b77-4d21-4b1a-aba3-52357312fea9"
        },
        "item": {
          "id": "4aeaab5f-4cb7-449e-acc8-02dd3c1da4b4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e3c26b4d-5659-4108-801b-aba33afe959f",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "c8e531ae-d544-413a-baa3-20667e59e47e",
        "cursor": {
          "ref": "6e847353-9b9b-474d-9fba-25c45155449b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d61fa33e-e93e-4b5f-9f81-2283a13abe26"
        },
        "item": {
          "id": "c8e531ae-d544-413a-baa3-20667e59e47e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7a8a49a5-c65b-4061-b295-e2472985c1ab",
          "status": "Created",
          "code": 201,
          "responseTime": 215,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "209a30bf-8fc9-45a0-b0bd-6a499e840955",
        "cursor": {
          "ref": "57dcc455-d0b2-4ddf-b44a-a1bc27453cfe",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3124d8d6-8046-4ad4-93e3-43f117065d05"
        },
        "item": {
          "id": "209a30bf-8fc9-45a0-b0bd-6a499e840955",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "9adf992a-8c4c-4abd-91d5-e2d2920ff3ee",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "83a10a6e-4423-45f6-8345-7ff125355744",
        "cursor": {
          "ref": "0cc6bd7f-efc2-42f5-aad0-9696431d57c6",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a839f3fa-b955-4271-8ce1-4f6379135bf4"
        },
        "item": {
          "id": "83a10a6e-4423-45f6-8345-7ff125355744",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e75bf075-be76-472d-9ef2-aa829e69b694",
          "status": "Created",
          "code": 201,
          "responseTime": 230,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "eb2d8c3a-4135-43e2-96ae-2f04b1cd992a",
        "cursor": {
          "ref": "152baa3a-3a81-4e2b-a6f6-f6ca9c677265",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a8672db9-9c4e-4e45-96fe-bfd486727c63"
        },
        "item": {
          "id": "eb2d8c3a-4135-43e2-96ae-2f04b1cd992a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cd209404-7839-47c7-8e9d-a254a752cd5a",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6ad7b875-94b7-43fd-b2bf-399ed7368031",
        "cursor": {
          "ref": "d87bd462-8806-4142-9e58-b2a91d24bd99",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "62d8beec-4ff1-4497-b088-da0360a64c61"
        },
        "item": {
          "id": "6ad7b875-94b7-43fd-b2bf-399ed7368031",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "c9520042-a4ce-469b-9a21-e6a4a971e6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "119cd0b5-9494-47cf-93fe-045f6d180245",
        "cursor": {
          "ref": "9fe37d89-67d5-4873-a870-d26c26c31579",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8ecacdfb-d843-4389-918e-7e7ca4f4e47e"
        },
        "item": {
          "id": "119cd0b5-9494-47cf-93fe-045f6d180245",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e9dc8b4d-68c6-4f04-9f64-20f5bb4ba008",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35e05806-73a3-4ad6-8f97-5e7f727dffc7",
        "cursor": {
          "ref": "1bd4cc6e-900e-4b0a-9ba2-c6e9602d3521",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6105cda1-d1dc-4c1a-b09a-a41718ff5878"
        },
        "item": {
          "id": "35e05806-73a3-4ad6-8f97-5e7f727dffc7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ffd9a183-3f0d-45c5-8b63-366f8918462f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40439d05-05c8-4db2-8557-599971991000",
        "cursor": {
          "ref": "30786026-f936-4d6e-bca1-e503962e74ac",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a23ec123-2bf2-4c6b-839e-a09e09820a43"
        },
        "item": {
          "id": "40439d05-05c8-4db2-8557-599971991000",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e6889f02-cbfe-46a8-8ce4-0434bf56a859",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51ecbf1f-3877-450b-89ac-576972e5fbc3",
        "cursor": {
          "ref": "4ffd0fe3-3321-4c93-b1e0-dceca19742ad",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a5c55c84-33ea-4d82-93be-eea046824827"
        },
        "item": {
          "id": "51ecbf1f-3877-450b-89ac-576972e5fbc3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "18b6018f-549e-4d08-b537-814afa36c2b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d62ede3-bd53-43ba-a72e-d5692e12e9d4",
        "cursor": {
          "ref": "329122e8-9a1a-42f5-9137-9f286253edd2",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e83a5a87-f778-4936-907a-d18cc463fbe9"
        },
        "item": {
          "id": "8d62ede3-bd53-43ba-a72e-d5692e12e9d4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "f8bae061-a426-4e41-928b-a36ba7afdbd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01942c1f-12f5-43be-a3bc-8500eeb58885",
        "cursor": {
          "ref": "4a5f8dde-3adc-41c1-a26a-0145698875d0",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "be70af60-6a15-43df-8feb-ed557860a6e2"
        },
        "item": {
          "id": "01942c1f-12f5-43be-a3bc-8500eeb58885",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a7a0a72e-66d3-41b0-be72-aa8eaf9ef32f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483b4ff8-484d-4866-a58b-12b3024bcc2c",
        "cursor": {
          "ref": "53f8d5b7-cf8f-401d-bbc0-04e52271a004",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ffd74dfb-420c-44b3-9471-e8f859e48572"
        },
        "item": {
          "id": "483b4ff8-484d-4866-a58b-12b3024bcc2c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "27764d7f-0917-46c1-b794-ece4f056e82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5931558c-ac48-405e-be00-cdddb28a740e",
        "cursor": {
          "ref": "26608b37-3a5c-4ddf-8b9b-b9a66b8bf25c",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cfe040a4-17d8-45d0-8925-ac7079514872"
        },
        "item": {
          "id": "5931558c-ac48-405e-be00-cdddb28a740e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "74b8787d-0540-4cf6-897c-c978c9cdd2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b7c007-0235-4f9f-a5a9-b593a7c0bcc9",
        "cursor": {
          "ref": "029d9c23-4a4f-4d66-96dc-d5663ac281b8",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "58925204-494d-44c1-81a3-83470a810ae3"
        },
        "item": {
          "id": "f9b7c007-0235-4f9f-a5a9-b593a7c0bcc9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6fff574f-baed-433b-b16b-626da1da4eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d13f3fd-e34f-4bf0-8ff1-e4fa492298e5",
        "cursor": {
          "ref": "727eafdb-b312-48f6-8425-b73469ab3f4b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "709bfc5c-43df-4b2f-a95f-bc3ac054c730"
        },
        "item": {
          "id": "2d13f3fd-e34f-4bf0-8ff1-e4fa492298e5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "90d80416-e45f-4cbc-8d71-246dfd5956ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "884377fd-c8ed-4fe2-9dbb-c5d0d63e1225",
        "cursor": {
          "ref": "b57f880a-558e-4919-b970-d568b7ae73b9",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bd3f2b4e-3292-46a0-953a-5e58c60ad678"
        },
        "item": {
          "id": "884377fd-c8ed-4fe2-9dbb-c5d0d63e1225",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "30821830-4e0c-456e-8bc1-791cbdd74dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f406dc5b-531a-4034-b660-1f772659c6cf",
        "cursor": {
          "ref": "a197ffef-262e-4154-99ae-30bcdec054d7",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4957c28f-1998-4386-8f87-010e581b82ec"
        },
        "item": {
          "id": "f406dc5b-531a-4034-b660-1f772659c6cf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2997a9e7-82b4-4519-8033-67909eaa9dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca39d39f-8af0-46f0-a3e5-116a5d19e601",
        "cursor": {
          "ref": "0fee451b-ccc7-4f30-a08a-3e272d81b51b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4d08efa7-aea4-4950-b47c-f5c08da0d90e"
        },
        "item": {
          "id": "ca39d39f-8af0-46f0-a3e5-116a5d19e601",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "10d926a1-7331-482f-978f-6911d7838ba9",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f4ad2431-03e6-4a30-8bb5-998536109ad0",
        "cursor": {
          "ref": "3f8b1dd4-3c6e-491b-a646-4f3a191a29e5",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0e5b45a9-a127-4cfe-b488-80bf3a92fc00"
        },
        "item": {
          "id": "f4ad2431-03e6-4a30-8bb5-998536109ad0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3da7fe78-5c43-41c5-afc5-adbccb448b5e",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "96588078-1167-4606-a5ca-459382c5d369",
        "cursor": {
          "ref": "f18693e2-9159-41ab-873e-bac931b0721a",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "defc501f-c691-4909-9f7f-7a906fdca9b2"
        },
        "item": {
          "id": "96588078-1167-4606-a5ca-459382c5d369",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4a362116-8144-4608-8948-3036f7e4e446",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9fa1ae0d-4445-4c37-8d62-6f0ab1fbbb92",
        "cursor": {
          "ref": "dd81d595-33c7-460a-9f8c-92e6e88d54e2",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e51f0382-5343-4237-8016-194ec8cc240c"
        },
        "item": {
          "id": "9fa1ae0d-4445-4c37-8d62-6f0ab1fbbb92",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "a8968c1d-4010-4d2c-b8f0-371cfb927906",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ce7178ff-a044-4e5e-b3f1-be41020d5ceb",
        "cursor": {
          "ref": "00111c48-bc38-4eb1-be30-02c156ca0904",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4cb1f9c0-724d-49c9-a368-48a52cd3dc22"
        },
        "item": {
          "id": "ce7178ff-a044-4e5e-b3f1-be41020d5ceb",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1155efd6-2cde-4c07-bf08-795809be1dec",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9e958de7-6ada-491c-b059-e82e2f08cb33",
        "cursor": {
          "ref": "08dab07c-3ac8-4f18-b982-333e5a6c2204",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "37d0ce1a-1dcf-4c4d-8fc2-ad44ddb3eb5e"
        },
        "item": {
          "id": "9e958de7-6ada-491c-b059-e82e2f08cb33",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4f6a13ea-6842-4229-bb05-a467cd352da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a9d409f-f0d5-4696-bbe8-2b96dc7353ab",
        "cursor": {
          "ref": "a467043d-e063-41fd-90ac-76722ca50d59",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c640cd8f-413a-4e41-b7c8-40f0a33d3761"
        },
        "item": {
          "id": "2a9d409f-f0d5-4696-bbe8-2b96dc7353ab",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "c3d206a1-a4f6-4cdd-a2c1-7945ec0439d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a1bc04-3598-4a4f-aa35-310f10d11f7e",
        "cursor": {
          "ref": "d6b6995f-3048-4446-b0bc-9a53e670cbcf",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "587fe983-f369-4f75-99a3-dcfb7e161209"
        },
        "item": {
          "id": "d8a1bc04-3598-4a4f-aa35-310f10d11f7e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "28b9a3e8-c23a-4074-b19e-cc84d7010f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b615265-e83a-4da9-97d7-1867f5a574aa",
        "cursor": {
          "ref": "0e763996-e9dc-47b5-b19f-280189b15aa0",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1a4e1b1c-ff12-4a2d-bd95-ddfc20ced3dd"
        },
        "item": {
          "id": "2b615265-e83a-4da9-97d7-1867f5a574aa",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "514cc875-bc6e-4634-bd4a-509023fdc50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "774cc23e-f3bf-4210-8b22-db72ad42424f",
        "cursor": {
          "ref": "e7d29ad8-0d32-413b-a34a-a397acac136d",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1074c4aa-2b1b-41a0-85d7-f8bb2e9481c4"
        },
        "item": {
          "id": "774cc23e-f3bf-4210-8b22-db72ad42424f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "26ddf957-68b9-4d2d-955d-58f9972fbf51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c7d173-5b3d-49bd-9d6b-f17fbf1e819c",
        "cursor": {
          "ref": "0d0e04ae-fa6c-4c93-ad4f-b2094777a9fe",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "41506e23-31d2-487f-bf0a-56724ec91640"
        },
        "item": {
          "id": "86c7d173-5b3d-49bd-9d6b-f17fbf1e819c",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ac44c91e-91db-48c7-8ab8-e355e1931d7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2c3d8c2-79c5-4438-8f2e-0ae0d04c2f69",
        "cursor": {
          "ref": "debe3a51-5b13-47c3-8d8c-48f91c223a00",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7a3b6729-b2f4-4222-aab6-cec486de7ee2"
        },
        "item": {
          "id": "c2c3d8c2-79c5-4438-8f2e-0ae0d04c2f69",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a62d8ae4-bcc8-47f9-9f90-3ac92465664a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6c5eed-6cbc-4e7c-b701-dfabc614adc0",
        "cursor": {
          "ref": "56bc0c82-0ae1-4aec-bba7-a28c1f2c15cb",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5366b537-43fb-4338-841d-a0726978b84f"
        },
        "item": {
          "id": "fc6c5eed-6cbc-4e7c-b701-dfabc614adc0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "fe54ea34-6778-4184-85a9-64803ea9f686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ed72619-dc43-4215-9e14-e11ec31605b8",
        "cursor": {
          "ref": "41943963-62bb-41ed-a5eb-ba3a57a935a0",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "51cc5ae1-3502-4984-9235-8039010700e6"
        },
        "item": {
          "id": "9ed72619-dc43-4215-9e14-e11ec31605b8",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "c24b4841-5a1f-42cb-a6ac-5a9b45defd60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac38a6c-c5f8-47a3-8e7a-5e2240c4960f",
        "cursor": {
          "ref": "73b2c566-5f69-4b47-85f1-caf5ef1ec79f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ee7f4d36-6b9b-4aba-a478-008aa6cbf487"
        },
        "item": {
          "id": "dac38a6c-c5f8-47a3-8e7a-5e2240c4960f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a98031ba-c4c2-4f5a-b9a0-28f8eab1293a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad34e15-1dc9-4a96-a1be-1924c49a117c",
        "cursor": {
          "ref": "2f2d5d85-693d-434a-8772-0cd05e658bf6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "11981c1e-3b51-46df-9e50-c5fc78db755f"
        },
        "item": {
          "id": "7ad34e15-1dc9-4a96-a1be-1924c49a117c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0e0c1aaa-dc3e-411a-9096-f77a5c5e6851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c689cb8-8b1d-4ec0-ba43-28b2134041d5",
        "cursor": {
          "ref": "141bae1e-27dd-45a6-9e78-e283cfd049a0",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "4f61cfa0-33a5-4eee-b9a5-6a30ec8280ad"
        },
        "item": {
          "id": "1c689cb8-8b1d-4ec0-ba43-28b2134041d5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c5ba8f1a-30b6-486f-9c78-2d6697c0fc7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4f7ef56-f6da-4d76-924e-67c7041d3fd2",
        "cursor": {
          "ref": "dfc6c0a1-4297-483e-b469-b2c90d59d7d7",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "07844143-d090-4f06-8e7c-909ab05a820a"
        },
        "item": {
          "id": "e4f7ef56-f6da-4d76-924e-67c7041d3fd2",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2547d4d8-baff-422b-8e77-75ab959016b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc3e006-d074-4a3b-a2a1-8b9ec5bf75e2",
        "cursor": {
          "ref": "377eaf37-d491-463c-a97c-d7213f3ea324",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d378e089-5157-41cf-a07b-0be4ad7912ad"
        },
        "item": {
          "id": "4bc3e006-d074-4a3b-a2a1-8b9ec5bf75e2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "10c4949a-0e81-4ce5-9c15-9913e800b7db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03989be5-6936-4b4f-bada-38eb1f563891",
        "cursor": {
          "ref": "64f8a77a-7dbc-421f-a4a3-7bbcb37585e6",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2c1fa957-3018-4e48-af4e-3ea17bd74c65"
        },
        "item": {
          "id": "03989be5-6936-4b4f-bada-38eb1f563891",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1c211015-27ea-48b3-ad94-1e24fec5feb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb9c132-a940-4a16-b856-82fa83624161",
        "cursor": {
          "ref": "0482e034-2c4e-47b5-ac50-f8bb1e9b8206",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c5ae77af-052a-4fe7-bb10-976b50c1b379"
        },
        "item": {
          "id": "cdb9c132-a940-4a16-b856-82fa83624161",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "a31be4fe-4bcb-4f88-830f-7d359ba55c41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a62712-c46b-48cf-99a5-eff5c971d0b9",
        "cursor": {
          "ref": "559f8b4f-4693-4585-85e1-162f059d9d5e",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "19fb5dd0-b09c-417f-9cd5-728db3f3f564"
        },
        "item": {
          "id": "f8a62712-c46b-48cf-99a5-eff5c971d0b9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c5b48773-f1b3-4db3-9049-83ffb5414a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6259664e-1981-415e-a4e6-13e803080ad8",
        "cursor": {
          "ref": "4be8d9d5-ce1a-4bdb-b884-1f93c4846d1b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "11525dc9-f7a2-4eaf-97b1-05420b2ca12b"
        },
        "item": {
          "id": "6259664e-1981-415e-a4e6-13e803080ad8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d4356b73-d6ca-4f5c-9b9d-e5bfd99e0108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5c6ecd7-6f44-4b02-8df6-a15fb933d0bd",
        "cursor": {
          "ref": "a94e24fa-a3a1-448d-b7c0-d7f0c0ec47be",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "993f38ca-0c64-4dd1-a298-e432fb25026c"
        },
        "item": {
          "id": "b5c6ecd7-6f44-4b02-8df6-a15fb933d0bd",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2fed0e2e-03d5-4ab8-8eb8-37a0d5507cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f27e295-2197-4b19-9fb6-8e39bc0d6d43",
        "cursor": {
          "ref": "32806ad1-9a11-4916-bc41-d1889f33be39",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "26a74a4d-b352-4e48-9ca0-2a4ab158b868"
        },
        "item": {
          "id": "1f27e295-2197-4b19-9fb6-8e39bc0d6d43",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "97c4fc3d-9192-48c8-99c4-2c8f8d04aa02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4439b747-7ab1-4f0e-b010-c1e1a621c3f3",
        "cursor": {
          "ref": "ab01fcc0-1960-4308-bd22-eda622c3fac9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "feaa664d-76e2-410b-9e2d-e1d55c130364"
        },
        "item": {
          "id": "4439b747-7ab1-4f0e-b010-c1e1a621c3f3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ec3d3d60-1cf3-4d05-a3ff-701ce4da6391",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c1ef895-7ff7-45d8-83c2-a911c36d1d87",
        "cursor": {
          "ref": "5b5d768f-152c-4004-ac80-c01eb763fbc3",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3be53d9d-d97e-493c-a75f-38c3ffbfa688"
        },
        "item": {
          "id": "3c1ef895-7ff7-45d8-83c2-a911c36d1d87",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "eca098b2-2c5d-4470-9fae-15109000dd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b26a7b-1de0-4aa1-954e-e5aa74eb82b9",
        "cursor": {
          "ref": "37544990-d62f-400d-84c1-a61da04e3f56",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "353d6726-d0b5-4dec-b77b-02a1f42c8911"
        },
        "item": {
          "id": "99b26a7b-1de0-4aa1-954e-e5aa74eb82b9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "01cad8de-04c9-4bc3-9dc7-8d77555d1a8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31833081-87a1-4189-8308-21fc6dc17544",
        "cursor": {
          "ref": "60256876-4462-4575-b1e1-6fd1c9a2f509",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3041cfbb-bed0-4c59-a735-2bd4fc25f378"
        },
        "item": {
          "id": "31833081-87a1-4189-8308-21fc6dc17544",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "18921e48-50b9-42d0-bef6-48104ae81544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "194c85c3-fa4f-4ff6-a2b3-4381ab03a933",
        "cursor": {
          "ref": "07bfee1d-7e4d-4f13-afef-5ba2645c6e77",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "22c81402-b37c-4b83-a845-6ab67abf1528"
        },
        "item": {
          "id": "194c85c3-fa4f-4ff6-a2b3-4381ab03a933",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "62202aaf-2d3a-40c7-b255-47610ed0f9bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee060cd3-767c-4480-b9a2-1aba4775e225",
        "cursor": {
          "ref": "554d7614-4085-4b74-8d8a-1b289fdd329b",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5191add7-2440-46a0-bc9d-f3c278c509c0"
        },
        "item": {
          "id": "ee060cd3-767c-4480-b9a2-1aba4775e225",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "22ccc67d-a498-4f26-8e4f-253993d7bf08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c7278d3-65b9-4bb3-8f56-eb32e520be39",
        "cursor": {
          "ref": "7c157b56-1ae0-41af-9931-08a401d39731",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e855bc58-5414-42b3-8f56-fddb80e00adf"
        },
        "item": {
          "id": "2c7278d3-65b9-4bb3-8f56-eb32e520be39",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7268c13e-8bd2-432e-a36d-32a69f0ed9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1f1fbaa-5cbf-46e9-9cc9-e3d19981657f",
        "cursor": {
          "ref": "3c49bbf1-ade7-4b26-b1f4-b35092c14218",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7b9fceb2-ee4a-4df8-8bb3-80c1fcdb4b2f"
        },
        "item": {
          "id": "e1f1fbaa-5cbf-46e9-9cc9-e3d19981657f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "431bf61e-8d34-45fd-b589-842a81e630e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd0ddb6-a6a6-4347-9410-44f64f70304d",
        "cursor": {
          "ref": "14dee7e6-3df6-4d11-818a-21df9d4d406e",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "6607b3b7-81af-4050-8f05-adaadfa3b8f0"
        },
        "item": {
          "id": "edd0ddb6-a6a6-4347-9410-44f64f70304d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6616afe1-8e42-4a94-bc91-4761879538f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45bf7feb-7bd3-4dcc-8e7e-022ca45e578e",
        "cursor": {
          "ref": "1409de45-c5e8-4c6b-a792-93d99fdc29c9",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d739bdf6-cf18-4e31-bcf0-561707447b34"
        },
        "item": {
          "id": "45bf7feb-7bd3-4dcc-8e7e-022ca45e578e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6469b5b3-d2b7-4a7a-91be-eb159e7263b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8388d914-25c0-4acb-84c0-abd278efeca6",
        "cursor": {
          "ref": "cc199607-48a4-470e-9964-b39f8068ae0a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7b2decfb-5b2a-4430-9277-95affe58f60a"
        },
        "item": {
          "id": "8388d914-25c0-4acb-84c0-abd278efeca6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ab08a2cb-a6de-48e3-a3e0-1153374501a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90eb966a-e8e8-49e4-9bf3-80d9e0d8201e",
        "cursor": {
          "ref": "7571739e-af25-493e-9784-796363a1ee97",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "18a9fe49-c226-431a-a84a-f52df1b8ea2c"
        },
        "item": {
          "id": "90eb966a-e8e8-49e4-9bf3-80d9e0d8201e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e6bc519a-e87d-46ed-afc9-bc8fe8df307e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e864151-3249-4cae-ba66-cf795dc36fa0",
        "cursor": {
          "ref": "978b6191-f34c-417c-8e84-74c2950f98b9",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "873ef55c-d003-4487-aacb-b000f452f8aa"
        },
        "item": {
          "id": "5e864151-3249-4cae-ba66-cf795dc36fa0",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "b6e894a9-9ebb-4870-ae3e-2f6c122ea43c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "f212d8cb-2e1e-408f-bce9-0e499f624c11",
        "cursor": {
          "ref": "c2fb95c8-2e6f-4e72-adfe-214bc7f758b2",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "55cb4cac-ee30-4924-a830-1d0a3e939fb9"
        },
        "item": {
          "id": "f212d8cb-2e1e-408f-bce9-0e499f624c11",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c2deabba-c115-4d42-89be-f92f4aaa256c",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4fb6670-7f7f-4073-92d5-769d5b643921",
        "cursor": {
          "ref": "caff0d71-eca5-4936-a839-d2599e46fd6b",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8b0b1085-7600-4130-a521-273d1c94d4fd"
        },
        "item": {
          "id": "e4fb6670-7f7f-4073-92d5-769d5b643921",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "54d85dfd-8a3f-4cda-a09c-9e924dfbd0c3",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8f9db38-b695-448c-bc7e-b228e11b56f1",
        "cursor": {
          "ref": "5bada5d9-d2cb-43c4-bdda-2303c3840a17",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d79d8e71-bbd0-4a77-9efc-bc93d0d2cb6f"
        },
        "item": {
          "id": "a8f9db38-b695-448c-bc7e-b228e11b56f1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "551ec907-973c-4a73-a6d7-c84c73f9a6d1",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "06bd032f-89e1-411d-a291-a51bc26d2d01",
        "cursor": {
          "ref": "7e7caef3-2340-4fea-a88b-c1e4f50acf73",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a44fb158-4eb1-4b33-8fb1-5001f939c5e2"
        },
        "item": {
          "id": "06bd032f-89e1-411d-a291-a51bc26d2d01",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f534b28e-81cf-42a3-81e5-f6abb80305f9",
          "status": "Created",
          "code": 201,
          "responseTime": 227,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1776180-2438-447f-8229-59b7a347dfd1",
        "cursor": {
          "ref": "a0141158-5fb1-4b36-b309-606e43b3c634",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "17b2e819-fe31-43b8-89a0-5fdd2e1f9ae9"
        },
        "item": {
          "id": "a1776180-2438-447f-8229-59b7a347dfd1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d101d4f6-9631-4385-a795-ed67780ce78e",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-01-24T00:37:20.005Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-01-24T00:37:20.005Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "70937abe-de72-48dd-a39a-e4320de54621",
        "cursor": {
          "ref": "e3e9b868-e282-46bd-a816-a50247c769c7",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f8ca7553-9475-4268-8265-fca078ead94e"
        },
        "item": {
          "id": "70937abe-de72-48dd-a39a-e4320de54621",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e72c3ce1-44e5-4a49-bbaf-e934111e4a2b",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4488ca-489e-4db8-8346-e833b1a87292",
        "cursor": {
          "ref": "b8367ad4-0957-43f9-b8ca-1064a553e267",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f8a528be-f0eb-43c3-85aa-ee6a6b5242a2"
        },
        "item": {
          "id": "ba4488ca-489e-4db8-8346-e833b1a87292",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "cfce8287-b160-406b-b7eb-004405c7ef00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b575d0e1-d00c-42e5-b277-26ccd8480eec",
        "cursor": {
          "ref": "c7d723d2-78c3-44fd-9152-0911837051e8",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f6a691c5-6c4d-4771-a7c6-a10795d66b03"
        },
        "item": {
          "id": "b575d0e1-d00c-42e5-b277-26ccd8480eec",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fbb1acb9-cafe-4f64-8487-a53c1d134a1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8a7e9a-c300-4020-97ee-2d4c3aa6a7e3",
        "cursor": {
          "ref": "5f89ed97-69ee-4952-ad18-47598d7a516c",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "575aff63-74f0-4167-b539-24e2f0126ad8"
        },
        "item": {
          "id": "cf8a7e9a-c300-4020-97ee-2d4c3aa6a7e3",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "01b0080d-0169-49aa-a54f-43827bb75d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48880c40-9bab-410c-b786-369d3c6bdf8f",
        "cursor": {
          "ref": "72707114-155d-4888-aa2a-6d118a8df06b",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "801fe8d2-1f55-4131-ab2a-450206ab4573"
        },
        "item": {
          "id": "48880c40-9bab-410c-b786-369d3c6bdf8f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a0d8eb40-d568-41aa-8043-8a2ce26ae39e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5ba58cd-9397-4af6-842a-f737e551c50e",
        "cursor": {
          "ref": "f1460e59-48eb-4c92-b8ed-655e57a7a50c",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "dd30237e-c0a8-40c9-b315-7087e36b87a8"
        },
        "item": {
          "id": "b5ba58cd-9397-4af6-842a-f737e551c50e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "af38d2e9-7598-4ad4-ad76-898a0e98da98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aead7ae-e396-4f6f-b64d-1a22b803761c",
        "cursor": {
          "ref": "1bf21a3f-a514-4726-951f-d265d715f140",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "ae0b5d87-be26-41c7-bbb7-eb71ca497f2d"
        },
        "item": {
          "id": "1aead7ae-e396-4f6f-b64d-1a22b803761c",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "b4e168dd-8a86-4048-952e-832e0be3e5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c758ca6b-63cc-4b62-bbaa-2a5f3401b168",
        "cursor": {
          "ref": "4c06d3a6-4eda-42cc-9911-b619069065f4",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8220f28d-d31d-490e-ae31-e6a81e7d0fa3"
        },
        "item": {
          "id": "c758ca6b-63cc-4b62-bbaa-2a5f3401b168",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f133e69f-8a64-4f54-b8e8-e2161812a18c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee89ee1-10a5-4dc2-9c7d-4d1ff2142f5f",
        "cursor": {
          "ref": "339cc294-d99e-4d17-8883-b83774258353",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "244a6f12-d6bd-4cae-ac71-e5fa9d0da317"
        },
        "item": {
          "id": "fee89ee1-10a5-4dc2-9c7d-4d1ff2142f5f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9e5cc942-fc7a-4bbf-9dde-5f0e62aba313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b18d02-cf9f-4dd4-bc5a-8a1a375e9ffb",
        "cursor": {
          "ref": "e566f323-7ac8-4576-be26-27bd1802ecb0",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "05b15175-a4e6-4f49-94b3-1fc741b8ff23"
        },
        "item": {
          "id": "a5b18d02-cf9f-4dd4-bc5a-8a1a375e9ffb",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "63b6e1c5-5238-426b-bc20-03a2fa7b7647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cc1157-dc0e-4847-8a87-1e9568969230",
        "cursor": {
          "ref": "4f2a9167-b90a-4082-8334-416bdd8043cf",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a7695b36-d12c-4cf5-8d2c-5b851b075e77"
        },
        "item": {
          "id": "b1cc1157-dc0e-4847-8a87-1e9568969230",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "da377a1e-d8ee-42b4-84ae-555113957e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d47336-9b0b-479e-ab49-0a8908cf86b6",
        "cursor": {
          "ref": "4ca9ed7d-88cb-4928-aa5b-df4a477e8f3e",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "5c088257-a5f5-4355-ab27-45e153d5e67c"
        },
        "item": {
          "id": "42d47336-9b0b-479e-ab49-0a8908cf86b6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ae88556f-32c8-4d8d-b7e9-fac3e99a04f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2133330a-8631-4a7d-b67e-81fda5e7d32b",
        "cursor": {
          "ref": "2a3858ae-c08d-4958-abb0-3dc5797b3471",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "085fa0ec-73b4-4895-b481-6b2d3d7ad2bc"
        },
        "item": {
          "id": "2133330a-8631-4a7d-b67e-81fda5e7d32b",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d72334c3-1132-4494-840e-046b9dca73aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d12b09-80f8-49d4-8df0-8f44fd81d6a4",
        "cursor": {
          "ref": "f3b25622-3f87-4702-8800-ec7a770e511b",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "298468f5-3a56-43aa-8a85-dfb6a65d6ee6"
        },
        "item": {
          "id": "f3d12b09-80f8-49d4-8df0-8f44fd81d6a4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ea608d8c-49f3-4b45-ae33-8a5476e72817",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 80,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "65a5e192-2a2e-4d44-9634-41fd44a43980",
        "cursor": {
          "ref": "bfb4eb68-a8aa-48fa-bab9-a556b54ed2ac",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "306bcdc7-4203-487f-ac3f-f16935d7500f"
        },
        "item": {
          "id": "65a5e192-2a2e-4d44-9634-41fd44a43980",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ff95c2d0-8a4f-4c62-8063-02522e29b040",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "fb4884a4-e678-4b11-a85e-610439123216",
        "cursor": {
          "ref": "458c0fae-ba4d-40ed-ae8e-1f12411915dd",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8080ee73-5d64-42af-b623-3a936208a86a"
        },
        "item": {
          "id": "fb4884a4-e678-4b11-a85e-610439123216",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a84d7196-6a56-4a87-8c5e-bc89adbda929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82672f17-7760-4a81-8d19-9015207fa8f2",
        "cursor": {
          "ref": "2800135d-95ea-4c15-a179-d14539361f81",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e5420783-5a9b-46f6-b6cd-e7851f66e902"
        },
        "item": {
          "id": "82672f17-7760-4a81-8d19-9015207fa8f2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fb740c47-3f20-40af-9bde-ed5eed24cad6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d268246-e63b-4a49-b83d-c7e836cc086b",
        "cursor": {
          "ref": "186ff29a-4944-44a1-8799-f81e1e542d60",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2ec0f28b-66d9-4d96-a57e-82c0cc9f3423"
        },
        "item": {
          "id": "3d268246-e63b-4a49-b83d-c7e836cc086b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1b5f8e21-7cf0-47a0-b1dd-cb448fc6ee21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7ac5e8-15ad-48f6-a3b6-fa9a89d9f566",
        "cursor": {
          "ref": "eb843bf6-0887-4fc7-9429-88ddfbc36afc",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "448a3157-af85-4026-bbe3-ea084e41eeea"
        },
        "item": {
          "id": "1e7ac5e8-15ad-48f6-a3b6-fa9a89d9f566",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "49bb5548-b538-4473-ae34-794b8276671b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88c8e537-ab41-43ec-9c6f-ed763c63c06e",
        "cursor": {
          "ref": "91e65f3b-fabd-4d91-b9cd-f9d3c5e1f773",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "82e770ee-b444-47cd-84b7-f5d04d616002"
        },
        "item": {
          "id": "88c8e537-ab41-43ec-9c6f-ed763c63c06e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "08d107a2-a1ef-446b-9e41-243aef5a1982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72400a27-e748-4ab7-86be-926227b77990",
        "cursor": {
          "ref": "05811867-7798-4f96-a4ef-324ae26983d5",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7fdeb750-1336-4eb7-b0bd-1c3d3ee986c6"
        },
        "item": {
          "id": "72400a27-e748-4ab7-86be-926227b77990",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "77452cb5-60ce-44eb-a1f0-a797d64c34a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d046641-c1ea-4d9c-b1b8-154107e37cdc",
        "cursor": {
          "ref": "11be2f48-b74c-46a7-a84d-52244b667fa9",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6094c6be-2375-46bf-8c28-99093fe8951f"
        },
        "item": {
          "id": "9d046641-c1ea-4d9c-b1b8-154107e37cdc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fec15c90-a69a-46bb-b310-0b475d58260f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5057e9-1dc9-447b-a226-653857ac8a47",
        "cursor": {
          "ref": "8306a171-553b-4a73-9d06-80134f8f106b",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "bbb07706-8643-4a86-aab3-107bdfc4054e"
        },
        "item": {
          "id": "ff5057e9-1dc9-447b-a226-653857ac8a47",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "901abb84-c604-4b4e-8b98-b7bb794bf4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7a8bd8-4231-4a37-a016-e42cf3940053",
        "cursor": {
          "ref": "93cbdab2-f571-438b-8502-23724da13590",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d2400270-5d5b-4cba-b46c-bd7e6b659505"
        },
        "item": {
          "id": "9d7a8bd8-4231-4a37-a016-e42cf3940053",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "db849282-3cf6-464b-a393-b12e4e189506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca75d02a-2933-4e19-90fe-590f7161d53f",
        "cursor": {
          "ref": "4e068a41-0e0c-4540-804b-488a99de96f0",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b49f1b5a-41e1-4cc4-a2d5-27207a31836a"
        },
        "item": {
          "id": "ca75d02a-2933-4e19-90fe-590f7161d53f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "570b39b1-7e04-4f87-8852-1f988c4752b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b224b31c-7e1c-4a2f-91bc-06296a5d9ea4",
        "cursor": {
          "ref": "434b481e-850b-494d-ac39-ee80b7298868",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "ce81f063-7bab-4f82-8c66-5c4fe46c9d16"
        },
        "item": {
          "id": "b224b31c-7e1c-4a2f-91bc-06296a5d9ea4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "44a795e5-a761-449c-b54c-b642ce4f952f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfd5ab5-3c0a-4368-8790-03b7f44ea3f7",
        "cursor": {
          "ref": "8e5f91b2-15d5-4884-a430-91357c46b598",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "3d11f3c0-eb9f-4c6e-9aea-b0c185986e2e"
        },
        "item": {
          "id": "dbfd5ab5-3c0a-4368-8790-03b7f44ea3f7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "af543c0d-05fa-4a08-9f61-12c05d411ccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928daaed-397e-4a0b-b06d-86e1004c36ed",
        "cursor": {
          "ref": "b6eac200-9bec-4711-a0e0-0a1e09500e44",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "2b8b8926-14ae-40cb-8250-986bba669377"
        },
        "item": {
          "id": "928daaed-397e-4a0b-b06d-86e1004c36ed",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1f239366-16df-4717-857d-748e408980ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ac417a-747c-4b45-abe6-228958c44ea3",
        "cursor": {
          "ref": "4d676123-d30b-4980-bcc1-69f0fb8b4ddd",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cffcc5db-f871-44d8-b224-02a8db0a8d24"
        },
        "item": {
          "id": "74ac417a-747c-4b45-abe6-228958c44ea3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1dff7d3a-c809-465a-916d-46167fb5154a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ab3da0-f4b8-414e-b954-cb28dc929083",
        "cursor": {
          "ref": "91ab44a0-4d93-4ce8-ae1c-539b527a2649",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3a301b45-1519-48e0-8679-1c15b81c4839"
        },
        "item": {
          "id": "21ab3da0-f4b8-414e-b954-cb28dc929083",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ee39d1f9-0f56-4949-8f46-17e712d93b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4a5f73-dc98-47ef-8ceb-c5b39e231d15",
        "cursor": {
          "ref": "473b2264-3701-4d7d-84da-153a02c4cafb",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "442e29b4-3f15-4045-a0a7-e7a2f7434417"
        },
        "item": {
          "id": "1e4a5f73-dc98-47ef-8ceb-c5b39e231d15",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "85aae325-c1d8-4239-9f08-3d62922df2c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31a1efe-5c06-4c91-8096-83e6a23c1bc7",
        "cursor": {
          "ref": "c4a06fd2-d815-4ebf-8c1e-29c5c360ee84",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c89f21b2-9e4c-4437-a4fc-5f279f889ac6"
        },
        "item": {
          "id": "a31a1efe-5c06-4c91-8096-83e6a23c1bc7",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "32c505da-89de-4d92-8308-a91e1373b174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff3aa74-27ad-403e-b0a9-2a2a6657d0ba",
        "cursor": {
          "ref": "10672c86-f71e-4f90-8482-895bbe2d264a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "0de4612a-d114-4b3b-ae66-f4db3299c282"
        },
        "item": {
          "id": "1ff3aa74-27ad-403e-b0a9-2a2a6657d0ba",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "aaa4641c-b168-4e71-8170-95595594fd08",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "90ef7ae4-7758-435c-bf41-15d7147c2000",
        "cursor": {
          "ref": "25a23287-3f89-4bd3-b578-1c59886b1119",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e4886b79-496d-495f-b53a-30eeb0beddbc"
        },
        "item": {
          "id": "90ef7ae4-7758-435c-bf41-15d7147c2000",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "42eb7ab5-df1c-499b-a4a4-d521ea920f3d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec698c3-2402-42c4-8451-48d22b8165f4",
        "cursor": {
          "ref": "4b1ea1d4-2a96-48c7-96ee-898963d9e6c2",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c797e20b-5911-40b0-ad2e-7cd24187ae6d"
        },
        "item": {
          "id": "fec698c3-2402-42c4-8451-48d22b8165f4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "97e402c9-014d-4940-a664-d4e6fa523c36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c166c6e-5b95-4536-82a1-44e3eec44196",
        "cursor": {
          "ref": "9ee7a236-eada-48ba-b750-456401a939eb",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "26b53b50-ab1b-4de3-9f64-07c5d2a8d962"
        },
        "item": {
          "id": "8c166c6e-5b95-4536-82a1-44e3eec44196",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "07682b0f-0a55-4def-9763-bb7021982292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c4f2d52-f559-40a0-85fa-bbb345b26c38",
        "cursor": {
          "ref": "06d100fd-4cf5-4dae-be78-da2a62f98820",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "db58f8fa-2fca-48b4-a386-36cf0b0d2c59"
        },
        "item": {
          "id": "0c4f2d52-f559-40a0-85fa-bbb345b26c38",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "df9d7722-6038-43d5-b2aa-ce11d14d7ce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd957cfc-fb8a-480e-8a90-d81d0b68da90",
        "cursor": {
          "ref": "a8839da7-bdc4-4111-a7e5-30e012afd9cb",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "333cc755-aeec-4c07-952f-c0003d6f6fcc"
        },
        "item": {
          "id": "dd957cfc-fb8a-480e-8a90-d81d0b68da90",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f14dc5e5-90b4-413b-8a68-50a575055a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b81804-bcac-4211-92f6-d754c9b6c3af",
        "cursor": {
          "ref": "721d11df-f282-4b14-9365-aa87c6ea5f69",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "1bbea4df-9262-4d79-9f6f-45e28a506381"
        },
        "item": {
          "id": "65b81804-bcac-4211-92f6-d754c9b6c3af",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3a273572-ecb8-4b26-bd82-07f18afb7ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2707f192-048a-4eb4-ac1c-6316e3aba4e7",
        "cursor": {
          "ref": "6f9201f2-0452-415d-a33e-624227ea9c5f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "748c7d9c-309a-4212-92b2-81d7d3eed9ca"
        },
        "item": {
          "id": "2707f192-048a-4eb4-ac1c-6316e3aba4e7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "66a9d2cd-1703-4d7b-8864-589c0ab55cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be63b99e-0980-48f1-8eba-4d0f2982ee40",
        "cursor": {
          "ref": "5e39eb40-510c-4d8b-9859-b9c35e50be8f",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c00436fe-dc4b-46dc-b743-51cfe66f05d0"
        },
        "item": {
          "id": "be63b99e-0980-48f1-8eba-4d0f2982ee40",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "818dc924-eca2-49e4-8456-f444558876fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71b0fe0a-5dda-41e5-9227-2c71f945a1eb",
        "cursor": {
          "ref": "f66a159d-2ab8-4709-a4a0-60f1a9bc2c15",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c05d7af4-031a-4220-b88a-a2582a088feb"
        },
        "item": {
          "id": "71b0fe0a-5dda-41e5-9227-2c71f945a1eb",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "76a9b8ec-0a68-4795-b93d-29ea2650d7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acae708b-98ac-4bd2-9a2a-60d09309ec1f",
        "cursor": {
          "ref": "a88c0291-0da5-4fa5-9cc7-9808cd22ce1d",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4e394b87-ed15-451c-866f-85beb9e6f6da"
        },
        "item": {
          "id": "acae708b-98ac-4bd2-9a2a-60d09309ec1f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "9fe927d7-9d0f-421d-bde2-ef08a2fbe056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b8febbb-5261-4012-b89b-edb8528dbbd0",
        "cursor": {
          "ref": "8ad031f2-93ed-43c8-902f-79998d85b088",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a3caa52a-802c-426d-a364-87b232ce284d"
        },
        "item": {
          "id": "8b8febbb-5261-4012-b89b-edb8528dbbd0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "f3c6d825-50cd-4e4d-99bd-4aa1c41b7c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d305ab-3f36-4149-bc6a-3f20da50a91e",
        "cursor": {
          "ref": "5c6b02a8-fa0f-485b-b0eb-b7e43dcbd138",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "57205f56-ca68-44d4-88c0-f92739e511e4"
        },
        "item": {
          "id": "11d305ab-3f36-4149-bc6a-3f20da50a91e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6852d67c-c78e-4d53-afee-386875f4a518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24206d3e-f6a3-4358-8763-d98f94cb7614",
        "cursor": {
          "ref": "c1925c63-dad2-441e-ad78-c104a6a455fe",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d7b7c022-33a6-49b1-aa5b-008d0efa5a8d"
        },
        "item": {
          "id": "24206d3e-f6a3-4358-8763-d98f94cb7614",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0dbca271-00f8-496c-a04c-3155cda32598",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862b9012-c9de-48a2-a310-56049345551e",
        "cursor": {
          "ref": "d4d88002-914d-4385-a337-1e4c0dab4712",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "4e300d88-af8e-4382-8c08-a04b6aa41eae"
        },
        "item": {
          "id": "862b9012-c9de-48a2-a310-56049345551e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "757efa27-bb56-4b06-aba2-c1dfa6469e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a3258e2-4af9-4d59-bd3a-e6f23bf15f5f",
        "cursor": {
          "ref": "ee673156-4e11-45ca-b95b-5a147f57879f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "c183cb26-6cb1-4707-af3a-8ba4a1d3ba47"
        },
        "item": {
          "id": "3a3258e2-4af9-4d59-bd3a-e6f23bf15f5f",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ec07f2d7-17d6-48f0-83c6-75f981db6f73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 74,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e3297fab-3d20-41dc-b3fc-f0d94feed9ef",
        "cursor": {
          "ref": "7527f8b7-a383-4cd7-9076-3bc9611929a4",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c19897f7-4c38-49e7-8605-08cb753a2db4"
        },
        "item": {
          "id": "e3297fab-3d20-41dc-b3fc-f0d94feed9ef",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "750a40a4-179a-4875-87b1-8deb885066f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "473064c8-eae7-4597-af08-dc2f9fb82990",
        "cursor": {
          "ref": "8a5fa70d-d26e-40c7-b0d0-b6e55c7b38d5",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "141dc491-0d1c-4096-b864-ea0f5773b7d8"
        },
        "item": {
          "id": "473064c8-eae7-4597-af08-dc2f9fb82990",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "10f5eeec-5de6-4bdf-9817-60a08b855da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29555562-9b31-4cbd-acb3-c96a7a584246",
        "cursor": {
          "ref": "6cf2d476-0607-4a5e-93f1-d95b6c3fc2ea",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a64c3b7a-797d-40cc-aaf5-b4980b959f74"
        },
        "item": {
          "id": "29555562-9b31-4cbd-acb3-c96a7a584246",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2daa47c8-6546-49c8-a148-5ad99a1fe125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1614376-1596-4547-b2e8-f8ef1e4a249d",
        "cursor": {
          "ref": "35afbcfe-824c-4e7d-aaa3-c79922bf76b6",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "53b18716-91ee-4d2e-89c6-24ceba66cac3"
        },
        "item": {
          "id": "b1614376-1596-4547-b2e8-f8ef1e4a249d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "baa308eb-d933-4820-9b3a-ceede833655f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47670df9-bb04-4f24-a867-707ad6217d7e",
        "cursor": {
          "ref": "4eac91fc-b1f9-482d-8024-da905d4163aa",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "adc6e41d-f0ed-4e06-a8b3-32d5c0f65b74"
        },
        "item": {
          "id": "47670df9-bb04-4f24-a867-707ad6217d7e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "94eab86b-79b9-4180-8f33-e7fa205ac378",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dac3e889-5734-490e-a0b7-cc7a2a7ba84d",
        "cursor": {
          "ref": "a71c62ae-ece8-408b-bdbf-8ca7712b0726",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b1f0406e-d84c-4433-8ed2-0ced56e33ebe"
        },
        "item": {
          "id": "dac3e889-5734-490e-a0b7-cc7a2a7ba84d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5498ee2c-933e-45b9-aa1e-9e904482c8a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e040edb3-7e1f-4e09-b0c5-852988008838",
        "cursor": {
          "ref": "079d97b6-98dd-43ed-9b2d-a29f607758bf",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "dbe8b45f-cedf-4dec-8c48-19cbc17abc0c"
        },
        "item": {
          "id": "e040edb3-7e1f-4e09-b0c5-852988008838",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "1ef3d4fb-5da2-46ea-984a-06d0decc1887",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c47d48e-e6f3-4630-baef-b86751ebf16b",
        "cursor": {
          "ref": "1d82f4f0-7351-4932-9d5d-30ee4f050be8",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b2d6b943-fe67-469b-887c-ebe78b8735b9"
        },
        "item": {
          "id": "5c47d48e-e6f3-4630-baef-b86751ebf16b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "a2f41f5b-d907-4656-9df6-c754a68ca7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f5ba08-b3b0-4ea4-b444-220b55ad85b1",
        "cursor": {
          "ref": "bfc83314-6def-46be-b370-837c26f336d3",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "49cbc7e4-8121-4598-a770-3ed4ea860fd0"
        },
        "item": {
          "id": "87f5ba08-b3b0-4ea4-b444-220b55ad85b1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "211e65ad-c037-4964-9208-86969c93b10e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d445d2b-9e90-420a-83ab-625521469fd9",
        "cursor": {
          "ref": "4e0bbbe0-e266-40b1-97da-43524d040b33",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "abd63346-8130-4a3c-82a9-21f07a168047"
        },
        "item": {
          "id": "5d445d2b-9e90-420a-83ab-625521469fd9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "412cdf5d-45e4-4b36-b193-102e76591d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb96d71b-b1fb-424b-bdc8-5eeec4234555",
        "cursor": {
          "ref": "0bc07c0f-e825-47c4-bb0e-732008825a7b",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ef5bd3db-f2ba-4659-a861-13b496cc5b13"
        },
        "item": {
          "id": "cb96d71b-b1fb-424b-bdc8-5eeec4234555",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a182a53d-29e4-4f6c-a80e-4781be3c2f1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156a6bbd-48bf-4d56-9250-7215b89debc1",
        "cursor": {
          "ref": "6aba00ee-baf5-4bbd-b18f-c81054d67230",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "aa75658c-6597-4f09-9ce5-b2c5ac010498"
        },
        "item": {
          "id": "156a6bbd-48bf-4d56-9250-7215b89debc1",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "734d9e38-6bf3-474c-85f3-540ee6dff24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a587da-ec41-4c67-8d7a-57e1fcadd306",
        "cursor": {
          "ref": "b4dd67ee-f757-43f9-b5fd-e2470c54f6ad",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4b410d2c-600a-46e7-9272-7fdb5f6f8875"
        },
        "item": {
          "id": "96a587da-ec41-4c67-8d7a-57e1fcadd306",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5c0e0624-2227-4e56-975e-f4fa22f7f714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec1dc9f-2610-41ba-95bc-cf69247321ce",
        "cursor": {
          "ref": "c13e130d-e8c4-4635-9cb2-253306999739",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "bb0a0e5f-dda6-484d-8cbf-f80fe3b5c901"
        },
        "item": {
          "id": "fec1dc9f-2610-41ba-95bc-cf69247321ce",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "de8f8e62-409f-4e5f-b36d-0d881250b58b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e36ad094-12ba-4667-aa41-d24b88414134",
        "cursor": {
          "ref": "1a3ab13f-87a0-4675-8370-b06efa6f7bff",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "4b5608f2-f059-440c-bba9-bba73f0bf4ec"
        },
        "item": {
          "id": "e36ad094-12ba-4667-aa41-d24b88414134",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "011aad3c-169e-4473-b50b-446db630a34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55aa6622-a039-4eeb-a3de-45b41beb2dfa",
        "cursor": {
          "ref": "7439fd36-e421-4902-be6f-69ceaa131248",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "fa228ff5-6351-4cd2-9e88-97acdc33fbc2"
        },
        "item": {
          "id": "55aa6622-a039-4eeb-a3de-45b41beb2dfa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "194cc054-7a08-4c56-a77b-74c57c2ed350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75004d45-40af-4b3e-bb80-8e661a301b23",
        "cursor": {
          "ref": "8304b2a9-9efe-4ebb-806c-28dc1578e1d6",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "47947ec1-03ba-49fc-9ef5-35b8bfee6220"
        },
        "item": {
          "id": "75004d45-40af-4b3e-bb80-8e661a301b23",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1ae3bae6-3485-4f80-b614-a2fe985f55a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc65e003-1210-4a86-8b08-493800ebcb8e",
        "cursor": {
          "ref": "f4cd5aee-8b70-4dfb-abff-1fa4516c70e0",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "efc9acf0-40c1-40f4-9aba-f3118953c9dd"
        },
        "item": {
          "id": "fc65e003-1210-4a86-8b08-493800ebcb8e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "37a24398-551c-431e-9cc6-f03752327963",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "573dae90-637a-45fb-8def-20f60cd19ec8",
        "cursor": {
          "ref": "02a22ae4-4929-47c1-b5b2-7ded2e301839",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6746eb8f-9c0c-4276-80c9-7240ce2333c0"
        },
        "item": {
          "id": "573dae90-637a-45fb-8def-20f60cd19ec8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "bc1106fd-abf6-4212-8a89-b9bb54c8519e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3d8669-1cd9-4ddf-97c9-bd0a6b9016c7",
        "cursor": {
          "ref": "3f2a3a93-c03e-4e1e-8e06-66c977966b40",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f0f9afbc-3f7e-4ff9-a278-52f0cf4fbc7d"
        },
        "item": {
          "id": "ed3d8669-1cd9-4ddf-97c9-bd0a6b9016c7",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "67e8d791-cf6e-4794-bbdd-5ca5333fe48e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f71a7b6d-5ae7-4a52-9412-88a6ef943a71",
        "cursor": {
          "ref": "6e33b1bd-3819-4db5-943a-bf1b062f3585",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4779e888-8f80-48fd-9d9e-e8a369d9c171"
        },
        "item": {
          "id": "f71a7b6d-5ae7-4a52-9412-88a6ef943a71",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b28d738f-8003-48b6-8c5c-583f022c11e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b63de7e-543f-4d97-b6fa-884146012d84",
        "cursor": {
          "ref": "37f47653-cd81-43a5-a174-92c7552b8fa9",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "36e66be5-4961-4f1a-b1a3-0844a3133fd0"
        },
        "item": {
          "id": "2b63de7e-543f-4d97-b6fa-884146012d84",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "adaf5e66-dd9f-47be-ba68-4e493d4cae5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fda8e6-93d6-47fa-baf1-c67647f022b1",
        "cursor": {
          "ref": "67105aa8-271b-44da-a276-60564e7ea207",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a3228228-184d-48e4-9a04-8e68b1f23660"
        },
        "item": {
          "id": "a8fda8e6-93d6-47fa-baf1-c67647f022b1",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "bba26c88-8a76-4ed7-93d6-a69dd797c518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84715cc4-cab6-4b6c-acc1-604fc460d207",
        "cursor": {
          "ref": "2f5d3469-e449-4b08-b9bf-92413987c185",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b0044baf-f668-4516-9fc6-aa40f15db01e"
        },
        "item": {
          "id": "84715cc4-cab6-4b6c-acc1-604fc460d207",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "45075726-d6a8-4f20-9f1d-4cb141c34377",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b6defee-ba56-4bd8-8033-faddfeacd482",
        "cursor": {
          "ref": "758211f1-31b1-4b56-902d-6156bfce7605",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b04b26d0-93ac-4a94-8abe-15a22b62934b"
        },
        "item": {
          "id": "6b6defee-ba56-4bd8-8033-faddfeacd482",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "9e328038-ea3f-4040-b84e-b1a12ce399fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a90338c-6ba3-4382-bd26-e2a1a619dfee",
        "cursor": {
          "ref": "8888c220-e84a-4617-8613-5994c9fdc2a0",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "e0534684-551c-4476-bdc9-5f777be6c916"
        },
        "item": {
          "id": "5a90338c-6ba3-4382-bd26-e2a1a619dfee",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "77ec000f-d63d-4c4e-b52f-658f656e4442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128a1bcb-62ed-4e53-8fbb-35c0978177cb",
        "cursor": {
          "ref": "9656d887-617a-49ae-b417-6623c1604b55",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3a4b58f2-0429-42f0-af33-864b41b69e2e"
        },
        "item": {
          "id": "128a1bcb-62ed-4e53-8fbb-35c0978177cb",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8bb03fed-7077-4fbc-a491-3e79f787c46c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d22775-ea68-457f-ac08-c5fe9a49d8f1",
        "cursor": {
          "ref": "f768da71-03d2-40f8-9705-f81735e6fa05",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e5cc6a64-487a-4550-9618-43ae92bd6025"
        },
        "item": {
          "id": "55d22775-ea68-457f-ac08-c5fe9a49d8f1",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "63fb73d1-017c-41fe-99cd-1f1b8176fe6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e2645c-4551-4f78-9075-46f86763ebf4",
        "cursor": {
          "ref": "1e68877b-2e08-4da0-922f-313a77250ed7",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "fe5f463b-4c34-476a-8aa2-8d7a0b235a74"
        },
        "item": {
          "id": "c4e2645c-4551-4f78-9075-46f86763ebf4",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "904e5aa5-ba87-4959-9ce3-a652ef1a494b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1c2a6d1-3fd1-4bb2-8913-4c7bace10c59",
        "cursor": {
          "ref": "4cc55110-1a2c-46d0-813f-35c608b6cb40",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a917c132-0507-4c17-989a-b4cf434d3c3a"
        },
        "item": {
          "id": "a1c2a6d1-3fd1-4bb2-8913-4c7bace10c59",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2d85dd93-956f-4829-bead-2111cfa64021",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9d2703ff-28fe-4272-a22d-608c6e3b6de9",
        "cursor": {
          "ref": "8654cfc6-cfdb-4821-8f3b-506787ae6345",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "af16e3c0-1159-4a59-a6fb-9025a764c4b6"
        },
        "item": {
          "id": "9d2703ff-28fe-4272-a22d-608c6e3b6de9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f29ad53c-1c88-4d36-b9d8-e010fc33a756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39098f59-f478-4324-adb4-1f272d094738",
        "cursor": {
          "ref": "d7a1e317-192f-4319-bb38-d576cba49e02",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f13e79a4-64a4-4e5b-b4f4-c76769198057"
        },
        "item": {
          "id": "39098f59-f478-4324-adb4-1f272d094738",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f5e84060-de66-4f60-bfeb-25b9135385f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d87ccc6-e38b-4df1-8b9b-4cfa4383934f",
        "cursor": {
          "ref": "1d3c7884-17f5-492c-89a5-46439f01d671",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9e5c8ed0-852e-4070-b6d1-29a13cec2199"
        },
        "item": {
          "id": "2d87ccc6-e38b-4df1-8b9b-4cfa4383934f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7cb19f2c-5296-4c89-820c-191888e97872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d6199f-6b82-44e7-b712-0dfce1d344fc",
        "cursor": {
          "ref": "ac56339a-407a-4a31-ab02-78d5291075da",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6b391b7f-75a8-4de5-bc75-24ab976972ef"
        },
        "item": {
          "id": "b4d6199f-6b82-44e7-b712-0dfce1d344fc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5950931d-ac47-4a72-9122-ccf48881154d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef52e6b-7624-464a-814f-199e6fb17665",
        "cursor": {
          "ref": "f7721b42-229b-421a-9404-a1c42682ee89",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "feef1c3a-02ed-42d3-9e7f-af0efbbe55a8"
        },
        "item": {
          "id": "aef52e6b-7624-464a-814f-199e6fb17665",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "37fbd449-f5e6-46d9-9775-4f38b486b844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7bbb4a-31b8-4a6c-ae0d-b5862581fb08",
        "cursor": {
          "ref": "394721a4-5423-4120-a861-ed810625cd95",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "04645f48-7687-42b9-a549-57ec14357153"
        },
        "item": {
          "id": "0a7bbb4a-31b8-4a6c-ae0d-b5862581fb08",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9e0cbbec-e541-4f19-9a0b-ac58908e2e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd76f20-d3b1-4bf6-9658-95d34b7e57c0",
        "cursor": {
          "ref": "e9227888-1547-435f-b451-a853365f5f08",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1c700b6f-48da-4e64-9d2f-70534cc8797d"
        },
        "item": {
          "id": "5fd76f20-d3b1-4bf6-9658-95d34b7e57c0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "24fe0cbb-eb04-4a58-85d9-b9e7b67f697d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dd7cdcd-a46d-44a0-a481-1fe6fbd2a757",
        "cursor": {
          "ref": "b092f76f-6e28-4d11-baaa-72db8681abab",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "71b59874-9730-4412-87bb-329250d9ca14"
        },
        "item": {
          "id": "6dd7cdcd-a46d-44a0-a481-1fe6fbd2a757",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "72c145b8-7956-4a22-82f6-95714fd72139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de960539-c234-4e5f-a9b0-0bd848999d09",
        "cursor": {
          "ref": "d85de715-9f18-42d9-9b31-73e64bc78e34",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "20508d13-3c27-4eec-ba3d-3f219f2e4fda"
        },
        "item": {
          "id": "de960539-c234-4e5f-a9b0-0bd848999d09",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2f2c484a-4aa3-489d-a05a-882c9e0f46d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4930bf-e38c-4f69-a98e-07d70c552ecd",
        "cursor": {
          "ref": "6c2851ff-c879-4399-a8c6-162d0de5fc74",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "8e9fa5c1-8bae-4da2-ac73-f5c18c587de9"
        },
        "item": {
          "id": "2c4930bf-e38c-4f69-a98e-07d70c552ecd",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "64466184-317b-4550-8155-3536f74688a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d5d90f0-29f9-4b5f-8055-dce74fe54483",
        "cursor": {
          "ref": "9c95362e-3dd5-4c9e-b450-74f0553927e5",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c80473c8-9f76-4f0d-8bb3-a518df4fdf06"
        },
        "item": {
          "id": "9d5d90f0-29f9-4b5f-8055-dce74fe54483",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e4f9be40-7f65-48c7-8d5a-a7f928014035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "382920c2-dd27-4e35-a4f9-aeac1b46c359",
        "cursor": {
          "ref": "dea8ce0c-917a-4cfa-8e76-f3162dc67d88",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7eda5b2d-46d8-4266-9662-675118a7028b"
        },
        "item": {
          "id": "382920c2-dd27-4e35-a4f9-aeac1b46c359",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a9f08cb0-2e53-4882-9c8a-18987eddbebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ade785a-562a-47ed-9cba-5a6cac7db58d",
        "cursor": {
          "ref": "f4b9241e-2acd-4c91-bb1a-c57cd363311a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "476ee14e-6771-4a2d-a280-d7b07e20c1f9"
        },
        "item": {
          "id": "0ade785a-562a-47ed-9cba-5a6cac7db58d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b7a31d19-e520-4826-9174-e2e07f3f0d8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80635250-076f-4658-bfea-f944ee588687",
        "cursor": {
          "ref": "9f72cddb-003d-4661-990e-d617292d145f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "dda33c64-9784-4114-8b74-54e92b394a49"
        },
        "item": {
          "id": "80635250-076f-4658-bfea-f944ee588687",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c58c2ca7-7a81-4e94-8de9-32b902ffb327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5178f35-265a-4da8-9e46-d01f3d1e4aed",
        "cursor": {
          "ref": "47f17ca5-6492-41d1-acc3-2473ec3b94f1",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ea012554-1310-401c-bbb4-47c0ac565c59"
        },
        "item": {
          "id": "d5178f35-265a-4da8-9e46-d01f3d1e4aed",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ad2cf89c-fbd2-477b-aad2-f7f887738219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2831b225-8fda-4548-8a31-26f45a30b4a9",
        "cursor": {
          "ref": "6eae0e49-b443-4fed-9950-2b26199c0856",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "becef931-b6a9-4f21-be6e-cc1b7e801bb7"
        },
        "item": {
          "id": "2831b225-8fda-4548-8a31-26f45a30b4a9",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5091a7b0-21c4-4332-aae5-9f8504081aed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e6fd83-e540-43ad-83f4-d865610b573f",
        "cursor": {
          "ref": "352f481d-f33e-486d-af8e-93010e3ccf91",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d090f097-d5e6-423c-9136-726b1be1465f"
        },
        "item": {
          "id": "d5e6fd83-e540-43ad-83f4-d865610b573f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ed4d3f74-0029-4491-9c5a-aaf5a012a711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0898df9f-77ea-4a6e-a90c-3dbee266090c",
        "cursor": {
          "ref": "7f4f5dae-297f-4d1a-afc2-539cf838c192",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "51dab5d3-9a5e-4e8d-94c3-96e5a1957cbf"
        },
        "item": {
          "id": "0898df9f-77ea-4a6e-a90c-3dbee266090c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c4942343-e6c1-449b-885f-e5959eeaeff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12600206-225e-4e75-bf2e-f0df0eb2d805",
        "cursor": {
          "ref": "63bb1a8c-fcd1-433f-8ed2-81a531f36ebb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7802e9a4-d4d6-423c-96cb-b90dc44acf78"
        },
        "item": {
          "id": "12600206-225e-4e75-bf2e-f0df0eb2d805",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "200f1f5d-3213-4be0-85e4-6da7f06ed1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9247401-2270-49f2-a6e9-cdb15d451392",
        "cursor": {
          "ref": "20c13252-89d3-407d-a5ca-6cb33c33ca99",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d3f23c9b-75b5-41bf-9abf-0811d66fe61a"
        },
        "item": {
          "id": "a9247401-2270-49f2-a6e9-cdb15d451392",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "83b4270a-fa64-499f-8165-5d1a471780c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33175910-5ef3-4578-a23d-89662d2d984e",
        "cursor": {
          "ref": "383ff918-101d-44f3-bfa3-f522d1e2423c",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "1ace6aab-88a4-4f27-a2cb-0af80f7858a3"
        },
        "item": {
          "id": "33175910-5ef3-4578-a23d-89662d2d984e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "40b026ee-fefa-4f5a-a288-28a6ab07471a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f723e30-d7dc-4465-8a99-113d2247ad3c",
        "cursor": {
          "ref": "615b462b-31bd-4b6b-8108-a4db0fbfed2d",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5230a8c0-884a-4d65-935b-6397bab40c17"
        },
        "item": {
          "id": "6f723e30-d7dc-4465-8a99-113d2247ad3c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a91272c0-cd83-4c2b-89cd-6b7b87229f7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567aed8f-7a5f-41d1-8e5e-f82ca90c1c24",
        "cursor": {
          "ref": "fc1056c8-3858-4c05-baf3-00db5fcc4f66",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "759ee108-c84a-443e-b923-586abf4334ab"
        },
        "item": {
          "id": "567aed8f-7a5f-41d1-8e5e-f82ca90c1c24",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ab2f9f31-e217-4fad-9b00-570ac34ea319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf8e1fe3-93bd-4767-b5ef-5ada9d5fb0c0",
        "cursor": {
          "ref": "afe1352f-b63f-4a88-b55b-0a914952a5b2",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7fb05fc4-3e0e-4a30-a0f3-bbbe7276baf8"
        },
        "item": {
          "id": "cf8e1fe3-93bd-4767-b5ef-5ada9d5fb0c0",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "24e0b59b-3ea9-4d1b-8d32-8bfd386c4753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9861b9c-201e-495d-ad6d-1d374afe759c",
        "cursor": {
          "ref": "8bf9ea1a-b537-445a-a9a0-2657bb85068d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6ad6b32d-cdb2-4977-b00a-f0eb4c9668a0"
        },
        "item": {
          "id": "e9861b9c-201e-495d-ad6d-1d374afe759c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e922b31f-24e3-4c86-a4bb-60a8b9c3304f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7e9970-088c-4287-b980-5ac884118ac2",
        "cursor": {
          "ref": "63f6a054-9503-4603-8661-6c54e97a81ef",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4cdd05a5-8056-4e47-899c-61d523d6cd1d"
        },
        "item": {
          "id": "1b7e9970-088c-4287-b980-5ac884118ac2",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "bc7de8ea-d110-46c8-9927-6c49674e0fc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88d41314-2d70-4d41-8cec-173b5dd3d953",
        "cursor": {
          "ref": "33289e73-7e17-4e34-b7bc-d24e86aef13e",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2405f263-14d3-401a-b510-413aa63f4d99"
        },
        "item": {
          "id": "88d41314-2d70-4d41-8cec-173b5dd3d953",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "05a67e02-548c-4c93-906e-6f91c068f262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d532ed-f3fd-4d2f-a14b-f5d73d6ad9a8",
        "cursor": {
          "ref": "87282143-7307-4af0-a5bc-fd0a69249c3b",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8a2abccd-f1af-44d3-aa2f-d01de9cb8ff0"
        },
        "item": {
          "id": "16d532ed-f3fd-4d2f-a14b-f5d73d6ad9a8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d44bf21a-81a0-432c-87c0-59c11f6f1faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8cfb81-92ac-4e4f-8c07-2a2bc89c1396",
        "cursor": {
          "ref": "785f2f47-52f5-4656-859d-108666e6ba18",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "7079f854-7ebd-441c-97e3-b2cdf4a871be"
        },
        "item": {
          "id": "8e8cfb81-92ac-4e4f-8c07-2a2bc89c1396",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e668a3bb-7e89-4f75-b483-dd888122c3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25fd1bf7-f43e-4e80-a38d-eca61eb519f3",
        "cursor": {
          "ref": "b4556dd9-346c-42d1-a6e6-27c7abeca9db",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e7ce7843-b242-49b8-81d3-5c0449bd62ba"
        },
        "item": {
          "id": "25fd1bf7-f43e-4e80-a38d-eca61eb519f3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "01dd1bb3-f1f3-4471-9542-f1d71f867a6d",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a8b4eed8-3464-47e7-99dd-240cd0a2ebde",
        "cursor": {
          "ref": "acc4a29f-3aa7-461e-8bb6-07be941a2d76",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "447512ad-a674-4abb-84fe-b8bb7e578635"
        },
        "item": {
          "id": "a8b4eed8-3464-47e7-99dd-240cd0a2ebde",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "8a886eb0-0143-4f67-a978-abba6b75abb1",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "0efb79ab-45f1-4694-92f4-8f83e93e6989",
        "cursor": {
          "ref": "b2f31895-5502-46ea-a99d-500b927c61ef",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "c9b15b0a-6148-4b72-b99d-a234722c37fe"
        },
        "item": {
          "id": "0efb79ab-45f1-4694-92f4-8f83e93e6989",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d6849917-80e8-44d4-9bea-a95df8c6822f",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2b54d8fe-3d56-42eb-8962-4d84919b2246",
        "cursor": {
          "ref": "7aa2f323-fdc7-4245-9ed4-a26516a2461f",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "358cd5e7-b36f-4692-90eb-dfd53632afbd"
        },
        "item": {
          "id": "2b54d8fe-3d56-42eb-8962-4d84919b2246",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "737e16d5-7263-46ba-90e3-9dde6d38fea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ab8194-b402-4969-abaa-b0d34448b3d0",
        "cursor": {
          "ref": "a18c8815-54cb-4e02-aa3b-a063f8f5cabf",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e626d004-9c74-4461-bfd6-b2ce05bcc597"
        },
        "item": {
          "id": "38ab8194-b402-4969-abaa-b0d34448b3d0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "525cd0f4-13c1-4503-9445-c7d8d0de7555",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3915effe-05b9-4191-a875-95933f6fd08d",
        "cursor": {
          "ref": "bf84e7d3-639a-4730-bce5-7eadb21bd130",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a36e7751-531a-4bac-8c11-8c82e219ab8d"
        },
        "item": {
          "id": "3915effe-05b9-4191-a875-95933f6fd08d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8de7ec4a-9df5-4c53-83d0-691736290dd3",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "cde5a133-58bb-4629-b2a6-2fab73642110",
        "cursor": {
          "ref": "8287e948-25ab-440f-a43a-bd427f761080",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e1087bda-1017-4f69-bcc5-121fcca7a1d2"
        },
        "item": {
          "id": "cde5a133-58bb-4629-b2a6-2fab73642110",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "5fe3150d-9169-4fef-9331-71c3d34f49ea",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a7f362bd-c648-4538-9a52-2f0976d07843",
        "cursor": {
          "ref": "9b3fce4c-28b1-4b8d-869a-ade2519eca50",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "da1882fa-9cce-4a97-a594-57772c9ac200"
        },
        "item": {
          "id": "a7f362bd-c648-4538-9a52-2f0976d07843",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1004d494-db65-416e-bd1c-f5ca9999d8a4",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b1405829-4fe8-49d0-9f30-e24ca517717a",
        "cursor": {
          "ref": "53ca2cd9-17c4-4c53-8277-bfa18a3b2eed",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b3d0b8a1-c249-40da-afad-059418138128"
        },
        "item": {
          "id": "b1405829-4fe8-49d0-9f30-e24ca517717a",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7c463597-8ef1-4a53-9d34-7f07ca8a6c3d",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "d9b39431-fe3b-44df-830d-770e08c531b4",
        "cursor": {
          "ref": "66c57ba7-b787-4437-97eb-31d41af2b684",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f7938ad9-7d16-4959-8da2-2beecc5469f3"
        },
        "item": {
          "id": "d9b39431-fe3b-44df-830d-770e08c531b4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a2da2255-c5ed-4ced-ab22-4dd5b66e98c0",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "22e1a57e-5cf8-4826-bc49-53814099b4d6",
        "cursor": {
          "ref": "f2e3cb2c-ec91-4f54-8a3d-fc03cda9a266",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0f9c6146-8ddc-4d3a-a8d6-0fb42008962e"
        },
        "item": {
          "id": "22e1a57e-5cf8-4826-bc49-53814099b4d6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "4b62eebd-0fc3-467e-b999-a6b5f02e31d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed3f573-8664-415a-a806-4b5dc0993a23",
        "cursor": {
          "ref": "0e7cd70f-77ce-435e-88e9-23b16619ef5c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "dd26aef3-37f7-4c19-a4df-f1cdb84ae949"
        },
        "item": {
          "id": "6ed3f573-8664-415a-a806-4b5dc0993a23",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "9bbd6fc6-cc5c-433b-9382-71ad9128377c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29279371-3e2e-4baf-9cda-94e4fa62de54",
        "cursor": {
          "ref": "1b2e770e-0c23-4130-b78d-aca9f4ad22b2",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "4b177686-4370-4b4f-87a0-a5643f9d3c96"
        },
        "item": {
          "id": "29279371-3e2e-4baf-9cda-94e4fa62de54",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f2dff368-8b69-4fe9-aec2-6dc56220e60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6960d997-7f74-4a32-9e19-d9a146a60262",
        "cursor": {
          "ref": "08bb0236-f030-43aa-8b4b-d6fe0473f38d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "372f544c-c12d-41e2-8170-dadc1c8a17e4"
        },
        "item": {
          "id": "6960d997-7f74-4a32-9e19-d9a146a60262",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a799ab8d-6de2-435e-a2f3-c967ea4f282b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0f7ff3-4a7f-4947-8f91-41bb03282988",
        "cursor": {
          "ref": "ed923832-b70b-4046-a214-7b2ade1a42d2",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "aacd620a-2f07-4f80-9370-ffbd43ec82fb"
        },
        "item": {
          "id": "ea0f7ff3-4a7f-4947-8f91-41bb03282988",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c36a2650-a6c0-4940-aa87-6c362e084657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de882ac-358f-4ecc-866b-5b6f6d496f93",
        "cursor": {
          "ref": "1225cb99-4d86-4b7e-8083-c98a5dd838ff",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ad7a7b83-a8e9-4c19-8286-0a1632e96cf2"
        },
        "item": {
          "id": "3de882ac-358f-4ecc-866b-5b6f6d496f93",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "79c4529a-8e78-46a5-82f2-b01ca21edcb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0738dc-83ce-4a2f-83d1-fa50763082b3",
        "cursor": {
          "ref": "9995ce0b-01ed-4f4c-bad5-2299e42c1bc9",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "55b441b8-7669-4839-ade9-f5e44ba07ea6"
        },
        "item": {
          "id": "ea0738dc-83ce-4a2f-83d1-fa50763082b3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "068ef305-cc52-4acb-931d-fe6f06ca91a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba8ab22-d880-4c2a-8d43-576123b2ecc8",
        "cursor": {
          "ref": "ff0fcd8c-ad5c-4283-a1e2-e95ce02fd15f",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c91d2e49-1b8d-477f-9772-5cce84ed74bd"
        },
        "item": {
          "id": "aba8ab22-d880-4c2a-8d43-576123b2ecc8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "11dcad6a-c9f1-4b2a-9aef-a8e044455f84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594c986a-a60f-4a5a-a6ab-c3e3d77dc79f",
        "cursor": {
          "ref": "8babf9f1-f93c-4f25-a6ee-85a43f5aafc6",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "166d4822-cf50-4294-a2bc-8c213a287235"
        },
        "item": {
          "id": "594c986a-a60f-4a5a-a6ab-c3e3d77dc79f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "27aeb920-7dc7-4dad-9673-a9846eae471b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 120,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f8533b-d731-4627-9f6b-87c00262adff",
        "cursor": {
          "ref": "1712768c-c0c7-4d25-9542-9cbdf82a91fb",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "064929c0-b0c8-4724-a588-fc5f518573e9"
        },
        "item": {
          "id": "e2f8533b-d731-4627-9f6b-87c00262adff",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f166737a-fc6c-444b-917d-a23f777ab93b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02dd123-1a10-48e2-82b5-00ea0571d9d2",
        "cursor": {
          "ref": "1ae852bb-2995-45a9-b8ea-11418c5048da",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "747e80fb-4bde-4c22-a934-459a7fa4d016"
        },
        "item": {
          "id": "a02dd123-1a10-48e2-82b5-00ea0571d9d2",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "168c7927-1eb8-4b1b-bea8-89bd5a1a8d79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de2dd3e-e4fe-49a4-bec1-72c439e81366",
        "cursor": {
          "ref": "8d5d7fdb-f427-4029-8407-838da0016597",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fd666a5d-6e5a-4dcd-aef8-156da249aeee"
        },
        "item": {
          "id": "1de2dd3e-e4fe-49a4-bec1-72c439e81366",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8772dd9a-29be-4be0-920d-96f0031ce789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652a6e1f-ce0f-4c49-8988-4bdb5418da3c",
        "cursor": {
          "ref": "7cdd0d0d-849b-43d8-8f11-dcce9da05e43",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "90e17fc8-c0b7-4e69-85a3-b690f1d3cb7c"
        },
        "item": {
          "id": "652a6e1f-ce0f-4c49-8988-4bdb5418da3c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "a98e2f24-9d15-493e-bebe-8cecfb9bf696",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f403804-2e73-4c26-bd92-62cacb3eebe0",
        "cursor": {
          "ref": "ca2425a5-20a8-46aa-8b3d-d589dbddb6cc",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a9b7a67d-ca8f-4e75-a16f-c869fa8bb0c2"
        },
        "item": {
          "id": "6f403804-2e73-4c26-bd92-62cacb3eebe0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "edff8373-5a83-4f4f-bfa4-5414e02b9bef",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "592c2359-8c9b-4654-b366-2d247d9e0380",
        "cursor": {
          "ref": "113483ea-4fff-4f1a-a2a1-73c5582a46ea",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d86eb91c-302d-4ea5-a344-e9f3f2b9e16a"
        },
        "item": {
          "id": "592c2359-8c9b-4654-b366-2d247d9e0380",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5ff54a66-234e-47d9-a6e6-240a836f6311",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f9b5db1d-2216-458f-8c36-c76f8194e417",
        "cursor": {
          "ref": "cf569e38-ae32-4a5c-8b21-685b8a81b543",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c586e436-b76b-4bd8-88d5-e61a7fe0884d"
        },
        "item": {
          "id": "f9b5db1d-2216-458f-8c36-c76f8194e417",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "49634fea-0a99-47c3-9704-1c5c90c67aeb",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "be82ab03-695f-4c9d-8992-5f501f5ecff2",
        "cursor": {
          "ref": "3573281f-056c-4acc-9429-27cc68c4fd48",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "bb62edc3-56ad-4fe8-aaec-e76550c4721f"
        },
        "item": {
          "id": "be82ab03-695f-4c9d-8992-5f501f5ecff2",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d6bc9a58-04f8-4bda-aab6-0a0441382bcd",
          "status": "OK",
          "code": 200,
          "responseTime": 76,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "da80f92a-af2e-4a65-9128-b7142f827e7d",
        "cursor": {
          "ref": "ea64e41d-867f-493c-89aa-69cf70c91ec6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "0e8ecc57-1c36-4ce3-b22d-7fdce719e3c0"
        },
        "item": {
          "id": "da80f92a-af2e-4a65-9128-b7142f827e7d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b141a970-d3f6-4768-b74d-b7022b158b4b",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "76c13610-11dc-4b1b-9197-8fbf8a9069db",
        "cursor": {
          "ref": "4f23fa37-9b9c-4d6b-8c23-bb14450cc1ff",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "dec53c68-8e27-45bf-859b-c9a5abe878c3"
        },
        "item": {
          "id": "76c13610-11dc-4b1b-9197-8fbf8a9069db",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f0a63e7b-aaf3-4004-8bad-cb70e95ac72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e59152-4190-407c-81a1-726c8f7af87e",
        "cursor": {
          "ref": "ed8f0dde-a6ef-45a1-8c3f-def38bd0122b",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "5deb3cfa-5fb7-4150-a460-9c3f50bffa90"
        },
        "item": {
          "id": "25e59152-4190-407c-81a1-726c8f7af87e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "5d5e8248-4e5c-406a-b520-01b3fc32a73f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65f57e4a-0223-4033-92fc-c6ac27f8f703",
        "cursor": {
          "ref": "afcd4066-ef63-4275-b07e-af2fd29ac0d5",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "977edc9e-6c5a-458c-9149-73a469e78a96"
        },
        "item": {
          "id": "65f57e4a-0223-4033-92fc-c6ac27f8f703",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f6670dbd-eb26-4467-8c63-a32736a9b955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8943c9e-3d28-42d0-b5bd-e4ea80b74456",
        "cursor": {
          "ref": "26e70db8-6165-4320-853e-461e325d973a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "194c70fc-7b08-40fa-b48e-5a121eae4348"
        },
        "item": {
          "id": "a8943c9e-3d28-42d0-b5bd-e4ea80b74456",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "782d86fa-9308-4941-acda-c39c2001e402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "490bea40-4b87-4835-ade3-375b9ae73a3b",
        "cursor": {
          "ref": "af7a26a9-5d5d-4e8d-a479-1db4b8face8c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b69bc4b0-6952-4884-8379-9b660d92027e"
        },
        "item": {
          "id": "490bea40-4b87-4835-ade3-375b9ae73a3b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2250837c-444e-434e-b74c-30137586cd20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a983ee-1b5f-464a-9e3b-f3b7be60054e",
        "cursor": {
          "ref": "088fa94c-f95b-4194-aec2-dc7b6377be79",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0b649fdf-b32e-47ea-858a-ea66a038e58c"
        },
        "item": {
          "id": "75a983ee-1b5f-464a-9e3b-f3b7be60054e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "44154c73-1b97-4397-8429-b2e4ebca5ee9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1478dd9-ccf1-4dfc-a1dd-2f3d62be4b5a",
        "cursor": {
          "ref": "cab947f2-d061-4e35-a478-46ebf8d219cd",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0ab8db4a-5d8d-41d3-a04d-b9055382cbf7"
        },
        "item": {
          "id": "c1478dd9-ccf1-4dfc-a1dd-2f3d62be4b5a",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0aff417e-6818-48e5-848f-ebbbc31a4a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ccf267-8114-45d8-818e-93c0508b1f38",
        "cursor": {
          "ref": "e3e9baca-b689-4d5c-b94e-abc151912477",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "933758c6-fef3-4992-848d-55251a50bd07"
        },
        "item": {
          "id": "f3ccf267-8114-45d8-818e-93c0508b1f38",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cc4664cb-904e-467b-94df-ba4ad5b20780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f912fd60-4147-4b30-9a07-5baaa8a40ae6",
        "cursor": {
          "ref": "684cb36d-5fb0-4548-a165-5ae282ba6422",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "99ed2deb-5f31-43ed-9416-790c344882e2"
        },
        "item": {
          "id": "f912fd60-4147-4b30-9a07-5baaa8a40ae6",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ce65f192-fb30-4ecc-9dee-50d72fd3d299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c143ce2-eb12-49ae-8827-a9308f16cffa",
        "cursor": {
          "ref": "7804ebbb-3dad-4543-af73-30e764c14070",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7b7772da-ce66-4489-bc73-95a343190eee"
        },
        "item": {
          "id": "7c143ce2-eb12-49ae-8827-a9308f16cffa",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "39ae4f5a-954e-48e9-be2d-399130221e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0be608-aa17-48a3-bf68-307375f173a0",
        "cursor": {
          "ref": "5c5ecb24-9da3-4a88-940f-88a9efaa38d0",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "47731fc1-1c29-4210-9211-777fbdf04297"
        },
        "item": {
          "id": "7c0be608-aa17-48a3-bf68-307375f173a0",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "723423ca-afac-45d9-b1d9-708eca76c8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c0ba27a-9eb6-4a27-89df-6b55bff6720c",
        "cursor": {
          "ref": "966dfa1c-4f08-4726-92dd-d0ca6b5a6015",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "56f72fa2-a9ad-4cee-8917-85968a2bde0f"
        },
        "item": {
          "id": "7c0ba27a-9eb6-4a27-89df-6b55bff6720c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "420b5fd3-170f-4a5c-88d7-b2ce90445610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bdb33ba-52e2-4ceb-b7be-d3e6e03ef490",
        "cursor": {
          "ref": "cb18cadc-b60e-48ff-87b7-3b1c71c052c9",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "f0ce527d-3123-4e0b-a38c-b059119d75bb"
        },
        "item": {
          "id": "2bdb33ba-52e2-4ceb-b7be-d3e6e03ef490",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bea19030-2c10-4886-863c-cc67a2a6395f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2648fc64-3236-4a4e-8935-aa28f8c1464f",
        "cursor": {
          "ref": "0211768d-58c7-4a22-8a46-73496a0981e7",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "424060b5-705e-4238-9ff3-4d6af066577f"
        },
        "item": {
          "id": "2648fc64-3236-4a4e-8935-aa28f8c1464f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "cffa3aac-7806-495c-bd29-0c5b7cfdeae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88d4322-b7d0-4ec6-9717-71a76f0a92f9",
        "cursor": {
          "ref": "c65395be-db12-488a-ad58-338e41f3aa6a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "a3706ad0-4397-44e2-89f9-6a7ac28ee8f7"
        },
        "item": {
          "id": "a88d4322-b7d0-4ec6-9717-71a76f0a92f9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "23041325-0606-44ee-a835-6a0c5ac840de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541455c1-3849-4349-8a9b-4460115726da",
        "cursor": {
          "ref": "6777e978-2810-44e4-9bdd-00c67ae09d7e",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "b3227227-9313-43c9-8457-707443a99d3b"
        },
        "item": {
          "id": "541455c1-3849-4349-8a9b-4460115726da",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "fe29f6a8-8941-400a-bf6e-284576ee8532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95e6d40e-a0a5-4282-a857-b4080dd992a3",
        "cursor": {
          "ref": "8a2e6bcd-6b41-4b09-b49b-eb360d4a1536",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "bca80bd1-2582-45d8-b092-dfd8c7ae0eed"
        },
        "item": {
          "id": "95e6d40e-a0a5-4282-a857-b4080dd992a3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "151b9ea4-8d81-4a00-9f3f-b93413e5cd8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31ed1119-93c9-4407-aa72-5c654119fd0b",
        "cursor": {
          "ref": "f57111ef-675f-469a-bbf8-a86744c0b981",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "c387fe87-b333-4cc1-b7cf-d9ed1cbd4bef"
        },
        "item": {
          "id": "31ed1119-93c9-4407-aa72-5c654119fd0b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "41c92d1c-0723-49e4-a784-52de66f52c87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36343caa-d8b8-4bea-8724-569420b9f490",
        "cursor": {
          "ref": "a4b47c57-4424-47cf-8453-6f68adb53dc8",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "903beb20-c87c-43de-9590-c9fc9b0fe978"
        },
        "item": {
          "id": "36343caa-d8b8-4bea-8724-569420b9f490",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "de27d29e-dc4a-4dc5-b0ea-716b2a24e530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b01707a5-e959-4c7f-aca0-f13ead4fa24a",
        "cursor": {
          "ref": "e6edfa6f-a167-4243-b526-3cecb97e9198",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "5623201a-c991-4e90-b940-e9d102241362"
        },
        "item": {
          "id": "b01707a5-e959-4c7f-aca0-f13ead4fa24a",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6b98218d-1b55-4276-8705-e56b954e05ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfd3066f-b1a5-4de3-99a8-db2aaf47727e",
        "cursor": {
          "ref": "a637bdce-b94e-4b37-842e-077b4f2e9574",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c4ab3797-e197-411b-a286-b5285c0cd648"
        },
        "item": {
          "id": "dfd3066f-b1a5-4de3-99a8-db2aaf47727e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "b5763858-f08e-471c-b5a6-445c7f9a8c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc72566-5baf-4232-a31d-c1eeee755997",
        "cursor": {
          "ref": "19c75aab-ef3b-450b-a3e8-34252abb2bd3",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "5332bb6b-8073-49c3-a63a-4c5e84a3805d"
        },
        "item": {
          "id": "6cc72566-5baf-4232-a31d-c1eeee755997",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eb0d3d08-403a-49bf-a05f-24eb187d386e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2c6112-c982-4789-94d5-9be5e6cad7a9",
        "cursor": {
          "ref": "81cf2c5d-a809-42f6-b911-6cc4b3af4d39",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "6f40cb07-56a0-4664-9281-3a3201cbaea7"
        },
        "item": {
          "id": "1d2c6112-c982-4789-94d5-9be5e6cad7a9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "beca9e8a-67a1-4b5d-8286-e887daea177e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b3d77e-6dfe-4fda-ba9b-a4552994f96b",
        "cursor": {
          "ref": "26942ffa-98ab-42ae-a3ae-b2355ee270e4",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "77d749b6-d6c9-47b2-9e4c-e6b3a75e49e4"
        },
        "item": {
          "id": "c4b3d77e-6dfe-4fda-ba9b-a4552994f96b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "6799bf5b-c6c9-411c-9c0d-4e267cf845a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e695ac-aee5-43b9-845c-ababc07e67b1",
        "cursor": {
          "ref": "915f9c81-a4a0-4ee1-a1ed-58600157155a",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "0d00a311-42aa-4d38-bde5-d8c9808e50eb"
        },
        "item": {
          "id": "47e695ac-aee5-43b9-845c-ababc07e67b1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b37671c5-7ec6-4b59-8809-17bb500852f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc51974-8de5-4a5a-8be0-b8ba5b17920b",
        "cursor": {
          "ref": "535bbcfc-62c1-403f-ac7b-f047c19091db",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "676553ff-760b-4777-8c7d-36958ad7f3d0"
        },
        "item": {
          "id": "7dc51974-8de5-4a5a-8be0-b8ba5b17920b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "65701059-d057-4c89-b689-9bcb92e93ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914d203f-f36b-436d-a3e0-36f81b22d0c4",
        "cursor": {
          "ref": "6315be3c-20a4-4b86-a978-d589aaebd575",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "23dac9fc-2efe-4264-b097-0dc195bb447d"
        },
        "item": {
          "id": "914d203f-f36b-436d-a3e0-36f81b22d0c4",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "4df71f14-705d-4e8b-b9db-aa3f88f9b22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94550aa-0df3-40ff-890c-a58a89518c3f",
        "cursor": {
          "ref": "ed1efa17-8e78-4b5e-9d95-640b951a270c",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "af7468c8-1353-425e-a0b8-80dc7550bfaf"
        },
        "item": {
          "id": "b94550aa-0df3-40ff-890c-a58a89518c3f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "953484ea-7896-4058-963e-a190570dddd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb307a5-4349-454e-bf5d-4dce7a6514c6",
        "cursor": {
          "ref": "fc2add44-fdd6-490c-b59a-323e56c7b1ef",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "dde9442b-1dcd-455e-999f-0e0c4502f508"
        },
        "item": {
          "id": "3eb307a5-4349-454e-bf5d-4dce7a6514c6",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ab74bf55-3794-40e4-9465-484fcf0f548f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ec75bc-20c5-43b9-87d3-bcd46760c7e9",
        "cursor": {
          "ref": "4d8ad2b1-7e05-4d05-ad17-af9adc3ea522",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7751ea02-2a37-4aa6-bc47-9982de316bbb"
        },
        "item": {
          "id": "f9ec75bc-20c5-43b9-87d3-bcd46760c7e9",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "2b3ef90e-c34b-42d7-a844-b29c6516dac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54bc5cf4-8d2c-4438-a788-6bff8143f2e6",
        "cursor": {
          "ref": "718c0e8a-6136-4ad4-a95e-580a0d1b9c9a",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "bbcdcfa0-b625-4b55-866d-46eb12c5c2be"
        },
        "item": {
          "id": "54bc5cf4-8d2c-4438-a788-6bff8143f2e6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b53d8345-3cdb-4323-bc17-7e0641afc6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc829f66-953d-44b1-82c8-32db4b40dd83",
        "cursor": {
          "ref": "bd03a8f6-5cf1-4193-9175-dbd189022d0a",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7186613f-994d-4bcd-b403-91171532516e"
        },
        "item": {
          "id": "bc829f66-953d-44b1-82c8-32db4b40dd83",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6fb27171-0432-4889-81e0-9eb1ff015669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072c100c-7fa5-4bf5-ab4f-2b1fa2afb4b6",
        "cursor": {
          "ref": "b889b610-fcee-462e-9b76-a21b187d06f2",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4dbcbfac-fc25-4361-a764-ebdab9eeeebb"
        },
        "item": {
          "id": "072c100c-7fa5-4bf5-ab4f-2b1fa2afb4b6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "87ce77c8-5089-4679-a734-5bc2a14de3a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f656d97-0bd4-412f-b1bf-ee0c4be5bd81",
        "cursor": {
          "ref": "68c74fc3-b27b-4d88-b8e2-bc438c4e4abd",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "60b14764-47d7-43bd-8736-0161488500c9"
        },
        "item": {
          "id": "7f656d97-0bd4-412f-b1bf-ee0c4be5bd81",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e4652258-ee5d-4819-b461-5eea92670b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d064b2-dfd3-4bf3-b835-520dd551686f",
        "cursor": {
          "ref": "514f87dc-144e-4729-af24-a752ad94b4b9",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2d39d186-d16d-4aa9-bf3e-82fdbf9afefc"
        },
        "item": {
          "id": "e4d064b2-dfd3-4bf3-b835-520dd551686f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "f8f4f33a-7863-4eb0-ac01-10e2ba7aab69",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fafe9125-1796-45a0-b10b-7bc7c6b5ee03",
        "cursor": {
          "ref": "c509023f-a6b8-4fe4-aab3-29aff5badb48",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "549ce95f-fafb-4eab-b1d6-b422219f56b9"
        },
        "item": {
          "id": "fafe9125-1796-45a0-b10b-7bc7c6b5ee03",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6c4e05a1-f64f-4305-8003-b6968eeb69c5",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "bcfed474-9373-4f14-9b95-c083b23e3463",
        "cursor": {
          "ref": "d32714a1-5e6a-4da5-bf5f-63a3b2ef8f09",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "d27968bf-9a66-4563-ae3d-cf90b6997a7b"
        },
        "item": {
          "id": "bcfed474-9373-4f14-9b95-c083b23e3463",
          "name": "credentials_verify"
        },
        "response": {
          "id": "acc61a29-b38d-4fc0-a8c2-119219a07d75",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "14fce766-ae4d-4df7-9bb0-1ff7a172a4f1",
        "cursor": {
          "ref": "5734dcef-1d2f-406d-a5e2-1ea3a0dd0c03",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "40491e3c-80e7-4f27-8403-22f131d1d8d5"
        },
        "item": {
          "id": "14fce766-ae4d-4df7-9bb0-1ff7a172a4f1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ae2cb098-3e57-4a99-a703-ecf8423da2ba",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1266fad1-2fd6-44e4-801a-477a2e9dc5fd",
        "cursor": {
          "ref": "eaffadd8-b385-4f03-a9b0-7e57a18b79df",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "28f161ee-45ad-44b8-a902-09f2f6d52d77"
        },
        "item": {
          "id": "1266fad1-2fd6-44e4-801a-477a2e9dc5fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "37682b4b-c6f3-41e6-b397-e052da5066fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1266fad1-2fd6-44e4-801a-477a2e9dc5fd",
        "cursor": {
          "ref": "eaffadd8-b385-4f03-a9b0-7e57a18b79df",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "28f161ee-45ad-44b8-a902-09f2f6d52d77"
        },
        "item": {
          "id": "1266fad1-2fd6-44e4-801a-477a2e9dc5fd",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "37682b4b-c6f3-41e6-b397-e052da5066fe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e40a1871-6276-4af1-a007-3fe1c8849a83",
        "cursor": {
          "ref": "3bd4bf17-3a52-4283-835f-6d90f6738383",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b80afcbc-257e-4dd1-a8ed-3f47291cfe07"
        },
        "item": {
          "id": "e40a1871-6276-4af1-a007-3fe1c8849a83",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "615f0d1d-65c0-4022-898e-92ee17d93eae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2754cf8-94cd-4074-8fc2-1d3fa33b50ec",
        "cursor": {
          "ref": "17c2a07d-f071-4dd6-982d-de9fa8de7a09",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "9ed05800-d280-45e0-9455-0af2d5a9f954"
        },
        "item": {
          "id": "c2754cf8-94cd-4074-8fc2-1d3fa33b50ec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "8b695a22-15cf-4846-af19-6462efde0946",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}