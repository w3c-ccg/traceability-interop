{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "692d5d89-5762-40f9-a3da-e95b464ff992",
        "name": "Clear Cache",
        "item": [
          {
            "id": "c29e4267-48f7-4a3f-bd88-42764f173593",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c5a854c-fd5e-4f2f-ba7c-c9de469b250d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "7c17c4f1-524e-4286-a340-9e1f844e2d54"
                }
              }
            ]
          },
          {
            "id": "dcc48510-77b5-4ff9-97ca-f521ec11c0aa",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "04bcf5a4-37fc-46fe-ba58-fc35a805609b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "448eba05-1ccf-433c-89a0-4e8cb29eb512"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "952108a7-0732-4319-98c1-b4ef1e4f6c15",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d7df5246-cddc-49ff-bbf0-b5e8013ea5a9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "49377c37-68ec-45a7-86fb-19f76ab3cb1c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca4c8b60-7c94-4097-bc4b-74f82e4f5363",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d73d3f78-86ef-4f20-a3b6-42fdd6ad40df"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebd11028-49f1-41f1-b34c-25c0547fb68a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1842c891-cbcc-4805-831e-f18dfcb6ea55"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5865ce29-0d2d-4b0f-b3d9-5ed2738f6647",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94121cf3-cacb-474d-b1c1-94deec1a1677"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a6e4bc5-56f6-4d1f-b466-a7ee00e32260",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "99dbce4d-1f9c-4a44-acc6-23e9c882c016"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7277aa1-b1e0-4331-8dce-5c5fc5dc222c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "97e690fa-617a-4b9b-82ff-9ef3e74aa643"
            }
          }
        ]
      },
      {
        "id": "c11758dd-c1da-4fe9-bc50-065e708667c1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bd8ecb89-da18-4cad-9a08-a4cf500da3e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dbda42e7-7af8-4ed5-acdc-d3be25a699b8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dd364a77-dfde-4d8b-9e93-ee82193f18f2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bb346f-6a68-4edf-97a8-cb7e6a499db0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e18fefa-d5e4-4a5a-8d20-e0bf6506b3c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a246b1-e3fa-4c0a-a7eb-8cb71c92cc00",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71d42132-af72-4acd-aaf4-34ee688ccb1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96fdc800-dcba-4fa6-85ec-92551786dd8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953466cd-8e13-471f-9232-be1241e336b1",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc60ebb7-b2a2-4bef-b296-909d0a861d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9073c394-1f6e-4790-8bd7-d79cb656fb55"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3aede300-1e88-400f-a683-596102eb55fc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2153a1b8-4698-4f3c-8456-3eeb0c6f8381",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b4e9bb-a617-4f04-90a0-d9bd59b874fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a020fde-f1e9-4f7e-8418-46024d1119d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc44a23-1ffa-4d4b-82a3-09f0580fa867",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428ccba5-f4cb-466b-8fd5-c95073e07352"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "80663b86-a5e6-44c3-a9e5-ae994b24219b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f58c4cdb-34d5-4b43-85c2-6347866edbff",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5367726d-8e11-4d20-a7ee-1bb1a9237d54",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "177cc6c7-cd88-4d40-82b1-ad3efdeeeff6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1f0c0d3-6f9d-4e57-836b-15fdbb47540a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a9ffa9c2-7c4a-4baa-bea6-a55b141bb6a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18e557c3-449b-4282-bd95-7463c9f4affe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4f5e1bd-8087-410d-b6c0-62ca58f1f041"
            }
          }
        ]
      },
      {
        "id": "681490c6-94ce-49d5-90f6-70677f6b2996",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9dd88ed3-1f31-4463-9431-fd85caf6c142",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bd544bfc-76ea-4fa9-bde5-320b4ecbec81",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "18aa11ec-7cdb-41de-a248-8bd61ca192da",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "393db3db-6bb9-4fec-8c2c-89cd7310cca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f30ab85c-899e-4dd6-9e29-c02b0039f918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0b1ccd6-40b9-40e3-a0ad-c0bb592a88bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5219ba2f-8e70-4dad-978f-d577ebfe8e01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be76701a-18ef-427b-88f9-7a3e53219b95",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c7677d-e77f-4bfa-b995-775ad47c5a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b9d4ed-483f-42e3-b701-dd91ddaaea48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b553040-95d0-478f-81c6-b1f2bdc8635f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc5bd59e-f811-476d-a079-8cea65708a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc7fa4d-c478-4354-8a0c-6250801466d1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5553f3ac-bc78-4669-93ac-50e9bea9d3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "989a6021-2c4b-4605-9d72-f12fa75aab02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b1a604-f5f9-4ec3-b5dd-a4259cb00758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24692cad-02e4-403e-b31a-d09a8baf0ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b3ddd3-49ed-400f-ba31-6c4335add2a6",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32621619-14e2-4377-b703-e26824e175f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73b0edb-a8fb-4fcc-a207-2031cbcf614d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72c3609-7893-442d-8298-de15c04eca64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac1e9827-b43a-428f-a973-9cd81032bb70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46e758d-bf7d-48da-a09e-fc6791a0855b",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400fa7f8-5a4e-45d7-866e-2032e3f68093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38688e5a-6c82-403b-b6ce-2eed0dd3b123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95449eed-20ae-4e9c-bf95-b376f87fee85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "916bc933-0c8f-4c9b-b7c4-50df323727a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc28fe4-876a-4ae1-90de-e8617a8e7238",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a12e8c0-090a-4d3c-a08d-11688ffa11f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cc1d65-bd4a-4086-85b9-1fe8a56f00fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04fc7176-65eb-4545-a740-250d956e2a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ad0d91c3-eb48-4316-abeb-6c337478e640"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15338c20-9df9-4e63-9dde-41c8a25695d0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ea01e6-5bc8-447d-8538-f2c5ab4ca82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14a02bd0-e55c-4306-afa1-34884be61014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38df2ced-e4ab-4367-b22c-e791ac8371a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff76efe2-897a-477a-a221-ba6e2cc4a98d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b9fa0a6-3d58-4b2f-83f6-cb9f76138c65",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863b8591-88a8-4be6-9a49-528e48771e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47670060-8fab-4ae8-8737-c8bbcff47caa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccf2759-d440-4793-9e1a-ff98eee09a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a0900564-0444-4fe9-aa26-1eb03850c73b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0f1433-89cb-4ebc-b7d1-2a1ea5dba628",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1f5f4b-05a4-47dc-b417-b30611750433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5363e56e-9da0-4703-b406-65cf3cabe275"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3940dad1-dbbe-4614-81f6-6e8405aee30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "38c81a1b-0743-4a4a-9248-32cb05ea23ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ba0c254-41cd-45f7-bffe-7ddf321e6389",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704c9f67-e41b-497e-9df2-51e91e82faa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4055967-f712-48f9-83bd-f1848d027e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce14a30-b883-4d3a-8d3a-020ea14a9d00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07b403e0-6280-4e69-8d0f-dc1bd47c7c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60c8cdd-a579-4da5-a66b-65a076e810e2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37241713-21ac-47b9-9849-099d2412c15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfaf064-0285-4f23-84ed-ed3e2d63c3fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134f02a0-c712-4cfa-ba0c-29641e6c903c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01e64a2b-2c69-4789-8637-5dfe75ca87ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f4f687-a78b-427b-a57f-f050c8893bfd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615e56e8-a037-40f9-9957-4fac73f10a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5814f34d-63e3-4949-b1b5-49f104ba3ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd0a1ce7-02b1-4a1c-84e1-4df2368a4730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f72bb2e-c8a5-489a-bd65-033e6e5da4bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45790046-4c69-4095-85f6-e02121682df5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c84d92c-ceff-4df5-843e-46da8c5dc6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205b6da0-b49f-4d11-9124-d65ec96244e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfe16f6-f72e-4d63-a37a-e33b81b0c50b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "461d7420-85c3-4c38-abb7-15dd0161c68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88aa81f-1fa2-4c2c-b4fb-86f92b52f02b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b797d08b-0fc5-4901-8040-954e51541980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18db450-0cf8-409c-8b0e-8af152d27685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fadfed1-1c98-4fd6-8dff-a1213e6df44e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8fe60c1c-170f-4ef4-b14a-02cc4e9e3fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23b2d6cb-5e4f-418a-85a2-6d73d763bf93",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4b5ff0-b89c-43f4-b0b8-ce4be2e9622a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9404a396-a12c-41d2-98f3-4fbe24008570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8f77e87-14f9-4547-854e-03d9de20c4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6e5fc5b-9f1f-485b-ad73-1198f269d28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c6cbd4-6231-4579-a82b-a974cd33af11",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c4fa60-7915-4690-8ec1-9a9f271b0e11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb1dd1a3-cf5f-4df7-9ab0-a0422878dbc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "298080bd-89d4-4ad8-adad-eb655999c6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "015c8ba6-e782-4d17-b13b-17555ca0037e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "405b938f-2e7e-42d7-a705-0044ba681f21",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3757b2-795b-40e9-a0d5-308a346beffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf414f8-5ef2-4298-8756-6878909fc3dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b5a90c-86ac-40fc-b0ed-5b24bd9d7733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca55e575-586a-40db-be80-171ec0527a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d31dc9d-5312-4df1-8dfd-13db32c57341",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93b1a546-c1af-43f5-998d-9fff82d20bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490539f7-3e1e-4fdd-8458-c0132aa5ceda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7c42c2-3218-42db-8e17-3177d2467e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "feaafbea-4426-4fda-89e4-a2f97062bd9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e65b971b-ee70-4ace-b16d-aa5c183b2cf3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b7fe7f5-8153-454a-9e15-af55a96a54e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02be237e-a400-4fc6-9de2-32926a4b2f58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f346ef3-57b2-421f-96a2-c96e5127bc5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb8d90af-c66b-493c-9090-1d300f4b7b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919d582e-3517-41a1-9e12-8dfac5bcf173",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c53ac4c-8ade-483b-befb-94c2a76432f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e535261c-f4ff-446f-8838-af5523676cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45dfaf99-2acc-432b-b8a6-e1015a888454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c60556-0fac-4147-8a0e-8e02c1418e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0059b23-f0d5-480c-b0a4-2c722486d861",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7f0a2d4-f44a-4611-b897-caca1e69e163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b371f5a-42b7-4d30-93c0-794d7254b2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ee8a08-ddbd-4da1-a08d-0d924526c268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "507b09da-a840-4c3d-9f42-3fc13a8b2494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07340ec-ec2c-4f09-b8f9-6b7eff8482cf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8e1a24-7383-48dd-a953-d08931813354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a1db52-eae1-4a8d-8f9f-14cf27ad5c4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c9908f-512a-43f2-9f5c-c6e898c1a4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4006405-69b8-4cec-9ab4-3d42df60f2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6c7063-6c80-4548-bf34-1976ceb11bad",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55a73f2d-4006-4ded-bbc5-c7958b4de5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254586a2-422e-4a10-a2c5-e1c46336bd60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "196184df-0e6d-455a-ab0c-b828e30ca209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "96acfb5f-a633-4af2-93a7-b3ed4ea22421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f05830d-4a9d-4925-a585-fe17551841f3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a67213a-7a38-4d36-afb1-3ecec000409b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dba21de3-2662-4249-928b-533dda088ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96508332-a6fc-46ba-83a9-16f198cd49f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83680241-b3b0-4aae-86c0-56acc6c16767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe368aea-971c-41fb-ad44-0c49d7eaf15b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d2d892-2652-4123-bb2e-35b4bec873f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ab93f9-d02b-45cc-8241-95bab23139ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066af69b-b00f-4563-b11e-630698c9f874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd46888c-e7cf-4db0-8147-753d0dc63f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51401b21-ab5a-4729-9823-0b1606634c06",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44e561c-243b-48bd-8993-d849f8403cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc810db2-95cf-4a8d-af85-61b977e96c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4536c06c-7a29-464f-87dd-6ae0b833249b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d2d2ab-e804-42c4-82ca-ba6325b3f894"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2400130-26e9-4d1c-9f49-90e602ad34c8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1f2697-9929-48ed-9ef3-79ff8f1c4ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f2fab10-0f78-4e86-abd3-3da47f86bad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883d9ee9-bf6f-43a1-a81a-5bb90e245fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "abe5e44f-f2d5-4b87-b3c5-004c756d9b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4e7a70-e137-4b1d-a5ac-09b4608dd51d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a4a0ba4-e204-4cef-a63c-f36415368f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7612a358-a2a3-4757-8176-386156a0fe72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606745f9-f167-4244-b363-61da83ad4731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1131b782-edd8-448a-bddf-39ee62cc6aa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6829f1bf-9396-4e99-a63b-c313f29be143",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "712ff7b2-2647-45da-b44a-d6a508a8e2ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed2383a-c873-4f32-a3ce-66eeb3bf14e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "383e31f4-8818-4bd9-9537-fedddf873f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fdc0194f-7506-484e-ae17-1f031eaae09b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0747d4d8-23ce-4305-8ddc-ce551a85ad03",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e359ce88-adc0-4c25-a1d5-92b52c06fe25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ed88801-04ad-46cd-9245-df0e57cf6935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81887de-7db0-4837-98b2-8965312a87c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "776dc0c4-0496-48da-b47b-6a3f3ef5c082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c8ef89-13bb-4415-80ed-006bfa616a0d",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a2dc79-e109-43f5-aeec-7e702f5beb4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a19d676-682c-4966-b877-bf595f1c04dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd1a36a0-1956-4d6b-86b1-5c99383202f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "40110ca2-bfe7-4144-8122-47020ad0eb68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71bf7365-fcf3-4533-a1ba-f1cb6a86271a",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d3e0ecd-d4e1-4590-9557-9277c8d56872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64a8515c-8794-468f-98e0-d674c737040b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a07e252-f8d5-4f50-a26d-50c5a7944959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce54c0a-9bab-4dea-b29b-92e3b0d931fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee347cd-d442-423b-abeb-52e70f169b03",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0bec4cc-dc1c-4285-834e-2442fa3cdca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08df527f-6bca-44c0-803b-cf2b8a361386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e592ff-49ae-445e-86f6-e09d1b143e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43956884-4c1e-425d-bdeb-d00809db46c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77323029-9b4f-4a55-b2d9-56a101d31450",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b2d891a-8a2f-467e-90a7-a42d37ef0248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24c63c5-7705-4019-8bbb-8ec4b009069a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f97b6b5-6455-4c39-8331-1be673904d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7379296f-64a4-4c31-bf97-a9c487e93d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10101ff-28f7-49da-bb42-9252e8f36fa6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d3c30a3-05c1-41b6-bb8f-3103b89c51b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa2628c4-0b2b-4c96-abe9-d9ff90513d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf758ab-fbbf-42a8-aa1b-09c4e4f3c920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "be805007-ba11-4009-9f21-15b3126376f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8cfead-c0c6-4a01-b882-19714eb3685d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "545257b3-54fb-4e3e-b5b6-c9f83a72db60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "20b3db9d-02f4-47fe-a727-e80cd2c9b3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44aba6b6-38a1-4f20-bd7b-0b09dbac25e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5708926a-3b22-4b09-8988-67c25d121a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b97da46-966c-432b-b39e-43676042010b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7698a91b-d41e-4ebb-b441-71e41ff6defd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69e50d6c-21c7-4558-aa7a-5e8b5ec99970"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b39b867-e9cc-48c0-a263-9914bea17423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e515c43-a235-4678-8e9f-c033e64c9bb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91da0e22-87a0-422b-a0eb-c5b2589a00b8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "483b1b1b-2325-4696-8c36-7ab492cff302",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c3d4739-9fd9-4c45-87b8-9f467efedb23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35449acc-6b52-48e7-8685-a904a5bfd468",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "17d49cd1-efec-48a3-a368-40440f5ffd58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20c4a3d-f049-4769-a60a-5b250b69ce51",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1e9170-f9e4-4b7a-af7a-b97b02ce2365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153effc7-4f12-493f-bb29-a07d663c123c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f46e70-df16-4494-813e-73af63ff2705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "06974e8a-3e2e-4fef-995f-7587c2fe922a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1486b7-cdf5-417b-a053-7cc1f73eddd3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e57bc7-8787-4f85-b4e6-61331a43d293",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6245a0f3-a7c1-429e-af04-a815747e1797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f61196-ff72-4f55-891e-bd541600e107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bff057b9-9cee-418b-973c-446cf1e19e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e312e45c-b481-4c76-a9d9-7ce9fd46602c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5878c9-ad67-42d3-893f-4200bf81e8d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ea0ba4-de2d-4354-9420-7744d1d18ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feedcecc-71df-4fe7-8976-054fe9a2879d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5053c725-6a19-4cbb-846e-7ca76b1a6eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3484db-8cb0-425f-aa58-a9e8f07044b5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c14ed4f-f881-43be-b3da-0de19a7bf022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8065704b-5c65-4bad-8b78-195465b9edf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aa156ba-e119-4c77-8c92-2a07ba01a8e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "d270eee0-3010-4029-8d21-800218d3416e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190c7581-c39d-4b79-80b6-7f47a1c4a45c",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28327a0e-4495-4b41-9a9a-12f3b354ebbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b2bdd6-15ec-47a4-af7c-9fa625792b6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62cf6487-a22c-4c84-abfa-ba2e49b9b77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e39e8c1-6f14-40a6-b58b-be6851f22fd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7187112f-5f4a-434a-b8c9-6bf5012567ff",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ff02201-23a2-4d67-966f-d3bd3e2d509e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2429070a-9b7a-48a5-9eed-e09df4fac005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97ac3e3-35dd-4705-9751-257b2ed2a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "38069327-c803-4291-8a5b-b53b86ad9535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bed3faa-5bdc-463e-b797-477c6c3456b4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e42185c5-1ec2-4d37-a567-9ae0d31002ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f950ff-4a6a-42ca-b93c-ef37b73f120c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dea83a8-fd5d-411b-be83-f38d11944c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "afc91e93-5fcf-451c-b7ba-7b8f0a4a8452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2175da74-a1ed-4316-a9b2-9f58ba1c92ec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb0ec76-4268-4f9c-9c30-f9a4324b1e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e98d79f-24c1-456d-a0e5-25b88b97d20d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7469c7-72b6-4e62-8dce-ba8d0d78e26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b7b898-5b54-4151-9a18-dd5877407bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7f1fce-08ad-4f9d-bbc3-186d3cb35351",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023f692d-67eb-4c76-b267-d75fe42981cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef97c15c-5e42-4146-b2b7-1010f1ad1837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a5668e-0da8-4255-a5b2-5073328d8ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63fd88f6-5fd8-4843-a579-e7480f530b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04db380d-3b71-4dc5-bc5f-962fc8726c96",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1222df-fd2e-4b4e-9030-0157802b7c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2214ee7-dbf6-47e8-9dca-39eed32f4bce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c244cc63-a3ef-44b6-8d47-ade06efed2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "016b1332-418a-4fca-816c-255e1416b4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f847587e-877d-4828-a058-4ff1297246ab",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f6ab682-15de-4f94-abb2-8ac9067bff81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "934a3553-9f88-48d3-84d8-72c8f0d8cfc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87a3559-fbc5-4612-9231-ebdbd708719f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e08afcd-0e19-4b52-b2ab-6107961d8eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494bcbc5-321c-4b8b-a443-a3043b8b1b32",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca7069e-9da1-4fd5-988a-699ada3dce39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d087be-ade5-45df-b6cc-21cf38ffe2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b2bbec5-18e9-4566-b8ba-12cc7f369c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "415e7a23-0633-4370-a586-4a4757738f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2192d580-a3e6-462b-91a7-9a2fe364591d",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907a989d-324a-4d99-a7a0-ab108e9ec33b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cccf9f59-6fe6-4425-97dc-826d8690d8ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f692e6b9-3c4f-4dc3-a6b1-d82e5218878e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e620ad6-16a9-4479-832e-cc3753712654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f10d14-3af6-41fb-a14f-95e46ab3dfdc",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de858196-5903-4ab1-9f41-2136144843bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "520fa344-1253-402d-b8f8-7d778c310eda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5244cf-04a1-4ffc-b593-2d5bdb7f007a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecffd5ff-ec83-4140-b9f3-a401ba6f817d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f2db0fa-6f6b-4a6e-8a3e-28d391506098",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce45509-e1f3-47ff-87be-5811f18c654b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f827381-eb5c-4484-8f89-727f21801f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b6c93a-cff1-47a6-84d0-eb0cf347f94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44b9edc5-62ab-4135-86c3-87c53e066378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89db2f8c-d1ad-4dc0-a11b-defdbbe470a1",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a31838-99a5-412e-8bef-b4ec1f2135b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad9b432-7a5d-43fd-9bb7-827ca0efefba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31cb8ce-2298-4760-849c-9056e3cf69e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c30357a-75b9-446f-89e5-99c5883a2607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6257e2-4235-4d1c-86ef-07e3e5f9715d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc27515f-5bf2-4d2a-90b4-2a175dd6b442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c47dc8-802b-47da-80a0-1cb5fa71e06b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6bc4db6-b2b3-4513-99db-a23962d8756d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d99ee9e-853a-4382-98cd-5a4d35b3c819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d170c3d-8700-431c-b46d-0d10065f433f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a41470-574e-4342-90d6-50b75f436bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec943417-22d3-4bd4-9679-87df839de68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d263041-ea95-487d-aa9d-892a99301294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "00961f3e-0e37-4827-8e5d-ead180db1264"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42e3c82b-d0ab-438f-a02d-6610f827a6b6",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b393d96c-a07f-47bc-b90c-187ea9d9f84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c900ff0d-ac13-4931-8e27-605ff41fee37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca62b1d8-f536-4138-a20d-68b79e0a7665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ff825c7-161d-436f-9af2-7473c44ea439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551f0c1c-a265-4d6e-8a30-5e00ec52700f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "005da1b2-74eb-41a6-b3ea-3655a29a3988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7227556a-10c5-4f34-b84d-5502f9a2bf89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "674a1cd7-bfc7-463d-9367-9b6822befa57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "208780bb-85ed-45fe-bd34-e7935b56f610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0844b6-95c0-44a2-91fe-f72bb0ffd06d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029414f3-49e9-4c28-9ba7-39a126ea773b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51e0c509-6de8-47f6-875b-5377e3be3b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6b7873-51c6-49d7-a90c-445b6ad066d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "09f46412-1a61-4669-8ea5-a660becbf359"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed1c212-02ff-45d2-ae78-b65103419ab3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb22b151-c656-4a0f-b83b-9c2d9ff628b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0887da53-10e2-4d09-aa7b-172ae35c5334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abb5f3ed-6837-4717-a5a8-0879a54bf34a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f40f1a6-7e4a-4978-a539-67f214ad365d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21aef3ed-e10e-45b2-837c-a70303648bcd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1c5c60-8046-4284-b435-9023beda2163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f7dc02-dc86-474a-998b-548aa52bf543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ea0ad0-ec00-44e1-a72f-aaf8274c085b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eb9e0171-2500-41b9-b479-5e94ff3b5124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edb3b2d-53eb-4bfc-9aa1-2e1264e8ba77",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2fb47c6-eb58-46be-a523-10d8a2f709dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee74245-2de3-4e2f-aab0-77626926456f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c632855-e2ca-4fb2-a5a8-9a9e7453bfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5135214f-ddd7-49a0-9697-5c0bfda265d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1976c068-5324-4775-a21e-b0e74e54f09b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207debea-d25d-48b6-8419-95db620bf59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6acd080-0feb-417d-bc5b-bc14756e446e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf26c854-7416-4a43-8c22-af4b85f488cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa4c048-88b9-4d85-8f58-81d78960bfbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "340d76c7-9708-4225-b685-4e1fff85622f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b31122a-ade1-4505-8076-a26611bc70c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95037c0-b93b-4888-8fc6-cdaa6ac3d964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f65104-d6d4-4f98-9298-bb1cc61f2861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a241de76-6a2d-465c-b74f-756f09d0e687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c799112-96cf-4895-aa46-f782e58db263",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efa7ddf-bf9b-4bae-9d24-021357f0e06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8a15ac4-dea4-489c-ad3d-cdd9d2e9c708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c69c63b0-7068-44f6-8c83-44740fd9d866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3b0b5b-619d-4846-81f3-68ea1d19f053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432a7b8b-b42b-411d-b146-32ca764452d9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be657cf5-5b00-4c86-ae99-d35cd0feebef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ecefcae-609e-44cc-a208-101595e51e13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397a40aa-493a-486d-bfd9-e617d18526a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dff663ea-c53b-4f4f-b670-c5268d7a04dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb2f5c4-bbf6-413f-9e05-0ab60dc95101",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47631b0f-9c77-4900-906e-f2ea42765635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b1b118-45b1-4256-bafc-6534a5ad9e32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86843ae5-b3be-4d8b-a10c-2334f1211b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "236eebb4-1f5c-4d97-ac15-e55db274d534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae1d8c1-178a-48d7-943d-f4d7c2934f61",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51077f2-f2ae-468d-88c9-f5f611d948d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbe222e8-d730-4a59-b915-0f48005ad9bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0c4ee75-8149-4db9-8897-8252b8353a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "282da741-6388-474c-9fae-d718b37aa0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf81987-9307-496e-9536-439c0208dd99",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71341fbb-8610-43b4-a4a0-1fd11dcec3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4aad42-ff98-44e8-9aac-da1c34b61db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7a43ae5-f9a9-4c11-b6fa-422c6b04d3ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ab4e7ea-f8de-4368-94a9-e39b602a78f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00df3b7-e958-4b12-878a-53cf7ed5f9d2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b05cce53-6af6-4bc4-8ae9-fe5d4dfe7221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b6e6f0-fa76-42fa-8315-bc525d483ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7083022d-0a2e-48e9-b114-d1a36be23a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "98dcd59f-d940-4749-945d-9d4687559190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95758f63-31a7-42cb-ba3d-96bb6afd7b57",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "344dba86-6de6-4a2a-b871-8815c6c6cd2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0bbe61c-2711-4e92-b906-3cb88c575a6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d6d04e-db59-4791-bf93-256e0c9591e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ed90f51-fa09-493e-a74a-751655c1b3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1799dc-049a-4fce-a0ab-f8fbff7a830c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5920de20-7fca-4359-a487-247ec4a92e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e0cb0b-3819-4a5e-844c-e759f0675a95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fc8fd93-e954-4b18-b749-f73086738a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "11dbe3b6-d7c8-4b41-9ac4-dc570cea2236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f3df11-2a6a-42d7-ab45-d1364119dfce",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b242a68-8442-4353-bea6-9eb62e901ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b878225-f296-426a-9a5b-09cc2f4420af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a7a8c4b-4914-478c-810d-6d635108fa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "827a0ecf-2483-4a4d-ba86-48938cc2473b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2b89838-3316-49a5-bbcf-8fa046a3d044",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04e4c51-c3ad-4bfb-825b-ac77515db17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa376dec-9d1d-4c17-857b-fa3c1d7dfdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9065ede4-74a4-43cb-9aac-194eadd48e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3363d4-1df9-4bdb-a9b9-e7cdd503eb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1fa69f-415d-40f1-b2c6-fe2af8cac467",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a36c77c7-116f-4717-8984-21175bf7e0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36e7f164-26cb-4e0e-af6c-6ac773fc273f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfe48cc-45e6-46cb-9e23-832ea7d23123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7c8c00-8955-415a-8e7d-0dc186750c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b738da10-4a7c-4177-aa25-8b72c8114306",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a49d3e-9061-4e5c-862c-ccae1cca4cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a142680f-5b41-492f-9eee-7b81af3cfbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adf9e3ec-20f0-45e0-9454-72480136cf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b271ab40-d66c-4994-84d8-43bb55a4b784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8663b774-5fe0-4fd3-ae3d-bd524d5f7e58",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db355ea-4420-412d-adbd-9bd349633584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef55a05e-8263-4358-8921-e7cd1d095024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d784fabc-ab2c-494f-97c2-561ce7b9b5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "871b615b-5135-43d4-8ed4-d9a248184ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8e984d-d7c8-4d12-a540-fd0fae6e2837",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3362bfc0-db93-4999-8e3e-19dc8dea8036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb0e3d34-eeca-4c5f-ae04-5bd63a2101fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c49c02d-aa75-447b-bd45-0cd89dc72a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a5863fa-cf6f-4983-97ad-6fed67fd6c95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67687be0-8835-4e42-aff6-f247153c93cc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b507b1-54f1-400a-888a-9279fd36a944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84e35df6-933b-4763-a10e-9e0d338813fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe70454c-4bc1-4a8b-b4d9-5b00cc0b23f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0596c933-2f42-4392-b086-b21dcb051d2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051481ce-b17d-4e45-8726-ae2c6d790705",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051f87ff-758f-49e5-b6c1-f6e5958a79b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b06bbb7-f1fd-42ee-8654-4192ac4b87c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11352ff1-37ea-4862-a028-29199c245764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f9baeb87-a497-4af0-a883-a12861368cd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40572276-a444-4a59-86af-f10712f3526b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1b2c97-4dc2-4f27-8294-4b3d65788542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "297a377b-a1f2-4515-9b7b-5c4cbf148a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fbb749e-cec1-4b59-98cc-037d45f54ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "737b5da1-77c2-451a-9501-d4f130798c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d663e9a4-f403-4400-9a4e-7fbebc311cd7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef9e118-890d-41fe-94ef-1f493b345c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc87391d-02df-4883-8802-54c7f19fcd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13f7f23d-adaa-4da5-842c-400072b26321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "73e39eca-1d9c-472d-ab81-828ee6b33686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af31283c-47b8-40f7-ba5f-c757ba32af11",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a744c480-a9e1-45a6-a990-b07743bcfe95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae8e68e-b7e1-49b3-8feb-ca2b182a9f8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ad461d-fd57-48db-a3e4-108763d7f282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b777ae2-0252-4d2d-b4c8-ad59e53034fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dd31c6-7e3a-4f82-a690-a01c6b3e3811",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb91241-1a1f-42e8-83be-851b6e4d12a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a5218c-7360-4c10-9881-401416bb319f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddbb5067-db04-4012-ac69-a9c1dcd636e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b5cec0-22c4-439c-b9f7-1d15e3ba6e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429ca8ef-8ac2-4d80-86df-12489c5b5dd9",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab3c3754-45ee-44e5-8661-00fecfd0c42e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0a66d30-e000-4392-9403-146069d20a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6b0f726-645f-492c-a3f8-64e3906f471c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8340d3d9-0298-4384-aa04-9aa76a6b43f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224abc0a-f6e8-4392-96fd-f02b54cbd41b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef55053-95bd-46ff-bedd-085dbc301ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3905161-7286-4ed4-98d0-115e6eb00ef9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d254602-b512-427d-8a46-38543233e230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7471430e-1a62-442e-8482-20e719c64e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36181b4f-1965-4aa5-a78f-e876d6d2d493",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254c0684-0fe0-4826-b2e7-18af7defa488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719192f0-0ba9-4980-b938-2c907b0f4328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ace873-3ca2-4dde-a697-5fade03fa0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "14915a0e-5ac4-4d88-806a-3cc083bab2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f68efa48-d865-49c3-8d3f-3088c893f509",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f38d3c7-4a28-47ac-8460-392109c27b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a9e2dd-3ce8-4477-9105-197debdde5e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a54edb5-5f52-4360-b93f-0d6d086b41a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5327fbfb-5c46-4af2-9cb7-0b65bdde681f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c45028-c66c-4e54-9e47-f0b65fb14ff9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "580384c3-876e-4766-851a-d399c174dc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f281450c-18f3-4f4f-a77a-ffc3efcbf727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124775d5-5bcc-4a03-9021-82925c51cc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "528523bc-4557-41b3-a477-0e6daed0afcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112e75b4-a400-40a2-bee0-1001cef29d82",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58c787b-0fe4-4621-8dbb-e66bcb0265aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17ca34b-37bf-42ff-89e8-081d93cb0e22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fd099ac-d18f-444e-ae21-879281904f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "05bd4d30-d7ac-4ea0-ab51-870e2ae22c36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdeec0e-c235-4c9c-ac46-f72424045f30",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f6c424b-f40d-4e46-b04a-b4e8bd45f205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1744410f-8bbd-4dae-9e9f-11cea0aa7abf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a16af3b-1036-4ee6-9a2d-bc87eae85155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "340ece1d-88ea-4157-9089-be68ca178a6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba52575-ae16-40c3-8454-72803293421c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0d0c9a-24e1-4aa8-8ef3-0a071162857a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "21f3a1a6-b42d-4233-881a-dc48196490f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8c7d2cc-aceb-45ae-9d4a-ef225d1607d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "85d90733-596c-44e9-8b88-42d980be2e49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2c2404c4-356c-4c74-b783-0d85c8a42810",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4ba2298-5157-4003-b550-9945e8a64d86",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bf720e-7de0-4069-95a2-ab016211a7ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d470d77c-d258-4061-976b-791da5c8bddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d51fcb-84d4-49db-99c1-b04fd9668245",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b52f38b3-cd6d-485e-9304-044b6b4454a0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1462f83-b059-4b6a-bb04-969e11c9d660",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af415d9d-ac7e-4f35-80d9-4cc4d11b45f9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b3fdc20-f3de-46b0-9a22-812e0f5b5f0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4b7efa0-2f2d-4ea2-b174-f0f79e41effd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4277d8a2-2ae4-4628-bbe1-187dded9006b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1154bf32-ee67-4eba-9d14-3ee8a08b6063"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5514a6f1-5562-4656-92d4-876f3ed0bcbe",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ca7ad971-12b0-43d1-9fbd-703148230c9c"
                }
              }
            ]
          },
          {
            "id": "5808d256-65c0-48ae-b4e7-990fd612d9af",
            "name": "Positive Testing",
            "item": [
              {
                "id": "82e1a8bf-0a3f-4f55-8e2f-e6a7621a8606",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "9f7d8598-3a21-45e7-874d-76af6b284961",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cfbebb5-50d1-4d14-b379-c02502219550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "061e6195-7c60-4045-911b-5ed4651d1fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c4eb95-5052-4b2c-ac0c-d876ced95203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7775cf6d-c28d-47ea-b656-6ed15fd945f0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a3043cd4-397b-422b-a792-93df0cd39cc0",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f66299ea-0419-411e-8dd6-8b4d7669b442",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c129c982-76bd-4f0e-9bcc-2651970c513d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "230cdd26-1c47-4dec-873b-f0bd159516dc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "38c51749-da2d-4c35-baf7-5b19831f63ce"
                    }
                  }
                ]
              },
              {
                "id": "bbc725a8-cd20-496b-b292-fee2ff334b59",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dcd9e378-0391-45ba-98c1-732be9bca768",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0f8d05a-5ee8-4893-bcf4-1072aecf4ac6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0443b2c-a9b7-4942-8746-212c6211a107",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "117c89ef-973a-47e8-9878-85eee003edb3"
                    }
                  }
                ]
              },
              {
                "id": "40adaaeb-3bdd-49e8-b876-43e7c7f64708",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c606d1bb-8f61-4ae0-9bf0-693903bb6793",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cdc0c5b8-eb50-4266-a78d-d274b083eb35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed7a62f9-7365-41eb-a0da-e97ad0419be2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "16fb4953-6681-47c9-acee-4b11da7c74af"
                    }
                  }
                ]
              },
              {
                "id": "5b6b0128-53ef-4e07-917f-4e011e8bd62a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1253407-ca26-4269-8353-1567dfbae70c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bba986e0-4542-402f-b9d7-f195f315f09f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a8511b7-e3a8-42a8-9b7c-252813260d9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "8c85b7db-d527-4918-aa42-227e6a0bc807"
                    }
                  }
                ]
              },
              {
                "id": "fbadaf96-b225-425b-b890-5cc56f1f098d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5e86a61-6e55-44b7-ab7c-b80b947cce1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38c05f0a-3e96-4681-9532-e2858789e631"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c037f9f2-9e14-4c59-80a0-c18bda7353e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8362573a-a796-48d9-ac77-22569b0f7aef"
                    }
                  }
                ]
              },
              {
                "id": "9d331c8d-cb71-4dbf-a73d-86fd943bfe9f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f200bf73-090e-436b-8686-b21823fb1c70",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d9acf856-6aae-41d8-ad1d-18576c8d2faf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "118299de-589e-4ca4-9c9a-7e9a7901d269",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "53ee77cd-55c8-4631-b017-0020c2b784b1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e98ab753-a1c4-4001-9cbf-20004bdbb80b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e158b3e3-b7f5-486d-b864-76b5864895c9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fdc74505-09b0-4e9e-8578-2858bae70e0a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3ef7fa74-ad26-4314-a23f-910a7991c555"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c708fc40-0d28-4ea7-917f-c9a603cdc565",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a13c4104-6f61-4a73-b968-bd5ecb0a30a7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5b7a9904-3d66-43df-8193-77af607863ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aae139b8-8c67-4348-9acd-495115ca042b"
            }
          }
        ]
      },
      {
        "id": "13434fe9-6a52-4904-b9b5-60ec14be619e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "844a7d24-9a40-4143-b3a6-59737cd1f37f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "839a0058-2939-4606-a08b-529c3e41b6fc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d096dc37-eb6c-4d3a-8650-6ff3e676bdb8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e299e8-5993-4327-b96b-4e73f963cb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ada85876-46e7-40e2-a3e6-03c0fc9e112b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd4ce355-c25e-4a11-91f0-7bd857d5ad91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "819e7345-da2a-46a5-850c-e61802dcdccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a41a536-2673-4c67-b4e6-36c3f9b52fb9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c47d5619-e250-4e42-9b8b-3934e886383d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414d6e55-76a3-4ad1-9a16-61005e2c459f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20ce828-7fa6-4782-bd5a-87b32b1031b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1ce4bd6-7123-4181-83a8-183c5ba21223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2eef0c6-3ebf-4e3d-bb14-6306098ebe9e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf780f3-92ea-4536-9751-ae70450c258c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f69187-4ae0-419c-9588-30bdc828f88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c8c4a0-fdc1-4939-b4f5-c044cc458232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbd3572b-8bb9-4bbe-9aca-a8a0f68b17aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2730c57e-97ba-4d33-b090-72231f17f16c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e81c18a-2d84-44da-bd95-23b6ff671d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "335c0965-d2cc-4563-9d95-9390b912cd50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c86b8a1a-0888-42c8-b334-bd45fbb53d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "11a413d4-f66e-4372-b7b6-403dddba1eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "952c896c-ff9a-4615-9ba5-d8e82b435250",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec6f228-6d39-4b60-93fe-4b0ac18f1b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "356377fe-a365-4e35-b115-8e9429739be0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71e2716-a15a-4e26-a154-54b6c7b8c97b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8e7cfc-6db7-467d-bfe6-414b6bf71037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6419d2b2-208f-4fd3-a0c4-6d24454e5027",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59aaecca-3fee-442c-86d9-6e05ddaf9b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d61ed1-6d82-4902-90aa-d6125a7553b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e1ba47-7a21-41c8-8224-09bf81a6b992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a68596e-75c1-4edb-8ab7-f3f447752a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5317e720-f4cc-4830-ae8d-8e77b39f6f01",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf04cb54-b424-44bd-806d-817f068e1f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "696cd297-9f99-483c-8969-ea910bd44826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633ed029-6645-4e14-b60f-e1ee2b0f791e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c897519-782d-4e39-8b75-93f89d335abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed0e020-a0ee-4d2d-bb80-27231199ebb3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c761227-9fde-4ec1-b82e-073dad7c05ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b54461-410b-4754-8176-f86e1ffa0cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3728b1c3-2943-476f-9234-543dfb46f286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "03626f10-2d4a-4f8a-a755-522a57ca451d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a9962b-e36c-4985-b0f3-11a8e907711b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fded05-6363-420b-a986-ed90cc484b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71775ff5-fbe3-4525-b5d8-36cafaae6e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01fb4d3-d595-437c-aa3b-b4555e83b5c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9d00f15-4282-49dd-aab5-e1aa9da62284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02b2a148-fc81-488e-a47d-09978283e9fa",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df3aea9b-2521-48c2-a36d-4dba7461c880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80a6062d-0323-4cae-a549-236ae8ad8600"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a668ba16-47b4-439e-ac95-b9473b253c37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "264a4fea-f2ad-4cf7-80b4-d8f8438403a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ed9326-7ef7-426b-afab-e9b8abc8b140",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc12453b-1e46-4d6c-a6cf-61d8d585f01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fff08c1b-a311-47a4-8b1e-3ee03c68300f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d37230a-246f-4c10-b4ec-c364c42de425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2991b02a-6038-4c19-b8ff-5a946602b4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eae6817-a66c-40d8-9d25-0958fa202853",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570f32ca-cf22-45de-b684-4a074a43d681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "580334c6-1566-4776-bff2-b3571f52384b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ddca4f-3812-4ba7-8333-69340d079a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3b790dcc-fe37-4f83-beb9-dcefb8dee76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8cdf1a-6deb-4512-8cb1-708aaf226981",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58b0499-bddb-417e-acde-254ea38d51d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c7af82c-f02d-455c-a0be-61b862a923b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95715d4-1344-41e7-9fbc-681e019b91a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7f5cbde-4c4b-438d-af5e-a16f44937da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95f79176-beea-4713-9b61-4388f7477122",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f40b016-4e5b-495b-8e8e-b592e9e2168d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a005b026-e0dd-48b1-91a3-eb3f26416e00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89cacacc-421f-4b49-9b66-4f0fb51df734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae42946f-92ce-489a-9284-b0adf389b516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b492b8-d320-4ea1-921f-cc27c6f9717e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8340827-b126-48e8-86cc-23e6d54f08ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce528fde-8d3a-4167-831d-1f2fd9880977"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77bbd269-df67-4154-9540-05b6b9361ccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "72b2f8fa-9da9-40f0-8c22-4044cf7289b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab027da1-2873-4eca-9e6e-63dbcdece391",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9028899c-7bde-4b4c-936e-b55b0517992a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6ee69cf-b8ce-44a5-9d89-7c13891b1995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ec0cf37-5918-4e2c-9b5b-32dd5841bc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb72017e-e6cb-48c9-ab05-c83f503c39ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5648519d-529b-4ca1-a6bd-dcf92211eac7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd993461-0fa9-4208-8c1e-4286b630e8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "731837e7-28a9-4c35-81e3-8d6bfc553aa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3c2a55-08cd-4963-8b10-bad523ebfb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6e594e-78bc-423d-aa73-d8a7d3a54f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a71c018-ec0a-4419-82c4-f5813fd51931",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2428d5-74df-45e5-b602-b01caf48aa26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86845675-22e0-4b82-86b9-526655aa1280"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95561eeb-b319-40c6-8451-0119ac3447de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d414d6b-2317-4253-aa81-81b46c3fb8c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266a2ce9-cdf8-42cd-8fcc-de2e8e95b4ab",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867d47a4-792a-497b-a752-db410c0d1d76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9285d287-e82e-4c21-89fe-b2b6a498d187"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb66a657-fa02-46df-bf35-2dbeddf99a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d86f464-7407-432f-a30d-40bf2e83981d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1a0a4c-ec30-4f62-a6e6-4c339c733d67",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1b7ee5-89c4-4d06-bb1d-a209853e1d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c8230c-3d70-4804-9c2b-29e393465774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b99b08-7811-48b1-ab35-da5fea503683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "14126007-bb17-4c86-9f28-9bfe8407ffbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09003346-b395-4359-8995-c5716bdd4624",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb473b4-1efb-40db-be6f-7f4d49d76b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940ff999-3b63-4c6e-8f85-ae48c988c317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b46758-dd97-43ea-82bc-25cdf1d5cfa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "071664f5-1c3d-4b4f-b9a8-65ff709665c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f1321a-44c2-4f45-b0de-2e90c4164bb4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3c14a81-b999-45b5-ad12-7ae03b213e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a2481d4-2299-4ebc-8ea0-7d51ee5ed611"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b98d0b-01b8-4677-85fc-f24c7c0e8020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a898e83f-9632-4db6-93c1-2b562293c155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe574eae-8082-4130-bb89-400af14a4f9d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "070a3a8e-72a2-466a-bf75-c42505085c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28e276c-12f3-4c8b-9b74-7205574891bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133325db-fcde-489c-bed3-f6f4509375b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ba7d29-8e9c-45be-bec0-4d50f86bcf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb0abde-791c-4080-a64e-154c097af904",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c528c16-9a8a-45fa-9fe5-377a7f07a4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eaca3b4-6622-4846-805d-9f70fb70b0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3714835-3efa-4885-8289-cc2293b8adfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b738350d-df77-4bd8-966a-adb62aab0452"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f56f07f-5da4-4015-a2c0-6c318ce1ede9",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6473e83d-276b-404f-b036-97a2778211d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703f6c99-616a-4f9a-a7ee-75a2b153b064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f89175-d695-44e4-854b-263f2751ec98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79056e11-d8a7-4d60-8a50-b3fd0e4d0703"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf74aa7-a927-4978-927d-4d7ed75166fc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f875e79e-eb4a-4e88-a279-c5a85205a3bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f7eb885-8479-43ce-a434-4d0567f65b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8f4093c-044f-48b2-a634-8e61369fdd73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "87d40af6-d0ca-4e40-82f9-2236a349c35b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927c7828-e45d-4e01-a67b-f08f237dc8e5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3e9087-1ba5-46fc-b32f-65261dae8ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f900fdda-914d-49f6-af52-e3d420848778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257baf19-07ce-4d8b-ad99-27ffbcaefb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad01a1fa-b31e-487e-a57e-a8d1b5c14df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842d137e-4a33-4f74-ba16-837b36e6969d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10199903-451b-4df0-bb71-7d9f80cc65c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1682743b-526b-40fa-9db0-42defde2c6c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ae8b4e-241f-4528-8550-16202cdcac0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4d80375-621a-4cbb-ac19-e4def44e9385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70c8f07-9c2e-41fc-b349-03a68a6b623b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df7c05b-de47-4b65-953f-7b70952d27c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58165f13-34e0-47c5-aaab-4bf59c05b7d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd57ee2-4761-4351-afb5-995e7d6efd90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66947d52-3eaf-4890-b7d8-9df91ca6b82c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2507fb6-166f-49ec-8ad8-220f1e039cc7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce8eeeb-3a50-400a-a1c4-205a5974ee81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78078af9-c3a5-4d75-97aa-d8a379e3a599"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2750bd34-e6be-46b6-884f-a7a67b0b5321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "27c5205c-dc8f-4599-9801-476c1bf49446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26804685-d696-4640-a6a4-a06f6951cc6c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e74f900c-c387-4a1a-9564-745807d7e7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c78ca77d-c445-402d-b8ad-b63f39cc516a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fb5a2c-b5b4-443b-a92f-74a6869441ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec66047c-5a96-4985-a3d9-636f85bd29d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbd371e-bdcc-42c7-b911-373a9116e76e",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3af1a17-9b3c-4369-a3a6-9cd3520dfebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54de74fd-5d70-4a10-b6cd-da92e9e0a42a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91d4b19-fd27-4faf-ba27-aafd8af6b4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e02aa989-7ab1-46b6-8623-0826e70882fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39673839-5bcb-43b5-9272-aa84600ad269",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dbd9f0e-ed43-4595-91a7-cdda1981571b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5912cb22-0cd8-449e-9054-32cf30bd5bca",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b84a09fb-d99c-46bd-9b9d-9b31130bc047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb9aaa-bfa5-4a1b-a149-a9a7aae06835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4f7b1ce3-3ceb-4ce5-ae2f-457301bae31b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a2c8da7-3d36-48fc-b505-82dc2fd89d2e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee387436-153d-4bd0-8ef4-a930e7e114b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcda668a-f74d-48e3-845a-fc0d4e72b5dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "003ab657-51d1-4f39-8ad1-a4ac50ad2971"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9454a178-8d16-46f8-962f-8f42b7a5c0d1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb57f927-38c2-4b9f-b500-697840691943"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c26beea3-5194-408c-ad5f-d075de83cd72",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e62ec3e-057d-4ed7-b6de-ec7ae75c0559"
            }
          }
        ]
      },
      {
        "id": "6c83c627-e3c4-43fd-a0a8-4abb24175174",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "4b0005c4-fe33-40e1-8f8d-1d55a5f3050d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60af570a-6984-4857-908c-503009ec84bd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ea8661db-7531-4b9a-b35b-6c6f22860ae0",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e790c5ac-078e-424f-8e8a-5d57694ae9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1b278f-2c2f-4572-b88d-eddfa6256469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f4a5e6-cf9d-44d6-b3bb-1b1ffe696e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9513dd91-4aff-433c-90e9-4aefad17b49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17947f61-9f1e-45be-9cf2-692831dc6255",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010a13f4-eaff-438b-a80d-3cd8559ae40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae77ec0-8bae-466e-8ad5-26bc7bed6bec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b35f3e2-644d-42be-8187-acf78649c4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aecde87e-749d-4e64-a17b-5840b507e765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86711250-1310-4453-bcd3-deb721419fb9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e9417fe-10d7-404f-93ac-2f533b0212e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766b89e3-072e-479c-aa39-414252cb438f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1c57ee-7a28-4410-817a-687e53643a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "257c0598-6571-4e45-8571-8fa920d00d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ae51129-6c62-49ec-a9cd-8f41d1f59d30",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b18e960-4c7e-4891-9bc7-83efd7b1e657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ec2da0d-3ea1-4c4f-9061-b08080cf3306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f744717-d49f-4389-b63c-d93551f034e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7330eb50-c440-41b7-bab1-15cd8bff4216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f896e0-ce35-4f76-9c65-3be4900b4555",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27d81c2-6eb1-4fc6-8484-1e70fca201d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b924de62-db4c-4782-8432-59ca594a8244"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88ac4d2c-a0a0-42f5-9681-d22de75428a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "374784a1-1ba8-4689-afb7-dc001c5f580d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fa584a-b518-43b0-8f3a-1473dbb690d8",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a521ea2e-2315-4a11-9a5e-efb04d35cd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94fc2bbf-16cc-4aa2-ac27-6007fd535293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d2d1308-41d3-4c64-abf4-ecbb3011ae38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd9d51dd-3712-4fcc-acdf-a9630a0884ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "258f0ccd-3c86-4ecd-829a-88d0af416367",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45454591-f635-46eb-8401-249e0def87a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8a0ec1d-6352-4490-ba66-322ea6cf8754"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cddb310-ad5d-44f3-a85c-9d84fdf1351b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "adfe835b-dd4d-4cb7-94dd-1ded0c85056b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e31c8dee-de98-40de-9da9-b46a9baa1b29",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f71135-94d1-463b-81e0-a667b60a7a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7483f1e9-59d7-48a4-a706-d93baccd78e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0c9f2e-61f8-44b9-8ab9-16334209ed7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2444eb9-d5bb-4fc2-a4c0-a85e7e2b90c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16fca245-89c6-46eb-a043-4b02c7a98949",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea8b756-abc9-43d9-ad41-00f53576c896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d37df6-2f65-4f40-b757-c07dbf20c5b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c97616-4acb-447e-85cd-fa53f508b981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2debed-60da-4b8f-84c6-582f97ee29d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6510e14-8433-4608-8ce1-d76808e22cbd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73a6185-dfad-4270-b43b-faa6e8985284",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e96b325-a8f7-4449-a00a-467a87266d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346dd626-8f0b-4f07-a1bb-04f8bb8695e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef7d71c4-3c34-44cb-87f6-3d8e4898c654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52179fe5-83ea-411e-b668-ae6748db0c2e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccaad5a8-360c-496c-b8f0-94458d4e55fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5390d30e-92bc-4314-aa72-a226c6faec09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f230f03d-d5f6-4b0c-bf4c-a278eddc1fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "50b1cbbe-86f1-4a34-ade7-5461769bcd5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a62ef6c-f0f3-4db0-943d-831898fac3e9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f68d3a0-435f-4819-b852-1adae07f7a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f2b65a-6e16-4a5a-b12e-96264673b121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f942076-3aef-4fba-a899-941c157d4860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd6f5d31-3fe3-4f03-96b2-4dfe27d00268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0087cb1c-e15f-49c1-963f-c0fdeb5f9655",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cdfb04a-3286-47f3-abe9-56eedcb263ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d149e2-dbf6-430c-8414-437a4c555b25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f227f5e9-8b40-4bf3-98db-b8f0194d1204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc83a83-75b7-4ad3-9858-4a277dce5c55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64ca6fd-d494-4b59-b8e9-01dc37dd2fd1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03926c0-a0a7-4073-af1e-2b36a83e6aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64cb360e-932c-409e-954f-429f86d9d1dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e7cadf3-98e0-4017-8dd5-128286697a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "744e1c12-eeb8-48c7-b8bf-92bc69b3026d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e35fd4-5d17-41e5-a69a-25618227e79c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe94bb03-51ab-4f7f-8169-ad469cf824cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad2b195-30cb-4e44-b027-a5d35556d34c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1436bd-35e2-4415-88e1-1608dab2c1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4007c6e8-62ec-4c15-8216-743ab6ddd64c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf5a067-9433-43f7-b971-1825fb16e4ab",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e43650f-c687-4126-bee2-1a85a34f14ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68dfb7ee-3ead-4fcc-a69b-3028cde34f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a3432a-a6af-4fba-b0ef-0fe0ef990619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ecbb26f-d4ff-41d2-9857-77ec52d6a333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acb7a268-599d-4abc-85f8-b8dd1b458aa4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd79c4ba-2327-41b5-b2e2-46fd9cf9b7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "458acba1-bf88-4ea1-9d6b-f5eaab6a1850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "062adcd7-64c9-4c06-a3ca-5fb7e274af12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "49de34ca-dbd5-4191-afc1-d1aa87d5dc91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44eff3dc-9978-4f1f-b6d1-312457be7a13",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a3e317-5ef2-46a0-a4ac-057694270253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de0f0772-7763-477b-b16e-6fb35a0992a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef1e1c37-7643-4e56-a459-58f43df6c3a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "30129e96-3613-4e47-8cfb-f43b0b676b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d62995a1-ee49-4b48-9de7-9dcd8b112110",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835df8ea-54d6-4017-9b26-5fca85c51fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0f72f3-1b1b-454c-bd00-b02aa627f18a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e68b52-3554-4d60-bfc6-49fee09efd8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4849277b-c7fb-4567-a0db-8082f978d194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70e5621-f4c0-4e5d-ae46-bbe058d3979b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2887ad66-26f4-4086-b98a-427aa5e8a9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf03886-a9dc-4444-946c-64c11047e60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a186f94e-11fe-41b2-9ed6-4421b03948a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5348dd61-c870-4443-8985-8ef16a496919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf7ead5-6030-4073-be68-e8556746cacd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa54ab25-31cf-457e-847c-aa0f8c4e9346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "489c92dc-2b2b-4e52-9f1f-f9addc32d289"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f936ac76-49f6-417f-a179-8bae02c6b9e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34693285-2e45-4e0f-af83-9482f7ea7bc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbc1757-5aed-4689-a010-1331f73ef7a3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38437cea-3f35-4092-b2ab-018af88fd47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa8d128-becf-41dc-b698-f84df4dbc67c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1957dd4a-dbd6-4339-b2db-93d0d6765012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40c7c9a5-4059-47ee-8e4b-7836336360b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86061a83-4ac0-4e24-9f47-4677e14b5b58",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa9d192-6d55-4a6b-aaa7-d43ef967e93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e681150b-8c99-46be-9427-2975dbe5d2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cff4332-dcc4-4917-b3f7-92c87b110bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f326793c-1c1a-453e-8db3-33d778423bea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e527bb35-6c3d-48dc-b7b5-635800413d1b",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8821e348-5a01-4480-8c59-c2b3c3d6a0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ea8ae7-f49a-4611-8e7f-385edcc61f9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f0f4fd-bb8a-4da5-b574-ae8d6377001b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27d9418-f08b-4f0f-bdfe-56565ab057aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e135aa-c2d6-41be-9e14-098befd3fd2a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73254a50-996e-4f9d-8049-dc2b3ede8f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5151805-9e1e-49db-b773-a30a52046e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db715b1e-4bfe-4e3b-b347-1c94dab01e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "007474f6-6209-4c6f-aa5c-e57c05f9ea1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f09c43b-ea73-4fe3-bbab-e3b2d52a3723",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ac3481-2bc8-40fd-ae5b-63eb42eafcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb6fcbe-b452-456c-bd9c-a8e4cb3780eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434520b8-2e82-46dc-9758-534107318fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74ce1291-71ba-423c-b5de-a8cdcf6b9451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed4a52e-97dd-49b9-b2d0-da55a02851e2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "162d4416-c526-403c-a514-ad2f22bb7a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53c5123c-3ed2-4ea6-9908-d4d1fb305708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a294c17f-045c-494b-bf6a-a5fb6b621c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aec4f0b-a2a0-4f27-ae8a-1d71b6b7cd9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be45825-ee7d-4ffc-b488-ca37f8442001",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3910b10-d75e-4032-bc81-9a5d699bb6a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6f38c2-f8ed-47a6-80a3-4f475e9f313d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f26ecd-3cad-40b0-9794-a294b5d06a6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d3f038-8536-4846-94c3-1419bdfd4e8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf0c0d2-bd64-4a4b-b487-fdf62d3695e4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0514f64-397e-4fc7-8365-6aa4c0727a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc6190c-5ab2-4431-8abf-53a4385dc110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30bd2ee-3758-4b63-9874-e156379080f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4de792c1-cfa2-4d1f-92c8-5ce499a4506b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62930ea0-5bd8-4ba3-ad86-ba9295466cf1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d033c47-b419-4e5f-b460-0fbbd2c2bf80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccdb597-7214-4ae2-889d-1838dca8a027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf82972-0a84-4a16-9042-4d3766a0677a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10a47054-f429-449f-b25f-af3b76c4cc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d2c063-cc78-4c27-b882-116e7f3f4629",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f2ece84-1ca4-43da-bf92-e03e6766d17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38763147-763a-437a-a693-46a5563a0c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "115f55cf-4f38-436b-8759-d879e0fc1f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e8071be-15ec-48e8-ac15-2566a17f087e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1dea69-35f7-43a9-bb8b-7ab7313fe585",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d81b92-dda9-4d47-bc86-7ea438c31162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71d6c44-bf72-4599-b4e1-a12ca217f418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7845d6-f214-49f5-9610-b9df30e87acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f953efac-d647-43b7-b762-e601e121f629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfab7bdb-73e4-4732-bd03-83036d8f8cb8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f965c1-bdbb-4fbc-a2f2-7c3982463725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b487832-7c6e-4d9d-85b2-026dfb48d268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1633ece5-7e63-4dd6-9668-6685d4cfdee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf35bde-0175-423f-8511-ad2f0682b11f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd9c576-ea5d-49f6-8d81-c623403efaf8",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b63a888-5081-4d1b-a49a-86c77df878e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1324b3b2-1102-4473-bec1-54ee8605b983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ad96d2-2ac1-4db7-a0d5-7ed0fe7d6a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d35bbc-23df-4913-8aaa-6ab513266ba8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61fd332-e8cd-4ca3-bd96-b804e0854ad3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4518382-bc84-4081-955e-220c27aa3cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891bc3f6-8bdd-4450-a315-04f832314b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40236ace-ccde-4fa9-af23-9d121be5625f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8052e301-0d35-44e6-80e1-7457b90ecbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15c0da2-d1ec-45be-902b-3fce03c43025",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84a61c9-97cf-4840-a1e9-5d6ba22b88e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53a9e22c-02be-4119-87d8-f462856bbf02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf2dd71-1a1d-452c-be2b-054db641fdfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b90669-ef36-4ad4-8173-a2cea6275c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a9fd1e-ecf1-4981-9624-8a80c0465b1c",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20f5134-eadd-4676-a267-24cf715113c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "031fd1b8-4798-451e-80cf-1fc19c474d36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51945c3e-c8d6-4fc8-89a2-6a0988851aad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56851587-824a-4eb5-a9a0-04973e93fc78"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d04e80d-5440-4642-922d-b168e6958ab3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0f1f9baf-fb51-422e-8ef1-c1fdb2789467",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc4316f-5396-4798-8876-58a74aed457e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e21b68-9f2b-4faa-a146-18c84713483b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cc6a6b-f278-40f7-abb4-c9747b97d833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cbab8361-4bf7-4006-aafc-841883110c75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92eba89d-753c-4de3-ab5a-5c7084e2b036",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e65df5e-6408-449e-be8e-a91f29593027"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3faa12c7-bd04-4480-af0e-a4a64583852e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64417c22-5662-43f6-9b04-acd6e889bb93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1e978a0-676a-4465-ae3c-037277f18b23",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c568d112-f6e3-4e25-b5db-532c8cc03430"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fce6cc5b-5409-48fa-a8ed-654a5ec779cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "36b4e1a9-8313-43e0-8c46-b69f8e282b7a"
            }
          }
        ]
      },
      {
        "id": "0ef3b936-7a60-41f8-bf5a-06b28ad9d2cc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "037c11a1-2f9e-44d1-bf78-47089729362c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a43a564f-b527-4d43-b170-91036670520c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7e85576b-fa75-4bef-9be9-8c2fe73eac4f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdadfb6-bf9d-46ce-a27d-27a745fc8be9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "036dfe14-05e9-4230-a8a6-60ba890f645f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "189b4210-9f4a-49bf-9fe1-0c121a90aad9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672ee1bf-9f91-4960-8719-74cada52ff82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc98303-373e-4f6a-aca1-b9d28217f3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d8ac3de-6f99-485e-ad53-17f8e156795d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8018977d-7626-4122-bdb8-a04afe558238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b94da8-c029-4717-ae38-09ab1c2a1c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb47b573-7e98-4c85-ab4f-7a8e5bbd4f96",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adc086ad-6f78-4c4f-8f7c-6832dbbab749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76e81f2-e1e7-4992-9418-246aee14bcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a00066c-f798-4407-81ee-ebc66f06d0e5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aa869a3-e446-4687-a802-ee9c6960136c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d963e5b7-b99e-4aca-8b7d-d61eb7c80b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59185ed-671d-4678-b0a2-fed493e18b9d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88fbf549-6284-4a2f-8918-5506704ec735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04a7123f-932b-43d5-b732-67dd5700d5ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b50b56fa-6ce2-4634-9514-f1500653790d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651cf6b7-f0d4-4cee-b0ba-65264b506909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8580a70b-5b2b-4921-a42a-bd58246e8d19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7bd0d4-4e87-45f8-857a-15b612461adc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5c7da1-cf43-4a3e-9c89-bc2a8bd04c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc109f9-e257-4f62-b0ec-4a87b81c3f7d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2545b4b-6215-44e6-af15-b547af5cf53f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6676b4a0-c19e-45b0-895e-eb64ddbc5eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95039b93-7759-430b-8260-738d46d96090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea0396d2-97f9-472c-ad6f-8a7246b761dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3afa186-9342-47b6-808f-1a9a090c6b0e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c3ba1f-0539-4823-923a-b35f178d1105",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dd7183c-ec8b-4d03-9651-042bd900b33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "027942f0-af8d-4956-a732-2a2d7d1d8866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb7119a7-ba34-48bf-b14e-ab1849a45559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff955205-7004-42e7-b42b-fad0e986163c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f697425-693d-4aa3-b7f5-a7de3a6f32d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b65fdb1d-0d2d-4dec-8932-58f311919cf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f7839a-5351-48fc-9e19-b5fead5881f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b3a6913-e19c-4bd6-abe9-2aec53c905ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a301073-4e2c-4b2c-816d-2614984b40dd",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fd1b85-a984-4573-aa01-3ef5d97149e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1e8a35-3814-4a30-8160-8c07b739a2c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e7c71c-bc0e-472c-830a-5c58a3cd5c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5ef746-ba33-407f-86de-13d5f06880d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c066fd4f-027e-49c7-adc2-d7cbb792a6d8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8348e971-0247-4d72-9de0-3473caedea14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5dcf90-326d-4d20-8b42-4f9325ee5061"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bf1939-e3e8-41e5-824d-8b5b2735a96c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "606224d3-6f18-4fb6-91e6-4593bdc45871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6719b9-8cfe-47ce-9d42-b70202389529",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "924d0f44-bdba-4861-8af3-79f4bf431eb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da120a3c-109b-40da-b068-8e861085b32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ed606d-7466-40ed-a600-5340ade029e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a5955b-061b-48e1-a6af-957e8461e347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5fc24d-b023-4d17-a77a-411877f6c262",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edff1318-d6cc-4ad8-aa2c-420049948e65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c9085a9-bd60-4b6d-827d-c4f6f7b7d811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac11857-fc4e-4268-8319-7d54881c0086",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7630922-5424-465b-80ea-99ea6dfea57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03de3eb-8de3-423f-bf5d-41e8f6ab2fa5",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5375ea9-4b64-4616-a673-857d31441f21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11dcf2db-0d31-41a1-bb31-8c873e76fca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6c5c85-64d6-4daf-8625-85313b5b2673",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13dc66ce-97ce-4555-bb77-029ec3f568d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0fbb43-64e4-4442-8d6d-96dff6c41a07",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe98f17d-5664-4cae-86c8-28231e0a19aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3d528f5-5507-4274-900c-68059568ad70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ea070f-5a5b-4e8b-bb5b-84b9990b2870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53a9e454-88f3-4411-ab7e-8eb27f91186c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5720c651-23e4-4929-ae60-b30e2f836130",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9144fff-09ea-4b86-942c-580b7d027e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5d96ac-e3dd-4546-8d22-0fac22ad8ef9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af286e28-fdb7-46b9-a47e-3c6e6d229792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601850b5-22fb-407f-9fd8-1e55f504737c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3897a4e1-9caf-4ac2-af6b-756a6bb73609",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "519dc4c7-a71b-4ab0-896c-5fe6f64cf8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49d1fd29-6777-43d6-939b-f3e7098234d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6264625-2934-45f1-ab5a-ddbd1422748f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f24c365-1b65-4862-9645-8e5848310405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55af7935-266b-45eb-b477-ae3b72862a66",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3308285-065a-4cdc-bdae-14ec3716ee78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fb1a1f-7ca8-4f9e-88af-789834545dad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d241a00c-9357-45fe-9ef0-c62f3d13c98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffecfe9f-2592-46f5-a4f7-b9de0629409d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9956b703-ff86-4534-b395-fb2bd2f41bba",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9afd28-5b36-4ce9-bd56-41682ee8b036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0a4238-4d0a-44c5-85cd-dcf75639a4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b0ba3f-2ec5-4d83-b927-1502a43d2f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad87378f-bc56-4fff-a4c5-db5e8a66e03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea0ba10-c91d-43be-8853-fcd9457529e5",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2efb590-5b1d-48fb-8914-b9b740e73d5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4658a9aa-4248-456b-9aaa-4485b78f0551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b22d9fd-105b-48f6-a5b5-91a46861cdb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f8bc1f-c3c3-40a7-a1ff-10c86b213829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d0aae6-a8da-4486-ab0c-f042ece5df8e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff57de9-351e-4ec0-ab27-f796d829b158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59597c9-aebd-4cfc-bcd4-d3a70b57b2ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea151dd4-f897-4a55-9908-a30d0909395d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df50002-b6de-40e5-864b-3d2bf03bc5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85b3a05f-e27d-4954-bb3e-6255ca014e0f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590560eb-e67d-49c4-a4a0-db825b6b0d95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc1b65c2-63cf-4dc1-b4a3-8416ebf5a684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2d8200-166c-4f21-9af2-2e1d749a3277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b05a843-da36-473d-b52c-528b1a3cba45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aade34-8c0e-4300-a510-218a96200a6d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "293258f6-fc96-402b-b339-a02469e738f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b83dad8-29f0-4045-b6c8-425c05dd081b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c6f1df-738f-4cf0-8a6b-21569c54b61d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7addb142-5fd1-481b-8423-4459f83527cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce168d5-c5fb-406c-959c-8a0b0fef9464",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d83a7e-b4c5-450b-be98-16fbb10524cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daa16c7b-cad4-45ca-a695-1f11d5ef0016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1138ca87-d151-49f6-a16a-ef53261d053c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d74e6b-c275-4830-8475-82f4554e5c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b9602d-3d09-491c-8ed8-f5ae93d8f26c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf61587-74f7-45a5-bd1a-cbc9c4950d2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc270b71-41ed-4c0c-9490-f6dee392c3cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a14c65ea-1686-4a58-a79e-0a80cc60eaf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6074a7-eaa5-47f3-910e-22c7cc1b655f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65cc7232-8c88-47ed-9ba9-bcbf71dfcdfb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0dc383-b9f1-4203-9106-cd0efc9ab10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ddcfa2b-1065-4a18-aeea-11a297aa9599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357baad0-6265-4873-b541-f4039189a899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29766dfd-63e4-4fab-8eda-d7a548c130b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8576bd-322b-4b96-9987-3078361b11a5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "226ee56d-0585-4403-b153-d783c9fadcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cce213-b49b-44df-b277-e2157a5acdab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cd6b474-b2d3-4e10-8f32-229e018ef616",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631efe03-7acd-4e23-abff-2064fd1d861b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1d1b65-eb66-41de-94dc-7a873f914ab9",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43eafc18-e11c-4318-83fe-c59c0a0174a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "621fa3b4-55b5-4277-ad3e-aec04a54f9b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4d993d2-0d14-44b0-9514-113471cc03d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe5c7cc7-de56-42b9-8133-61730f68c6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e8daa7-403d-4dbc-b6ec-5844ab65ed50",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33181083-7374-4842-8831-8188a2a9e643",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ce9f65-2bf9-475a-952d-ad1477f8673f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11dfdb9e-a3e3-4092-bc2a-f7ee71013b5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8a37d1-7b88-4641-a87d-f6113d6a8d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "129d922e-5da5-485e-a5d0-22d6af7efc77",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbd0f80-b6f9-4e05-b630-1c4f9dce6227",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "600ec024-be88-46a1-959c-9ebe3cf57f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b78479-3939-48db-ade6-3f63f56b8301",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7340b7d-420c-4955-ac67-e852e4ad10ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "087a28a8-1469-4afd-be01-453145c2b233",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0311c8e4-60b3-4bef-98a0-c491250bbdf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b31bcaaa-5668-435d-baac-606a7adca7c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c478bc-1e1a-4d16-91b0-c4fa98168fa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d16043-8b30-4b33-838d-89082a51a2d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d99255-eb88-46f0-9929-60bc4622a1b5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35766ae8-52af-4fce-a228-b8d199d12ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d3e2373-9532-4ebf-a24a-1475f8855a01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90288772-8760-4bee-8edc-4215dd96c80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23e49506-8906-47eb-be79-6a86484ff38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f909b1c0-7d4c-49f4-a127-a6269cefacde",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b48090-978f-4c95-9443-41d0e8d70832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f79217b4-ed68-4fd0-80eb-b10e3f868895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c87a7b9-df79-452d-aa47-f2ccc786ca3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d518d1a4-c6a9-40ff-87d5-3d99e306e0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20b4dd08-5517-460e-b6f3-3e39f58f7de2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce483d8-354d-4b3e-a02b-a2f6c092e8dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dceb6f8-e893-4f54-9a4b-00c19a97f589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59ae3f2-d306-48e4-85b8-de1ca02205f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4043659-4f6e-4fc9-932d-882527f1d36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7af24e-7efa-43f8-b76b-0d581fe000b4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92952f9-f80c-4d1e-8d1f-6fbc3f809750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ebb37e7-65fa-41ce-8dbd-155f692fe378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a7d1fc6-eef5-4948-840c-40570a54afee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdd4a95e-133b-4c55-8f06-ac154d891d31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8332e78-2569-4d29-965e-6f27ba892cee",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e54b56d-88a5-4c57-9c19-70f0fecf19d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20a5736c-2021-4315-ab3f-f7d73f2545c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17aba0c6-78d7-4831-9bbe-1d31860fb3dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78eb25b-2e52-461d-8e20-a247fb6da9f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08195a1d-aee3-42a5-a271-a2da75d53cee",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a263ac30-6de8-4f9d-9273-33fa01683c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94076636-df56-4bb4-a588-95028cf9c829"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eddd69e-5a23-42e5-bbe8-09f63e5482a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c7ccd3-4e5c-409b-8da5-f717b4a2e31b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deb37e0-2751-47f2-97ba-2a6511324a71",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320f1f8a-1e6d-4281-8272-5239cb815fc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9962deba-eeeb-4a82-a751-71d408f9bb64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3518554d-7d9f-46c4-aa84-e0840c62695c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e731f91-a994-45a8-8361-eb24ccb1a572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd8bca34-fb54-44ff-9f7f-6802064dfa4f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c826ed7-7d55-4602-ae9f-104ff8e16d7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59ea5839-b0dd-4ec2-9c53-c0604ffaee3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93faeee7-98db-40f6-b282-60721d08e28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53ef6b52-9fbf-4866-81bf-536ad68f476e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb658fa-1f85-45f5-a786-f896e7518a74",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e30d695e-f4ea-414f-a649-18fd79afe0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56fb6e02-85db-4dc2-b20e-86d359fe4fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998773d7-174d-4694-8090-0ee304deee2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e7bceb6-15c1-4889-8e02-da6fe5f02898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874cca2d-eab0-4ed7-9b59-18d916c22260",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de570bd6-109e-41db-9e0e-71b6b4043bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01473d5c-027d-4971-9de0-8800831dd9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb28de12-9056-426e-bac6-6c4f74997a8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9591c39e-7c7d-4209-be48-59277885eaed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b4f67d-c614-4d26-a6db-67c36e207699",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46256a63-4fef-4e1f-b712-cf14afcc5a17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be17749c-3560-4061-ba0f-271ff98c9d46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43bf05c5-d674-4c52-89ba-3f08e86368c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "394c08ff-7dcd-4e62-8eb0-60ee4b5ad5e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7843b0f-9ad5-49d5-b54a-641822eab511",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dcdb5a-0f31-489a-9735-18cbda843117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc1bf29-2ed5-40f4-a770-8cf213e864b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5224bbc-de82-499e-8d9d-96c1cd392f52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b689c758-f6ea-4afd-a892-d87f9ea27478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "724671a9-3216-4c71-909b-8c2681e64a61",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c328f721-16b9-40b6-937e-903199b3cbee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "215a067f-251b-4761-b9dc-44745684f769"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "207487a8-1efe-4a6f-967b-42626263c29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae45fa08-7751-44b6-810e-2bdd54b5d64f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fe1e8f-1d7f-4f23-864a-fb267f51e7c3",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ec217e-fde9-4db6-913c-c2c4a67c3da8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d344a539-0bb4-42ad-b452-722ffea53c0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1176d7-cf29-496b-b5f9-467cfc67cd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "357e3793-2de9-4386-a1a1-307f768b71a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "428022e8-c714-4364-af2d-e827d3bcd044",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd33d261-cb72-4049-bc44-3a3ec66e60cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7dbd31-163e-4b01-a49c-4fae3b3df48f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e13405db-e738-4258-bcf3-91a17d62b883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a99f53-fa6a-4972-8520-75c754e19100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09ae264-4371-4d78-aabc-588608803f10",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d77332ff-717a-42b6-a4f9-74a219c8c922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f10988b-4661-4a5b-a5f8-57b2ac3f1763"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "675f8bca-627d-4381-88e2-3b32bfdaa408",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7e5632-9389-4d6a-b6c5-8017023df606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb14481-202a-4bc0-aa9d-fd6644b3b14a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d134ce-131d-4bb8-81c3-e12f718f13bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58cd3683-e00e-4c81-9fd9-44dbff3a79f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa50175c-6fac-451c-8ecd-117e55bb589e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1501819f-e55b-42ae-9cc0-12ed628d7c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6e7ef8-7112-47d9-acd7-ccaaa10526bc",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f950f8c4-5e53-4cc7-a587-79ef7cb96681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33e4a42-ee4d-487a-ad40-c4ceab012fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d0cd00-c258-4171-a27b-6b9470eb3f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60444a5b-3ca5-47b2-a764-79fa02d20ece"
                        }
                      }
                    ]
                  },
                  {
                    "id": "998458a9-0484-45bc-bf77-0b944ce260cc",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1f924a-6247-4d93-ba6f-f1b7c03c42f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3da7b0d3-edc1-4bb1-b1d9-6fa736787ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a28da10-0302-4232-bd7d-2d2742ebce84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd4269b7-d069-49c2-bfa6-a5c38f3d89a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28d6016-47f7-41d7-aa0b-c63a72a9cbd3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd928672-accd-4fb1-99ef-be604cdc1522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a8075eb-0757-4113-b061-159f47f95c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d6fbfb-2c2e-43a3-9925-7117b350ed25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f158f2-19ba-4cf1-ac7b-1d7c262b9470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db41bdaf-f370-4114-8ad7-d66bd5e414fc",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6017925e-57ed-403a-83a3-bf4fcb7f32f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e80613-c110-4ab9-aa6a-38e6ec2767bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d28b555-a937-454c-890a-fb7ca2363668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089ad334-619e-4111-afd1-bcb122ba648e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe573a8-7dab-4886-80df-ff251c39af3f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a31c2c-1dce-487b-b1de-c7f7f6c46a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c20dd42e-c8ba-4dc4-9f9c-0b53ae2c9341"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4db989-d456-4db4-9a6f-f5e4be904a24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b57c7156-dc69-4da7-ac1e-8748d556aaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f39502a-0868-46af-a5e7-2efa6cb97d1f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32dc8f3-fe02-4d34-8fb0-d4834bc73dea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82810cc7-8a27-4ddb-a1fd-b4b454806443"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "029c0c64-d123-4ca0-a3d2-e364b626e93b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea49eab1-866e-4624-93e1-faffc1f196f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfc0e8a-8afd-414a-9a4b-2b172e563956",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35efb4d9-2356-439e-bb57-3f47a51205c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be90d3b8-2f11-45c0-82c8-ec46ad57d857"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7389de93-40fc-4926-8925-b9edd95a5687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dff1216-3640-49d7-9d77-d8c6182ff4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bca56f2-4ed0-4ade-89bb-8a7c8af85802",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2948f341-79cd-4fb6-95e0-a169b6492cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e6efe00-b597-4f30-9cc1-f5dadd766bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b750c09-a147-49d8-98c3-c07baf66fba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb043df-a7c5-43d9-9669-77b4179a051a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409b67ac-d75d-4007-aa7b-e150052d4bc0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a66929c9-f1ed-4f82-9b28-7e9e16c3da89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95389551-4a2b-4ac4-8745-692756aede1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07665049-db6c-4e8d-8341-a75da8c89396",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354c36d1-64e3-47f6-80df-4a171daafc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822e48bb-8d08-4971-a411-ac9eae375190",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2dca6d-02c2-46e1-bf91-6e8579a8ce80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d55bef9-0db1-4701-8803-34a80d82df18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71990bb9-519b-4905-89b0-5b2871032253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f4c92a-68c4-4fa5-bab3-677656246f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15854187-3523-444e-aa33-d79de20aff36",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb95884a-125a-4c2f-879c-0d285fa50e4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da748e0-c6e9-49b5-98db-15685e357402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e058165c-069b-4aa8-a1ec-dab56f15616a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7f2605-a6de-472e-aec2-d1f07bfc0d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f519e7e0-bb10-4284-96ae-421c53c465d2",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b3c254-14dc-4a03-ac0a-b5fd09e15c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79700210-6426-4aa4-8255-40a635e0a331"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c13328c-d919-468c-9a26-f6d16491e30e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf88ebd1-ebd0-4c70-88ae-fc94388307cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d28049bc-b73e-42b8-8180-eb1ed0ab37e7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e031f94-e941-4251-8f6a-af5033545845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51b2377-26f6-4392-9cd4-da3404de1630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcc7df3-cd17-4144-8760-86ed10cf2d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4c10404-e0a1-47bd-86ad-98c27d192a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45448efa-98f8-47fc-ba70-5ca3829258c8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d0a3f3-c130-4cad-b76d-400bfc58ef66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557d0ebe-c856-448f-9911-f94870ca000c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6163c0-483b-4c12-833b-37feb96f85e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "056c7519-7170-46dc-8fe2-f7e85e2b4732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb0858e-2d9f-4526-8e8d-66cbc7ec0aa8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78df7909-818b-4881-8b4e-22dfe5aa236e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd1383a2-89fc-42de-8095-c6051843c4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38335ff6-0a84-4933-ba0d-eeeb2e04efeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f004cfe-95ee-456f-9305-f1c80138eded"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421d3762-c8da-4a18-b55a-4a28b25b1a44",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dffdf7d-b724-4e63-89cd-f900881267a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "471f92c8-934e-4eb1-94d1-69af71ec512b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3eabc83-14f4-4c0b-ac84-faefc53c9480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0584f902-d636-4c53-8938-226ddf436dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bf6223-da15-485a-b19c-5ef5c404a5f3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272d6744-bd59-472a-96bf-74503fd317ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81284f22-5d80-47be-b3bc-811d61a46388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f75e6c-778d-4ce9-98bd-53a85d0936f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b345812a-1c99-4ddf-a87d-5a3a1752245c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fca0d6a-6ea6-4995-a087-18776e41235e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a25abcf-084c-45e2-98aa-a090029185ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d62f3039-e7e3-4ea2-a619-35f419a3ceed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51914202-4b15-4e8d-bb98-40d19d9fa687",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0edc6c-ef25-46b0-a4b3-3ef249b27291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84da3409-b363-42bb-96e6-3530a6272dbe",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f704d6-d2ea-4187-b889-43a70e2ee738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56061283-fa52-4e86-bb7a-6a709b896091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278dfe1c-2cdc-42d0-9e46-ebf6b403020d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07851fda-ebf7-44db-a082-650e267e391e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65fb65c-56dd-4f42-9dc1-5e2d14777df5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a03c917-9272-44dd-a29a-1bd0cb5798da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8cacac0-7575-4696-b69a-882bcf43bfdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61ae6b6-bc41-477e-a42d-e486bdff3fd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "262f89f0-ddd8-46af-9af3-06dea6c53503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3a1370f-0a08-446f-9613-9c319662d8c4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04620c9c-b5a0-4e10-b954-16e1797a2708",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0cbe68a-9302-4f63-9adb-c140a9e5c95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a404ebd1-0d24-40db-8d1a-313ba6e184cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6133f9b2-9a8e-4f51-becc-4a2314262070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e99f0e2-c4f6-4ead-9436-529eba23211e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdf4f41-c5d2-49c0-8d26-6e8e7a4b4e3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a57a6c48-2dfa-418d-800a-3c31b22dc7b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d556fb2e-71d1-4d26-a1e0-633f47279e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60adfe42-5744-45d8-9ab1-05cb1314784e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80030604-43c2-4899-a628-f1aea4fe4e3c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9090f00c-149e-4e5d-8faa-47b7d693a7b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f572c994-9919-4332-9143-d82423a45d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59dac54-3aaa-49ce-b9ed-739071cd2db4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550e74cc-d908-405f-a39f-c1285cc77f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922c2f46-54a4-4a22-8991-531e1966acf7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "325ce3a3-d81d-4203-b47f-727aa9cdbef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8bbedfa-0590-4726-a5ca-7d8f863811ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b399b8a8-34f9-4508-9e6d-7dbd778c257b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43f03c22-f71b-4ed9-9b5e-7d0d0921b758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e829b3f-141f-485d-bfef-e84c59bd0f06",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaeff238-736d-41d2-93ab-7d2fb52d9889",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "809951b0-073f-475c-a1ca-aaef487baaab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38df6082-58f2-469a-bdca-6e151be92ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0ca646e-ac16-4feb-81cf-c53534631df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b74c5e8-b381-4cdf-ad47-682797fea14b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871c383a-7040-436d-835a-64619f738744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "429fd8be-f125-40e0-bc09-2d851339c417"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad6f47d5-48a7-4b27-9e60-22d5c9032d28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "888ccb75-8f63-4a69-a904-1ff37ce027cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8778490-ff70-4b1e-90f5-97bf066feb38",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0973325-c5b4-43c4-b49d-73bb93d69197",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17b0537b-4c2a-4e9d-8f36-7c9a60b8de71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd81db7-4e91-46b8-aaf3-da903eff4040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8418ddcf-7282-4ca2-965a-6300f68480e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660ff38b-5c6c-4cf9-9695-d69b031d844c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff148aea-bfd5-4a38-977b-96ff01fa4ef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24c450d4-d5d1-4b7d-b744-aaf684011b95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef7194d7-50b9-4f65-a4f8-b235db0a7a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a97b6603-83ff-41e5-bf53-159481ed3668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37371ead-a467-4d3d-bd49-d909bfc3b8e1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6260f2-cf7f-47a4-bd87-ebdff94b4a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dbba208-b38d-4d44-a22b-32674534713c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24b5ae5-af41-46c4-b570-692413c8eb04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ad761b-219d-4d8b-a7fd-d62ebbef8374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62607300-8d50-47b9-b635-146332aac277",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd4cb944-4c1f-4ad9-823d-1f4269aae5d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb57ca3-f07d-4b4e-8225-d1ccf33795e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dd4d286-14c5-4b74-b4aa-818a680d8122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27937381-e537-4ac5-8ef2-a54b37d21371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3965e058-2bc0-4b64-b74a-5595aef7cbb3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f2e1211-e07f-4210-8f05-e10aa3703861",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cc97785-8743-44ef-ac46-cbbaae95f988"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed6d4ae8-7640-4bf1-992b-0a43a2d369c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34dfc0cf-0e4b-43a9-8a1e-2c7faedb85f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d932e903-8777-4918-b96c-9e3cbe481004",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe5cf4b-a1ce-4f15-89cf-4242f50afbb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "177bf891-702f-410c-9926-ab8bce373c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8a2ed8-5d02-49ea-af78-dbeeacf1aa8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3731147-4856-4322-a5cd-788f1a03502d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a8578b8-f5a0-4b61-92bb-4485d1fcdfc4",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6066fc-d328-48ce-8334-bbc30fe88f93",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4329e33-23a5-4728-ad21-8f5a098ebf06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527292a5-c296-493d-a408-1f974b86c567",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2d7a2fe-ca99-42a3-bf23-f59ed485abbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57af7a0-93c1-4764-b3ee-f33b1233c027",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26358c9-1d5a-4288-bd4b-319b86e47a05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42cf6979-8d46-4b94-9d9d-0c24a0226bbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1687db8-3e92-41d0-a671-701b7afce5a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d55e249-7642-436a-a2db-1f161218f31d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b115146-e9d8-44b8-b97f-89c6f887aad7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e723c777-766e-4cb4-a474-f6438acf6afd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f76d8b3-dc90-4a37-bb19-a7cc9eda270e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b718d9-072d-4833-b333-50446803c955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f872c391-9c54-4bcd-a111-1771c491e68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36efd994-4595-4875-be19-4c141f059a47",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f08022e6-f6e2-48c2-90d3-21c42c34cd1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29b3728d-f213-4e61-9a8e-1db47608e354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545992fd-4441-4018-88dd-28ff0de60bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e052ae14-7c37-446b-a45f-ae59d1f98983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0bb234-f5d7-4c95-bce7-d550cf34caa7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a0c3207-3d9f-47ff-bc45-4678292ca59b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26bf3828-118d-4d2d-a5ac-25711f1c6b0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b4062c-e67e-43a2-8fab-cc7048840229",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e58de0cd-d068-4280-8c34-a8a02b69806c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8468809d-41fb-44db-8849-c320458613d1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdaec677-88e3-4e06-8375-0c2c8ab95450",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16f47230-a717-4859-99fb-cfbf41f20d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35660cd5-b069-4632-bc96-c41f69eba6eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca1bd74-21d9-40a2-8d89-7de4dba02374"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a84dd7fa-586c-4f59-81b4-0566a7e99065",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65637b17-2dc7-4a27-ab95-a7aa4521b8ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51d124bd-92c5-4014-afb9-ef437f941885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a12aa0f-39bd-4740-8733-43b2e37aad48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d945006-5b8d-4b4b-bba3-6c63d44d03d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7736eb2-ae68-47b4-b6a2-f4e9b6149682",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b29fd01-0fa7-40af-b5a4-e203eb6aee23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13be6a61-bf28-4c3b-a79e-2b7857e2de50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca1da41-fe96-40d9-95a1-de22fc4dd596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc795d5b-f9e0-49de-a6c9-9bfc3286b3cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2004a1-2df9-4cf5-bf81-24a4703bad5d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f45e3b3-faca-42ed-a6bf-8b5a9460da9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38666931-5cd9-40a0-a9a0-a0602a8cbac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d1324f-0435-4da5-8cf6-eff9427de2c8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3556ec9-686e-4ccb-a3da-72696bf77d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882d0285-9141-4e13-85ae-800d5d7ad6d3",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf84c13-320d-4aeb-9950-0fd28604078d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207090a7-c7e8-41a5-b407-e5c5a78f30a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824310bf-ab7a-46f4-b1c0-56475eaf3ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677c3898-1df8-468f-b5b4-220818604743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6f4b57-6510-4c73-b7ed-fa1732ed1279",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c1cbcb9-24dd-4a54-9166-a082e3c9e243",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61145ffd-5f2f-4ada-a385-bcbaf9bd8238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b36846a-ea73-4144-a2eb-7b64c4585e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2676c9be-9f5d-4daf-87b6-295fda8973f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa7ae51-c7c0-486c-a6d1-8559a9a0bc47",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0c7475-8085-4d8e-bcc0-b0260f79605d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6834221f-ce73-42d9-937f-00a3d6872f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75eefce2-ca16-467f-80ee-445cb08094f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a73b12e0-934c-4693-ad15-40525935947b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb3e62e-d86a-4317-abe1-b6f3e4bcabb1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f87b88-0d2c-4431-8497-8e58ffaddce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7fd3c61-7d06-4439-9fd8-70a71a6ecd67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e734f9f-3068-48b9-9956-a9919aed41aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893857bb-f7c7-4b8b-9c5b-0c341e2a3ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867957b1-a0ac-499b-85f6-8237308c97bc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0363851a-e784-43eb-9a83-9f581b8e5c8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "427b4c4b-9562-447d-aaaf-139538be7236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddc691c-26af-47cd-b40e-880c5c0269ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6564d437-10c2-4f41-97ca-bdfbf026ce89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22ac058-5801-4caa-8aa5-62d7c27c12d3",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3029cc79-8342-474e-b481-61a509326af7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33ba5a3-4340-4b20-877f-05c4c894bcd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384bd52d-6258-484a-bee0-75b03337f9e6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1244a303-f84c-4079-b913-3e71a7be5c2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "023fde00-d194-48fe-becc-8c7b09a8e532",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c04685-e7e6-46d1-8a2b-ab6c4bf8f484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "238476e8-ac81-4e58-9e9e-4eed29607109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cb755c-ea8d-43bf-9108-e638a71b436c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15c7d472-7ef8-48c4-a183-178ba7d16102"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8b3cb31-2359-4fc0-a8cf-e1f17ba41024",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "556fe1da-dd4d-40c2-b72d-499a2464ae77"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4e797b0a-69a5-463c-807b-ec555ad3bcd0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e91cbbc8-2d95-4189-8225-ba419296b968"
                    }
                  }
                ]
              },
              {
                "id": "c4905428-fe65-4748-97d5-2e35c9b98961",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ff6d8ec5-5970-402f-8604-9622f966c9d4",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b80683-dbe9-4213-a850-6d7c5e3618fa",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d1a07e58-681d-460c-970e-0be70be9f30d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "595b3aa9-9502-46bb-973c-50c7c88ecb8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e928c8fd-8fdf-478d-921b-64b8213a6758"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19eb781b-7787-453c-bc64-b2556caf6744",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61c57b1c-b920-4721-a0ea-69f6ae3d7d6f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17cbcc3d-ebae-44c2-9d51-56e026a5041f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "64e8d753-8da8-415a-8ad9-d7a628216468"
                    }
                  }
                ]
              },
              {
                "id": "61768628-8454-4a00-b837-3b5e71f7fb53",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c89abc58-8230-456b-a75d-45d4fef64e21",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10b6e4c1-0d68-4fcc-be6e-482e61ce4e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "694102fe-fba8-44fb-986c-958585a406cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae36b1d-5090-4955-a478-381a9b9a269b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12951775-98e4-4470-b891-28902d5a0caf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2dc76f69-82c5-4ede-b788-4d8ed4b37a45",
            "name": "Positive Testing",
            "item": [
              {
                "id": "24c28647-6a60-4239-8151-49d7555d14bd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cf12966-3021-4b9d-b7aa-17b493b0dba7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7a399713-1a2e-4c2a-a4e9-9c8495dffd3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d863ff3-c4e5-400e-88af-46cd3c237e8c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91721647-f813-44a6-8b7d-e52774e19444"
                    }
                  }
                ]
              },
              {
                "id": "fdeca80b-401e-47f6-b386-22f53345f34b",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "503caea3-9d19-4278-9646-3c1c1c8699ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "82734cfa-da7e-4016-bfe2-9de484e92373"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4b22071-a86e-4cf4-b3b5-203ca4918940",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fd54e06-323a-47b6-844b-bb6b3f6ee828"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9111d55-5a2e-4989-aaff-48f4c47c9aac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d73bb57e-9651-4ff8-a265-b268c48e9c3a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9b6f616-9390-4735-b20d-836fc4833e78",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bd1203a-a846-49ad-8716-676521199efe"
            }
          }
        ]
      },
      {
        "id": "30670dc0-ccfc-43b8-ae10-354112ebc562",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1902f849-91c8-4239-9420-53bc1b329ecd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7c83b56f-216d-4915-b192-99e2a382fe9b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "47faafbe-ac26-4a8e-b5ae-13724f670b32",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc639e0d-8e26-4d87-a034-aa44b9ba5031",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ebe72418-29fa-4032-8e4e-5efe553e4bf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac3cca3-5752-4cd9-a175-538e95c5556d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e5fea7f-ede2-46f2-a4cf-350131e78217"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "281103f9-e02c-4648-aa42-e40953de7030",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "38241c21-fd32-48ea-aa46-0d56a9d46414"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24d110e5-6df7-45d6-a342-d519ca880a13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "383da234-87da-4dda-b6b6-78d1dd9affaf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38f7ac40-adae-47f4-9b66-517ad438225a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "89535ffe-ba51-4498-a32c-0ac5e030d4d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18682fc5-dfb8-4fef-9f28-42bbd6500231",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09eb2f1f-7fc0-4e45-ae8f-12b8245a6556"
            }
          }
        ]
      },
      {
        "id": "a043769d-449a-4f52-aa08-865588e8c7ee",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d54014e7-7921-415b-b31a-bf98a54765c1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c041258c-c9b5-43b8-b80e-d798f0aa28f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a1054f44-59d6-48e7-8eb2-344738f69745",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "005a8470-c1f7-42d0-900d-7971ddf25ffb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78687e2d-eebe-4a66-8243-2d5ca3bab4ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed533882-360c-43a0-b92d-09ecb6171ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fdc57c3-2e24-4aa1-95d9-bbde9ab17fd5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fdf930e0-61fc-42ba-a996-4ccb3f71d292",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01cc8fab-5467-4ed1-8ec5-27dc85b0d7dc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb88937f-2d16-4ef5-9484-e0e9432b9d97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddbab6b4-3d74-4b24-aaf2-eca7d956b4b0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7feac138-a187-4fd8-a70d-b6e00acde40d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cab7736e-395e-4573-a0f2-9be7914f282b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66e862ca-6013-4b37-8bdd-8fb10419cc6d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d000097a-d199-4978-aa57-172716173434"
            }
          }
        ]
      },
      {
        "id": "77b1b4ea-9cff-4467-807b-48d776c6b8ab",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "b0cd8b44-d930-468c-9a72-a0611b3e1e39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4fb39495-02b2-4242-8125-676767553d26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e67e869-0f26-4aae-a125-60c26ada2bda",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da51781f-3abb-4e85-8d89-793963ca558e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b714ec63-6854-416c-9001-2e1ff7d9269c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d9824f-391c-44f6-8385-92b160aee6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "49806aa2-5571-4f20-ad28-99684d1103b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "024b4c68-b5a9-4ae1-a47b-73adadfd9e96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0367414d-3d78-4bac-8e98-c254557ec07c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e81c9b80-1991-4540-812d-0d21a9c2c06f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bfa16f14-3ebb-4343-af70-a8e6fd7c8595"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c25f924-1570-491e-819e-5f8a41b5c6b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e707e4e6-bb8f-4665-9b43-aa0ce558acf1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "89236069-eca8-4721-a9fc-a9585cc3a4af",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bc755b09-c1bf-46b5-b191-45be4964bb2f"
            }
          }
        ]
      },
      {
        "id": "e10b2647-7928-4e19-8e86-e766cb3e576e",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "166a2d00-d15f-4864-8087-f41f65f27774",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "afbb0b6f-9410-477c-8aad-03c09f829ad3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0a4372a4-127d-4da4-bd57-df440c1030f0",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1a82f6c1-1db9-4a7d-836a-581b890a397b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5d4fe00b-363a-48ce-b603-855065b2ed33",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 105.06315789473682,
      "responseMin": 20,
      "responseMax": 857,
      "responseSd": 78.49315230291583,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701218167758,
      "completed": 1701218206971
    },
    "executions": [
      {
        "id": "c29e4267-48f7-4a3f-bd88-42764f173593",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1633b7de-a906-40b4-a3bb-9715f8764a2e",
          "httpRequestId": "18c2b2c3-c484-43af-8575-5c976b67814c"
        },
        "item": {
          "id": "c29e4267-48f7-4a3f-bd88-42764f173593",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c1d918d8-6da8-4db5-b3fe-72451e7994e2",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 0
        }
      },
      {
        "id": "dcc48510-77b5-4ff9-97ca-f521ec11c0aa",
        "cursor": {
          "ref": "644f1eb2-be55-44c4-8db8-ad6d8cd06ada",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "6aac4993-15e9-4b69-98ed-7e717f79f501"
        },
        "item": {
          "id": "dcc48510-77b5-4ff9-97ca-f521ec11c0aa",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "09e5c839-fed9-4de8-ae24-f2dbd18f9d0e",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "49377c37-68ec-45a7-86fb-19f76ab3cb1c",
        "cursor": {
          "ref": "85dea2b5-b587-4b8f-8109-a958402d1a16",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "62f4c1ad-967a-4646-9cf1-30b2ee8eef54"
        },
        "item": {
          "id": "49377c37-68ec-45a7-86fb-19f76ab3cb1c",
          "name": "did_json"
        },
        "response": {
          "id": "207b35ac-0e25-4279-8ac7-6312152e1743",
          "status": "OK",
          "code": 200,
          "responseTime": 857,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd364a77-dfde-4d8b-9e93-ee82193f18f2",
        "cursor": {
          "ref": "16ae583c-770f-4a53-82d3-52de85f3dd9c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2e2aadef-81ab-4a37-9bc9-c3bb46aa786d"
        },
        "item": {
          "id": "dd364a77-dfde-4d8b-9e93-ee82193f18f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5df403b-1cb0-4586-b1a6-324975c273ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd364a77-dfde-4d8b-9e93-ee82193f18f2",
        "cursor": {
          "ref": "16ae583c-770f-4a53-82d3-52de85f3dd9c",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2e2aadef-81ab-4a37-9bc9-c3bb46aa786d"
        },
        "item": {
          "id": "dd364a77-dfde-4d8b-9e93-ee82193f18f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "b5df403b-1cb0-4586-b1a6-324975c273ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 163,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a246b1-e3fa-4c0a-a7eb-8cb71c92cc00",
        "cursor": {
          "ref": "0c669bbd-1bca-4149-9f93-6705630d7886",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "95b63554-c681-43ba-9b1f-7f601a82f8a0"
        },
        "item": {
          "id": "61a246b1-e3fa-4c0a-a7eb-8cb71c92cc00",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5d3f6b7d-1a69-416d-bd7e-ad69d084316d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 141,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953466cd-8e13-471f-9232-be1241e336b1",
        "cursor": {
          "ref": "1578202c-551e-42a3-bedb-ff45798d4627",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "81d0da09-8531-48da-a4c1-db50796b4d16"
        },
        "item": {
          "id": "953466cd-8e13-471f-9232-be1241e336b1",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2533e61e-11e1-4124-bb67-1fe529033565",
          "status": "Not Found",
          "code": 404,
          "responseTime": 84,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2153a1b8-4698-4f3c-8456-3eeb0c6f8381",
        "cursor": {
          "ref": "728014c7-7377-4da9-8243-fbb196d0023e",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d724258b-6a71-4cc6-9eed-db82ba805ca7"
        },
        "item": {
          "id": "2153a1b8-4698-4f3c-8456-3eeb0c6f8381",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a3aa3563-774c-4324-af2c-2461b9680c03",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58c4cdb-34d5-4b43-85c2-6347866edbff",
        "cursor": {
          "ref": "f3a1d950-6cb1-4e33-93a8-5ff8d9c0bac3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "56bd7247-45f9-47eb-9f54-92a38a561dfa"
        },
        "item": {
          "id": "f58c4cdb-34d5-4b43-85c2-6347866edbff",
          "name": "identifiers"
        },
        "response": {
          "id": "f33b0536-c2a3-41e2-8210-cd214491253f",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18aa11ec-7cdb-41de-a248-8bd61ca192da",
        "cursor": {
          "ref": "1568d184-eccb-47eb-ba86-635ea0a07c55",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "002256c7-21f6-4363-88da-36bc961d91d8"
        },
        "item": {
          "id": "18aa11ec-7cdb-41de-a248-8bd61ca192da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "018602d8-81c0-4442-aee6-25c686bb9435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be76701a-18ef-427b-88f9-7a3e53219b95",
        "cursor": {
          "ref": "2e0a0eb4-bef3-40af-b8c9-6c23b8369825",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "12007438-fd25-4abe-a098-0f255e140df8"
        },
        "item": {
          "id": "be76701a-18ef-427b-88f9-7a3e53219b95",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "693be56e-7d54-4c25-a42b-7d12eb24086d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc7fa4d-c478-4354-8a0c-6250801466d1",
        "cursor": {
          "ref": "9b36c377-f231-471d-8a99-651c98e1e377",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "33f5abcb-e8be-47fe-b8ca-7609ea44eca9"
        },
        "item": {
          "id": "ecc7fa4d-c478-4354-8a0c-6250801466d1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "414fb308-ddc8-428f-b9ce-e9056452fe97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67b3ddd3-49ed-400f-ba31-6c4335add2a6",
        "cursor": {
          "ref": "5e42ffa0-4eb9-4680-af9b-34e7c0c913b4",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a51202d2-5d07-4edf-a28b-e3b0899d8773"
        },
        "item": {
          "id": "67b3ddd3-49ed-400f-ba31-6c4335add2a6",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "5dfa9fa6-56ea-4f0c-8f36-0e5cdd98437c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46e758d-bf7d-48da-a09e-fc6791a0855b",
        "cursor": {
          "ref": "82fcec4e-5bec-41e9-b892-0c9abc52c107",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3f921363-1141-46dd-9a13-b36cf5af5119"
        },
        "item": {
          "id": "a46e758d-bf7d-48da-a09e-fc6791a0855b",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "2d6c70c7-fa8b-4f98-a92a-0d1fcf484d5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc28fe4-876a-4ae1-90de-e8617a8e7238",
        "cursor": {
          "ref": "3f333108-a8f8-49c9-be36-2490d17b795e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "d361fb86-9d21-410e-84ff-cefff3d63a8c"
        },
        "item": {
          "id": "5dc28fe4-876a-4ae1-90de-e8617a8e7238",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bd284a40-b82d-4407-8e0a-920a3520d489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15338c20-9df9-4e63-9dde-41c8a25695d0",
        "cursor": {
          "ref": "7dd7ae28-feff-4a15-b611-986db34300ea",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "07587927-c417-478e-af3f-44c0bb458b28"
        },
        "item": {
          "id": "15338c20-9df9-4e63-9dde-41c8a25695d0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bfcaeb30-3308-43b0-a56b-514678f46684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b9fa0a6-3d58-4b2f-83f6-cb9f76138c65",
        "cursor": {
          "ref": "6e104fef-d57d-4733-b8f3-f4de427dd5ce",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "89be4397-d94b-4756-97e1-4ef257a572c1"
        },
        "item": {
          "id": "9b9fa0a6-3d58-4b2f-83f6-cb9f76138c65",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "03598c40-90fe-449f-b4aa-317a17a88a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0f1433-89cb-4ebc-b7d1-2a1ea5dba628",
        "cursor": {
          "ref": "e3ab064f-302b-4d80-b5a9-1c6ad0ac22b7",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cd7a96d4-2b8d-45b9-b001-b0f5ac28f48b"
        },
        "item": {
          "id": "0d0f1433-89cb-4ebc-b7d1-2a1ea5dba628",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a5a774fa-1579-45f5-9e0f-1e23c1366554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ba0c254-41cd-45f7-bffe-7ddf321e6389",
        "cursor": {
          "ref": "cf1054f0-44ea-46ec-a598-3ff155e85973",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3a2cf305-4f6d-47fc-988a-fb447e0dd7f1"
        },
        "item": {
          "id": "5ba0c254-41cd-45f7-bffe-7ddf321e6389",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b4a07b03-4875-45ae-b8cb-e75599e1ba51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60c8cdd-a579-4da5-a66b-65a076e810e2",
        "cursor": {
          "ref": "030904bb-56d4-48a5-ab1b-e73ffb6ea657",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6e5fb42d-32c2-4810-a016-fc5561abc6f2"
        },
        "item": {
          "id": "f60c8cdd-a579-4da5-a66b-65a076e810e2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ddc810c4-b945-4817-a4c1-734f418f9b61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f4f687-a78b-427b-a57f-f050c8893bfd",
        "cursor": {
          "ref": "a59bfebc-eab5-4fc2-8c59-0194765ed251",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "db2fd40a-9f59-40b7-a300-85b665825a6d"
        },
        "item": {
          "id": "e3f4f687-a78b-427b-a57f-f050c8893bfd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "91678abd-fc75-4ef9-8e6d-e645d6226853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45790046-4c69-4095-85f6-e02121682df5",
        "cursor": {
          "ref": "490a9b51-66af-48da-8774-46f58e21708e",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "183082c3-9a11-41da-9818-07cc572865de"
        },
        "item": {
          "id": "45790046-4c69-4095-85f6-e02121682df5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "06dccfb2-17d1-4ce3-adb3-686eb3edaa88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88aa81f-1fa2-4c2c-b4fb-86f92b52f02b",
        "cursor": {
          "ref": "d44b42d0-4195-414c-b1a7-d185b37d14dc",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "47c40b7e-aea0-48b5-905a-da15b93b349d"
        },
        "item": {
          "id": "d88aa81f-1fa2-4c2c-b4fb-86f92b52f02b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2169a5a6-d2d2-4eda-ab22-35266418c6f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b2d6cb-5e4f-418a-85a2-6d73d763bf93",
        "cursor": {
          "ref": "86dd83c5-233a-460c-9a56-817cb8bbe81d",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6cfa62e5-1a33-4d22-aa50-46b345402367"
        },
        "item": {
          "id": "23b2d6cb-5e4f-418a-85a2-6d73d763bf93",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "8b5f833e-8618-487d-9ace-c784f8971fe6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c6cbd4-6231-4579-a82b-a974cd33af11",
        "cursor": {
          "ref": "94e774f0-7fe8-4b48-a7ad-79e7249ae780",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c56ed69c-4e62-436a-b23c-7288388c833d"
        },
        "item": {
          "id": "82c6cbd4-6231-4579-a82b-a974cd33af11",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "56bbada3-ff30-4b9d-a03a-4858f17ab69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "405b938f-2e7e-42d7-a705-0044ba681f21",
        "cursor": {
          "ref": "da42a6c7-7c7b-4489-95b2-2d68122d2ec1",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d0768ff6-9f36-4c20-af16-d4f991a3e856"
        },
        "item": {
          "id": "405b938f-2e7e-42d7-a705-0044ba681f21",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "30f704fa-ea32-40cf-8420-957a5f524b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d31dc9d-5312-4df1-8dfd-13db32c57341",
        "cursor": {
          "ref": "ae052d23-52a1-43cf-acbc-f1b68e237a9f",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "5cb6bb82-cfe4-400c-afa7-5045fe05665e"
        },
        "item": {
          "id": "7d31dc9d-5312-4df1-8dfd-13db32c57341",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "58e6a32a-d331-499d-acea-7b7de92bf54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e65b971b-ee70-4ace-b16d-aa5c183b2cf3",
        "cursor": {
          "ref": "0e0b0276-168c-4a16-9677-db2a43a09beb",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "e9cc7737-4eb4-4734-8efa-85919b05cd9d"
        },
        "item": {
          "id": "e65b971b-ee70-4ace-b16d-aa5c183b2cf3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b616c988-f1f8-49e6-be51-026fa81db07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919d582e-3517-41a1-9e12-8dfac5bcf173",
        "cursor": {
          "ref": "4bb1d958-a890-40a4-be23-b26ca075c051",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c10737ba-ddc7-444f-be4a-d56e831cb7a3"
        },
        "item": {
          "id": "919d582e-3517-41a1-9e12-8dfac5bcf173",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d05660f1-5f1e-4cbc-b66f-efcc54ab3c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0059b23-f0d5-480c-b0a4-2c722486d861",
        "cursor": {
          "ref": "7af73967-662e-4a8a-9e0b-3f58f99e9379",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "35d9fe70-9f24-4fc8-b896-7d27e6a1b1e0"
        },
        "item": {
          "id": "d0059b23-f0d5-480c-b0a4-2c722486d861",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f7c9e8bd-6437-4951-be96-e2458f797d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07340ec-ec2c-4f09-b8f9-6b7eff8482cf",
        "cursor": {
          "ref": "b1b1ce1c-6c54-440e-b28c-604a958d93b0",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "86ac507a-869c-41f3-aa32-a9c7fac265c1"
        },
        "item": {
          "id": "b07340ec-ec2c-4f09-b8f9-6b7eff8482cf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6a8070f0-8433-4eb9-a628-eb6fcea5fba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6c7063-6c80-4548-bf34-1976ceb11bad",
        "cursor": {
          "ref": "b224743c-7199-4b51-ad1f-280cd10c125e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "a1fa9bcc-79bd-4666-b518-ded35c5a8540"
        },
        "item": {
          "id": "eb6c7063-6c80-4548-bf34-1976ceb11bad",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4ceb2ea5-2f12-4386-a62d-065215815f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f05830d-4a9d-4925-a585-fe17551841f3",
        "cursor": {
          "ref": "7657a0c1-aa11-460f-b88b-8392f32932af",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "46387c94-ecc5-4235-9a6e-9922ea4647cb"
        },
        "item": {
          "id": "3f05830d-4a9d-4925-a585-fe17551841f3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ab7af67c-1288-46a5-ab8c-1fca99d72fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe368aea-971c-41fb-ad44-0c49d7eaf15b",
        "cursor": {
          "ref": "b29424e2-b1d9-4fad-b319-8ddbc128c20c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "9c87f9d1-a0d1-4a29-b4c2-5711d0b725fc"
        },
        "item": {
          "id": "fe368aea-971c-41fb-ad44-0c49d7eaf15b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "3011d0fa-b273-492c-957a-4f170c1539b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51401b21-ab5a-4729-9823-0b1606634c06",
        "cursor": {
          "ref": "3603eb0a-d19c-4c74-8d9b-566d2eba7fb5",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5546631d-6c8a-4ca9-8819-41628a3c956a"
        },
        "item": {
          "id": "51401b21-ab5a-4729-9823-0b1606634c06",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "ca2d012b-0f59-453e-98cb-ac42ea2d1e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2400130-26e9-4d1c-9f49-90e602ad34c8",
        "cursor": {
          "ref": "60438aef-7fe5-4e66-92da-5e07e5edf555",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "52f6027d-bb36-42ca-8b46-c3a8da983ee9"
        },
        "item": {
          "id": "c2400130-26e9-4d1c-9f49-90e602ad34c8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "58b3d7ed-97b4-45c9-a6b6-92ba2ec423af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4e7a70-e137-4b1d-a5ac-09b4608dd51d",
        "cursor": {
          "ref": "b2627a59-c6b2-4292-81a7-4323aad8e6c9",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "ffbf92d4-cf34-4776-a495-91143d21848e"
        },
        "item": {
          "id": "8e4e7a70-e137-4b1d-a5ac-09b4608dd51d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "682378b8-be38-4d43-b2d9-1eb96d6f76e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6829f1bf-9396-4e99-a63b-c313f29be143",
        "cursor": {
          "ref": "b5ad2d66-d299-4f6d-bc46-ad2833b3bb97",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a5478279-e9af-4b39-a4ed-c3b5317b718b"
        },
        "item": {
          "id": "6829f1bf-9396-4e99-a63b-c313f29be143",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c58db58e-50ca-4c22-b299-7174055f7ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0747d4d8-23ce-4305-8ddc-ce551a85ad03",
        "cursor": {
          "ref": "565b5185-646c-4af1-a35f-6cbaab193a5c",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "eb0a0b49-a02b-436f-aa9e-bf4d136cf306"
        },
        "item": {
          "id": "0747d4d8-23ce-4305-8ddc-ce551a85ad03",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "313234c1-2490-43a8-a736-61859f43749b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93c8ef89-13bb-4415-80ed-006bfa616a0d",
        "cursor": {
          "ref": "631e8db0-568c-45ce-ba1f-c1cbfdbfc3be",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b16c9aee-91f3-4366-818a-0d511a7af741"
        },
        "item": {
          "id": "93c8ef89-13bb-4415-80ed-006bfa616a0d",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0b3cb014-0205-45a0-90f7-bedfa7b8a598",
          "status": "Created",
          "code": 201,
          "responseTime": 541,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "71bf7365-fcf3-4533-a1ba-f1cb6a86271a",
        "cursor": {
          "ref": "a20e888e-c60b-40ec-b01b-a2d6855227e9",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "bae44d51-f19d-4c3c-a5d6-7696a4e80ac8"
        },
        "item": {
          "id": "71bf7365-fcf3-4533-a1ba-f1cb6a86271a",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "91d2e6c5-24f5-45bb-803b-7a9500f6e197",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4ee347cd-d442-423b-abeb-52e70f169b03",
        "cursor": {
          "ref": "42daaf90-d22c-484a-8504-a0e3cc898bbf",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ff494ebc-2e78-403e-8a63-1f70e6099f40"
        },
        "item": {
          "id": "4ee347cd-d442-423b-abeb-52e70f169b03",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "eed33015-9d69-4946-b5f0-27ca2e03eb1a",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "77323029-9b4f-4a55-b2d9-56a101d31450",
        "cursor": {
          "ref": "0de409fe-05b1-4fe8-a4d2-f04f6311e4a9",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6fe0a5ee-f865-41e9-9703-a30af0276dd4"
        },
        "item": {
          "id": "77323029-9b4f-4a55-b2d9-56a101d31450",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "23eb15bc-6011-4dab-bcd3-a210a1f5c915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10101ff-28f7-49da-bb42-9252e8f36fa6",
        "cursor": {
          "ref": "c243b11e-498a-41b9-a1b0-74b94d2e518f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b8c18623-f393-40a7-8fb9-ae64e4001d38"
        },
        "item": {
          "id": "e10101ff-28f7-49da-bb42-9252e8f36fa6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "fdbd14ab-db4b-4e41-92e1-a89faa3fb625",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9a8cfead-c0c6-4a01-b882-19714eb3685d",
        "cursor": {
          "ref": "3fdd1f86-daef-4b2b-bf89-4b641aae7841",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "76747a20-4dfb-453e-aa4f-9d077d31a86d"
        },
        "item": {
          "id": "9a8cfead-c0c6-4a01-b882-19714eb3685d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3e166be0-b7c6-4c6b-8728-22b53fac9318",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9b97da46-966c-432b-b39e-43676042010b",
        "cursor": {
          "ref": "249e3a02-ab0e-4c3e-8c26-b902a57af6e5",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c6b9e94b-cde9-43d0-bf91-3a6edcb5a142"
        },
        "item": {
          "id": "9b97da46-966c-432b-b39e-43676042010b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1d6b92df-7cdb-4bf6-b809-72361f0bbd3b",
          "status": "Created",
          "code": 201,
          "responseTime": 318,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "91da0e22-87a0-422b-a0eb-c5b2589a00b8",
        "cursor": {
          "ref": "1bd8366b-c921-4678-8dfe-2fab43f6dd5c",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5482ab4a-15ee-4f0b-9314-cdc5c50aa0ad"
        },
        "item": {
          "id": "91da0e22-87a0-422b-a0eb-c5b2589a00b8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1405771f-a7f1-478a-8508-52b404366cf1",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "f20c4a3d-f049-4769-a60a-5b250b69ce51",
        "cursor": {
          "ref": "698281b0-d768-43c3-a94e-62125950c862",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "316a1e80-f158-4139-ae24-a509b7684d39"
        },
        "item": {
          "id": "f20c4a3d-f049-4769-a60a-5b250b69ce51",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "943da99c-7692-44b1-b26e-8bfce4606796",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7b1486b7-cdf5-417b-a053-7cc1f73eddd3",
        "cursor": {
          "ref": "a6cb1c11-7657-42cb-aa7b-c73c95721ae4",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "69e8a0f3-912f-44b0-89d6-cc86017d0527"
        },
        "item": {
          "id": "7b1486b7-cdf5-417b-a053-7cc1f73eddd3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "47c6191c-2195-4c45-9d10-ea4cc60d15df",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "e312e45c-b481-4c76-a9d9-7ce9fd46602c",
        "cursor": {
          "ref": "b5dd0f24-2b3e-46d9-9c48-1a641a712bff",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "20fc9f9a-f1d8-43fa-b96a-a302dcf118a5"
        },
        "item": {
          "id": "e312e45c-b481-4c76-a9d9-7ce9fd46602c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "7c408e48-30a7-4810-b813-39640fef74b7",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "6b3484db-8cb0-425f-aa58-a9e8f07044b5",
        "cursor": {
          "ref": "60dc4adc-3334-4860-bbdc-d0e7d24c7e4e",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8a31c72e-5413-41c9-80f8-614baa57e750"
        },
        "item": {
          "id": "6b3484db-8cb0-425f-aa58-a9e8f07044b5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "f7646a2e-3483-43b2-85b3-254540d2bd47",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "190c7581-c39d-4b79-80b6-7f47a1c4a45c",
        "cursor": {
          "ref": "6eab2ae1-9273-4697-850b-a47d319803c5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7e4fd83a-21af-48a3-8695-acb602d65329"
        },
        "item": {
          "id": "190c7581-c39d-4b79-80b6-7f47a1c4a45c",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "53e0ee2e-3e63-4608-aad0-08755803b9af",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "7187112f-5f4a-434a-b8c9-6bf5012567ff",
        "cursor": {
          "ref": "6de7e498-10f9-40ac-8470-d0fc05592dd2",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f54d3169-923c-497a-9daf-42319289a0e3"
        },
        "item": {
          "id": "7187112f-5f4a-434a-b8c9-6bf5012567ff",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "273d0226-6f53-42d7-bf9f-ebda8da6c323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bed3faa-5bdc-463e-b797-477c6c3456b4",
        "cursor": {
          "ref": "e4210902-35fa-43d4-8568-48c5b1c4a8cf",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "24da62e6-fb40-4e28-a96e-8b4e41f0f311"
        },
        "item": {
          "id": "2bed3faa-5bdc-463e-b797-477c6c3456b4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7cc32466-28f5-427d-bf0c-282d2ddd2631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2175da74-a1ed-4316-a9b2-9f58ba1c92ec",
        "cursor": {
          "ref": "da3e787c-8986-4228-a521-b0733058eba6",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "01062142-ddc9-4e89-8552-81f984a0847a"
        },
        "item": {
          "id": "2175da74-a1ed-4316-a9b2-9f58ba1c92ec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cfe6731c-6432-4f2f-9191-ec4d43e1a25a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7f1fce-08ad-4f9d-bbc3-186d3cb35351",
        "cursor": {
          "ref": "c7c34d51-12f7-4bec-85f5-27b20b2312b2",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "23656588-be28-4325-a00a-f38bebdde71d"
        },
        "item": {
          "id": "8f7f1fce-08ad-4f9d-bbc3-186d3cb35351",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d384a43d-e77b-437c-85cc-2a49002c865d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04db380d-3b71-4dc5-bc5f-962fc8726c96",
        "cursor": {
          "ref": "0e5d04c9-ff0f-42bc-ac2b-9a4ba8683d2c",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "c6eb5e51-492a-467c-9511-6b2d08d0d418"
        },
        "item": {
          "id": "04db380d-3b71-4dc5-bc5f-962fc8726c96",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6a644746-5a6d-4dd6-bebf-b6d203a920b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f847587e-877d-4828-a058-4ff1297246ab",
        "cursor": {
          "ref": "808a2ab3-2ac0-4a0e-8bd3-467f27fe34af",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d8201fc0-e51a-41c5-86c8-bc61ea22a091"
        },
        "item": {
          "id": "f847587e-877d-4828-a058-4ff1297246ab",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "68ea31fb-1b85-49e9-9d68-12e581185c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494bcbc5-321c-4b8b-a443-a3043b8b1b32",
        "cursor": {
          "ref": "ddf6899b-43a9-4252-88d4-8c784e953f4c",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "01b545a2-89f1-4172-a645-052487614aa6"
        },
        "item": {
          "id": "494bcbc5-321c-4b8b-a443-a3043b8b1b32",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f3c0fb84-e299-4745-ae10-ab59b783fdc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2192d580-a3e6-462b-91a7-9a2fe364591d",
        "cursor": {
          "ref": "3b4126ac-fc14-4b8b-a4a9-0ac8f09daf89",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "497315f4-c887-47f4-95e4-4c3694b70711"
        },
        "item": {
          "id": "2192d580-a3e6-462b-91a7-9a2fe364591d",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b2276562-e69a-49c1-974a-e7d46ca7c3f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f10d14-3af6-41fb-a14f-95e46ab3dfdc",
        "cursor": {
          "ref": "f017d5f1-800b-40c6-ad20-9cffc3cea5fe",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "935da1c0-91f7-49b9-b975-036fb5b7e674"
        },
        "item": {
          "id": "79f10d14-3af6-41fb-a14f-95e46ab3dfdc",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "32f9c980-8b96-4df7-be9e-cda83783e0b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f2db0fa-6f6b-4a6e-8a3e-28d391506098",
        "cursor": {
          "ref": "448753f9-16c3-4062-aa75-7c10344db3c1",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "39a99d0e-2c30-40ec-b29c-f43fa177d9dc"
        },
        "item": {
          "id": "1f2db0fa-6f6b-4a6e-8a3e-28d391506098",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1227ee86-64c8-4742-a776-e070914ff994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89db2f8c-d1ad-4dc0-a11b-defdbbe470a1",
        "cursor": {
          "ref": "b0505cee-9613-4f09-8235-5c1df86b19b6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "42185b22-9b70-4ae6-acf4-818fcee7e716"
        },
        "item": {
          "id": "89db2f8c-d1ad-4dc0-a11b-defdbbe470a1",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "698b3895-0b5b-43a7-93aa-16f1c3c8afe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6257e2-4235-4d1c-86ef-07e3e5f9715d",
        "cursor": {
          "ref": "ccb22cd3-b8a5-4f75-b3d8-53079c4cac86",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3445466b-4db0-42c4-92d4-49f406c7ed9d"
        },
        "item": {
          "id": "ae6257e2-4235-4d1c-86ef-07e3e5f9715d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "718f31ca-61e9-47a9-b3d8-a0599e0f383c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d170c3d-8700-431c-b46d-0d10065f433f",
        "cursor": {
          "ref": "829f1dfa-1af2-4f45-b85f-439008b054b4",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f7c489ad-f7e6-468c-abc1-3121c55cc3f6"
        },
        "item": {
          "id": "0d170c3d-8700-431c-b46d-0d10065f433f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "15bbd28e-c37c-4992-9474-cdf806f7101d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42e3c82b-d0ab-438f-a02d-6610f827a6b6",
        "cursor": {
          "ref": "1bf99946-1e1f-4bf3-b7e2-564af1c60f4b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "20a3ba1a-9484-4bba-b535-56529a93c375"
        },
        "item": {
          "id": "42e3c82b-d0ab-438f-a02d-6610f827a6b6",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2a9c2984-90e8-46d3-b6f0-3484395a0dd6",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "551f0c1c-a265-4d6e-8a30-5e00ec52700f",
        "cursor": {
          "ref": "e72f601a-9d4e-40f6-9409-6ce3bb2d4c27",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "8eebf9fc-37ed-442c-a79b-7162463ffe50"
        },
        "item": {
          "id": "551f0c1c-a265-4d6e-8a30-5e00ec52700f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "3851565e-cd2e-48e5-ad19-65e36688bdf7",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5f0844b6-95c0-44a2-91fe-f72bb0ffd06d",
        "cursor": {
          "ref": "ecda351a-4670-46e3-897b-37b47287dd69",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6612ba55-a4df-4354-92ee-4c7fc95eb272"
        },
        "item": {
          "id": "5f0844b6-95c0-44a2-91fe-f72bb0ffd06d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "35241c18-13a5-472a-aa7c-06a161ad9593",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "0ed1c212-02ff-45d2-ae78-b65103419ab3",
        "cursor": {
          "ref": "3ca9712e-bf64-4e44-a2a9-73654ad3d719",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7a91bbf3-2cf6-45b8-a3fb-59e57502558a"
        },
        "item": {
          "id": "0ed1c212-02ff-45d2-ae78-b65103419ab3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "7cceb1e7-a6b8-4d79-9f38-d09bc967f84b",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "21aef3ed-e10e-45b2-837c-a70303648bcd",
        "cursor": {
          "ref": "34ee63b8-f803-4380-ba19-c13babb6b784",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "29a92062-1e95-4d5a-a29c-d39556df3d08"
        },
        "item": {
          "id": "21aef3ed-e10e-45b2-837c-a70303648bcd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0c926ac4-5cb4-4f07-9784-3b46dc2fc8dc",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "0edb3b2d-53eb-4bfc-9aa1-2e1264e8ba77",
        "cursor": {
          "ref": "3585cb29-b7ec-4190-a555-91707bc5022a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4856ad35-283e-4cf6-b53d-eef66cf6017f"
        },
        "item": {
          "id": "0edb3b2d-53eb-4bfc-9aa1-2e1264e8ba77",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "86884f61-b54c-4678-8296-dbc73b01df2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1976c068-5324-4775-a21e-b0e74e54f09b",
        "cursor": {
          "ref": "f29aec53-7266-471a-902c-d03498ab5080",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2227972b-19a9-4994-9df0-e2d225379a0e"
        },
        "item": {
          "id": "1976c068-5324-4775-a21e-b0e74e54f09b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "af1167a3-f525-4c3d-8eb4-a9077df2d327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "340d76c7-9708-4225-b685-4e1fff85622f",
        "cursor": {
          "ref": "2477172b-81b9-4ad2-b6d7-c7ccaff14be8",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "995c5080-4e84-422a-9249-ecfa3f553d32"
        },
        "item": {
          "id": "340d76c7-9708-4225-b685-4e1fff85622f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "26bbd16e-c952-4a6f-8467-2589be2f1be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c799112-96cf-4895-aa46-f782e58db263",
        "cursor": {
          "ref": "d802acd2-35b1-48cd-8910-b6806ce0aac4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "30037722-d339-4cbc-8e79-3b21c43e5f6f"
        },
        "item": {
          "id": "4c799112-96cf-4895-aa46-f782e58db263",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e2ac243d-4e37-45f2-aa40-12f69d8008d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432a7b8b-b42b-411d-b146-32ca764452d9",
        "cursor": {
          "ref": "e8b7d8cf-6c96-4117-94d5-50d4765cd464",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "24aa12d0-55c9-45b4-aec3-a8b6af4b9310"
        },
        "item": {
          "id": "432a7b8b-b42b-411d-b146-32ca764452d9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "808a8377-6730-4c91-adaa-c6b071ca0219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb2f5c4-bbf6-413f-9e05-0ab60dc95101",
        "cursor": {
          "ref": "ab80d671-184c-4696-ab74-9ae61d945c8e",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ae0a82fe-d147-4375-ab06-455ac0fef959"
        },
        "item": {
          "id": "8eb2f5c4-bbf6-413f-9e05-0ab60dc95101",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7070a5ae-b840-4654-a371-9c1bc97ffab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae1d8c1-178a-48d7-943d-f4d7c2934f61",
        "cursor": {
          "ref": "e8e974f5-6ed8-420a-9bd3-ee59914d8cca",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "a0ee0d50-5251-4cf3-afe0-6073cdb1df03"
        },
        "item": {
          "id": "1ae1d8c1-178a-48d7-943d-f4d7c2934f61",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "792d72ec-0bad-488c-a84f-e6103f11682d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf81987-9307-496e-9536-439c0208dd99",
        "cursor": {
          "ref": "4d1dfec6-aa5e-44d2-88f3-223442950a38",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9eec3bc4-8685-46ef-a381-7b5bf1ef1266"
        },
        "item": {
          "id": "ccf81987-9307-496e-9536-439c0208dd99",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "041b0d02-f9ae-43cf-9391-9e390ca6eb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00df3b7-e958-4b12-878a-53cf7ed5f9d2",
        "cursor": {
          "ref": "fae8cb3c-ddb5-452c-ae11-ccb74040fd60",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "4cf53d3b-9f9a-46ed-b960-ddbe89fafd69"
        },
        "item": {
          "id": "e00df3b7-e958-4b12-878a-53cf7ed5f9d2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3c935f79-8623-4ab8-ad21-05e670ea0c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95758f63-31a7-42cb-ba3d-96bb6afd7b57",
        "cursor": {
          "ref": "27c1c3e5-66ed-472f-baa0-e62e4adaed0d",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9d4cd21b-4953-4f85-aa6d-3be492b4a91e"
        },
        "item": {
          "id": "95758f63-31a7-42cb-ba3d-96bb6afd7b57",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b57718a9-c7b3-443e-947a-81a5946c4b63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1799dc-049a-4fce-a0ab-f8fbff7a830c",
        "cursor": {
          "ref": "c7c09b7b-1b63-40db-96db-d6bb23c96548",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "ce990c74-f415-4c41-b92d-c60cec25487c"
        },
        "item": {
          "id": "2e1799dc-049a-4fce-a0ab-f8fbff7a830c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "37d98cf2-c451-4a48-bf4e-1d0133b47c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16f3df11-2a6a-42d7-ab45-d1364119dfce",
        "cursor": {
          "ref": "8eed6010-49b5-46ec-a85f-aea306ee52ff",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "54c0f43d-3c9f-4d7a-9731-e9cc6295f29a"
        },
        "item": {
          "id": "16f3df11-2a6a-42d7-ab45-d1364119dfce",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "df9a36e3-195b-4a78-8513-8134a88aa5ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2b89838-3316-49a5-bbcf-8fa046a3d044",
        "cursor": {
          "ref": "f08c72d4-3183-46db-80ae-6f037a7e3d45",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9c94ea6c-7ddf-43ad-8537-d97619e135ff"
        },
        "item": {
          "id": "d2b89838-3316-49a5-bbcf-8fa046a3d044",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5f96a1ed-46a6-4ae0-96d7-624aa9eb0cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1fa69f-415d-40f1-b2c6-fe2af8cac467",
        "cursor": {
          "ref": "0aa403fb-0352-41e6-812a-010d2188406e",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ea109e9a-c4d0-483a-9ce2-8520a42d2c21"
        },
        "item": {
          "id": "9b1fa69f-415d-40f1-b2c6-fe2af8cac467",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4a382dd6-9ed9-4062-8155-86c8fe877cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b738da10-4a7c-4177-aa25-8b72c8114306",
        "cursor": {
          "ref": "f65223e2-ccb3-4c63-8d03-b394cca90ead",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "dd6582ab-0ea0-46ef-bb51-94b47d546c53"
        },
        "item": {
          "id": "b738da10-4a7c-4177-aa25-8b72c8114306",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d71f268d-f7f3-4f01-ab68-7537edcc8ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8663b774-5fe0-4fd3-ae3d-bd524d5f7e58",
        "cursor": {
          "ref": "b76b29e5-2dfd-47db-a24e-5f2c9c84eecf",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "dead8cac-9bd1-4581-a6f8-1ad0f2b85eb6"
        },
        "item": {
          "id": "8663b774-5fe0-4fd3-ae3d-bd524d5f7e58",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "051be272-61fc-406c-940e-0b5d1c40a4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8e984d-d7c8-4d12-a540-fd0fae6e2837",
        "cursor": {
          "ref": "7374701d-4a67-4cc7-a4e6-efb050d7e168",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "aad8d2ea-e8f9-4f46-adee-2667e6e944b4"
        },
        "item": {
          "id": "ac8e984d-d7c8-4d12-a540-fd0fae6e2837",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "51c56746-3350-4f75-a1f8-44fbc838f0a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67687be0-8835-4e42-aff6-f247153c93cc",
        "cursor": {
          "ref": "fe3bde45-6ba9-4ee2-9217-6ac64db3ecf6",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f47c316d-dbb0-4f2e-9bcf-464b98594402"
        },
        "item": {
          "id": "67687be0-8835-4e42-aff6-f247153c93cc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "7bd54190-6786-44ab-bf6f-f6d0aad944da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051481ce-b17d-4e45-8726-ae2c6d790705",
        "cursor": {
          "ref": "965bc9f4-7ba9-4739-b8cb-b438a6e5ecfa",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "502e52c8-2824-4ee9-b4ec-4c9b8c528dcf"
        },
        "item": {
          "id": "051481ce-b17d-4e45-8726-ae2c6d790705",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5ff279d8-ac0f-428a-8d27-95503fde311c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40572276-a444-4a59-86af-f10712f3526b",
        "cursor": {
          "ref": "ed33fb46-b165-41fe-9180-24882530f858",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "73dfe94e-b40c-4814-b6a3-695e43475fb9"
        },
        "item": {
          "id": "40572276-a444-4a59-86af-f10712f3526b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "843f37e3-b3c3-4263-a986-32b54d244795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d663e9a4-f403-4400-9a4e-7fbebc311cd7",
        "cursor": {
          "ref": "8ffffe37-863c-4769-abb8-7e78b0045711",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a24230cb-1e49-4c20-bd29-9510b39ee9de"
        },
        "item": {
          "id": "d663e9a4-f403-4400-9a4e-7fbebc311cd7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5f6880c1-0038-4797-9ca8-7a3f995ae036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af31283c-47b8-40f7-ba5f-c757ba32af11",
        "cursor": {
          "ref": "482893d3-ccc2-4f8a-bf49-e86407475067",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "75f5ef32-8ced-426f-9db9-d35885d99754"
        },
        "item": {
          "id": "af31283c-47b8-40f7-ba5f-c757ba32af11",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ea0974da-d22c-420c-b310-f3a87b78e149",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94dd31c6-7e3a-4f82-a690-a01c6b3e3811",
        "cursor": {
          "ref": "423601cd-666f-4b57-b9a6-451a4fb41fbd",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "19457a9c-d239-4d24-b5fe-5eaffe6dd9da"
        },
        "item": {
          "id": "94dd31c6-7e3a-4f82-a690-a01c6b3e3811",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "513d6681-72bc-459a-91b8-9da8a60818be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429ca8ef-8ac2-4d80-86df-12489c5b5dd9",
        "cursor": {
          "ref": "3e5d0f2b-f5b9-46a8-b2e7-d218dc516ffc",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "785de059-fd63-4f77-8a0f-cd83247ae447"
        },
        "item": {
          "id": "429ca8ef-8ac2-4d80-86df-12489c5b5dd9",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "923ca713-84ca-48f5-93c1-008a308e4128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224abc0a-f6e8-4392-96fd-f02b54cbd41b",
        "cursor": {
          "ref": "44036993-8d57-40ee-9299-97bcdc2c7162",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d9dede9a-daa2-4490-8578-13444b0d0386"
        },
        "item": {
          "id": "224abc0a-f6e8-4392-96fd-f02b54cbd41b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5da00398-c1d5-4848-a6d7-3cfb6814aaf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36181b4f-1965-4aa5-a78f-e876d6d2d493",
        "cursor": {
          "ref": "16986234-9c11-404e-ae26-1fc395866369",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fa4365e6-8c72-4b3f-9679-e5103a985cf9"
        },
        "item": {
          "id": "36181b4f-1965-4aa5-a78f-e876d6d2d493",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e14b85d0-2395-40b3-a098-5a5609af87ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f68efa48-d865-49c3-8d3f-3088c893f509",
        "cursor": {
          "ref": "e396b467-637f-4c83-9a47-384ff3f4b492",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7616d6e6-1ca9-4275-b3ab-689531a7332f"
        },
        "item": {
          "id": "f68efa48-d865-49c3-8d3f-3088c893f509",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a11c6dd5-2d45-4d27-a949-72de8987e85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c45028-c66c-4e54-9e47-f0b65fb14ff9",
        "cursor": {
          "ref": "d4564df1-65bb-4444-a350-4f6f2b0e8e20",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ab5e2410-61d0-4b68-ac36-d82d590c5bdb"
        },
        "item": {
          "id": "27c45028-c66c-4e54-9e47-f0b65fb14ff9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4d53ac98-0780-4787-9e75-d2caaa599683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112e75b4-a400-40a2-bee0-1001cef29d82",
        "cursor": {
          "ref": "756b7f9c-c35b-42c5-a8f7-d4750445472d",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3a98f0a3-c21f-4838-8162-037282c39f80"
        },
        "item": {
          "id": "112e75b4-a400-40a2-bee0-1001cef29d82",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "d4eb9886-a45d-457d-ade3-ac1fea33098d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdeec0e-c235-4c9c-ac46-f72424045f30",
        "cursor": {
          "ref": "0570c140-ba03-4cb3-b83e-d5bcb77ab9cc",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1320f80a-61cc-4c3f-b0d1-7e870d9d120d"
        },
        "item": {
          "id": "bbdeec0e-c235-4c9c-ac46-f72424045f30",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "467f5636-1d76-4843-92fa-9fb40d031e68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba52575-ae16-40c3-8454-72803293421c",
        "cursor": {
          "ref": "911f7a90-203c-4e77-a667-dab2e2607e18",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "09dde3ed-7496-4258-8078-46e204bc446a"
        },
        "item": {
          "id": "3ba52575-ae16-40c3-8454-72803293421c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "29fde519-3d80-4eef-899e-ad23fa19fcbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ba2298-5157-4003-b550-9945e8a64d86",
        "cursor": {
          "ref": "e10e269d-b47b-4262-8e9f-4bdfa8054337",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8907fb0a-ebc9-4684-8532-533ed4a919f8"
        },
        "item": {
          "id": "f4ba2298-5157-4003-b550-9945e8a64d86",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "25cc3259-1fec-4693-9ea1-c50930709eb4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7d8598-3a21-45e7-874d-76af6b284961",
        "cursor": {
          "ref": "4fcae0aa-78e2-4063-be30-4e1cf00de1d3",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bd6e6d33-b95b-4fb3-89a1-2f9a482ec35e"
        },
        "item": {
          "id": "9f7d8598-3a21-45e7-874d-76af6b284961",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "6bb94db8-63e3-4cd0-a4d7-21ede58a2cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "a3043cd4-397b-422b-a792-93df0cd39cc0",
        "cursor": {
          "ref": "c429939c-a32f-42df-aa4e-e989a0c89886",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e44b219f-cf2f-4769-92be-05bf58f23e25"
        },
        "item": {
          "id": "a3043cd4-397b-422b-a792-93df0cd39cc0",
          "name": "credentials_issue"
        },
        "response": {
          "id": "82e52e87-ec67-4dae-b8ac-93d0a81b9316",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbc725a8-cd20-496b-b292-fee2ff334b59",
        "cursor": {
          "ref": "e5d39b81-d3b4-4ae7-a0f6-954ec9f97118",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "acdb958b-614e-4535-b9cd-e086caf4b58a"
        },
        "item": {
          "id": "bbc725a8-cd20-496b-b292-fee2ff334b59",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "17a3cf24-1da6-44f3-aaef-6c39978e6ba7",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40adaaeb-3bdd-49e8-b876-43e7c7f64708",
        "cursor": {
          "ref": "83c9ca77-78e9-4778-b59b-94200ed18eda",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b6daa149-090b-4cde-969b-054fef7e78f0"
        },
        "item": {
          "id": "40adaaeb-3bdd-49e8-b876-43e7c7f64708",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "6a08219e-83ed-4c57-ad11-75b05887e2ec",
          "status": "Created",
          "code": 201,
          "responseTime": 425,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b6b0128-53ef-4e07-917f-4e011e8bd62a",
        "cursor": {
          "ref": "ae3c7fc9-d5c8-4e29-a5c9-c88bbe51d881",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "419a8f30-4874-49d5-a3b8-54903ea89f27"
        },
        "item": {
          "id": "5b6b0128-53ef-4e07-917f-4e011e8bd62a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "72300e27-48e0-4576-be95-e80a55a9184c",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbadaf96-b225-425b-b890-5cc56f1f098d",
        "cursor": {
          "ref": "4011d7b8-dc68-4f92-a189-1fba71641902",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0f82c452-a57e-43e3-ae42-3fae5f1d449a"
        },
        "item": {
          "id": "fbadaf96-b225-425b-b890-5cc56f1f098d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a4c56121-a0cf-47ae-978a-4f8d86bca9b4",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-29T00:36:25.986Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-29T00:36:25.986Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9d331c8d-cb71-4dbf-a73d-86fd943bfe9f",
        "cursor": {
          "ref": "b7c976fe-d018-4188-a687-669f0da73bc7",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "953ce44b-ebee-454f-b814-98c995cb309a"
        },
        "item": {
          "id": "9d331c8d-cb71-4dbf-a73d-86fd943bfe9f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b89724f6-b88a-486d-a5dd-24946de31041",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d096dc37-eb6c-4d3a-8650-6ff3e676bdb8",
        "cursor": {
          "ref": "6b89a2e0-a147-415b-89f2-1ea24524f63b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "16519bf4-28a5-469c-9fbb-c2d946cf7c7a"
        },
        "item": {
          "id": "d096dc37-eb6c-4d3a-8650-6ff3e676bdb8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "01f42045-56ff-4f13-9d3c-4e20ae13e17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a41a536-2673-4c67-b4e6-36c3f9b52fb9",
        "cursor": {
          "ref": "2e954502-bbbf-482a-b684-6d0e882cac3e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "50d61ce4-eebe-4120-a1a6-b712380da858"
        },
        "item": {
          "id": "7a41a536-2673-4c67-b4e6-36c3f9b52fb9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d27ffd46-b0ed-449f-bb36-d0b3347bf189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2eef0c6-3ebf-4e3d-bb14-6306098ebe9e",
        "cursor": {
          "ref": "5bfb0797-96cb-4bf8-8280-d9401a7ab3b7",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "38e40169-f93e-4ebf-8dc1-0257ca7cd7a8"
        },
        "item": {
          "id": "e2eef0c6-3ebf-4e3d-bb14-6306098ebe9e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "907d1d15-ab9f-481a-9c32-c4b14b003b05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2730c57e-97ba-4d33-b090-72231f17f16c",
        "cursor": {
          "ref": "03e3fbab-04a1-4994-9bd1-4192e9f11df6",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "508dab12-cacc-4bab-a8d7-d317468005d8"
        },
        "item": {
          "id": "2730c57e-97ba-4d33-b090-72231f17f16c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5f82f991-7a33-4f7e-b268-1c71fe7ea35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "952c896c-ff9a-4615-9ba5-d8e82b435250",
        "cursor": {
          "ref": "1f8d8ea5-f6c9-497f-a2ad-555f77336366",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c258c89a-cf24-41e5-b793-9ff016bf42a4"
        },
        "item": {
          "id": "952c896c-ff9a-4615-9ba5-d8e82b435250",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7e7babd7-c1a5-4950-8d10-1bb1d1b62b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6419d2b2-208f-4fd3-a0c4-6d24454e5027",
        "cursor": {
          "ref": "32d5b376-bbd8-4a91-8e52-9f22f83f3592",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "3ed4fb25-e28b-4bd8-b348-5b4061043b8e"
        },
        "item": {
          "id": "6419d2b2-208f-4fd3-a0c4-6d24454e5027",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fa257987-b984-4c03-b92e-cedc0838296e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5317e720-f4cc-4830-ae8d-8e77b39f6f01",
        "cursor": {
          "ref": "b886ce64-1bbe-458f-b314-d9f7bd071e9b",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "41b82e69-eba4-4e68-bd76-de34078eab85"
        },
        "item": {
          "id": "5317e720-f4cc-4830-ae8d-8e77b39f6f01",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "45d580ae-0eb5-4cc7-ac72-da0aa049b366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed0e020-a0ee-4d2d-bb80-27231199ebb3",
        "cursor": {
          "ref": "bedcaf89-834b-41e5-9248-110e557ce65e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "c3d3414e-c8d7-44a6-8415-0464f3105f6f"
        },
        "item": {
          "id": "1ed0e020-a0ee-4d2d-bb80-27231199ebb3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "114de033-fc4a-4044-9d05-b94d02d33a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a9962b-e36c-4985-b0f3-11a8e907711b",
        "cursor": {
          "ref": "73800533-39e7-4524-acdd-e55e3a12ab7f",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "ae4441eb-ab51-4e0d-903b-481b319ab8c2"
        },
        "item": {
          "id": "80a9962b-e36c-4985-b0f3-11a8e907711b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2173d550-b293-428b-a3c5-e7ea6f5647ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b2a148-fc81-488e-a47d-09978283e9fa",
        "cursor": {
          "ref": "ac1a0d96-3eaf-404e-ab81-bd185c1a9867",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3ab16102-41c2-4e6a-aacd-093a81556647"
        },
        "item": {
          "id": "02b2a148-fc81-488e-a47d-09978283e9fa",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "26f686e1-5884-40ca-b690-cecfc6947d69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ed9326-7ef7-426b-afab-e9b8abc8b140",
        "cursor": {
          "ref": "417cdb6e-2662-4593-bdf2-68c1020c507a",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "4cb791a1-aae8-4d22-b9cf-c2f1b1227317"
        },
        "item": {
          "id": "43ed9326-7ef7-426b-afab-e9b8abc8b140",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5d87ad9f-23e9-4b81-9128-f9924d273235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eae6817-a66c-40d8-9d25-0958fa202853",
        "cursor": {
          "ref": "71b9a792-c6eb-4d07-aaf3-45ca5a9b975e",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dc1b9522-1424-42a1-baab-224ca883161d"
        },
        "item": {
          "id": "4eae6817-a66c-40d8-9d25-0958fa202853",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "eb78e4cd-572f-4bbd-a81e-461a4b73f5eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8cdf1a-6deb-4512-8cb1-708aaf226981",
        "cursor": {
          "ref": "d2035299-adfe-48b2-8865-4d39518d1dcd",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b2787844-bec7-4484-bcba-a8a88208ebd1"
        },
        "item": {
          "id": "df8cdf1a-6deb-4512-8cb1-708aaf226981",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "433672bd-8f34-4b5c-b4b0-c0633f063616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95f79176-beea-4713-9b61-4388f7477122",
        "cursor": {
          "ref": "15f6c5ec-54f7-400c-85c1-bfa7be15f1da",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "1857dada-88f4-4966-8fcc-863fc85745fd"
        },
        "item": {
          "id": "95f79176-beea-4713-9b61-4388f7477122",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ca7d7696-1bf1-4c38-b5f3-efa5806fb25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b492b8-d320-4ea1-921f-cc27c6f9717e",
        "cursor": {
          "ref": "f6116850-2f11-45f5-8569-2e5ee642c820",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "23ca1596-9480-4ca4-8333-150cf282514b"
        },
        "item": {
          "id": "b8b492b8-d320-4ea1-921f-cc27c6f9717e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "72959955-837e-417e-a019-d2cdaf552b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab027da1-2873-4eca-9e6e-63dbcdece391",
        "cursor": {
          "ref": "919d1b88-5401-42ce-9ef7-8446d48960c9",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "92364ed8-cb86-4ff4-930c-13ee1d01bfa5"
        },
        "item": {
          "id": "ab027da1-2873-4eca-9e6e-63dbcdece391",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "435d341e-76b5-43e9-9990-d8de188cc632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5648519d-529b-4ca1-a6bd-dcf92211eac7",
        "cursor": {
          "ref": "94aad662-8a32-4c54-a91d-72a6f9c8e3f4",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2bde2d2c-c823-4dd2-8da6-1f0eaf1330bf"
        },
        "item": {
          "id": "5648519d-529b-4ca1-a6bd-dcf92211eac7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e33edd22-002f-4e41-be02-3b0a6d368a7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a71c018-ec0a-4419-82c4-f5813fd51931",
        "cursor": {
          "ref": "ede0df6d-7e50-4b7c-bf15-f685a289f570",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2ca4c26c-ca75-41ab-983c-2fbd763c3337"
        },
        "item": {
          "id": "1a71c018-ec0a-4419-82c4-f5813fd51931",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "7ec1598c-64da-40e1-9833-092746996795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266a2ce9-cdf8-42cd-8fcc-de2e8e95b4ab",
        "cursor": {
          "ref": "b2a7d71d-01c2-4f39-8258-ba48cffa5a98",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "8eb288eb-06e5-4509-8c15-6947c15a783b"
        },
        "item": {
          "id": "266a2ce9-cdf8-42cd-8fcc-de2e8e95b4ab",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8a5e4c45-2345-40bf-b9fa-4509f628e62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1a0a4c-ec30-4f62-a6e6-4c339c733d67",
        "cursor": {
          "ref": "efe0bd8c-9bfe-4d67-824d-6a25fdd5b2d0",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "acd7b553-e51e-4fa6-81fd-473cce32d07e"
        },
        "item": {
          "id": "bb1a0a4c-ec30-4f62-a6e6-4c339c733d67",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4a6e9183-1841-461d-bd18-21a211ecffc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09003346-b395-4359-8995-c5716bdd4624",
        "cursor": {
          "ref": "a56358a0-6741-4e88-83ed-9aa1125ce740",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "64eb3e9e-3d66-47f1-8598-758633e8ec1a"
        },
        "item": {
          "id": "09003346-b395-4359-8995-c5716bdd4624",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a7c0fa51-6c33-46cf-9739-40e67f60a360",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f1321a-44c2-4f45-b0de-2e90c4164bb4",
        "cursor": {
          "ref": "df1ad094-9f37-4fea-8993-90d11b637d17",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "23e27a5c-4435-4542-a823-1502f4439a86"
        },
        "item": {
          "id": "70f1321a-44c2-4f45-b0de-2e90c4164bb4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6a8c5120-2ded-497a-a027-a67a76ee236a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe574eae-8082-4130-bb89-400af14a4f9d",
        "cursor": {
          "ref": "75c1a556-06e1-4f8f-accb-f4af227032a9",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4a113fb7-2142-4291-9c39-5c05c25a8fe0"
        },
        "item": {
          "id": "fe574eae-8082-4130-bb89-400af14a4f9d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e955d357-fa23-44e5-bf66-0f93676760ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bb0abde-791c-4080-a64e-154c097af904",
        "cursor": {
          "ref": "21764366-0096-496a-a231-a7a79ef5156b",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9e115e0d-019e-45d3-8d4c-681b6c7b645d"
        },
        "item": {
          "id": "6bb0abde-791c-4080-a64e-154c097af904",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b02b3a1e-7c40-4610-ad0b-3a446ff1eff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f56f07f-5da4-4015-a2c0-6c318ce1ede9",
        "cursor": {
          "ref": "8ad58e46-d803-4639-acbf-295c0ba5e1a1",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cc3cdc48-dcda-496b-b04f-1efef1332ca4"
        },
        "item": {
          "id": "8f56f07f-5da4-4015-a2c0-6c318ce1ede9",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "26861400-9edc-4b7c-a1ce-12e9bda3673e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf74aa7-a927-4978-927d-4d7ed75166fc",
        "cursor": {
          "ref": "64abe03f-cb49-4110-934b-68e0ab256bc5",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "9a6c4370-349d-4bed-aa90-bb58c273e131"
        },
        "item": {
          "id": "4bf74aa7-a927-4978-927d-4d7ed75166fc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7b6ac86e-d05a-445b-9dee-adf454928367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927c7828-e45d-4e01-a67b-f08f237dc8e5",
        "cursor": {
          "ref": "212f9a9d-2000-40bb-a9cb-5acff561719b",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "00167d8f-2920-4eea-a53a-a21dc6500bc9"
        },
        "item": {
          "id": "927c7828-e45d-4e01-a67b-f08f237dc8e5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2260e5b4-188a-4d88-a047-3fb18fa4d07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842d137e-4a33-4f74-ba16-837b36e6969d",
        "cursor": {
          "ref": "3dc02d57-5024-4768-a087-ee42d04a8247",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cb5e9023-62bd-48f2-b141-75dc7da1931c"
        },
        "item": {
          "id": "842d137e-4a33-4f74-ba16-837b36e6969d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b4479b60-af0b-40c2-898c-873e4ff10c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c70c8f07-9c2e-41fc-b349-03a68a6b623b",
        "cursor": {
          "ref": "a6443765-9891-4f1e-9b7f-7bea0cba9083",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9ac830da-b079-4398-93a9-d65301e7c993"
        },
        "item": {
          "id": "c70c8f07-9c2e-41fc-b349-03a68a6b623b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b1c60a45-80b6-40c4-8189-a10096c54ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2507fb6-166f-49ec-8ad8-220f1e039cc7",
        "cursor": {
          "ref": "cc0dfd21-4921-459b-8532-1ade582db302",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4b503e5b-c98a-4440-b63e-88e707a9fbfc"
        },
        "item": {
          "id": "b2507fb6-166f-49ec-8ad8-220f1e039cc7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "01bc7cfb-a8f3-4fb9-8654-bfba5e3f96a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26804685-d696-4640-a6a4-a06f6951cc6c",
        "cursor": {
          "ref": "3c1daefe-6e7f-4542-9ff1-d2c8464874fe",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "46b95432-5bf3-451d-b457-f01e7821431f"
        },
        "item": {
          "id": "26804685-d696-4640-a6a4-a06f6951cc6c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "93d57742-c345-4984-9b0c-3bc11390063a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbd371e-bdcc-42c7-b911-373a9116e76e",
        "cursor": {
          "ref": "a517e375-9eb9-42d8-96de-3d26c4a5ec2a",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9e0b1b0a-3642-4b18-9dbb-fdce887fb852"
        },
        "item": {
          "id": "acbd371e-bdcc-42c7-b911-373a9116e76e",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "50a93845-5ece-4857-b571-915207bb04c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dbd9f0e-ed43-4595-91a7-cdda1981571b",
        "cursor": {
          "ref": "79b2d9c1-dd87-433f-9e21-5b917bd1217f",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f8563f84-b1ca-46aa-8a8b-f58388afcbf7"
        },
        "item": {
          "id": "3dbd9f0e-ed43-4595-91a7-cdda1981571b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5247930c-3d0b-48c9-917a-623aba2d6056",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8661db-7531-4b9a-b35b-6c6f22860ae0",
        "cursor": {
          "ref": "ab4afbf5-e7a3-4041-9869-ba5d1245af3b",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3b024e6e-4b5c-4d16-b87f-821ada26eaae"
        },
        "item": {
          "id": "ea8661db-7531-4b9a-b35b-6c6f22860ae0",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1d41917c-deec-435a-b86d-cdc295304b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17947f61-9f1e-45be-9cf2-692831dc6255",
        "cursor": {
          "ref": "d6d74760-b1f5-430a-9879-42b2ee194fbb",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3545cc74-a360-46b7-91b3-915889d2b7c2"
        },
        "item": {
          "id": "17947f61-9f1e-45be-9cf2-692831dc6255",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dd4a6faa-95b6-48c8-b440-aeb48b0a87e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86711250-1310-4453-bcd3-deb721419fb9",
        "cursor": {
          "ref": "48d947e4-0cbc-4202-8766-e7a0229fc0b3",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9b898f69-0bf2-49bf-b5a0-74179e509c8f"
        },
        "item": {
          "id": "86711250-1310-4453-bcd3-deb721419fb9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ce238d82-7f8b-4040-a7f6-27ab33dd5f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ae51129-6c62-49ec-a9cd-8f41d1f59d30",
        "cursor": {
          "ref": "74034857-9643-4127-b147-067fff2a02b6",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bf7e727d-d028-4633-943d-b45c465fb0d6"
        },
        "item": {
          "id": "2ae51129-6c62-49ec-a9cd-8f41d1f59d30",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "0513e94e-9379-4073-ab89-b4a5d667d530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f896e0-ce35-4f76-9c65-3be4900b4555",
        "cursor": {
          "ref": "574ca99a-851f-453c-a3ff-988af1b3514b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "eeee3fa5-71dc-4039-a517-30129203e90b"
        },
        "item": {
          "id": "89f896e0-ce35-4f76-9c65-3be4900b4555",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cba5f800-2440-49be-868a-c0c187f29fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fa584a-b518-43b0-8f3a-1473dbb690d8",
        "cursor": {
          "ref": "52bb1662-c1c9-4526-81fa-725497340eb5",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "95f7a6e1-c251-4ff7-9f1e-8abdb4c63b1c"
        },
        "item": {
          "id": "99fa584a-b518-43b0-8f3a-1473dbb690d8",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5c0fe13f-e64e-4dbf-990d-e75e79095233",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 181,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258f0ccd-3c86-4ecd-829a-88d0af416367",
        "cursor": {
          "ref": "be057179-f869-470a-af72-85986ba1a33b",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6abd5e7c-fd24-46bd-a275-d6be178cf816"
        },
        "item": {
          "id": "258f0ccd-3c86-4ecd-829a-88d0af416367",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "78020803-6396-4896-b863-c2d06922d883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e31c8dee-de98-40de-9da9-b46a9baa1b29",
        "cursor": {
          "ref": "7b4ea990-c6b4-4484-a2f0-1446015e3a00",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "44ad0daa-bfdc-45c5-acfc-b5726ede7693"
        },
        "item": {
          "id": "e31c8dee-de98-40de-9da9-b46a9baa1b29",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ac1a2025-72e2-4e26-b5e1-f3fc363c7f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16fca245-89c6-46eb-a043-4b02c7a98949",
        "cursor": {
          "ref": "3b9441f6-b24e-476b-a186-7076d5b3bafc",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "dbfea00f-88a5-4063-af24-fc9f11d91900"
        },
        "item": {
          "id": "16fca245-89c6-46eb-a043-4b02c7a98949",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ae30a35b-b43a-4acc-8a60-8848d908fed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6510e14-8433-4608-8ce1-d76808e22cbd",
        "cursor": {
          "ref": "c4ed0fe3-665e-4072-8aa4-761daa31b2f0",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c5cfb9b9-6b15-49a0-861a-ccb3f31f182d"
        },
        "item": {
          "id": "f6510e14-8433-4608-8ce1-d76808e22cbd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "be94e4f8-f4b6-4777-9450-234052ced687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52179fe5-83ea-411e-b668-ae6748db0c2e",
        "cursor": {
          "ref": "5b7e4a2b-df5d-47a6-a236-0cdf99557504",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8d13b7d4-d148-454c-a95b-3f04cdc1f402"
        },
        "item": {
          "id": "52179fe5-83ea-411e-b668-ae6748db0c2e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a82f45fa-632e-4ee4-8b07-fdc28dad9bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a62ef6c-f0f3-4db0-943d-831898fac3e9",
        "cursor": {
          "ref": "dd5ca76b-dc57-493e-9c54-8bdcab35e640",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7b124893-6425-4ada-ac22-e0ccc2f8cd1a"
        },
        "item": {
          "id": "5a62ef6c-f0f3-4db0-943d-831898fac3e9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "19d1724d-ad71-4e7b-962c-de7df44f498e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0087cb1c-e15f-49c1-963f-c0fdeb5f9655",
        "cursor": {
          "ref": "06309f23-4070-4a27-8cf9-f222c258300c",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ef58c069-9a5b-4765-b90a-03c335e8c249"
        },
        "item": {
          "id": "0087cb1c-e15f-49c1-963f-c0fdeb5f9655",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "798c2ce7-13f6-4152-8dc7-6082ed4cee81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f64ca6fd-d494-4b59-b8e9-01dc37dd2fd1",
        "cursor": {
          "ref": "ed2a2b5b-80cb-43e7-8ab5-9ff6d7fc8742",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "6a907b7a-8551-4226-914d-23297997aeb8"
        },
        "item": {
          "id": "f64ca6fd-d494-4b59-b8e9-01dc37dd2fd1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "099610b1-10b0-4c11-bcfa-280d4d73e2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e35fd4-5d17-41e5-a69a-25618227e79c",
        "cursor": {
          "ref": "b3e3d012-e7ae-4fd3-b45b-2e5ef8021133",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "96cc6e03-e67f-4e68-954d-f182029392de"
        },
        "item": {
          "id": "30e35fd4-5d17-41e5-a69a-25618227e79c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f5c5b83d-a13a-4ed6-962e-927617ae47bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf5a067-9433-43f7-b971-1825fb16e4ab",
        "cursor": {
          "ref": "022609dd-b471-4174-8df0-795ca3c44582",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4ccd29d9-d6b6-4c1c-8973-b0ef97eff173"
        },
        "item": {
          "id": "2cf5a067-9433-43f7-b971-1825fb16e4ab",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0d6f7d7b-51f9-48da-9f65-8ec76a0a28ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acb7a268-599d-4abc-85f8-b8dd1b458aa4",
        "cursor": {
          "ref": "53c7ec55-a1b0-4563-87e9-8a7d1bd96276",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e6a23c4f-381f-4a47-9b44-ce44290f04f3"
        },
        "item": {
          "id": "acb7a268-599d-4abc-85f8-b8dd1b458aa4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4a173cad-130f-445c-b8e0-f19d3d33ee92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44eff3dc-9978-4f1f-b6d1-312457be7a13",
        "cursor": {
          "ref": "1ca1089e-6efa-417a-a3ff-5ca452a7fde2",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "92d28327-f806-46c1-8599-9dba81a2cecc"
        },
        "item": {
          "id": "44eff3dc-9978-4f1f-b6d1-312457be7a13",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "70da8d64-7ebd-474f-9ea6-3364cc4c4d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d62995a1-ee49-4b48-9de7-9dcd8b112110",
        "cursor": {
          "ref": "bb7e7436-bdfd-440e-bf77-b6d3b2ab693f",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a2c4fd0c-3d80-4922-a04d-1057f93000e5"
        },
        "item": {
          "id": "d62995a1-ee49-4b48-9de7-9dcd8b112110",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "71097ee3-0334-4fff-abf2-cd0ed4b48b3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70e5621-f4c0-4e5d-ae46-bbe058d3979b",
        "cursor": {
          "ref": "7b9144c7-f9b4-452d-b718-4adc2908e438",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5e57df07-2fcd-464f-a7b0-e2e89fc47f3f"
        },
        "item": {
          "id": "b70e5621-f4c0-4e5d-ae46-bbe058d3979b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7ded1276-84fc-4503-aaf8-123f7c9c66fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf7ead5-6030-4073-be68-e8556746cacd",
        "cursor": {
          "ref": "6170b772-e6f8-48de-a4ba-f4232b4770bc",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "fe925f81-98bc-4196-8253-a07e3e56d551"
        },
        "item": {
          "id": "8bf7ead5-6030-4073-be68-e8556746cacd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "31bcd470-84cc-4a47-94d3-2ef58855628b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbc1757-5aed-4689-a010-1331f73ef7a3",
        "cursor": {
          "ref": "436f2c77-6035-4a50-8682-85da7b7a8021",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9b4e1dfe-19f2-4262-92bc-be3b40960d05"
        },
        "item": {
          "id": "dfbc1757-5aed-4689-a010-1331f73ef7a3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "54522cc2-0bfd-4b3c-b19f-6e15719c0db2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86061a83-4ac0-4e24-9f47-4677e14b5b58",
        "cursor": {
          "ref": "6a92f7e7-b579-4a31-a628-66037cc4df4c",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "beddc3c7-6fcc-45d7-beac-74876ce7887a"
        },
        "item": {
          "id": "86061a83-4ac0-4e24-9f47-4677e14b5b58",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "c99bc496-2448-4892-b2f7-21a9153d96a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e527bb35-6c3d-48dc-b7b5-635800413d1b",
        "cursor": {
          "ref": "0704f3f8-d587-473c-8941-9393899b115e",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "1b7e7476-f0b7-4d45-adec-beae84818bf5"
        },
        "item": {
          "id": "e527bb35-6c3d-48dc-b7b5-635800413d1b",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eb0e620a-5eb8-4e01-bf86-1b3f2b3752ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40e135aa-c2d6-41be-9e14-098befd3fd2a",
        "cursor": {
          "ref": "65c12a2e-135e-4cc5-bee5-9ae715925501",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ad1ee4a1-f544-45a4-97d8-b55b11ce4b0a"
        },
        "item": {
          "id": "40e135aa-c2d6-41be-9e14-098befd3fd2a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c9b9d8de-2876-4c5d-b101-738186004ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f09c43b-ea73-4fe3-bbab-e3b2d52a3723",
        "cursor": {
          "ref": "53bebb71-b161-47cb-8ba8-d7b462b87123",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d206f54f-462a-44fc-b2eb-69643f79cb2e"
        },
        "item": {
          "id": "6f09c43b-ea73-4fe3-bbab-e3b2d52a3723",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "cd3229fb-5d86-4e05-b711-fd6e76506b7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed4a52e-97dd-49b9-b2d0-da55a02851e2",
        "cursor": {
          "ref": "87f6edd2-23ee-45a8-a973-30d5db2692d1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ff630588-9729-42b6-a75e-48eed07904e1"
        },
        "item": {
          "id": "1ed4a52e-97dd-49b9-b2d0-da55a02851e2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1a663629-6511-4536-ac42-17a6ab14ab13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be45825-ee7d-4ffc-b488-ca37f8442001",
        "cursor": {
          "ref": "de9a056e-2d48-477b-b481-007d6de6afff",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "6abe1e3d-c43a-48b3-8a25-657ac09bacb9"
        },
        "item": {
          "id": "9be45825-ee7d-4ffc-b488-ca37f8442001",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "268c3891-0652-4a1c-ada7-220b0050cdc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf0c0d2-bd64-4a4b-b487-fdf62d3695e4",
        "cursor": {
          "ref": "920268f5-6379-48eb-a53b-19f9ceba597c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "73e2b5da-f511-49ae-8467-e23834292192"
        },
        "item": {
          "id": "4bf0c0d2-bd64-4a4b-b487-fdf62d3695e4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e288c42b-4bb8-4a77-8a4b-02f90d04986b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62930ea0-5bd8-4ba3-ad86-ba9295466cf1",
        "cursor": {
          "ref": "6e1b998b-3020-403a-a1ec-b3b89c37b213",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1360c5c0-f53f-47f2-adbe-f6fc28a1a68b"
        },
        "item": {
          "id": "62930ea0-5bd8-4ba3-ad86-ba9295466cf1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "579fc24a-60ba-4c50-bcaf-e187c715c92f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d2c063-cc78-4c27-b882-116e7f3f4629",
        "cursor": {
          "ref": "26e7c3ad-0665-44ef-9f76-8b192792def0",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c8881806-0378-4a8d-9afe-149e2a7d5249"
        },
        "item": {
          "id": "26d2c063-cc78-4c27-b882-116e7f3f4629",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "59b845b2-719c-4bea-a366-d7ebb72d5215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1dea69-35f7-43a9-bb8b-7ab7313fe585",
        "cursor": {
          "ref": "e7f427e0-cb40-44c2-80ed-46bf1ecc16e9",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "aeffade4-588b-4d1f-a1a0-fb2244144eec"
        },
        "item": {
          "id": "7a1dea69-35f7-43a9-bb8b-7ab7313fe585",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "9b483efc-3c6a-475e-83b6-22c86c6df9a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfab7bdb-73e4-4732-bd03-83036d8f8cb8",
        "cursor": {
          "ref": "af26b85e-d960-43ac-aed3-6ce29a426e48",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1efc2a96-04de-4d80-99ff-655c9918a24f"
        },
        "item": {
          "id": "cfab7bdb-73e4-4732-bd03-83036d8f8cb8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "dd963e69-6500-4e0f-a050-772d593298e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cd9c576-ea5d-49f6-8d81-c623403efaf8",
        "cursor": {
          "ref": "5577ecc6-504a-4bbf-b972-610798c056f4",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c9ab809e-e62a-4849-b11c-22cb864e6c84"
        },
        "item": {
          "id": "9cd9c576-ea5d-49f6-8d81-c623403efaf8",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d085cede-2f9d-4ba9-83a6-2ab6598b0849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61fd332-e8cd-4ca3-bd96-b804e0854ad3",
        "cursor": {
          "ref": "03e2e4cc-98d8-4e8a-8c7c-f7112a5136b5",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4ff33172-10a8-46db-8615-625e37a2714b"
        },
        "item": {
          "id": "f61fd332-e8cd-4ca3-bd96-b804e0854ad3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e8f638a0-462d-403b-ac59-a637bbe9fc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15c0da2-d1ec-45be-902b-3fce03c43025",
        "cursor": {
          "ref": "1ead3f3b-d093-4158-928f-04e48fc244c6",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3794baeb-044a-4f4d-96ae-9277beea68bb"
        },
        "item": {
          "id": "a15c0da2-d1ec-45be-902b-3fce03c43025",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c47de537-0815-4ed9-8cb5-71aab4ca081e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67a9fd1e-ecf1-4981-9624-8a80c0465b1c",
        "cursor": {
          "ref": "5464987a-9f79-448f-8459-2abfcf14eeb9",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c5d067bd-72ec-4e33-88cb-57e17ea629a9"
        },
        "item": {
          "id": "67a9fd1e-ecf1-4981-9624-8a80c0465b1c",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "29dcc9b6-9c39-4592-bbab-8e940709a42e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1f9baf-fb51-422e-8ef1-c1fdb2789467",
        "cursor": {
          "ref": "888f3af9-b66d-4bc6-9b06-d020b6b0129f",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "8f3cf968-fa36-4ce8-b0e7-2918ea77245c"
        },
        "item": {
          "id": "0f1f9baf-fb51-422e-8ef1-c1fdb2789467",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "68558ae2-1be0-4965-8956-80ff2d73f603",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e85576b-fa75-4bef-9be9-8c2fe73eac4f",
        "cursor": {
          "ref": "bba1e7fd-4686-4e66-b9a4-860e862ee4ed",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "bf776f1f-a2d0-4787-a710-c1f47c55e598"
        },
        "item": {
          "id": "7e85576b-fa75-4bef-9be9-8c2fe73eac4f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "affaccd7-6790-46b3-abf3-3aef81ca7527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "189b4210-9f4a-49bf-9fe1-0c121a90aad9",
        "cursor": {
          "ref": "5bc019f1-95f2-4eab-951f-3ece19123f6f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a63d1235-9ec1-4b07-941c-20527ed34bc2"
        },
        "item": {
          "id": "189b4210-9f4a-49bf-9fe1-0c121a90aad9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "bdb54116-826f-4c8f-90a9-8eb8c2f6e32c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d8ac3de-6f99-485e-ad53-17f8e156795d",
        "cursor": {
          "ref": "c8a36f38-9447-401f-ae1e-c7ba73188c29",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "39488eac-aa6b-4712-98a7-ac4c4fe9ed7f"
        },
        "item": {
          "id": "3d8ac3de-6f99-485e-ad53-17f8e156795d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d2905247-eeb1-4a6b-9719-5c9ebc071175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb47b573-7e98-4c85-ab4f-7a8e5bbd4f96",
        "cursor": {
          "ref": "966747de-aef5-45e8-b829-f6797fbedeee",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3012661a-31c4-49bc-b8d3-8a49477d9104"
        },
        "item": {
          "id": "bb47b573-7e98-4c85-ab4f-7a8e5bbd4f96",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cc97eb6c-45a6-45b1-9fa9-d59ad5b1be16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a00066c-f798-4407-81ee-ebc66f06d0e5",
        "cursor": {
          "ref": "0b635ad2-af8b-444a-8846-db2562593f08",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6d1149e4-d408-405d-aaf2-2c84c2300036"
        },
        "item": {
          "id": "1a00066c-f798-4407-81ee-ebc66f06d0e5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8fee2e2f-e566-4b3a-b482-1ba56084e33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59185ed-671d-4678-b0a2-fed493e18b9d",
        "cursor": {
          "ref": "2dcc6974-b6aa-4b0e-91cb-e198fdcb8876",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "270342bf-613b-4d89-817f-204d57137e8f"
        },
        "item": {
          "id": "d59185ed-671d-4678-b0a2-fed493e18b9d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1c8dc06d-1c28-4808-b6b2-c7d2a00064f0",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "b50b56fa-6ce2-4634-9514-f1500653790d",
        "cursor": {
          "ref": "89cb1faf-eb6e-4e15-b7a1-3e0c5b5da980",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "fc5e8fd7-82c8-4834-bfb6-926d0bb9ee59"
        },
        "item": {
          "id": "b50b56fa-6ce2-4634-9514-f1500653790d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1365d2c6-a1a2-4dc5-8927-b5cb6c5ac937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bc109f9-e257-4f62-b0ec-4a87b81c3f7d",
        "cursor": {
          "ref": "689cee35-506e-4202-b2dd-c56aed70523a",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "63d723c0-1398-4557-8926-71b89d51db5e"
        },
        "item": {
          "id": "6bc109f9-e257-4f62-b0ec-4a87b81c3f7d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6d14dce7-e51e-460e-a47b-61007766a6f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3afa186-9342-47b6-808f-1a9a090c6b0e",
        "cursor": {
          "ref": "5606cdad-9947-4e3d-a3d1-0d5e301ee13a",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c5f068aa-455b-49a5-ac91-cf5d805f3a6e"
        },
        "item": {
          "id": "b3afa186-9342-47b6-808f-1a9a090c6b0e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "efad9b0b-ac24-4a73-91fc-36d38b7da051",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff955205-7004-42e7-b42b-fad0e986163c",
        "cursor": {
          "ref": "553ef6c7-ce8f-4ed3-9f2a-b05b918801cf",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "17351817-f062-4b43-94c3-bf0af6a938a0"
        },
        "item": {
          "id": "ff955205-7004-42e7-b42b-fad0e986163c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6e2c25d3-943c-4af8-85d2-ea2bd75fa79d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a301073-4e2c-4b2c-816d-2614984b40dd",
        "cursor": {
          "ref": "eaedb979-0889-4630-9a4b-60a589877077",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1ca916c6-c5d0-4027-b0a9-bd4438beb966"
        },
        "item": {
          "id": "6a301073-4e2c-4b2c-816d-2614984b40dd",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "04274100-0c8c-4b9c-a773-5bb5bb8c7c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c066fd4f-027e-49c7-adc2-d7cbb792a6d8",
        "cursor": {
          "ref": "ae2dcfd5-ab8d-4694-8dbe-11785d5258f0",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "df030355-4761-4ab2-be34-b386c0ea1dc2"
        },
        "item": {
          "id": "c066fd4f-027e-49c7-adc2-d7cbb792a6d8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fd15001d-310d-41b1-be73-747b7cad9fc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6719b9-8cfe-47ce-9d42-b70202389529",
        "cursor": {
          "ref": "60bdff82-08ef-40c0-8e37-77b7e0880ac5",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "b197e594-9a6f-4a0b-8f42-7ce6150f5e2b"
        },
        "item": {
          "id": "9f6719b9-8cfe-47ce-9d42-b70202389529",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "608fa928-9db8-4cb5-80d2-001d237a4df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a5fc24d-b023-4d17-a77a-411877f6c262",
        "cursor": {
          "ref": "22671e1a-5be6-465a-9df2-ee793effbcd2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "294b128f-272f-433d-a6f1-634ba9149d89"
        },
        "item": {
          "id": "5a5fc24d-b023-4d17-a77a-411877f6c262",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "73559916-596d-4b80-8989-f7fadd68a243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03de3eb-8de3-423f-bf5d-41e8f6ab2fa5",
        "cursor": {
          "ref": "1bfe8de3-76d3-4955-ab8e-c09b07090c79",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8bd3f410-031b-4634-8448-c0076b47dc3e"
        },
        "item": {
          "id": "c03de3eb-8de3-423f-bf5d-41e8f6ab2fa5",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "7f466b50-3639-4e17-99d5-0c5a204a0007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0fbb43-64e4-4442-8d6d-96dff6c41a07",
        "cursor": {
          "ref": "e95451db-fae6-4f13-9824-6a5e88b83818",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "e572d0aa-3921-4ab1-a9c4-a63deea32bd5"
        },
        "item": {
          "id": "5d0fbb43-64e4-4442-8d6d-96dff6c41a07",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d6970bfc-9379-490c-bb5e-7c958a5bab5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5720c651-23e4-4929-ae60-b30e2f836130",
        "cursor": {
          "ref": "82117828-4217-4465-bf7d-c28742a8215e",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a43d5312-32d3-4491-848c-63f287671dfd"
        },
        "item": {
          "id": "5720c651-23e4-4929-ae60-b30e2f836130",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2d2f71c5-6a21-47f2-a32e-667d31a0cb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3897a4e1-9caf-4ac2-af6b-756a6bb73609",
        "cursor": {
          "ref": "d7bf0427-a166-4d54-bc33-1a180dcf6efe",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "7ff5f804-781e-4869-818f-f6940118124a"
        },
        "item": {
          "id": "3897a4e1-9caf-4ac2-af6b-756a6bb73609",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "533fc7c2-d54a-4f02-bc13-27854ef131ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55af7935-266b-45eb-b477-ae3b72862a66",
        "cursor": {
          "ref": "fd143375-858c-4530-886e-1c5ecb214872",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "40848eed-21db-432e-9446-a3c08ac3105b"
        },
        "item": {
          "id": "55af7935-266b-45eb-b477-ae3b72862a66",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "134623fe-a7ae-45a8-9b2d-10d92600d239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9956b703-ff86-4534-b395-fb2bd2f41bba",
        "cursor": {
          "ref": "0b1b3941-ff1f-4e9b-8510-76e75c5568e2",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "056b5fc5-bc3a-4ba9-9f12-572c349d9cca"
        },
        "item": {
          "id": "9956b703-ff86-4534-b395-fb2bd2f41bba",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "51231e84-1571-431e-8aba-528c973710f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea0ba10-c91d-43be-8853-fcd9457529e5",
        "cursor": {
          "ref": "e5417f0a-9394-48ca-a773-1703db8237e0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "34663564-2d81-4977-be39-9d658c9c3b29"
        },
        "item": {
          "id": "dea0ba10-c91d-43be-8853-fcd9457529e5",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "362584ec-90e8-4891-bd91-d799f3c06893",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d0aae6-a8da-4486-ab0c-f042ece5df8e",
        "cursor": {
          "ref": "7b0e9ea2-6816-4377-89da-bd42f20bfe02",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "61c644bb-2711-4141-bb06-66e098014b21"
        },
        "item": {
          "id": "62d0aae6-a8da-4486-ab0c-f042ece5df8e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "90aa26a4-76ff-4279-878a-77ccedcd44d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85b3a05f-e27d-4954-bb3e-6255ca014e0f",
        "cursor": {
          "ref": "64ffe386-2894-404e-b9b3-907ad2665e9a",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "9e72f288-2b03-4db6-bcf0-2dddada87f04"
        },
        "item": {
          "id": "85b3a05f-e27d-4954-bb3e-6255ca014e0f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "68a7edab-227f-421f-bcd6-acb71971efbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aade34-8c0e-4300-a510-218a96200a6d",
        "cursor": {
          "ref": "f7d1a99f-e8c0-4f9b-8486-bab242258ba0",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7d71f72e-aba1-4416-9d34-5f20b3edffe9"
        },
        "item": {
          "id": "85aade34-8c0e-4300-a510-218a96200a6d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7032f9d3-6e8c-40c9-8559-ea3dfb2edbab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce168d5-c5fb-406c-959c-8a0b0fef9464",
        "cursor": {
          "ref": "6a4f4e9e-4a9f-4f0c-97c0-a09442b386c4",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "06fe4746-4080-4daf-9e08-cbc3272b71ba"
        },
        "item": {
          "id": "6ce168d5-c5fb-406c-959c-8a0b0fef9464",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "90f927bb-059f-4f00-a2b1-f4b6a5b76852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b9602d-3d09-491c-8ed8-f5ae93d8f26c",
        "cursor": {
          "ref": "1f5f6d95-e4cf-49bb-bcf6-f235806654a8",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "6a692505-e162-425e-9c82-41137667a1df"
        },
        "item": {
          "id": "04b9602d-3d09-491c-8ed8-f5ae93d8f26c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3f499841-3228-47a7-bfc9-7a2f44e0876c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65cc7232-8c88-47ed-9ba9-bcbf71dfcdfb",
        "cursor": {
          "ref": "19f12f86-125f-479d-8d16-3c8a31b310aa",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "23950055-33ab-4c85-ab6d-f6f2d7936502"
        },
        "item": {
          "id": "65cc7232-8c88-47ed-9ba9-bcbf71dfcdfb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "85f821bc-3e1b-47d6-99f4-905670f02a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8576bd-322b-4b96-9987-3078361b11a5",
        "cursor": {
          "ref": "d3055baa-82f5-4929-82ad-f0bbacfa1989",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "85692093-c84a-41a8-a503-f7036aff9429"
        },
        "item": {
          "id": "ea8576bd-322b-4b96-9987-3078361b11a5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "ca81f6ed-43df-40a6-938e-df25e300a5e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1d1b65-eb66-41de-94dc-7a873f914ab9",
        "cursor": {
          "ref": "51696337-bb22-45e6-ac7b-c94bd3ceafc3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cb634ea2-5058-4849-be1d-db4e080a58a9"
        },
        "item": {
          "id": "4c1d1b65-eb66-41de-94dc-7a873f914ab9",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "54074b66-76e9-44bd-a0e4-a0adc05f2db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e8daa7-403d-4dbc-b6ec-5844ab65ed50",
        "cursor": {
          "ref": "f23d66f8-bdfb-493a-bdb1-78204e089219",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "923bd499-8300-46cf-8b7f-9a8669c131ce"
        },
        "item": {
          "id": "08e8daa7-403d-4dbc-b6ec-5844ab65ed50",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b6040c24-e9c4-419c-9a36-ce1c2f11bb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "129d922e-5da5-485e-a5d0-22d6af7efc77",
        "cursor": {
          "ref": "747612ec-2d04-43c4-9acc-b09eeb3a4f60",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6f4384d6-e334-4cbf-a6e0-94ba878001ca"
        },
        "item": {
          "id": "129d922e-5da5-485e-a5d0-22d6af7efc77",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f5e18cd6-adb8-4af4-a7b7-8ca0080ac421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "087a28a8-1469-4afd-be01-453145c2b233",
        "cursor": {
          "ref": "16974603-8333-48cd-b0c1-498c279121f1",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bf15e0a6-2c0a-496a-a9f2-a744a3790e9e"
        },
        "item": {
          "id": "087a28a8-1469-4afd-be01-453145c2b233",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6fa8b49c-f8d8-4d70-9284-529ea396fb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3d99255-eb88-46f0-9929-60bc4622a1b5",
        "cursor": {
          "ref": "f12baad2-62a2-4eb9-aadc-51c182ddf103",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "05c0431c-7314-4ae0-b1d8-4022f5b19159"
        },
        "item": {
          "id": "f3d99255-eb88-46f0-9929-60bc4622a1b5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f6da675c-f117-434b-ace5-5116dd393ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f909b1c0-7d4c-49f4-a127-a6269cefacde",
        "cursor": {
          "ref": "7302c4f7-57bf-4699-aac0-a08a5f2bb598",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7c735ac1-8717-4364-b234-ff82a006f9be"
        },
        "item": {
          "id": "f909b1c0-7d4c-49f4-a127-a6269cefacde",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "7e5b95e0-74c6-4393-827b-c86eaf5a11e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20b4dd08-5517-460e-b6f3-3e39f58f7de2",
        "cursor": {
          "ref": "d40e5d5b-05fa-4269-8ce1-a241b9178661",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ee3b2caa-e91d-44e9-a124-d396f2835f57"
        },
        "item": {
          "id": "20b4dd08-5517-460e-b6f3-3e39f58f7de2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "50a1d057-7fe6-4ff7-b02d-2c42e71779fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7af24e-7efa-43f8-b76b-0d581fe000b4",
        "cursor": {
          "ref": "5f867c46-c1b0-465e-aabf-ac7a6550527b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d04e4d3d-295c-4944-ad7d-47f0de5a5804"
        },
        "item": {
          "id": "eb7af24e-7efa-43f8-b76b-0d581fe000b4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1105c1ea-098a-4662-8968-f0bee2ec798b",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c8332e78-2569-4d29-965e-6f27ba892cee",
        "cursor": {
          "ref": "0cbbfff5-594b-4b79-a4fd-b0c95b0739c6",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c2ff8907-d049-4c67-8467-6051ce448947"
        },
        "item": {
          "id": "c8332e78-2569-4d29-965e-6f27ba892cee",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3255aa37-3ce0-4edf-b630-1b6ae0818ceb",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "08195a1d-aee3-42a5-a271-a2da75d53cee",
        "cursor": {
          "ref": "9b1150b5-669e-4c25-ab1b-0de61f38b0b7",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7674b55a-2b57-4e4d-9e2c-70fa16f850ed"
        },
        "item": {
          "id": "08195a1d-aee3-42a5-a271-a2da75d53cee",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "38ecbf31-e1c9-468b-9efb-d0af821f6fe8",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7deb37e0-2751-47f2-97ba-2a6511324a71",
        "cursor": {
          "ref": "b17a04e1-bd1b-46f6-b1df-0e80e3ccb413",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "68cf127b-ecaa-469a-a842-6050fc058d98"
        },
        "item": {
          "id": "7deb37e0-2751-47f2-97ba-2a6511324a71",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "408a8745-e560-41e4-a479-6fa7110f8ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd8bca34-fb54-44ff-9f7f-6802064dfa4f",
        "cursor": {
          "ref": "fe2d0831-b2a2-454d-8882-847a88e10ef2",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c2c8bd3c-3c02-4fcb-b04e-2dc1792207d0"
        },
        "item": {
          "id": "bd8bca34-fb54-44ff-9f7f-6802064dfa4f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0166f818-2e85-4755-96a1-fc7519ec036b",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3bb658fa-1f85-45f5-a786-f896e7518a74",
        "cursor": {
          "ref": "f2559f1d-27cb-434d-a194-3241fb3aeb64",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6f33fd63-a275-4103-83ed-271a92f461c6"
        },
        "item": {
          "id": "3bb658fa-1f85-45f5-a786-f896e7518a74",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d399d8e0-b872-434a-8277-6480e2644316",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "874cca2d-eab0-4ed7-9b59-18d916c22260",
        "cursor": {
          "ref": "5b11cd61-2086-44ab-bc9e-f68ff25f94da",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "fb08c63d-42f3-4eff-a3b8-5f44e13b62d7"
        },
        "item": {
          "id": "874cca2d-eab0-4ed7-9b59-18d916c22260",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "22a5ecdf-a0df-4e7c-8ab4-7d9be95a9576",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "b0b4f67d-c614-4d26-a6db-67c36e207699",
        "cursor": {
          "ref": "d01be0f5-4747-4b96-b1df-0ba05aacb1b3",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "275cce65-1630-4cd4-b7d6-b876cb0ec44e"
        },
        "item": {
          "id": "b0b4f67d-c614-4d26-a6db-67c36e207699",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "05f4526f-ccb6-4684-a272-79a46809ab8d",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c7843b0f-9ad5-49d5-b54a-641822eab511",
        "cursor": {
          "ref": "3fe11f7e-0e6c-4535-9728-e8bc92901938",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f69679ec-414d-4ab1-a5a1-d2e03d5b953b"
        },
        "item": {
          "id": "c7843b0f-9ad5-49d5-b54a-641822eab511",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ff556b08-15c8-444a-ba24-53c10bbea2ea",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "724671a9-3216-4c71-909b-8c2681e64a61",
        "cursor": {
          "ref": "306308b2-367f-4ef0-866a-49e91075f1b9",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "46b77cb1-6d6a-48a5-9f3e-4a8270815a83"
        },
        "item": {
          "id": "724671a9-3216-4c71-909b-8c2681e64a61",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "847d8fb4-f69a-4e5f-a396-34f12adad6ff",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "88fe1e8f-1d7f-4f23-864a-fb267f51e7c3",
        "cursor": {
          "ref": "9e34f956-8244-49cc-91ff-c9c766c67d17",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f203aefa-643f-46b9-8dd9-29022bf221e5"
        },
        "item": {
          "id": "88fe1e8f-1d7f-4f23-864a-fb267f51e7c3",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "11a16843-6f96-4f13-b2c2-c3a194b2365e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "428022e8-c714-4364-af2d-e827d3bcd044",
        "cursor": {
          "ref": "f1bb64f7-9a94-41ca-a69e-7fd6d8644c0c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "de526862-24e5-41c5-99e5-13b9f9829e5b"
        },
        "item": {
          "id": "428022e8-c714-4364-af2d-e827d3bcd044",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "156614dd-a161-47c9-bf71-f4547dad3cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e09ae264-4371-4d78-aabc-588608803f10",
        "cursor": {
          "ref": "54438541-e0f1-49d5-9582-cf530c0ebf63",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fcfd6a20-40bf-4d79-ae72-23ad758d35fa"
        },
        "item": {
          "id": "e09ae264-4371-4d78-aabc-588608803f10",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9246f07b-056a-40ef-a3c7-3c45aa563d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddb14481-202a-4bc0-aa9d-fd6644b3b14a",
        "cursor": {
          "ref": "fcb6f2c1-7895-4833-a5e3-8deceb002ce4",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7980b38a-86bf-42c6-b0ae-d8894b02848b"
        },
        "item": {
          "id": "ddb14481-202a-4bc0-aa9d-fd6644b3b14a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "4b6b0944-0517-4392-b0fb-e5cb966c8623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6e7ef8-7112-47d9-acd7-ccaaa10526bc",
        "cursor": {
          "ref": "157c4a36-5976-47fa-9f1c-934356b5021b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "60c805a6-d5c8-4f18-ba65-a6955b23ecff"
        },
        "item": {
          "id": "5f6e7ef8-7112-47d9-acd7-ccaaa10526bc",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ba89b07e-e1e1-4592-a529-596bf7b971dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "998458a9-0484-45bc-bf77-0b944ce260cc",
        "cursor": {
          "ref": "ba4d07ae-e97c-4ea0-8e2d-7d14b0401921",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f5ac8882-399c-4667-affa-9cbe6f7af2fe"
        },
        "item": {
          "id": "998458a9-0484-45bc-bf77-0b944ce260cc",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "3ba393cc-7f6d-4af0-8381-a23aa402e0f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28d6016-47f7-41d7-aa0b-c63a72a9cbd3",
        "cursor": {
          "ref": "2695f3bd-830b-4a0f-8c54-0495bd905d3b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8a39b21f-3ed2-4428-b33f-cf7f3b2e93b5"
        },
        "item": {
          "id": "a28d6016-47f7-41d7-aa0b-c63a72a9cbd3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "58505789-5f09-412a-a098-c883aad3f924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db41bdaf-f370-4114-8ad7-d66bd5e414fc",
        "cursor": {
          "ref": "3abdfff7-a4e8-4692-a051-5bce1c08c036",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "5afc846c-74e7-4264-8dc0-81bb2d912fd1"
        },
        "item": {
          "id": "db41bdaf-f370-4114-8ad7-d66bd5e414fc",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f2210c84-0dea-41f0-8323-b5176a237ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe573a8-7dab-4886-80df-ff251c39af3f",
        "cursor": {
          "ref": "532cdd30-8f07-4b2b-82eb-b9eaeb5c14d5",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "20c6249a-4629-488b-9ea3-db0f772beb3d"
        },
        "item": {
          "id": "5fe573a8-7dab-4886-80df-ff251c39af3f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7d17aa30-53a9-4fee-b8ee-44fecca01aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f39502a-0868-46af-a5e7-2efa6cb97d1f",
        "cursor": {
          "ref": "31b7dac0-faea-4d84-9a0b-c8147e0f849f",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "78da3e24-5255-4add-8b5d-9d0a68fa5cbe"
        },
        "item": {
          "id": "9f39502a-0868-46af-a5e7-2efa6cb97d1f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "1ab808cd-a6f0-412b-ae6e-c927b8fb3238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfc0e8a-8afd-414a-9a4b-2b172e563956",
        "cursor": {
          "ref": "baafed35-965d-41f5-ba1a-e57c69bdabd5",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "68d0b4bf-8842-4d1f-ad1d-68661ed6b39a"
        },
        "item": {
          "id": "3dfc0e8a-8afd-414a-9a4b-2b172e563956",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d9df6089-d6c5-4587-9205-0442b9e42a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bca56f2-4ed0-4ade-89bb-8a7c8af85802",
        "cursor": {
          "ref": "855ad9e5-b85c-47da-b758-b7f1abf185da",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "bcd5c618-9b4e-4d31-befc-2f360ea10cc2"
        },
        "item": {
          "id": "7bca56f2-4ed0-4ade-89bb-8a7c8af85802",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "d14b4581-a339-494d-8406-7dcd6ff09ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409b67ac-d75d-4007-aa7b-e150052d4bc0",
        "cursor": {
          "ref": "d0bd9444-d1ae-4080-99c1-b36f56789a82",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b1e90237-b9f9-4fa1-97e4-1e49f2fe272a"
        },
        "item": {
          "id": "409b67ac-d75d-4007-aa7b-e150052d4bc0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9f20d932-1173-4029-bf9d-96ded52c1408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "822e48bb-8d08-4971-a411-ac9eae375190",
        "cursor": {
          "ref": "d7e305c5-18cc-44b5-9913-19f31f3b24b9",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "357901ad-3c66-4808-a54b-fe4c3f4407aa"
        },
        "item": {
          "id": "822e48bb-8d08-4971-a411-ac9eae375190",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "39404ef0-882f-4237-b83a-49babe2f53ea",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "15854187-3523-444e-aa33-d79de20aff36",
        "cursor": {
          "ref": "59de5d15-0677-4d52-a620-23a10788fcf7",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "deccbfc6-9ff8-4300-9dc4-e6a78f361a81"
        },
        "item": {
          "id": "15854187-3523-444e-aa33-d79de20aff36",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "23a7044e-3b1a-41ca-8868-bf2d05b020b2",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f519e7e0-bb10-4284-96ae-421c53c465d2",
        "cursor": {
          "ref": "87572acc-bb55-4bd3-8d53-0587041f121e",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a52fbba7-ea01-4143-92a5-1e378752ba7a"
        },
        "item": {
          "id": "f519e7e0-bb10-4284-96ae-421c53c465d2",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a17fbaa0-4998-45d3-9957-fb8d1e48861d",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d28049bc-b73e-42b8-8180-eb1ed0ab37e7",
        "cursor": {
          "ref": "1fdf0599-d366-4f51-9bdc-08cedabd0b08",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "14041d7a-3289-4d67-8fcb-5f5eb835c526"
        },
        "item": {
          "id": "d28049bc-b73e-42b8-8180-eb1ed0ab37e7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d04ecec1-6e7c-4bc5-b0fd-cec3fa320f98",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "45448efa-98f8-47fc-ba70-5ca3829258c8",
        "cursor": {
          "ref": "04b8ad06-ede8-4196-8503-c9357fbab739",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "644bd06f-ab0b-4280-968d-3f17a16ca552"
        },
        "item": {
          "id": "45448efa-98f8-47fc-ba70-5ca3829258c8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a02b0b0f-ec9c-4b79-b9d7-637d5bc15d9d",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1fb0858e-2d9f-4526-8e8d-66cbc7ec0aa8",
        "cursor": {
          "ref": "3862d930-9446-493e-b964-5306fbdd99c4",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "34e9d610-78f5-45b5-8dae-69707fd2b02e"
        },
        "item": {
          "id": "1fb0858e-2d9f-4526-8e8d-66cbc7ec0aa8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a7202b14-b718-4e2c-9f10-78f14a41faeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "421d3762-c8da-4a18-b55a-4a28b25b1a44",
        "cursor": {
          "ref": "834ff0d5-de35-47e4-b39c-b7d6125c47bc",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2d78b34f-2263-48d6-9fc9-e13c3deb9a52"
        },
        "item": {
          "id": "421d3762-c8da-4a18-b55a-4a28b25b1a44",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b75ccb55-c752-4a87-a0d6-613c37ac063e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0bf6223-da15-485a-b19c-5ef5c404a5f3",
        "cursor": {
          "ref": "fce69b71-7ca3-4e0e-88e8-f159a3c81f20",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "9a1cca9a-ee6a-40c7-b4fc-3af91f1614df"
        },
        "item": {
          "id": "e0bf6223-da15-485a-b19c-5ef5c404a5f3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bd9f6a00-1b13-4f74-909f-1c965aa57ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fca0d6a-6ea6-4995-a087-18776e41235e",
        "cursor": {
          "ref": "5a8368d4-4f1e-4037-be19-22db3d9fc735",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "db509804-b79b-4cf5-ba89-e17fc49cc470"
        },
        "item": {
          "id": "1fca0d6a-6ea6-4995-a087-18776e41235e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "d43642c9-dbc8-4e36-b78a-ab18ebc71549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84da3409-b363-42bb-96e6-3530a6272dbe",
        "cursor": {
          "ref": "55c02fbc-0bdb-42c9-aa4d-82035a928476",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e4b5fbdf-7ffb-4d6f-bcb6-146dfc4f84d1"
        },
        "item": {
          "id": "84da3409-b363-42bb-96e6-3530a6272dbe",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "b673fda7-c42d-4224-959c-6b4c65f97055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a65fb65c-56dd-4f42-9dc1-5e2d14777df5",
        "cursor": {
          "ref": "704782e2-4154-45b3-86de-c2892d4eabd7",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "93d1dca4-7840-4d37-a786-18f531a2b70a"
        },
        "item": {
          "id": "a65fb65c-56dd-4f42-9dc1-5e2d14777df5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "830c3730-a998-40b3-9545-64fcde527f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3a1370f-0a08-446f-9613-9c319662d8c4",
        "cursor": {
          "ref": "4ff230f8-9fac-4f7b-aa25-45d7c7553ceb",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e1fdb62c-9191-484e-b044-3494ea10f1d7"
        },
        "item": {
          "id": "b3a1370f-0a08-446f-9613-9c319662d8c4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "888329c5-e12b-4373-b762-cbf5974eee5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e99f0e2-c4f6-4ead-9436-529eba23211e",
        "cursor": {
          "ref": "7fc2c921-1115-4caa-b28f-ca5d860a735e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "51bf5767-b855-468b-91d6-25b7f9cc76b6"
        },
        "item": {
          "id": "7e99f0e2-c4f6-4ead-9436-529eba23211e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "949b2b22-e6f1-4d23-9801-3857031c7c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80030604-43c2-4899-a628-f1aea4fe4e3c",
        "cursor": {
          "ref": "65af5cab-b6ad-413d-97fb-5f251e802656",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "921fe3eb-9918-4054-8ea5-2e61995e705d"
        },
        "item": {
          "id": "80030604-43c2-4899-a628-f1aea4fe4e3c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ebf1f563-06a9-4b31-aeec-f8886305e6f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922c2f46-54a4-4a22-8991-531e1966acf7",
        "cursor": {
          "ref": "5fff6f5d-cba8-4ee8-8ca1-a18f4fd3ac55",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "34619051-bd0c-4230-992c-9d201449af8e"
        },
        "item": {
          "id": "922c2f46-54a4-4a22-8991-531e1966acf7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4af3601a-4f85-4d34-91e7-d275fafb4e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e829b3f-141f-485d-bfef-e84c59bd0f06",
        "cursor": {
          "ref": "418fad70-5458-47aa-a428-876358a03db5",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "bdf63554-f5e1-48a1-b881-c1dc5d1acdb7"
        },
        "item": {
          "id": "4e829b3f-141f-485d-bfef-e84c59bd0f06",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "49da7d0d-cbf0-464a-8959-1e470e52bbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b74c5e8-b381-4cdf-ad47-682797fea14b",
        "cursor": {
          "ref": "88d752a2-e33a-4f3e-9180-e3f83731399a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "d6968733-6fc4-4f8e-b129-aa395b85ec0c"
        },
        "item": {
          "id": "9b74c5e8-b381-4cdf-ad47-682797fea14b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b02e958d-eddd-403e-9b6f-4963f3e90815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8778490-ff70-4b1e-90f5-97bf066feb38",
        "cursor": {
          "ref": "d6826006-6288-4b1a-aa51-7fc01c57ee5c",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a9c2538d-a292-487b-b4cf-83a0580425a8"
        },
        "item": {
          "id": "a8778490-ff70-4b1e-90f5-97bf066feb38",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d49f4cad-1ec8-4304-b843-2f56e0363ac1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "660ff38b-5c6c-4cf9-9695-d69b031d844c",
        "cursor": {
          "ref": "6ead7efb-a3f6-4392-b7fb-3d8a4e50f665",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "8a96cd9e-1b7a-49ef-8afe-66c0915f0a96"
        },
        "item": {
          "id": "660ff38b-5c6c-4cf9-9695-d69b031d844c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "afad862d-9c65-4ea1-8d4b-7ada5aa61c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37371ead-a467-4d3d-bd49-d909bfc3b8e1",
        "cursor": {
          "ref": "99902fb3-8f64-43bf-8e87-2c69ed479def",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "20ff116b-1d67-4dd9-bccb-be2ab0beb64d"
        },
        "item": {
          "id": "37371ead-a467-4d3d-bd49-d909bfc3b8e1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "175fd580-6258-4dbd-ae99-e92d8939a9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62607300-8d50-47b9-b635-146332aac277",
        "cursor": {
          "ref": "d29f7e2b-1371-4a8c-adad-c8b3baddcf12",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3ae17941-bb1c-4a79-9b99-78240e6b5ee9"
        },
        "item": {
          "id": "62607300-8d50-47b9-b635-146332aac277",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f9348dbc-20c5-4a54-b4f9-ecc975be1724",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3965e058-2bc0-4b64-b74a-5595aef7cbb3",
        "cursor": {
          "ref": "439326fe-261c-40c3-880f-04f96b601347",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "7d2c1ad2-648a-4f51-ba7b-a981b71db9be"
        },
        "item": {
          "id": "3965e058-2bc0-4b64-b74a-5595aef7cbb3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "11426af0-ddb9-4b05-906c-ccdc2bf4ae29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d932e903-8777-4918-b96c-9e3cbe481004",
        "cursor": {
          "ref": "3e5b2e42-c899-4f6b-adaa-0098374bcc44",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "68538104-dcc5-456d-9bd7-a76c5ff6a4ae"
        },
        "item": {
          "id": "d932e903-8777-4918-b96c-9e3cbe481004",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7e5071b3-44b6-4b17-9a0e-8fadb4e3ad85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a8578b8-f5a0-4b61-92bb-4485d1fcdfc4",
        "cursor": {
          "ref": "c881ae9a-d872-4444-8514-ba270c628d9c",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "72310c2e-f1f8-442b-88eb-b491aa38acc5"
        },
        "item": {
          "id": "2a8578b8-f5a0-4b61-92bb-4485d1fcdfc4",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d5d3b8a6-e837-42e4-8418-e0c4cc063096",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57af7a0-93c1-4764-b3ee-f33b1233c027",
        "cursor": {
          "ref": "b1387d9a-e524-4509-bc0a-495004401fa8",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e5a4e349-7896-4225-a42a-cca9da095019"
        },
        "item": {
          "id": "c57af7a0-93c1-4764-b3ee-f33b1233c027",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "eb8c9b6b-8644-4902-a403-1ef0bc13d1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b115146-e9d8-44b8-b97f-89c6f887aad7",
        "cursor": {
          "ref": "a002a92a-fc73-461f-8f97-c66dcc23789a",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "32a87041-9ae9-4f4f-94f4-904c9ae382d2"
        },
        "item": {
          "id": "4b115146-e9d8-44b8-b97f-89c6f887aad7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "ffec8181-8b75-4626-b4c6-1659b814e453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36efd994-4595-4875-be19-4c141f059a47",
        "cursor": {
          "ref": "d8f3a667-7770-4361-b23c-75b84db7d9ef",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9a630543-5bb7-4f2f-a636-c7f8196e352f"
        },
        "item": {
          "id": "36efd994-4595-4875-be19-4c141f059a47",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "192f1e97-850d-4ad1-8c73-1867c4aff9b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0bb234-f5d7-4c95-bce7-d550cf34caa7",
        "cursor": {
          "ref": "8ef5a6e4-690c-4901-b070-a488c58a186d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a7d89f12-5bec-488f-b19f-acef853bc21e"
        },
        "item": {
          "id": "1e0bb234-f5d7-4c95-bce7-d550cf34caa7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b41f9ca3-ff3c-4afb-a5e4-4db097fad408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8468809d-41fb-44db-8849-c320458613d1",
        "cursor": {
          "ref": "ab267bcf-759e-45b4-a733-a5c26fba9652",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "32ccf895-555d-4091-8f15-e8d3b19dccfa"
        },
        "item": {
          "id": "8468809d-41fb-44db-8849-c320458613d1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e52b01e1-9a90-4e8f-9e8b-42b5ac6dc25e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a84dd7fa-586c-4f59-81b4-0566a7e99065",
        "cursor": {
          "ref": "c177c6db-a72a-4bed-9ec8-1aceb001ffff",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "572a40d7-a105-40df-8248-cf2c6a14b30f"
        },
        "item": {
          "id": "a84dd7fa-586c-4f59-81b4-0566a7e99065",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "e41d6b80-a9d9-4e88-b053-016a4df49d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7736eb2-ae68-47b4-b6a2-f4e9b6149682",
        "cursor": {
          "ref": "bff237e9-da94-4b1f-b235-99775e662bb8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "6a95b162-e6d6-49f3-9812-6a9f6ee3ed94"
        },
        "item": {
          "id": "d7736eb2-ae68-47b4-b6a2-f4e9b6149682",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "63e110fd-ffae-4e69-b04e-cfe4fad28424",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2004a1-2df9-4cf5-bf81-24a4703bad5d",
        "cursor": {
          "ref": "03e727da-8efa-42bd-9f4c-d452b1086ced",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "bc628ddd-794a-4677-a01a-9febd47bb85c"
        },
        "item": {
          "id": "8f2004a1-2df9-4cf5-bf81-24a4703bad5d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "551ce416-9249-4934-9f89-923accdc3a0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882d0285-9141-4e13-85ae-800d5d7ad6d3",
        "cursor": {
          "ref": "b8d78f25-d338-4804-8ffe-0564e96bce1c",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "19ea93ed-11eb-4ad5-b25a-6ba9729ebaf3"
        },
        "item": {
          "id": "882d0285-9141-4e13-85ae-800d5d7ad6d3",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "cc497a53-9f77-4cd4-8478-f383ece4ccfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6f4b57-6510-4c73-b7ed-fa1732ed1279",
        "cursor": {
          "ref": "72cab2ab-80cc-4d52-b6e0-247c31ec9e8c",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c1b3422b-1179-4c3e-ab5f-6dff164238b9"
        },
        "item": {
          "id": "0b6f4b57-6510-4c73-b7ed-fa1732ed1279",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c5b56101-0e4b-4306-9b36-24e29875ec97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa7ae51-c7c0-486c-a6d1-8559a9a0bc47",
        "cursor": {
          "ref": "55733efa-95ed-4386-97fa-5e14b0f07c9a",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "b993523f-424f-4cda-a43e-ef06b4bc0686"
        },
        "item": {
          "id": "4fa7ae51-c7c0-486c-a6d1-8559a9a0bc47",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "df890b6f-8e17-4cf0-9622-92d620f4fef1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb3e62e-d86a-4317-abe1-b6f3e4bcabb1",
        "cursor": {
          "ref": "9dbc5ba8-67df-43b7-bd02-e536f6f0dd32",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "f3ea3eda-86f5-4519-b963-7dda3660aebe"
        },
        "item": {
          "id": "7cb3e62e-d86a-4317-abe1-b6f3e4bcabb1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9d09f66e-804e-417e-83e2-61329c83423f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867957b1-a0ac-499b-85f6-8237308c97bc",
        "cursor": {
          "ref": "ea74bef9-85e3-4efd-ac44-62e0bbd3d86c",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "20a817e4-62d6-4600-bb7c-4f2464cb7234"
        },
        "item": {
          "id": "867957b1-a0ac-499b-85f6-8237308c97bc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "aeb55901-d2be-4aa5-820c-7137ed7f6ed3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22ac058-5801-4caa-8aa5-62d7c27c12d3",
        "cursor": {
          "ref": "9bb94e67-fc8f-4122-9ebf-36235e938e63",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "baeeae33-b403-4d7d-b77b-bac71735a817"
        },
        "item": {
          "id": "d22ac058-5801-4caa-8aa5-62d7c27c12d3",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "6d3b68fb-c9da-43f4-975b-7d3fb2cac48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "023fde00-d194-48fe-becc-8c7b09a8e532",
        "cursor": {
          "ref": "c424e123-fd92-4d4e-9dcd-fed843c64c73",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "fb81a1e1-3214-4d37-a7ad-3426feb56aea"
        },
        "item": {
          "id": "023fde00-d194-48fe-becc-8c7b09a8e532",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "dfca4653-81cb-42e0-a69e-372015d05158",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff6d8ec5-5970-402f-8604-9622f966c9d4",
        "cursor": {
          "ref": "7447f332-468e-44c7-89f3-101753c3ce5c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ede63070-5e52-44ed-b7bc-c1c53f5ef423"
        },
        "item": {
          "id": "ff6d8ec5-5970-402f-8604-9622f966c9d4",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a96a9fcb-f2b8-4b9d-9e87-044f17c7e81d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89abc58-8230-456b-a75d-45d4fef64e21",
        "cursor": {
          "ref": "4a53368f-0e85-4dfd-b75f-8ec391917dec",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "09ef6d9e-1300-4a46-b375-318de9c83d51"
        },
        "item": {
          "id": "c89abc58-8230-456b-a75d-45d4fef64e21",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "08e2ee62-4345-4f59-9246-91cb05d6cb8f",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "24c28647-6a60-4239-8151-49d7555d14bd",
        "cursor": {
          "ref": "8a6541bf-dea9-435a-870a-1d8ffb34bdae",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "f5af799e-0f22-4d7e-8afe-724187cff595"
        },
        "item": {
          "id": "24c28647-6a60-4239-8151-49d7555d14bd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "aa06163f-6e5a-47a3-843e-1775b461238a",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdeca80b-401e-47f6-b386-22f53345f34b",
        "cursor": {
          "ref": "50418093-69fd-4d76-8e16-13fc23bc3949",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "ea806e91-c2e4-4e90-92f7-2f2a4a8fd373"
        },
        "item": {
          "id": "fdeca80b-401e-47f6-b386-22f53345f34b",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "623597f0-6b42-4ddb-8966-c621615d1258",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "47faafbe-ac26-4a8e-b5ae-13724f670b32",
        "cursor": {
          "ref": "44ef837d-62d7-49f8-b542-84d1f3bb6a6b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3bba0d74-801d-41b5-9b0b-155406fb25ae"
        },
        "item": {
          "id": "47faafbe-ac26-4a8e-b5ae-13724f670b32",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f0737d3c-9e29-4154-97fd-650146c127e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47faafbe-ac26-4a8e-b5ae-13724f670b32",
        "cursor": {
          "ref": "44ef837d-62d7-49f8-b542-84d1f3bb6a6b",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "3bba0d74-801d-41b5-9b0b-155406fb25ae"
        },
        "item": {
          "id": "47faafbe-ac26-4a8e-b5ae-13724f670b32",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f0737d3c-9e29-4154-97fd-650146c127e9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1054f44-59d6-48e7-8eb2-344738f69745",
        "cursor": {
          "ref": "b2f6ffde-0950-4243-be8d-fb73899516e2",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "0578c933-c578-41ac-a834-54fbc9e8e7a3"
        },
        "item": {
          "id": "a1054f44-59d6-48e7-8eb2-344738f69745",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eb63f66c-2d56-420b-b84d-4ef52a7f4ca0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e67e869-0f26-4aae-a125-60c26ada2bda",
        "cursor": {
          "ref": "ef2e205d-6172-46c4-820c-3bd40228bf66",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "8555496d-beee-486c-af2c-454ea2c396f7"
        },
        "item": {
          "id": "9e67e869-0f26-4aae-a125-60c26ada2bda",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b96b9981-3770-4a74-85fb-6c519d4ec179",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}