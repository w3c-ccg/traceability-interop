{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3bfd0758-24d9-4b3e-b4cd-57630de15161",
        "name": "Clear Cache",
        "item": [
          {
            "id": "17c47355-895f-4ab1-b319-619a03bc1096",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1571d57b-dbb9-4b49-b1b4-65b516f8c321",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "728c4380-04e2-49fd-94b4-b59c7e429935"
                }
              }
            ]
          },
          {
            "id": "01e75859-9e52-4402-a083-80d49f0fd901",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb0cbc43-e78a-495d-bdf4-589d1f29039e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "74489121-0df4-47d7-9553-14ca9def3fbb"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5948bba1-9981-4029-81d7-32679d7bd05e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2785a0f1-cd73-469e-8837-db1829f2257c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1a51e787-b745-458d-aab2-3024c163e449",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed1d7ea8-0f57-4b1f-8822-3f3073db47c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "469a2ecf-203c-46f7-9d45-505a1528df2c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "aed99c7d-c3aa-4b49-be05-7888f3c5217f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "94a2556c-47ba-4423-a243-3e1228356fb6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c3760921-8817-4f7b-9e45-8a9d412ff79c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "79743f12-01f5-45e7-b163-e865b4b0239e"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5c3b85e-37be-4708-982b-666d5d976d6c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "572e90c2-cabd-4df0-a29f-09016cb32a17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a8aeaee-7346-4d33-84cc-5f232f0eac21",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5d9bf46-c18a-4a7a-97d6-c2f8dd1d703e"
            }
          }
        ]
      },
      {
        "id": "f57d29b6-3029-47d5-a8fb-9161bc2fffb2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3c22aedd-4096-4547-95a2-e7ecbef7a9d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2142e1e5-68d4-4c67-b935-8a7e12f13873",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "81377b54-e39f-46e8-9a42-e91394cd973f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4aa02a-f370-4cea-a1e0-a687c2f213ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2504c87-8f72-462f-a651-c194c48fec53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ae4934-433b-4bdf-b8a6-1d01f12367d1",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f633506a-3ba2-4fbe-a8a4-048d98a87516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12103476-beb7-4954-b6a6-846c22502a6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "872e6b0a-33f7-48f6-9430-835460e394aa",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2802193-45de-49eb-a746-bdb8f64ba8c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "162df0aa-6148-413d-b6f1-bd3f15573a62"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e27649ba-e5d3-48fe-a273-d51233b97a14",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "40fe184e-5a9b-4e35-a062-2e6a3b477f08",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154fccc5-9ddc-40da-829b-a50f7fb960bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6fd3f80-b133-4d74-8132-a1100765ecfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36a73a6c-5150-4c5b-866f-5c29fe5daff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90cb6108-2b3e-4cfa-9344-b2a5dd1e5285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7211e2-6b60-4671-8865-4a95ed56bda8",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05d1540-163b-42cc-9b86-7127c94a553d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53f1d308-464e-4a91-bcab-6b2bed3b8b78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b907317-1dec-4ec2-8ae6-8352d6cf1ae7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "93e7afe9-df43-4d25-ad44-e64b4c1659ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7bb3b494-4bc5-4b81-a331-e2bdc711955b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "34e0cf7e-c93a-44a0-b898-fde85d42403f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "356c34d6-6634-498d-a27b-4af0de7b8e67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b4697e18-9c41-4e1d-a625-573df60313e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1cbe8558-feb3-41e7-a7de-ebe67223047e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "53fbbb6c-e30f-495f-8982-49732dae344e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ed5514a-d4d6-499a-80fe-1e61889dc5d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f6b6188e-164d-489a-aa65-2d41ef2bd54c"
            }
          }
        ]
      },
      {
        "id": "c69c4017-06ed-482f-8c62-526be55a151a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e3290071-476e-4a99-aa14-10b10789c79a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "753adc94-54e6-4dad-9382-16b0d6e7feef",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "6e27036e-ba3f-4be6-814a-20cc68c40952",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ca7ae3a-fc80-4a81-8ee5-7ae07e85867f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a131bf32-8ead-4513-9ae8-5b2619908edf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae4d2e9c-0730-4efd-8a99-6e2be463597b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2f4a525-415b-4aba-8264-c9891b0eb7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ad339d-0083-4798-94db-fd0418b4c2a9",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea717d5-300e-48d3-8089-276576bca71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08ee88ae-3bdd-4faa-a8d3-aee7029d558a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1675ed49-219c-4664-83af-230a6f19bcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12dcd706-7d72-4b77-adde-66c23725c990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c6b8a5-ae80-4b0a-bb08-4253c0d01189",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "444fd6c2-cb60-424b-829e-b5455308b146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f38f0e3-c270-477e-b8dd-1a61393fe11e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "185e155f-a1de-4496-bb17-9a2706d7ee58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e5cca65-fe16-452c-a2a3-c6d215c1a724"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9e6db0-dafa-4f8b-82c0-c3ad869c5684",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a34c77b-888f-475f-af5b-3168dc91df98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e004a85-fbe3-46d6-a781-d25cd6b0ae97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11058bd0-7397-4288-8545-8eab07412c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "400906c0-f189-4e03-850a-713375f34325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e0524f-b52d-4193-a6c5-c884c7565c58",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6bdb4d9-66b1-4c81-a80b-44684d5406cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db360578-cae0-4d19-ac13-3d9fa1ad9803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4a2a6a-abe1-44ce-99e9-29771d36064f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e4a75b34-3531-4477-926c-9ef4503aa2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "934fbfc0-b485-4e5d-8424-07be72926b84",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5910754-3c7f-4506-9dca-b54d54188115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88422e5-fc2f-446d-9da1-63485e0faf2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5370fd70-16a7-474f-a7f7-4e30803da7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "638ea4cf-226c-4aa4-b1c9-f171495b5cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b706e87-8fd4-48a3-a638-f8a5a3e3e7d6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b435758e-4e91-4463-963f-c501e23567b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f2921f-d432-498f-b65e-d44a6700df93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b1d519-2e5d-4f1f-a00c-1f7371093124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbe7771d-8bee-445d-a869-1692ea7deac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5ac824-816e-40d1-9057-d3bad81c5592",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1c838e-6754-48b4-a676-389423dbd7fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82564f40-0632-4d5e-806d-b9b7895a249b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3275e5-2b3b-4612-8e3a-e7843625246a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "409c7f6e-217e-4df6-97b9-dcd5c4a12593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cddc5887-ce50-4255-a74b-b5e161c91702",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e65d31-17d5-4474-a475-b44822e86160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca0f7e15-3f3c-4757-9e43-cf2bf58d78bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a570562-8a22-462e-8e66-893d971cf089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3f974b0-ca85-4c61-b05e-e6869f5e33b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57495003-2c38-4e41-9c1f-105b350230a8",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac41be2-ae51-4f90-823e-32702eb18af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8632b57-922c-4691-b168-7cab4f19c156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ac1828-8cb3-40ae-bbf2-0a6ae894f150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa47a58f-303e-4510-a8cd-8253c413c5d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13cf50e-4784-47cc-ab60-a9dd9ea65d09",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2088b2a-129c-467b-b6b3-869b5a154e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39e7a50-6b10-4de3-b41d-b73168a38c40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd96684b-823d-4ddd-a958-f22747d78e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bfa9c58c-9232-44c1-a723-d9db8718c006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6864d1d9-e641-4263-a428-ceeea2c28a34",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5875a7c-8a2b-4294-83bb-b7ffc1e2825a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e74d7e-7b99-4611-892a-7ee709d9bfb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a79d28d-362c-4332-8455-d6fc2e65cc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b4afef2-aa8c-4a60-b31e-776ab38b7799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2f5180-9590-4269-9a70-1baaf0c02f55",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6be472-a33e-4e0c-944a-ba1eef21a680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f269438-739c-4efa-9666-0eea3564896e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c610b3c-52e1-4f5d-9615-9a073652e7ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a4b038a-a03f-4cb2-94ce-da18edf5d8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e1f5a8-1244-4b22-b7bb-f208c2490e48",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa04e74-92e1-407d-98e5-d16dc4f65005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53f6ff51-e882-4012-86d9-11a29625b0b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a489ed-66b0-4873-9143-0946b9740985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dffedc42-3679-4c4e-860a-6d067031ce50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8161851-8ec8-4891-84b5-e1f4675a75c2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57850f57-2577-4fe7-80d4-be0923b82143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3744b3ea-5f7e-4730-8e84-b9fc1a299811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94ff733-82e2-4e8d-9f01-8251808a11dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "713792f8-23db-414d-be1b-016807f08a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2092b77c-6e4d-41d5-9459-c2fbcb67ade6",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62e07261-6f16-4bfa-9544-f600b8511860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1218ab01-4f66-49f7-b4f1-e71c97a7dc2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8723961-9ffe-4749-b7e9-900b0f0aaa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ba7456be-4360-44aa-991f-fd423eb08f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ec0c1f-1d81-4dfb-93f1-c72e910dbbd2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29390e06-ecf2-4c38-8eff-e318925efcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b5cd931-febf-41df-8a36-0ade635424ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc011ff7-34ad-47a3-a876-ed96ceac8cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e913e8f4-be8d-41e6-9816-ec75c7f2931d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b23c3ce-8068-48fe-a039-38a65a99a357",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "322e7c7e-2aa1-4930-b61e-3e2d2079dd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5c6711-8ad9-4b02-87f9-8dbe976935db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e884857-2a8b-4f51-b0af-d8cd988227e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "625de9b2-c7c5-4162-b7ca-90daeecaf134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40caa8dc-9256-4880-8132-2d30b26a482e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8476baa7-7d70-4ea5-ad75-1ceec20ca119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77096405-aa8a-47ad-bfa2-26d4bd76a840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7771db2-37c7-4104-9ed4-2df89efe9992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfd06ea-7cb8-469a-b69e-cdea94f69ab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72079541-d06e-42cd-b3fc-de74a8566638",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f58dc6-7bfc-4812-98a1-5120cf65205a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e3ad928-cc8f-4497-823e-3f24d783342e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "074e4d9c-da00-430e-879e-009b52c5ba90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad3651b0-272a-4494-a6b4-82b993368b88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21079d0b-2afe-4840-80d6-d51d10cd5d21",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef4d1d05-3615-488f-a325-f3611944a2fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a0c9e3-8752-4384-9057-301fceb93967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a9bb28d-b665-4d43-bb83-172874699748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9151102b-86a5-4bdb-928b-2c7a18ef6e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cedd746-6ddf-4c96-a4a3-2689a28399e0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b03200-4a28-4b33-b4e0-c6015dddf6da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd1c067-8ef7-4ff3-b205-153dde9ad1ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "263ff9dc-8b91-487f-98a0-0d6bd9da0b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d728d3f-7635-462e-a080-bd2c6034d7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebd0248-7457-456d-89a9-8d20e735236f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f9dfd6-43d6-488d-a5ba-28f51914da37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85dda4ba-9361-4fa6-a136-6380987d1c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09a56cb7-d3bd-4148-9550-ec773030cb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f55d52eb-0919-402f-9491-03bab1de41d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de08e781-e2a5-43c7-b306-bb4dde94628a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67770ed3-2df9-40d9-ab3c-0bb0b9725820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fe7443a-8ba8-4f0f-997f-46c056037b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd001812-bd36-4448-a740-649efb03faa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "632036ca-2317-4ea0-8532-d72262a8fa30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c81db9-7840-47af-b88f-cb9aae01f4d4",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117b6a76-d913-4470-82b5-812470f98be9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1eef198-afda-43ef-809c-67ea6e1d489a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb037e4f-2425-4ec6-a670-139e6e8b6189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2750d51-1cc6-4d66-87c4-455e8ee7aa14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6899c4-f454-4570-a7b6-fa4a923cebeb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a8f2a3-afb8-45d2-b6d4-39845d0514c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd88962-a750-41e1-ab06-ed150b110290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6531d5f5-4a54-4194-8178-eb94f0654904",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "dac79268-d349-491f-a676-1e8665be71fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194650f5-c042-4575-98ae-e3c45a92aed2",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc017ee-cb5b-4a00-bc8f-03e83ba1c1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73f97b01-e98c-4237-9ede-f14d14fa2ba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e3b442-07e7-4c09-9cdf-2ca1d799247a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b25c3a-cf8e-422e-8e9d-1d6fde9cf3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a4c6e8a-1ab3-4890-92f7-25ead5358a71",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72897203-ba50-4114-bac2-0de9a7d7d8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d4515d-bd51-416e-a12a-84a4c5686140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d12c9a-4505-4c79-9f5b-25a765dff635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c181d89c-e45f-4376-a136-20b3f77c8a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528ace3a-434e-4b2d-8722-19a0f70a2c49",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f36a479-106d-41f2-b815-d13b93f40014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb8eab1-5bc2-4be4-9005-5ee973c4e408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35b758c-7afb-4972-a51c-a778cc28d1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "702b8aa9-b3df-4540-9cd8-bc3e4a60f629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51275e8-effa-40a9-99d2-d1b102171f2c",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39726d3d-f147-49be-9d4e-694dae3fbb34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a2cc9a-e48d-4dd3-b08b-e73584aa0216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9afc3a1e-6576-4f6e-b0b1-ca709aea15e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "3581edc7-6141-4a62-8547-d577d1c0254f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568c88a7-8b02-4e46-8342-bb0b47a66cf4",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c11bf3-a94b-473b-a3d0-e6f1094963d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067fd348-db44-4aa0-a13b-a61095355034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51300744-5b5f-4947-b01c-02225816d4bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce31f8a9-0f99-4dbf-ab7b-a53e97455483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c1cdeb-2f9f-4aab-961c-ee5d3ff834c4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e7aca3-839a-4069-be5b-3a4129b09862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7c16cda-e457-440c-b033-be04aca485b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af47c55-43cc-4e9d-9cbe-6b1cc9c6f532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34e07bf-ee09-49a2-86a8-bcc8c64b656c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee57f3df-1d3e-438c-90e7-b0971a23abd4",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcf463c6-f514-47dd-b229-1a066d788400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cf1b76f-3e2a-4268-bfeb-dcc0c0d05992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1f66cb-b4bb-42cc-90c9-0949b58622b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5dd3b9f1-5fe4-4379-af74-86109846920b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284646b4-a556-4569-b547-a543636d14f7",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f558f1ae-fef8-462e-8af1-be744e768bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8c6f5d4-90ad-4b44-a10e-3f56750e2590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234ee901-3bf6-4679-8433-2272382d8e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "849fc27f-272c-420d-8e89-cfb048ffc87b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "205ab859-b538-49f0-bc9e-d9933fcd9282",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90509c6c-7cb0-481f-a1a6-d4621c9997c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f3467ce-5c07-4114-9035-61d8afc31ec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a311b1ba-35ac-4419-a578-e20583beace5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f2bef036-b9b1-416b-92b4-845ed24ad349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9185b89-51eb-47d7-9395-e43e21b4581b",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbc1dc6e-cdfc-4e13-9c5e-02a7ccf5cdec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "738cab62-fc89-466d-a315-d6c8abaa50ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e598bda-31dd-4097-b0cc-b3fe04423bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59d546ca-b0e0-4667-a4f2-a5d98e556a87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced0749f-9703-4f68-ae8c-3d36aa125b3c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f082177d-24b6-4830-90ab-4121ca423387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25ec819f-97c0-45fa-8b5f-dbd99f4e34bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8aacb6b-efdd-427f-a4b3-3d342cae19c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0da6a5e3-a60c-4caa-a999-b0507558f88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68993cca-53a6-4a51-9296-40c9165ce821",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af7f535b-f748-4155-ac97-2fc65fa44e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de2922b4-0850-4072-a78f-e44f68a3d520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea7cbe8-1b75-4ad2-954a-7c013c36fb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "cdb89964-0a5f-42aa-84e7-bf4bfdb80aff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6f71e0-eaf9-4c9c-b56e-4b944819b4ac",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28c9b6be-090f-41a7-9343-780d51ebfcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6860374f-335b-45f8-b0bf-a3d9c737f742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f88410d-2d46-4c15-bee7-27a27355e9f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc9c0c4-f6d6-4450-86d8-833e3a5bf7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6565975-8502-4d6b-8ce3-6f029ac92398",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e6b0210-0dd0-4038-9f7a-73c261f402e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a18f4115-76b2-4177-8543-08bd2bcd4525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808c6c0d-6dc7-4874-97ef-3889a7447f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55d2582d-bacf-45cb-ac86-da17db13e278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae97f005-e8e7-483d-b601-b59518591f0c",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8ceae8-1385-4fbb-9b79-0ad70c698bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5785333e-5371-49b1-ae7f-cabf29617323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcde27d7-b77e-42e7-b6ed-4c4ce1353099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "716f5890-be01-4e5c-9915-b145f0a46b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f7e8c79-0447-493b-9c6d-08a2c70832c9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb84836-3009-4fb9-92d5-92964eae91f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bb55866-fcfc-41f6-8769-b5f872d9248e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13d98a4-4950-4065-9829-db805e7163d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb115b9-45c3-41f7-961d-158cbaa25f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23408fb5-70d0-4a87-84a6-f4189af5d9f7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f60b888-b84c-4f25-8663-25d527476dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4a00fc-a70d-4b3d-a5ed-c3e94930859f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1148c103-6a45-4b6e-a916-83d9ba274678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ec9ab5a-4e14-4b3e-9336-295306245336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc645b2-7041-4642-a02d-9a2841fc7985",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc74fd60-a0cf-4658-a8a4-f35e55e34ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "160887e9-8e80-4424-976c-2069684f851c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00745576-4d9d-4b4d-b23c-3beaae990f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed41bf99-2fd2-4523-b019-7e6ef9efef84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9129a86c-79a6-4db8-b8c4-cd3e5e9febc9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e52248-3312-411e-abe1-9ac9f71b10cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "755d5fa7-9ec6-49ca-a3d9-f0e198c71f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4900457-10a2-4bb2-a9de-abef185f067b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "35b15363-4e85-4218-8120-398d229e76d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befc6898-152f-4053-adc2-b4270ba95bed",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e39b457-a7db-4018-ae2c-9a1656910b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9a60996-a2b5-4fa6-a1d0-6eb285d6224a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7e4a5b-4f41-4131-a5ec-505acaf7869f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "351236f5-9365-4011-bf17-de72061e4bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1039a0-0c11-4bb6-9551-26804c73a91f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "573e1863-e6f9-47ff-b87b-913c48da6f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd5f32e-aad7-45a1-a331-ccf155f1d097"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d032c10c-6431-441a-bf5c-9b292d83a63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7a7eaf-f037-4430-88c9-2a3395170a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba31796c-dac5-424a-b819-38e7f8536725",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01e4139a-da86-431e-a837-494edf829ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe1964cd-3304-4c1b-b700-b795c9512b01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd9fae5-45b2-4dff-aff4-77a57fd4b4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d56caf2d-9683-4b12-a4b8-f395c32073b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "defadeb8-2b62-443f-b9ec-6eac851b7128",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cfa2db-9635-4be5-9df5-b31c15fe73b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dc7e39b-7fa9-4a83-a3f4-f6478e089b33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea136806-9de2-4b58-90e9-b112e5aed4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0239a86b-408c-44e8-870a-fd2d62b33ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf3d5c3-f58d-43c0-af0d-516c9505d8f1",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fd402f-e4b3-42c2-98fd-afd36a652577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "886057b8-b854-448f-84e8-ae11fcd2f5a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99c8246d-3979-47db-aab7-8a4024b1d31d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12262129-167d-45be-bb7a-8497d3a1ad3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430af73f-dd06-4a16-b35d-e265f182a77a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d55273-b802-4aeb-b07c-26fa2bd4d374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e8f7530-94a5-4858-a215-1192ab822af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbe353a7-e003-4442-a594-7adb58988963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "b59c37e2-33b7-4a77-928d-c7732c170650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11e3e98f-73c7-4bfd-9ba6-6e74e24afa37",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eb72c6e-92e1-4993-b0d1-551f13044ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd354a65-9c04-45b5-a4c9-0f42cf19af2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348011d3-9604-44bc-a024-ff230489dc88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f0e28c-3223-42b9-8904-30cf28b17236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f06cbe-bcc1-4aab-ac8f-be9bb3eb2d33",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76bf22b0-8c9c-43d9-b8f6-35d352a12dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558dfbbb-a43a-4749-8922-a1eee6e5fd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3806a15d-2e33-4a7b-97e3-525db9350ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d932fb45-ac31-4ed7-98fa-aa979e65babb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f9b0fec-ecb0-4d9c-b9ec-844c920144d0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011a4710-7e16-457a-8d1c-81f0318f47fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0759b418-b293-4951-9cf6-714d808a2eb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58efd0a6-4a1f-4834-970c-a83bcf819ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b4d6031-db78-4e81-9ab8-1ad748200c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5d5f19-b01f-468f-a456-23e19433b0ef",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4aa4fe-4cb9-44ca-9514-f5ee25d9b90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7c18a2-122c-42cb-a8cb-b7b1c9986ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51b1186-450c-4d2f-a688-141e51e80dab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a27f982-4321-4a31-b148-b7b807341e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bee60fc-3408-4e3c-96e8-eb3d44141b57",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6c1bfd-a388-4107-a2ae-1ef22df31516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644362be-1f99-45f2-9a14-1bfe8aad7822"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296c8bd6-a406-4431-9bb7-0f1a3153b0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "132c1994-3a2a-4e3b-b5b7-c0e17aa19be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462c355d-c43b-45c2-bc30-f6b2523df33a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d4fcc1-eb15-400f-958d-40eec1ef3c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a72df7-0f31-46a8-8f9f-04249928b4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4690e7c9-76ba-4b74-9f5c-c8b1f2ebf6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "65fdaa27-ec50-4335-8d4d-aa8ce0d51f3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "660e6095-14f2-4911-bb92-b1efab9fad02",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66ea003-76d3-4059-a63f-e171dbbe6ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466c20bd-297b-40d6-891f-cc41bd206f41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98731b3d-02d5-4f51-9691-df67d2978b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b832f6-5fc0-4883-825f-9ffe67dbadcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7adf4d73-f3bf-4068-9d5e-dd8d594ba41d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82aa0965-54a2-4ec6-8b04-69b7c837f3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc16ab5d-3325-472e-be40-f45f65d35c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09adcd8-8f69-4a52-8a50-aa777b94cf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c6c2790-4208-44dd-a220-0b50c1c12292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc1615cc-0f19-463f-a903-283fd1417184",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "610a4c37-58d0-46a2-8585-b44d8530499d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be96606b-b858-4b23-99fe-2f759d0cccab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b4ed2f-4e49-49df-949e-6877d0f9769e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ff6d1e-04d4-42b9-aad5-874a7f2bfe68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa0ef44-4c25-449e-b00c-cba55f4ee4d9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad3079b-3be8-4b87-933f-0e3e384024f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1ccf59-b051-4d8d-b07d-960cb926621a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edccd203-dbb8-47a5-8ec9-274cf963c490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5423205b-0be8-4124-ae79-324f69812cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156ee807-bc0d-4af7-9da9-12abdded0bed",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec4f4d7-b140-43cf-871f-d80582859d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e76577-f1e1-4821-8f51-e4084b193b4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7181715a-0985-4bec-93e8-e0eb1a619c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "725f5df8-24db-4bb5-ae13-2336e18f6dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90a1c9f3-c7de-4491-b46f-3e131ff96449",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ea6cd6-7d31-4b7d-b7a7-9ef43d90d531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c66b96-adb6-4806-bd53-b0c437c96454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfe0d82-b8fc-4f6c-88ba-d9094901ae30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed324b49-aff1-404c-a82e-9f748b633a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9e8e2d-e589-444c-8229-14601e1c3a8e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03037005-1534-4d16-81fc-9b4bac64b654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e72521a-cb7a-4e0c-a965-86564dc2b994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d38c90-2940-4759-9218-851cfd9d4111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd96803d-333d-4a5d-b142-aa8e182bfa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c0b3be-4b31-4e94-a084-23e1ab86ba04",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9739470d-4a10-47c6-9419-6afe15e16f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417d524d-7fbf-4c4a-ad7e-424e2c8a943c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516cd840-d689-433a-8a05-4ea5f96e5572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "659b7079-80aa-41ae-8921-1c8d85d2100f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3fa458-d593-4be4-9933-85199c9f4075",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69ad0a7-fe5b-4302-aa8b-b6a4df874ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75693abf-4a58-40cf-9c58-46efc9af91e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6fa896-d16f-4aed-82c0-b19101bfd4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92347421-28c0-4677-abd9-f2ee8a234cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3863eec4-c69d-4806-986b-0cf1ac77b352",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc75b992-df25-4ec6-9e29-3cf5870650db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7405af4a-581e-4046-979d-ad1da32ce38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799f266a-095c-4c5e-aa31-86bb40185543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74f434f1-8a43-4af5-9175-603a61b5460d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49625092-2233-4b3f-8b4e-31af95e56627",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a7d034-69cb-4246-a209-97c31d3792da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "881ab75f-a1db-44b9-b2f9-82a48d75b142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51b6814-8a4c-4f0a-934f-12f512fd5adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "91184d42-7c73-4662-9df2-d7192226fb6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0db8f424-c0ea-48c7-8857-903304ff9f62",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c6dc1d-fd29-46cc-b802-e1c12fb29c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90aacbcd-3dc5-45b7-b9ab-194608a1f413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9f944f-9e95-4a4e-807c-e0b1da0ad86d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a8308c-d704-4948-aae9-0d24c95a0e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978d7460-8ec9-4d9c-9a56-87f9adf6683c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c91b3b-a17f-4ce6-8004-b1edcc19351b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41332e08-6000-4092-ac12-6bdab35a88b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccfbe6f2-9a17-4400-b249-edde75605af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6e2a36e-7460-4edf-9cf2-4ca36d782a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7fdb83-c3a6-403d-8797-4d36c1baafaf",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4852dad0-eceb-45e4-a6ec-3e94ad272156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355e96ce-931a-43b9-a1a2-5be965a809e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5896e582-a1dd-4c62-ad10-c042b0a24a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfc11c5-2b8f-46c5-9c35-45f16f1b5d57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4326697-b860-4b3a-95fd-1f70981e8737",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b601b1a-d557-4e4d-8e17-85d35e9dea9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e077a6d-0a13-438d-8fb5-2a0fddd7c876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b91e53f-65fb-481c-bfed-27627f52600b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2522e421-3f67-478f-9966-546cdc8fc2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5be5412-f122-4281-8570-70575dbfff0c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ffc8c2-09db-4a9f-a309-cd30efc9fce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06e6a99a-4238-46be-941c-81ecd5ba2199"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ae8ef2-bd9b-4771-9daf-c17b8484add8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab009357-d4bf-43e0-a21c-2549fed280ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f318423-f212-4e3c-997b-66514389af20",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1136e465-9eff-40da-87d3-d7dbe08961fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "217c5107-dc13-4558-b1b1-4a2f2741ca94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81e78e9-bb40-44ec-89e3-abc4ab443eed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09b208ce-e8b4-477f-94cb-957186ea3117"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60acba5b-7204-4515-925c-70db2ce82e94",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec2488e-7f0a-46c5-964b-9fdd24a8c518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6b8809-98a0-4d9f-93c4-e6fa9bbcc9e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3c49f7-3d7e-4227-a949-c5b4b0d0b1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb21b86-64de-460b-8c2c-e71e6f2925cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1e460b2-1a8d-4e73-b0ed-e834558226d3",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f322dc-e42b-4d31-bb6d-92e2db8928f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52b35d28-2d46-4bc6-b13e-4f55d4125c14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6a3a52-3c33-49e3-83cc-3c045eb22fba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31d4b20c-96fa-4d68-90ca-cc3cc20a4250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d741d1a0-8b52-4b73-bf4c-708f73138081",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a74de349-3e96-482b-a4b7-a6626e00f190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d016b658-54a1-4d1d-b757-d3410ec06e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d995a78f-85f5-4b8f-a3a1-d977f14b89b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a3ac962-f28e-4c05-a84e-54ca18a57f72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ed13cc-f2d3-42a1-86e4-78c84cc1b092",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4f48a9-745e-4621-8034-5af285c7e723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e852856-6e0f-4e0e-8a9f-b6d7c66fb8c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3323345e-fe21-47e5-8acf-ad53f1361f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed229164-0a24-4308-ad01-265bb53b6be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa8df26-c5ff-4153-b9b3-69eed0721fb3",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfda8c8e-8977-4035-ae53-2eecaeae041b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e28853b-7561-4553-969c-5b7835a0ecf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d3a667-6728-461f-9895-e135b032409a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "84b01785-ccd1-431e-a408-f92c853bf8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2d8952-3ca0-4378-b94d-1b1fdc7119a2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b610ff0e-691c-4934-965a-069a0ff04774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32538609-af56-4f16-b35f-13d6528178f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c651fa4-ef67-479a-8d3a-081f8d02b4a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ee2470-9daf-45a2-ae9d-a60bcc6d4e9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71b43c0a-6ff1-4225-ac93-44a724db72aa",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f21e8b-722c-41e5-99e4-2d63df8b8e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b02d1193-0b94-47a2-9e7d-111af0b2ae41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2a8c3f6-1a87-4fed-b453-3d7e2f9f7ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6cef4c-40b4-4d4b-9697-0d4557a50f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2c18ed2-718e-4094-b0a2-fc0e5b569dff",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb641b0e-a6fc-431d-92b0-7bf5cb32774d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf966ac-3249-46df-8f2f-da7b5b74d430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c21792-5f6d-4a07-97f4-b0aa2a1b765f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15668565-6bcc-4075-82cb-f11ca9851017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be5b4eb5-48bf-44e3-860b-14dd7c4189b8",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9333a78d-ca2d-4940-94e3-c1b83bf8aef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5769fac5-a507-4673-8bba-3b7aab7359c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64ccd10-1ddc-4a9f-8c92-0ec3af1d0f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cdd1a8d-9a41-4c80-afe6-3b8d11b7e7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e1893c-457f-41cd-ab4a-ee3b4909269a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9061b93f-5ecd-4227-9f46-0a3773d0a7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "507062b3-60dd-4cef-85f6-bc6138916e2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a6ab44-f30d-4b9d-8618-f949162ac846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f3d19c-d63d-42a2-8fd8-4fe2229417cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cec326b7-1572-4d97-9990-860a4203b549",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6095b7d-5669-4b92-8d99-7aef28d8cb32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d77fa4-ab76-4fa4-a862-d78a8d4ed237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea1defc-8227-486a-91b7-fa62ae29a5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b65fd1-80a9-4778-9ed0-5c4ff33d1235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3567a8ae-4db8-4847-9fd9-29d10ad7be4f",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b7c8ed-1ccf-47ef-93d7-c42bdc0f5378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66be0746-e7e9-4bfe-a4a1-fbe3eec2c8a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0249e48a-b94a-4a65-a44e-d1495b32ae5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1573c840-c220-458d-add9-eb3c8eae2fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c3cb23-05c4-4e95-8cb4-83a456acfd82",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff431cb0-d9aa-455b-925c-8bc01939d32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57d7c53-b3ad-4b6f-a755-d11f1d282c1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "983853c3-20c7-42df-b738-7a6949ff03ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "80930ee5-ed5e-4181-a402-9208fd5c0008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "601e9fda-a235-44c2-8528-bb310b115289",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "414fba35-1e27-453d-92c8-85f1c41c8811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18cc969-f436-47cd-b542-1b408bdeb428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c2f51b5-055e-4365-ac4c-61a0af470d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ff8eb4e-2f4c-4891-a336-afb84e78da8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f41f3cb-303f-492c-9938-961b1c91f3b8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81827777-07cd-4b70-b5b7-a1af06456759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86dab6d2-afba-43ac-8452-939e4593f03d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7445bc0-857a-4d5a-905a-73d70695c79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "63dae60b-47ff-46a6-933a-9d9fee08e4ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d10015-efd2-49d6-91ce-3966d5074576",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d360e1-245f-4834-8aac-809fff21ca33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de5700cd-895b-4019-a16c-07a052edec92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c913b9-8b12-46b1-9123-3b2098e85567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8f6af537-3f75-422e-9f71-84713787390a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9868f9-7283-4ee9-8e4f-c1a4fe85558d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfe25ab8-e0c1-4294-b631-7e22407d4bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d3e1ca-1e22-4539-93f5-6da74bc5e7f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe5c4b3-42b0-45ca-bb3f-162e36ad999f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c45ba932-429b-4ff2-a310-ec25805906bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fb60d4c-8c14-427a-8343-0907eafcaf47",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05df6e22-0338-4d7f-9113-8af016d1b619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a09740c5-b01b-442e-acda-7fbc9e9c2296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9b32c57-091a-4d29-9290-b19cb6f0de9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "de28ee9e-2dd9-4a39-9a23-56ea0ab86165"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "45339885-1dc1-482a-b40a-2cf30b1567f4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a9a837d1-fcec-4de5-86b6-8c35fb7dbff4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e495db3-89cd-4495-854e-9a1941e7f23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "959fdf07-0215-4b6a-83b0-448ddfc0dc1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abce7acc-28aa-47f4-97ed-bcb0ab45fe44",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "07cb86bd-51f0-4d6c-9561-89f805358b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14248389-d5c9-4c9e-b55d-e63902964ee0",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cf5b37a-cec0-4b42-a5d8-46ab632328f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8dfe320-013d-4cdc-92fa-7f29f612e16a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b836622a-89b9-4764-b0a3-268df98a1cad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6b536e0-1f07-4605-a4f8-740a2425e112"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "701aeb53-1aaa-4283-9642-ca724771bc02",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd02a9e4-6878-4b1f-98db-6907fe272270"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc0e2b1f-819c-4acf-a6b6-16e41bd39bd7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d16ea1fc-759a-4162-80d9-109a7acca556"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3765c0f3-c7cd-485f-ae69-5e226df21ee4",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4cfb2388-7d2a-4a86-b8fe-1c5fa98ef799"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4f2b83c1-e59c-4301-8a34-5d2eaef2e998",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c80a0269-8b71-4564-abbe-195f56a1a168"
                }
              }
            ]
          },
          {
            "id": "01d88337-8d22-4a8a-b930-9b0fc0c5afa7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6d13d2d3-eb21-4a89-a367-9d4ac77746e9",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44838c64-1f6f-46ee-959b-0b2b8d50c714",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d63f1ca-64ed-4cf5-bd1c-3e4d65ef4acb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e891f080-e222-456f-9bd1-5d78f2772c66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f5272bf-9b2e-4f64-ba34-09153a955719"
                    }
                  }
                ]
              },
              {
                "id": "de00d613-a3c1-4403-bfe6-25cbd7bfba9e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02eb97a8-7bee-4f49-baed-942a98f7a345",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88d704bd-f2cd-4a9e-8271-7960d15af74d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2331671-45f2-403d-add0-9a56581cf48a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "af31a521-d20c-4a49-89a0-b5ae4bea6ad7"
                    }
                  }
                ]
              },
              {
                "id": "648f2037-63d4-4101-aec6-ebba24dfca75",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7fc95e01-3826-410f-bb38-0490d35941fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b699aef3-38e9-4668-94ad-57e470f64316"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6eef85ae-f0e8-44c6-bffb-cf0fd1353041",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10ef2aff-10b9-40e0-b105-370c709a9ff4"
                    }
                  }
                ]
              },
              {
                "id": "ba78833e-f5b1-4e42-b4f9-56b1481b4eff",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9ed06c1-9420-4e5e-894d-13c8e1b27932",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8f11f36-54c8-4f7e-9582-26619e3c3cfe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8f9b66b-9f2a-4b4a-b333-cb42bc9df6a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "6ebea797-3c42-4405-a792-07ae822f90e4"
                    }
                  }
                ]
              },
              {
                "id": "504d9da7-df5a-4c75-b8c3-513a92c13d52",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "758f5811-3d2d-4459-939b-c75340f8b5a6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "274b05c1-f76f-4d8d-986a-2bd27de792f5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "06779ad4-0374-4fd3-a3f1-17de7ec9f36b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "17ffb798-3de4-4d7d-a6fc-c059c5962265"
                    }
                  }
                ]
              },
              {
                "id": "c9cf2811-69ad-4d3f-aeb9-a379a6be2125",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec66f026-d14a-4cf1-be3a-522f798f2d21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9e0f5a60-9570-4ecc-967b-77ad1da7b6b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "242bb2b8-7d04-49f5-812e-77ce4491bc89",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f1e70f36-a0e1-4163-9fe7-2460bf0f099b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7127027-cb1e-4bad-b83e-2ade5818fdad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d61abd0-9097-449b-a257-a25313c8ba84"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d0e107f9-cf9b-426f-b3fd-1482ae3266da",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53eae38d-c832-4746-9797-77c298bc1b91"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae41228e-007e-4dc2-a8ef-2d222b63da55",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e5df5681-560e-42bb-a1bb-58f1dcd798e8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcee2155-7fe1-4064-9c15-9323c0712e10",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2f7c7520-b30c-4194-ba1a-7b1047e5ec77"
            }
          }
        ]
      },
      {
        "id": "0e737467-7d34-4f48-8a37-f172fee13be6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5f543b5b-01c6-4e2d-87df-9417cbbbd4f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fdf7675-a5e9-44c4-bea5-60485f3d99fa",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4943728b-1703-4a6e-b8af-bc9ad2b5c12d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befce93e-d936-4a05-ae9e-3f4bb7023141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06fb94ea-5d41-4852-910c-2908f25ad236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47fe018-58fa-4baf-b093-1138c6f165a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "de97d85a-7639-4be4-ae79-5f1c7746dbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c5006f2-e744-4e4f-921e-c5f6d56f543b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "223ba1e0-2382-4afd-91bf-69f9a8953b69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c734f7dd-6779-4929-a4a8-836aafebb2d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffbe30f-a8f0-4a2a-8a00-8db818a5aa66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9b359e-6734-47ad-aa65-075d853e4546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54f713b7-2e00-4e19-a24c-6aaccb1726e5",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58cf2607-aa45-462b-9764-64740f27608a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f551e185-1ae0-406b-bb97-08556f4c9de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa83ada0-834c-4f3d-9ee7-da325e88a4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50dcf5a3-828f-4ebb-aec6-d6510e37a45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e17b1a5-f5a8-4314-af84-df4d902a5068",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e709654-1861-44bd-af5c-c6124fd0c53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9558fa08-6814-4952-8676-510457e4d451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a10951-2b72-42a1-827b-aadc19e6aece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a608ac4-562a-422b-87d7-1c86364c3159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d9b2e3-11f3-4461-a226-7e142d2c7ece",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a7405fb-ab9d-49ba-b3b7-8c7ead33d588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243d1645-4900-4979-b7c4-5ed85af96237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e3c50a-c831-4b5e-ba65-1401b557d0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc5123a4-4a1b-49eb-99cc-79794fea9b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c11ad223-7aae-49ad-88b2-4d9694030438",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b718fd8a-ddda-42a3-88ba-1e605a705978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9ab2de2-19bb-4c2b-91e5-adf54b80b01c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce17779b-7903-4246-830b-2b1aea39d7a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "604828f3-5222-47cd-8b23-62f8b1f92df8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dee4aad-3912-47be-aaea-ee2f343d928a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56f8005-53a7-4bb5-b348-366ab002db61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e4118d-18b8-41b2-8c74-30abf636feef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0552fae-20e2-4933-9446-75480202091b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "347371fc-d31b-42c7-9278-4102edb1465a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467ce54a-9504-42b6-92e8-fd86d5c87063",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331c11ca-a581-4183-bf2b-e851ddac152b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cabc2dff-60fa-446c-ae27-3d08d21986ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28b6b1a6-fef3-4e25-93ce-b382d575c76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "de7546e7-0e61-4cba-a00e-2bd04f1db9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7819b284-f909-46a4-b47e-555b4df58f11",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d31292-02fb-4d85-92eb-71cab6f42698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e80511-f7ab-46af-8a5f-53ca8093a774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1caa89b-4a8f-4171-9f9b-7273d0534c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "541a5cc2-1e2d-4adf-897f-4adb778c1c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b4cc86-9019-4ea2-8f42-c62d513f50bd",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "038c32c2-0fbd-4413-88a4-f00184803c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f07081f-7b7e-4cbf-8ab5-2bab60c26f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a871287-881d-4b4c-a660-c833468ca72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a8d08d9-a945-48a6-a4c7-65ebbb82a7e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47f2545f-780b-4a79-a2f1-2910b5b15bef",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18b5710b-f519-44c5-bb3a-2967de29fb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7c5e2e-ddd9-425e-bf61-683ae584c4cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39273f89-3b9f-42d7-b19b-1b8401ffe95b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d49c3245-1502-4728-b6f0-944d5ce37ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075b8bc6-cc84-4c58-8c6e-7a82b0e0b715",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "420c5d06-4753-489a-9f5d-2404bdb9cf0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64839f85-f399-4362-9d53-bfbeb224b654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cebde9a-66c9-4cf1-8e24-03b35df8afb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "59658041-9f9d-4487-868e-a36d22c17c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a9776a-0f38-4fd6-85b1-ad0e7a9c52a0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee2ed5e-ebca-4cbe-b60c-cb96fda0dc92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8deabf74-16b5-4623-845a-a817936cce12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f567f0d-2909-420d-a9bf-587594f20f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "027f4fd4-b360-4036-9168-3c1f9cba5078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fc7499-35b7-4392-8c87-b5ad2579e91c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4b9d10-e21a-4351-880f-4a414fe190ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d7614f-8387-4d64-969f-cec3ff4bc251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b535b84-3cd2-4fc6-be2e-16037e5fc79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd25714b-2acb-4773-8381-a6f68db58af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "046676b6-0f95-4981-ada9-9d34b27aa63e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "586fc7cf-7e98-4815-ae7a-98d1743b7e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a302748-4d2b-486b-a5e3-04defd10fa9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9478c9-379d-4c3b-994a-9c10d0b7c2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "61699896-d7d4-4dc4-a502-b465c715471b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44780b2f-6735-4447-8bcb-aa7a62d30d47",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85bb53c-7d3f-4f26-9ff6-551b60b31595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b007d2-d132-4949-a835-7d20ed2753f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94be6a0b-904f-4f8c-b9d8-3d83a2be00cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2a0e4d-a35d-4d18-854b-225aa0662ab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b4fea5-2aa1-421a-ab3c-ba44e52842b8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd3eb21-337f-47b9-acbd-aa5126e8964c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cb845ff-fd43-4aab-acfa-d8011761ce21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08df9c82-73f7-4d9c-8b8f-c58743b419d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9bc0ce7-41a0-4e69-923a-33aa95e57e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "268d3be8-bd88-40fd-a849-a07732912ae9",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdaea380-5aa0-4199-93a7-a5ecbb2fc1ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7abb7560-2feb-4b9a-890e-eed0e27b03fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55274acc-b49b-4300-af3b-5d675d637b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe681d53-9795-4966-b9dd-22be2cbb7358"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b69736-8e1a-4fba-8be8-5cd735fa011b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "172771f5-0424-4556-a825-22e6c0fbe37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9a095d-eaed-4f1f-a003-fe24906f2e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dba208e-0daa-4620-8ea7-9d11fdfda943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bff3e522-48cd-4a27-b679-354aff85b86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357baf16-9f42-446e-b4f1-fc1f7e3b5c55",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38811c03-0ee6-4b72-90a7-2590ba96eefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "235889ab-128b-4055-8e18-e7081171338d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5f1e4d0-b210-423e-8b61-0eeeb9271687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d154e875-2a5e-4912-99ee-c4d6631f3e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d26da8-0730-4068-bf7e-013e5e49f832",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72490c6b-43db-4205-a332-38940a0692ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e501fe0-202c-4389-8941-68f5c8a75142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c32e66-b1e7-4b7c-9c5f-eba0ec0c2b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00b64589-5cc6-49b3-845e-18cc27692899"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7133d01e-4bcb-4699-8af5-82d80dc443af",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88675e64-92a0-4de0-afd4-055395ef94d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf22920a-e996-4191-8a76-0e734f75486c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fafd053-3d2a-476b-a162-0f3aa6f96da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3dc2c3a-d907-45c5-ae4a-b59bd84ac773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c786d5cb-a626-4775-bb18-cc1fc34fb6f0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3850fe0-b27b-4ed9-8a87-4cb64722bf6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b791a36b-28bf-4c37-9159-36b2047bd56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6610be-172b-4358-8678-ff61f11a635f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8badfc3-339a-4a8c-b617-bbd7a3403705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a65d9c2a-a2a1-4d13-90be-95d7bcd9591e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd61e0b-9ac5-41eb-b392-cf9c0285eb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ae0409-4e4b-4e41-8350-756d625e2e66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "702c7a63-61e4-4336-8c95-c75fb07c798e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee35985e-6822-4462-a4ef-3317d5d6f621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7710bc03-a6ec-4a6c-8c3b-894dd39e156e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447af9d2-193f-48f8-9a26-6e75918cd303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b81ffa-8065-43e0-8331-22db2dcf07d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bba3874-9e82-4e4b-bf1b-c0ec87202532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f791003-523e-4aa2-b6d6-4c0d9a902ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e42665-d1b9-49aa-8cb0-255931b5f4c6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e74495-f20c-4f24-8de5-8a5d06ad77e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6a1590-92eb-43ae-bd39-e047a203e0de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f311fa95-ff6b-40c4-a0dc-52acb1fa96c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "798a7e46-449c-4774-91de-c1357e9d635b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ed2e69-9c85-48be-bd70-83bfe8ed9cf8",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a8c2aa-01fe-41ee-9a10-e7b3d186c0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33a30aca-1fb0-4e91-847e-491740ab24e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faf62c2e-ee70-4d4e-8a54-aff0a97a096d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "efcf1ed3-3fec-4e75-8e02-e14599a8210c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b13b412-5c94-40c1-aaa5-b69bf077077f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df6684b-41a4-4dee-9f68-3c8feffb613c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af44f563-16dd-4bf3-bac2-9afd0e56915b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd8b4d75-e072-4436-81f5-55cabf868d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63af6098-f23d-4272-bec7-887a149a30ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112ef526-cf8e-481c-bca7-dd2cf5d37419",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d46e8076-e687-4675-af0a-02ac9e145235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8d2a72-6f02-4482-ab19-472a810d646b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b1028d9-bdd2-45ff-b0b9-cc854fe5f77b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22ac2dc2-7d77-4882-b43c-f11c856f30c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270e2bbe-cd4d-4602-9684-1b2f7be4e894",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0fe71c-537a-4121-a9fa-bd09482e56d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bac26c7-d9dc-4127-8d61-c8627c03ad76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c80ee1c0-999d-4026-8e37-7f952827fa9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7ad8543-f10e-4826-8e7e-c680873751cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56751bc5-bf5a-41c8-892c-4515a30bb237",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d059a3b7-bafa-4618-992b-6e07f2916a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bd76ce2-c623-4bc5-8d48-ab9670690a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f59f9e0-5ea8-478b-9ab7-bb5c8a2fab1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b459c68-273b-4fde-8a97-834c1ce3e3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e260dde-0594-429d-a34c-c97fd292523b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1082ca32-b6c5-4ac7-9c64-8ec19741dce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7e62823-1691-4ef6-996c-c8f395c59e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1698466-cfce-4480-b641-988ba9b36ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "57221f09-1922-420e-b451-1328664d4ea2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "720eb189-50e0-4011-9252-eeb739994012",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97608f6b-e576-43c2-9163-0ef4edff8153",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58be785f-b37f-4d3a-9975-2427822f34d6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3207d649-4851-4f13-a53c-1f00dc78b557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "727b6415-8526-40a6-99f7-92205174f20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e5aa8afa-daf7-4c2f-bad9-0fff37c59a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8148bb6-4a9c-45bf-84cd-f1bc71a6f6f9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec85bba-5ca5-4cbe-ae0e-57cdd9b0f317",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "11f1117d-f699-4003-b3a1-a5e58a17a1a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e97ebf-e30d-4e7e-9333-adc116617d07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35e8d344-eb6b-427b-9633-0ba429e56624"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b971f32-3914-40a8-8098-bf749df972fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e9cdbb11-c3b0-42ac-9aa2-20510b404471"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbd66914-19b2-433b-a9b6-56f5711f7416",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88bd0088-9116-4948-9106-507b87232659"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c879003d-5383-452f-82dd-925eab3731b1",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c103601a-9bb5-40b5-9010-3cf90c67113c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1a5bff11-ade8-432f-9cf6-a9ecfb58c225",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2af1b0b-13f1-432c-9c87-4ebcba6e68bb"
            }
          }
        ]
      },
      {
        "id": "7de399ce-bc1b-4378-9a7b-1fc94ca88198",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f6d3e875-1eae-436d-b63c-f301a7ca7afe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b966a20-184a-4cf9-9643-1bbd25d1b850",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c977e70d-f39f-4bac-9b08-a46250f9190b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9773a470-422a-4d73-b1da-cbd60273b90b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a4b488-940f-44d0-87b5-405ba1e2227f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c09fcb-3360-4990-8881-401e7b23eb82",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e40d50-193c-4295-8d92-66223ac4ab8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c32726-96ef-46a1-9545-42921c77c2bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cedd74-c1ee-4386-bf34-9db1e6ff6888",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dfd248f-1613-4584-b231-abdaa941eb8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b3a5969-9ce2-449e-8368-ea7ec317d13e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db18323-32cd-4c08-8a24-28c8a0b45a8f",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d99d53-1969-49fb-8b8c-07966d23cf2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e9c8c3-dc8e-4e90-8c70-93c89bf0d788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4a0b96-b88c-40ba-af0b-40c8e39303b2",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "511672b5-330f-43ca-8620-42168374a56e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff3e4e02-bba7-49f7-934c-bdb6d49bdc52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7e7bf2-a2a2-407f-a5fd-a913af935ed5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae09e40d-2f2e-441d-bd6f-2a903d6f2bf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21380af2-e579-422d-af7e-959432b440bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdffd06-9b70-4f4c-b2d2-20c6782c2b76",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "283588bd-981d-462a-88f6-19215972226a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabeabad-8687-41d2-8ab2-50cfb1dee48a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb45d1ab-80f6-4f2c-9467-86bec14379f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d729534d-c9e5-4805-ac5f-d70cbc5f04d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa22abf-7707-47b2-8455-e8da8345d4c1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32859bbd-e3c7-48fc-b11c-c84020e51a61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca223f1a-78cd-4089-ad5d-fef7ca3b8864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f57eece5-ff78-4681-a0e8-41436437fcb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df90b05c-3444-4e3c-a80e-6a233eba9fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "825e04e2-e29f-4045-b29a-6cc3e83574bd",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c928b41e-6f30-4340-9191-158bdd61dbb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2406791-536f-423d-8c57-9bdd9f9dabc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "194c6b64-afee-4340-bed1-d7d902bdf336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b396fe-7f4c-46d6-8650-b3b53c117481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e79cb958-2465-46b1-9dba-4414df38c547",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b770f8-2a12-40ff-b6a3-1c65e1277e19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28e81ef4-b567-42d8-b8e2-6e388e556fe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f128045-5a2b-433e-b1e9-cf15c779e5eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75e6ab74-17be-482f-9691-c5c2e9f1ac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c0ce12-a1c7-405d-9536-cde0460795a7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "025fbd8b-586c-41ae-b507-a91ec9c3bddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f3a2aa-91f1-405d-858f-73f9129354de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "490f4b94-0459-439d-a6f5-93cd873ca7c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4c88fb6-109c-4a28-9b3c-5e38f98c7ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27076a5-44dc-49ae-bb9d-c6ff67614642",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af13564-821a-4d09-953f-ff4f4899fe51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37aff10c-7bb7-4a63-80a2-fefb7428ee30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15936b27-b593-4c37-a12b-69c643360d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ad10cd-b881-4295-b87e-13affc94f5b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd2effc-3d8a-4350-8838-6e29ba3a77ad",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23fa4866-df99-4aef-a762-060100a6322b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bec0dd10-3eb9-4fba-a110-868bad59cccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4257e7-735f-4208-9195-a18c25927cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250caf7e-4efb-41cc-9eb7-7e1c80ebb83e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aa08d15-ae0e-4942-aa3e-7157d7b39308",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4ca60cf-3cb1-42f5-810d-d65037c19b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "760a559e-4f42-4dbc-8852-ac92b159852a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6333d5d0-b85c-4cba-b7f3-4cf787ce41a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa24c5db-c986-43fe-9cd0-8701b3d50ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057765a3-2039-4f69-ac9c-816e45ce44df",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea676b0-bd9f-4fa2-946e-ba20cc37fed5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34f4ccdd-91d3-401a-84d4-6bf45b98949c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d980f3-7926-42e7-b713-8524ebf7e08e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89e44ef-7f5f-40d3-b035-500551054386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6ce3bac-9c53-4ce6-a3a1-74a86ebdf42f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff3064d-15d9-4c58-a859-0b6fdec6064e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ce31aac-3867-45cd-9048-2013bc2bf6ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "517c76d8-9818-4783-8b72-fd7f27c4f82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec698a4e-439c-4f60-adda-8fc6693df25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d64b27da-29e5-4d92-88eb-ed0df25e2f68",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0676e15e-5552-48c3-8c04-facd0adea095",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601303e8-ffae-43ce-b3a4-3b7d37558f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "882e72ff-69fb-4643-9986-7426f880baaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a1a200-afd6-4f88-8c85-adb538871896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8cff50f-83dc-43ca-9384-f3c74f738bd3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b820a3ad-98ac-4193-9f3e-07d18c9f0f17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe20567-a625-4c03-aa85-0e20730854d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28de4d66-4cce-4f5c-b6d6-38c296fcc765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078de230-63c3-4c63-92ed-d70e95cd8312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c1493f4-8e33-4fba-b4d9-687a996b1f18",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4b1339-a006-4d01-8d82-c738f16febe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "102f2eda-deeb-48d6-9e80-b85c2385a735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f02379-d5db-416a-b789-c0f60783eea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60999253-cc4b-43c2-83ec-146809cf8a04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ccd17c-8efc-43ab-8cc6-c09df03f7301",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "722c4abb-a926-47b0-9799-3d797e6ee190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db53b5b4-020e-4a96-a0bf-596f46baaaeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "164010b4-7686-40e1-8822-e70201afcf7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225c48d1-de2f-4023-8df9-7f0bc5579e67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "822d4fb3-812e-414f-826c-45783e2b782e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f4affca-9014-4b06-ae07-05f33c706b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09c3eff4-b43a-4cad-a329-434b7765cfc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaddbdb-4bc5-48ef-b069-93e6698abcda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b128a8-3b2b-40fd-9530-573c7aff47d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4344ab61-9950-4410-a314-354f2885b799",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc6a8c2-4baa-4d75-9c11-f6fbd249b5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cfb6f83-e335-4ecf-9206-374b83f4dc3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58bcb4bd-3ea1-4ab4-ae42-d3d24b69f720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecc9c4a4-9c51-45af-a8a6-6ff064c26c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545cdcbe-5ecb-4483-aa89-91caa6b79b27",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1982c0e3-833a-41a5-9548-351091e2cfa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e814d08-f48f-4663-b670-1e9d12d378cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "876c8a35-5036-4e0c-893b-7c5a05b9058d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c6b3aa-e040-4c1a-a6d8-382edc145fa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4fcef6-4d1e-428e-a5df-9f5855a77670",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4de88fd-eb57-4400-ace7-aadc14479b69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "284a7d56-98e6-443a-9b0b-ebfc32a41dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce7f35f-073c-425a-be56-ff43a27d7b9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed81e50a-1c3d-4aae-80f7-ab302ed3ab9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bceb1b31-d3a9-439c-8fde-b1d484e32e5d",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed13f9fe-2c0f-466d-8b0b-63cae5f49fa1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddd5a5f1-a2ce-43cd-9806-6db18e479a8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78005a10-a7e9-4595-a738-cdda4978eb76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c0308b3-ad97-4c12-9403-ccd8453357bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd751a9-bbe7-4655-add4-b96f3959c672",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5847f0ad-1d35-4bf3-bc34-e6a99a1c5b6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e53f6155-5bd0-45ff-a9b9-e1f2a39d3166"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4538d0c5-a991-4432-8389-b58609804e0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a2140b-0541-473c-a2cf-098d1dfc3bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cd1316-9240-4343-8fb6-5e56a9e1af89",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf02f34-5090-43bd-97dc-4d1d21d68300",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8042f8ac-2b1e-4830-bcff-476ab0c1f0b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1b0b24-150e-4015-899a-03feaec5876a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "154c2c9c-bfd1-4103-80a1-35720f7527b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0bb8f2-e22b-443e-85b6-330b91b6dcf4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed9d388-b0ce-49c4-993c-2cec1af7c7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ae08d6-d79c-4f51-bc36-4d2630a396c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c60907-84f3-43fc-82ad-608c9e551207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3f74bd4-4202-4abd-836d-3037980339d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a124616-ee7c-45d3-9416-ce634d719012",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b610fd91-1dbb-4ceb-bfac-70284a60c4ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0037b702-ed6f-4264-8689-01ab44eba657"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f513f4d7-3641-43e1-bdec-5018dfb3ca57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3020042a-ed2e-4a29-95fe-fd33485755de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c9bd5d-8e58-44e9-b369-05edb2b9c01e",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e9bf2e-e14f-406d-91c9-faa5c0d1e84b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81ef2240-dd7b-44d0-8069-0661b3c53002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "596f2595-36e1-4761-b158-2872e16e8a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c1a3d0-fc81-4ddb-9bfb-80ed5e7e44ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13405871-c6a1-4710-b81e-9926e821e293",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f104e6-d413-442c-90a1-f833a128a212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e587126b-7e56-479f-8ce6-e994f6759e9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "807d3087-d594-4532-97c5-640816f7fcca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0031609d-f881-4e6f-94b6-3ff621eaed17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9271f816-c0ce-475a-be28-08c10bc6f4b1",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41de40fb-24b2-4fbd-9835-6b4fe63ed04e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab6ebcf3-6e69-4ab8-a605-49523bf74425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85a14fea-d0ec-4e61-9cd3-7003b867c989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3de90ef-e8bf-4b1a-81ef-6e09be6f6fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d217c6-3f4a-4464-b9e0-d8fe6f2cd3ac",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5422d96-555a-4588-b5e4-6aee1d782203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b768b178-17f4-4a4c-a274-324f28df7c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d0f801-2534-4e42-9a29-d48305431d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09d06eeb-6503-4d51-a112-6998f116df3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3038aaf3-1354-4c7f-8c45-0a0ef04cabef",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50e5fe46-4160-4235-82b0-564f54de2b5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1791a601-8eb7-44db-862e-5fe175becb5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "452099bb-d9c4-4054-a44f-2822c412a6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63095a47-8ba3-4528-a95d-c2849b59a4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3d5863-4508-418d-8f0b-29c80ca90daa",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc5f88e-8055-44c1-8431-8bca9e14064a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d965867-2244-4d14-8570-95139cbc0599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fef97277-e233-413a-9c63-a743f26a3b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab244163-a8ab-4d8c-8f90-25cf314fff77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b2351a-425c-45e5-80b5-de80dd5d0e29",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61e9c9ff-b36a-4243-86f9-31fa05419963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8227670b-312e-4938-9daa-2a1979a6c5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c26932-a7af-495b-acab-16d8920e62f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3362b8eb-1031-4400-8461-a2c99c3514e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad0fe42b-4419-4e95-890b-0487f981b90f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6f5f47-9589-4845-94d9-452c3a77804f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ad3adb-49be-4a18-92af-0b03950d9a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eae5b81b-7b24-428a-a02d-865c7d0a9697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7e0b5e-06eb-4b29-b63b-17382e2d2186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad9c65a-bbe5-4353-9cac-6c042f43507d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f70366-e7fb-495c-b7e5-238b44b5b8aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07c6af53-1b39-4b75-9bd1-ceb071fc613f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "014b1748-35b1-45c8-9eab-060c2548ac7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2ff231-70cc-46e8-81be-43d923f1c148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e30010fc-8f59-441d-90a1-69448350a281",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa071fb2-44a9-4c7e-a663-b7fc287adf8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5439f3d-418a-4f9c-b50e-27d1e878388f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec7438e-68b2-49a5-b55a-576ddaddecf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6a9e41-0d05-482e-bb6a-840a735a2e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0b82c6-9436-4bd1-8b10-fb3513a0f294",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c63843-b53e-4188-bc1e-6fddcc907d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af49e1a8-e923-4b5c-9c4e-9a1e803b8f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9bb569-e77c-4281-937a-f5971d3fb57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "964713c0-ad00-437f-a3cf-592e66f4a3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65bc0ef4-e8f8-415f-a0fb-c26fb8e36058",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d364198-42d6-4168-9315-a88012285174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a86a62e-f02c-4949-bb4d-1a7b61af6352"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1018059-ac39-483c-a52d-2ff0f88b2a86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f522818-85bd-4717-b0f2-c57e0a7ce016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493a004b-0212-48ab-8392-d064f050b4df",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99deb019-4801-4b7f-b711-98c35616aa5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8af8ca2-82c3-4316-b05c-5810f3a45d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "603462df-a938-45bb-a2b5-76824b05db52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1969b042-4cfe-4670-a1ce-a650268f8a8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ce9488-f092-4520-9b66-1a39b3521390",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bce1bc89-a73b-4a8b-9d6f-f17c788ab146",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c1f52b-a87e-436c-8e22-66c7a52a3589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73c52f8c-cfa6-4fa5-85f3-7fbdcedeba94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6ce0f16-ef2f-42c1-9374-5e54195a9ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a996b240-d0ef-4b38-ab1e-785aec241de6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53698c73-e96e-488c-a327-529f7c5c5aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88854eb-14e7-4615-b194-0565450ceca1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "273f8080-50b0-4dc9-803d-d09304504eef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45affd9f-a17f-46cb-93d0-e5289b349ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57ebfdf-ae11-4eec-8588-b764b83c5976",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51d9c35-63a8-4b9a-8f82-40b4fe7a51c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0f45a47-6c8e-4408-ae9d-17b23631bd95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4425f1-bc1d-4593-9dfd-2086af248568",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd0d93f-c13f-4df4-9fb1-088bdcb8fdd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ed1730f-4671-455c-8e86-9b79f5f49c73",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea37ea1-3796-4165-a2d5-0f4ebd18d150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a54ea06-a312-4355-93ff-baacb9faf3f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323830d1-a707-4849-879e-f0757c52b9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf6e71f6-771a-4e98-adb1-d96a0db22f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea148e6-d2d3-4b2f-9b8d-ed4c0a2dadb2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf4f864-80b5-48ae-988d-06339a92bdb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "473433d0-355a-4372-9164-6bf7d09045a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cd5338-16b4-4202-bc6e-e9c2e0c149f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f673fe-72f6-4dc1-bc29-40ec6bee3f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2afcdb22-6b27-4173-96fa-a984b612a496",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38feee5f-5f42-447e-b8c5-207fce15a219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "219b533f-2bf8-4fc7-ba7f-f1d6325b7fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcf5dc2-0556-4a32-9b03-49c6fa130c39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7b1ade2-d94e-4379-b9be-c9eea51158f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23575fd5-0149-48cb-b631-4159411896c0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a0a552-0a04-4ab7-9808-9a72fca2e58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "284327c0-4589-4180-8b77-8dcc01dd88b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed545a34-d714-46b4-ad8f-5b0780e4f251",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac80f065-5d3c-4961-a8a8-48d094114c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2509728-3467-4688-a22f-20e4e834ffb9",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783da7ae-f685-4c0d-86cd-ae80f155695b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c07ff195-7f90-4220-a32f-3289581f7c3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e272d31-b563-46d6-a05a-4ba5e1374c6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75413192-da73-4d6a-81c6-22c35f6b392c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c465b0b-9ca7-4db2-9603-38b11fd8da8f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094c1f52-befd-4463-a233-9a3d5d7703e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8117518b-95eb-4dea-adb4-f92743750f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb3649eb-570b-4729-8316-c30351d672bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877e145c-aefa-4d7e-a4c4-f84ab5fb2439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94158796-a156-4b27-9ace-f444210b3e4b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "403e17f7-bbc0-433c-9bf7-14d57f2b7d82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "313c6e0e-a476-441d-90fa-250f89772b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4dd2b2-81ab-4a44-abf3-611098221111",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2319308-566b-41db-82c8-1ac7a5d6aeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c99e5fab-b1e8-41c4-8706-7ef2b60f0cd3",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676a123d-2607-49d4-aed2-b7234efc0f92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cea8a640-270f-432e-900e-f3cb6b144837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07f51fb-4cdb-4fec-b030-c3a596a2b5a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96b6d05-44e2-4624-a8a5-587f9f1eb081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d2e2db-0994-4bc0-a920-f37e0f30ab53",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e15af39f-0fd2-4fec-86d6-c823ece10ad4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55335198-ef3d-4029-8b04-a9fba6cc8b29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab511b9d-e584-4418-bc95-af0e2f98d890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f4d453-81e0-48f6-b256-484931819cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674bed5a-88e2-41ae-a508-86b9a28b787b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42633aa8-7d42-4609-a044-02c47f339910",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab557e4-7c69-446d-bac9-50045a01b647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43999ff-4133-42c1-873a-2ad8c805501d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725de0af-0a41-409f-9c97-4681f75234c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0528e3ef-4254-478b-932b-372660e32da1",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7f8b4f-00bf-4cf9-b714-5d48f04db20f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55d46d5f-e0cb-4f41-a2c9-7bec2f0e9ce1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f34d0d1-4499-481b-b350-0406ab8a8a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01df5349-e2db-4577-ab4e-73f7bd4b7905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95526e20-90c0-453f-b17b-3fcc05dec05b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d48a1faa-88a0-4374-967d-fdff4b9f8f4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e214b9b9-8659-4deb-ba76-830aa5e67e71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d3e01c-56bf-4efb-ae4b-b6445609fc96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96334536-5027-4cc1-a111-2935720f9d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191fd7e2-b19a-4d27-80a9-7b586f5cfdfb",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1974ed3d-090a-4de4-a725-ca5671eeee3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b84985a-473c-44ae-a0c0-891c1bd178d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f94ba3f-758b-401f-a3b2-b99d68df31c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254bc92b-997a-4d2b-ac2d-c52021938081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05dd94c7-0f71-4554-a690-3f373081c83e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9894187-8f2c-40b1-82cc-566db17894ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a015730-4ee0-4143-935a-133841e38f3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4313134-f3d7-4dec-8693-7069adf6116e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9cbf612-cffa-4acd-a841-2120a494b2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe19ce1-ead7-48b0-85f1-b1d39f8761c3",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11ca12bf-01cd-4747-b641-a481b790b0e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bde41a2-c92f-4a90-bfdb-67a0c83b5814"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fff697f-f499-4e42-9d2d-001d0142fd0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dfd552a-49bf-462d-a8ee-aaedbc7e0a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83caa8f1-9984-457b-9bc0-d90cf0b57102",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e16efe6-1139-4f23-9266-59f6d95779a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c658ee3-8960-4d9e-984e-5d44f179f3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0eb4f3-0245-48ea-bd13-0fc1f75ede05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91cfc9fd-45f2-4a7d-acec-f873f69bcb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9baf91a4-9066-43a2-a75d-cea715977403",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d615f02-50bf-4376-8a70-9fe74e5eb928",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e06933c-ae70-4bc0-9f5c-85411811abd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e1c174-6d81-449d-bc16-97faa98a60b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5043c5-80e7-4eef-9332-5d1edaf07a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d660429f-f46f-4af8-ad65-a09d4526dc7b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f2e65ab-7a63-4bf8-96c8-532479a1af8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18bee7ab-a4a1-41c1-ac15-bbb2c3efcb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a311e5-35c7-48db-9021-d1454d1f463f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e204f37-0c4e-4402-8929-db13a0e20aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcadddf-3a6b-4d38-9d6e-5f930ca7fd1b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a973a254-45f2-4815-a63d-e3a54bbaa6dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "761195aa-119e-4a44-8f08-ca4aa60dcd0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe89363-00df-4899-a9e0-3515da7220c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a3164e-6845-48f0-a78e-23e21ae2252a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2574f4-c50f-405b-a2e5-c88de45d8192",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63354a3a-6597-4067-867c-4c898008c3b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf943704-2088-4048-9867-60bc4dc9d515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cd8faac-cccf-4b71-a277-aaba0498537e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d000db3b-1fce-4a91-8c4b-090e9e160f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5a1433-556d-46de-be9c-9c671189a07d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4330f1bf-310d-488e-bdc5-af4040b1f621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ddb1c7-fee0-4a74-9025-6796389ec3ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48816e98-beb9-4795-83da-43a7f788a705",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ce5cf1-5cd8-46cf-937b-bc4a065d90d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0512825d-ab45-476b-b6d0-af91a3a92052",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab89c216-7792-464e-af77-d631a3edd45b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153f37cc-389e-4fc8-b170-051cc3126954"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5149898f-ace0-4ae5-b56d-36cb2a7e6919",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54e308da-6bea-476b-a387-05cbf91e25f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316685e6-2b17-4041-8f5f-6c03a7a502ea",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2adc1a2-6052-4abd-985d-4d6a56ebeb9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee280ab0-7d56-4ff7-b968-e85bd293c9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9064b6b-16a6-4b7b-a867-a14f81eaa365",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670ad42c-8b89-47da-be7f-eeaa49a3fd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f851f2be-542e-4639-82b7-a8b9f9465b39",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205cf5e7-6c2a-4a49-87cd-46505cc0bad4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b697cb23-21c5-4deb-9e85-0cfd4e7971e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8e69c61-d8d1-44a6-9c84-aafea3de8db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17d8814b-19cb-4c87-b57f-78f3318820f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0380f74-f102-473a-b20b-049b0ebc8cad",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23606c23-b036-4d79-81c5-2a5ad0b05acb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5555ed97-b332-4e92-9f27-c49d5eb2e52c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc89f37-00d3-4600-93be-d4776f2de080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37be24f7-de67-4d89-8d6c-f7c289eb74b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8fd164-879c-4d6f-a005-7003891d42c8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a993fcf7-db3e-4ae5-9419-2f00edfcdfc3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dfe2dcc-5722-4122-9856-898bdad5b686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f52a72-1590-450d-b811-81c1d659edc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3294e1f3-43c6-4de4-aa47-d03d76ec90c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f62565-b556-4d8d-9744-c6ebfe4ff950",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56614680-7ffb-4b45-a696-e4a900b1fcca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ddb5edb-c420-4b4a-81ee-04f5783c50d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656fd13b-4db9-4b83-b4e5-e39573fa3026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0c97282-bf33-4808-ae15-0b7eafb04fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06e4a53-f6da-4039-a154-9cbb7c9d10dc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc1aac9a-caac-4bb0-82d4-bc42e434c56f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "23cef678-7cf0-455e-80f2-3f0bd2fbb4ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbd2c5c0-e54a-49ac-838b-ea64312cb9fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9df4e21-ba47-472f-82ee-9cee200deb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74cfcbbc-4c09-414c-83a2-b3c42b6b59d5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c841b2-2ba5-4c84-a3b9-22f4475c6c77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22872ff6-7bb6-4ff4-ae04-2d2dd8c79288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc02a7b-7784-4a81-9a3f-d17ec09645e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a42be05-bed3-4459-93e4-574907a917d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f51c4ab-9402-485f-9c80-ee706096baa8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841965fc-e01f-40d7-8471-43a3ff4d59da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "323aff0d-1388-401f-860b-7f59c3237823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1e415a-d4d1-4883-a89f-2baa1dbd5bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25344585-1880-4723-ba2a-4f3cea58d902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03359ff8-f1b0-41a4-8bf5-06b7b2924ca7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b84436-e657-4b25-908c-2bc5e2b3d31e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67c67687-d59b-4298-a43c-d80e6d0d4a7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b977ee7-4a81-443e-820f-57b60f860d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7dfaf7d-cef6-4960-9130-38b1496c5db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d137bb80-fc85-4a0e-9fbe-63784fb5c763",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f500278f-4070-4be9-8291-5ced81542513",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be4ffbcc-67e0-4f4b-bcb1-a26cee5876c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b4fdf57-100c-461c-bf69-eabddfec2c3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a281c10-8e99-4787-b2ea-bcbcf4257fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d14af1a-9243-48ab-88e3-3caed66a11ed",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6df9c11-61cb-4c23-bd6f-5d8a60699722",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "881e186b-e581-45b3-899d-2c48157e7987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53af5578-c79b-4da1-92fb-baf86ea56bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9b94ec-ae12-4585-83a1-7bda66d36087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f762051-0423-45ae-9886-045e07e05c28",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4591bea-abbd-4653-b6e4-4137e6078473",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8522f7b6-7141-44d8-89d2-61d2af8f867c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84872623-f6b6-4bc9-a532-9552d7390c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e4c7c60-c0e9-41b7-b692-79dd2321dd16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4c28a9-67a0-4daa-992d-cd2e08eea1a8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b04067-9bda-4888-9f3a-94a9e32d6224",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484b8cfe-8741-4438-a676-52481ecbfd73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61423c1f-c61d-41ea-9b64-3472d8f1dd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6ae60d-289d-45db-900a-270eb084c324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9218f2f8-a801-4fff-9f15-c2ed0beb6b19",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3237a321-a361-4e07-ad96-5532df4194d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06916b6e-1cca-431a-b3de-3ac954948707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "502fe1c3-9eea-4cb8-ad73-b85d6a308eeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7a2a76c-2e3d-415f-87f4-51a1b68d535b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c0e59d-e489-4e57-b9fd-a1dddb63bd6b",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c43d2b62-0a02-4a9c-ad50-5d3770cd0afb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abbc4504-3cbc-40b7-af55-bda32ced3a56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "550bff54-dd3f-4624-b6ff-df1f44e4b42a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e325ee5a-272c-446d-aa4b-05e48b12fe19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f02252f-c5d5-4cd9-ae67-5774fe589b79",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e509bb4-7a3b-4f2d-a068-d6e2d361970f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0934ef66-2043-4e94-80d9-121995f03c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbc0373-f40c-439e-a86a-bcb9c919306c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1ae6bfb-30f0-435e-9425-52d7ec7d792f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbc08e8-3cfb-438a-ada2-6fe5640e5ca7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99fc6ce-097e-4a1e-aa56-e19d9a86f199",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74b9f363-1162-4e47-baed-cad8f10d5f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e398b62-9699-4f32-9531-24c1d67cc486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "083943cf-6650-4f43-8b7c-ba84a0bbfc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b4af51-4b92-4efa-b334-c3d0aade80c2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4da86ecb-10a6-438b-bcef-e233b1116f3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3130588-bf75-4a6a-ae45-fdadb50ca50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee242b87-7bf7-4690-ae73-d35c9dd50c2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93ccd5f-e31f-4604-8ac1-72e61eef54cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cef925-b7cd-4290-bd32-28f7231b0e90",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b37f8cc8-8a78-46a8-b5e7-c9e5b03a3fd2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a9072aa-4103-41c6-8da6-170db5bfaa4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "758d53c3-4528-436b-a362-e5a6911d268e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35509788-9328-4dc8-bca9-35cb0304a753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebc8c43-fde6-40ea-9b33-3a97e3c0623b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b03325b-c3f3-4f96-82b7-b7ef9527dc2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6abf64-cd2c-46b9-a524-52b291e6fcfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b01f6417-0112-45bb-83f2-f915b74f5ef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ca3a01-8ccf-4288-b661-3ed3e3007821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517741ff-4d5b-4965-8b2f-03d62f67d085",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "042dd418-c4e7-4769-99a2-bbbd4b3f3a12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcb81b0d-d479-4261-85e6-97c445b7df01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "938b289a-c1bb-4f03-9006-165de0a56d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0037bc-0e3e-4275-a9a3-2e115a12d6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af743226-0e8d-4c9f-8dbb-ca3070eec1a2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfc2758-22a8-4ef6-be2d-9704e3ccf70f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51742bcd-b358-4efd-9840-606c93741f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2fd184-1ef1-4840-babe-cf63ad0534f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa418ae-32aa-4132-8843-84c02ea12f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9166c6c8-85ac-45ea-b5e1-6dbbbb9b4a6d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3662743-1965-4da9-b928-b400e8c1dc20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1719800f-acfb-43e4-af1d-cf9c06ef8468"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643f2143-6848-479b-8ecb-1514c5af2d8f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db5d4c1f-a4c6-497f-a27c-610978394237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcbf2a30-bf82-4523-9ff3-896ccfe3aa60",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93d6b6ae-380d-4614-bbc6-a1e409398d99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "357886e4-8949-4b38-a862-70c73f85ae1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a0531f-10ce-42cf-b16c-d91daf080165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f9e71c-10fc-4928-afca-523fafe0d3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a0d523-2266-4a43-953b-73b3da1adaa0",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2e3b1f-9f59-44b5-aef8-cda44273e013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "916a97f9-5339-426d-9d34-7dc99531052a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48bcc7d-68d7-42bf-b9fd-ce240c123364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18d90f38-56ab-4d8d-9428-97d840fb37a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c8e7707-0358-4aec-b1c1-a03a5b641cbb",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e2bfd69-090f-40d0-bf0f-0e0f614cc1a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08f1bb6b-6648-4fab-816e-d97621aeba37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88b1d16-b187-4a90-9c71-c4aab841f7c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658e9d59-3c7c-4db7-aa89-ef49d2bbf4e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea137a73-6970-48d1-b165-734352e174db",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06df993-79df-4c18-bb50-08b9bbd30854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bae397a-30d0-40a5-baa0-63f35849cc7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f26278-f5e5-497d-a875-dcca93b0dff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4969ee28-eca5-4513-a595-e9de8f56230a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0f0846b-e89d-4d3a-ab10-4a6a2874f5eb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29027f20-61dc-4dcf-aca4-076e1f14a27d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b484b9f2-c50d-4860-9219-e4eab1ff026a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04132242-c844-4d20-8bc7-e686f7fe37ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17bb6ce4-6a8b-4bdc-9f7e-4d2c1c2bc89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512a73c0-22c8-4248-bc6a-0f1fb4287482",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb78fc2-5c36-4b9d-899b-0de5e2afb9d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbc1cf03-728a-4236-9944-425573118cd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e04865f3-b47e-405e-86e1-8ce41f161365",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6354e9d5-ae6c-49e9-970c-f9d0e939f48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f85735-7893-49fe-bd64-4c2d0fbaf374",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f644fe7d-8580-48a8-87ef-c54b2146c21d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e63c1c9-5510-4fa9-b66c-00c77f0d4750"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3290a2ca-9f96-4da0-8a18-9fbfa8011443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2673c811-9378-4635-bdb6-ef7346e6c0d7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3eb6893e-5181-4b3f-9fde-b90b718e712c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "05335678-c68e-4ef1-91bb-250e30c92952"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0856919-53f7-477c-b2b9-21526c649af1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ad060e4c-8642-43de-a253-1c427a5c32b7"
                    }
                  }
                ]
              },
              {
                "id": "ae3618a6-74d9-4fd9-8a58-9332b550ed87",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f6f6d65-4363-4a0f-bb1b-e30878076eb1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900e2c02-f130-45dc-8fa1-6608b1dceb74",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "721e5d98-9439-4d86-8a28-c6959a335338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8eb011-09f2-4be2-a23c-e74e6d4c468d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81c650d1-002a-40f3-8209-2566df0c05d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d2f4b7-1d3c-4d7e-9c7e-4c3fc266ec0b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce45427-3855-4061-baa8-0105950c111a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9ad382e2-a22e-46fe-ba67-7531aad9a258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "403a3586-c066-423b-b2d3-d2901a77f8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1e8fbb6-6de2-4c6a-b929-10743bff0f6b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eaec7402-24fc-4b24-b839-b1bbf637908d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29e6f312-e126-4bbe-b4cc-eaf5daeed99c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a312b2f8-49f4-4e25-a502-ae7b2dfed9a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14ddee5a-1beb-442d-bc7b-0ad70f71f1e2"
                    }
                  }
                ]
              },
              {
                "id": "e42612a4-f0e1-4d0f-951d-1d83b98a3a62",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9cba519e-6b3c-4862-a2b0-ea4fad8d3982",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a87f64d9-7177-4ec1-be53-bb1eb315221f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c0dfa8e6-398c-4ff0-b8f3-cba3162adaa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f2438c-7e85-48d7-a4e2-9de86f2983bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73dc580f-d238-4f4b-b52c-8840cca2d309"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4539f57f-0625-471f-a04c-4f961f59fe64",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f325d5db-7266-4445-9312-2f1265a71571",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b718f30-b956-44e5-a9fd-f90ceaca4beb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "755fe3d2-5b2e-49f3-9ce4-d0ac173d7a73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e66685bd-ba1f-4227-9205-5dd07c322334",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c7fea4b-4f44-46a4-b2ba-0fa8befa1196"
                    }
                  }
                ]
              },
              {
                "id": "446c4d3f-e74b-4563-b4e1-0914a5bce34e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8af99fc-342a-4277-be99-79b1ebf4cfcd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3bd89c08-1462-43c4-923b-c63e47abe868"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5e70adfa-9676-421b-ad39-91e209d6069f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15bdfcce-2d77-4181-9958-4ea14f117b80"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7940514-8e18-4f5e-980c-203fb2018c02",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d722cbb6-acfc-48f2-87f0-536dc7ef29d9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7f3aae6e-2a81-4233-86c9-340bff385ae8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "29a6965e-ffb3-4be5-8e14-862ecbde17bd"
            }
          }
        ]
      },
      {
        "id": "931f2578-2596-401d-82ac-91fba3ad00d9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "b9095bb4-a9a3-4a5f-b6f6-98a198f946f7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7b1adc25-e16f-402e-9267-942b06d79d22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebe3824b-0c9f-460c-92d2-35016362c3f4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fa105f-80f7-431a-9627-593784002ecb",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4d85af40-17c3-452c-85e3-30d9bde727d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "203af537-d35d-4c29-814c-f09fe3d34f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e0cfb84-d6c7-4b61-bd73-329e3680b6fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a41a03-b8bc-4c24-a76e-b8796f0b7ab4",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64986be3-6115-45e1-bd04-9b8daf2c7aef",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aab376b9-7092-4161-8aa8-8b0fc511bcbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ce24e7-471c-401e-ac4e-18f554560ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65933611-6a70-47f1-a27d-5ed246aedf63"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88f0848d-bc46-4cfe-92d5-97090332d316",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6546b1b8-bf07-467f-a143-8ddb64ce95d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cf7f1cd-27b5-4f8e-a96d-7959fe45351b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d3ad22ea-7bf0-470f-b3ea-dd85dd39868a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4928071c-7443-46f2-9283-ca4fd99104a5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ac1d80ab-ee0f-42de-9986-44930e32dd05"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15120268-b94c-4428-918b-6b7cf61e03d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ee0173d4-b8dc-412b-ba93-d9c0544aa177"
            }
          }
        ]
      },
      {
        "id": "32ed67bf-b9cc-47ce-9372-812b1ee3bcc7",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "af29d7a0-3ef2-4fd9-a62a-ab74d9a29980",
            "name": "Negative Testing",
            "item": [
              {
                "id": "419239cc-634a-4f4a-a6dc-5423a0ea03ef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "21ed4697-b144-4213-8cc1-ab4abd31a57e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60af3001-196f-4400-ba07-891c5b608ac5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "40fbf530-8ace-48e1-8667-073e29f3472e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b376591-790e-4181-943e-9e55ad4e1249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5033df4f-7ab6-48aa-aeab-4ffb5453a977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1982e231-9b65-4263-94b2-95d631224005",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68c9b008-05d8-4078-b4c8-9b7879159364",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "35981ca0-afaa-46d1-8104-789f81489d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1c6dae0-0e4b-4803-89f8-06f16f60ebba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df2d7089-2981-4371-a0af-0736ded8704f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d532836-c9b9-4c81-93f5-3fa1c0b3485f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a75e64fd-d861-49d6-9f36-84587a53b6fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "245e21b9-e328-465c-a32d-804daa98fc7c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2cc1b250-0032-47f8-9478-6def910c1ade"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8d84e12-5b09-4031-a0a3-9345194d26f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2f086740-e7ae-4817-8ff1-db597620461a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52143888-eaaa-423d-93eb-e27472915675",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "de8f110e-1f99-4359-a3b7-88244da2c9b1"
            }
          }
        ]
      },
      {
        "id": "9ac67a60-9359-4972-9056-6e2ccb135cd7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0ade22aa-1100-49dc-8c06-b4b60d404475",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1e32941-2bb2-4357-8c8d-16803f4013db",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9eed6dee-7704-4afe-aa60-4fbab3c5711c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4285bf-2121-4062-b245-201a5f26a76c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac922edf-3ba5-41b9-8912-3b32436b7db6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e2a0dd-d211-4753-aea0-d2bcab36ce2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "46ce8e65-66b0-4762-aad5-fd2a9d52032a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19bc666-f3a5-4922-ac80-6baaa36c78d2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc075616-1446-441d-814e-b82b5386914d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "73f46208-0268-4afb-900a-0fe2b784f653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81f07d7-0d4e-42db-95eb-a350593adec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f542fdb6-9232-4c3b-b45f-5f9a14b01841"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fed20ff-c451-47a9-a522-73282940f68e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "272ff3a7-9bb6-42ba-a60b-d33e4210a466"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9facb94e-4b55-4c02-ab14-3edc212a1710",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee26c249-4c60-4deb-bdcb-1f3fbd1cfc7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f03fe6e-a7b5-434f-bbda-d4a109f7d0a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8af926a6-28c5-44a6-8190-2a82ef66be38"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72fc645c-2687-4d29-9726-c62a23acc889",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8a0a4d64-b51b-4eb4-96d9-cc19796295bd"
            }
          }
        ]
      },
      {
        "id": "33d78c12-8c78-43e3-ab59-6e99561f19e2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "426b5d40-d753-4be6-b325-edf3f87e1bf0",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "13a5b43b-b2f7-42bc-8552-8c91626d0950",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ca05401b-240d-4f14-88b9-782915c269d9",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1010840-4c99-4ea0-aab6-4d1ebec0e1d6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a46fe0f4-66df-4cfd-8705-7578b190aabd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 283
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 248.8192307692308,
      "responseMin": 7,
      "responseMax": 4776,
      "responseSd": 690.9115230672451,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681000698442,
      "completed": 1681000778465
    },
    "executions": [
      {
        "id": "17c47355-895f-4ab1-b319-619a03bc1096",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e9f18895-d2b8-4ccf-a137-4bad7765c971",
          "httpRequestId": "ab4a0d1b-a04c-482c-a074-c15a592cecbe"
        },
        "item": {
          "id": "17c47355-895f-4ab1-b319-619a03bc1096",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "ce9fde18-e7a0-44cb-bf58-711ef822ee07",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "01e75859-9e52-4402-a083-80d49f0fd901",
        "cursor": {
          "ref": "48cbab2b-d858-4c4c-bf7e-2cf979053c3c",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c3328e5c-e0b8-4a71-8a43-6308b83fb724"
        },
        "item": {
          "id": "01e75859-9e52-4402-a083-80d49f0fd901",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c0252ca9-7ad5-449b-895c-39cbded6dda4",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "1a51e787-b745-458d-aab2-3024c163e449",
        "cursor": {
          "ref": "f1180996-1734-439c-b4cd-c83cecd57ce7",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "258d4f4f-cb27-4b71-aee5-fb787d1c68c8"
        },
        "item": {
          "id": "1a51e787-b745-458d-aab2-3024c163e449",
          "name": "did_json"
        },
        "response": {
          "id": "2e3e4920-7c07-44d8-b5e7-d9966d2f1f78",
          "status": "OK",
          "code": 200,
          "responseTime": 266,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81377b54-e39f-46e8-9a42-e91394cd973f",
        "cursor": {
          "ref": "190536c5-0d2a-41e7-aa0a-9aa6d40b3cf4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c2fbc289-df16-4db8-ac53-b55df1386504"
        },
        "item": {
          "id": "81377b54-e39f-46e8-9a42-e91394cd973f",
          "name": "did:invalid"
        },
        "response": {
          "id": "52339964-dc69-4cb9-9241-ba64661c36a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81377b54-e39f-46e8-9a42-e91394cd973f",
        "cursor": {
          "ref": "190536c5-0d2a-41e7-aa0a-9aa6d40b3cf4",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c2fbc289-df16-4db8-ac53-b55df1386504"
        },
        "item": {
          "id": "81377b54-e39f-46e8-9a42-e91394cd973f",
          "name": "did:invalid"
        },
        "response": {
          "id": "52339964-dc69-4cb9-9241-ba64661c36a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ae4934-433b-4bdf-b8a6-1d01f12367d1",
        "cursor": {
          "ref": "81a3c3b8-0f58-4877-84ee-fd53ac0e3403",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3e9024af-ea62-4048-8c83-d3dbda108509"
        },
        "item": {
          "id": "12ae4934-433b-4bdf-b8a6-1d01f12367d1",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5f9c2d36-16f3-4062-84c5-5d81122b2e6d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 191,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "872e6b0a-33f7-48f6-9430-835460e394aa",
        "cursor": {
          "ref": "1c025893-0b20-4e9b-9391-890782bdefd5",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5fbbb804-c92b-495c-9e1c-a510f9522370"
        },
        "item": {
          "id": "872e6b0a-33f7-48f6-9430-835460e394aa",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "89a188c7-7fc6-4a5e-b5f7-799bb2faf41b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "40fe184e-5a9b-4e35-a062-2e6a3b477f08",
        "cursor": {
          "ref": "161e96e4-ce98-43e0-8939-2fe51ccb1b18",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b60b2dcf-8d98-44bf-8ad3-f0cda3330e26"
        },
        "item": {
          "id": "40fe184e-5a9b-4e35-a062-2e6a3b477f08",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "53c30c97-d1c2-4dd6-b31e-898be64c7c5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "7d7211e2-6b60-4671-8865-4a95ed56bda8",
        "cursor": {
          "ref": "2b667653-b3ec-4336-b597-0bb5b4518784",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1dd3ce4a-cdeb-413d-8fc4-63ec819cf138"
        },
        "item": {
          "id": "7d7211e2-6b60-4671-8865-4a95ed56bda8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "68d4260d-c52c-4c18-88a9-14a961a5c3a7",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "7d7211e2-6b60-4671-8865-4a95ed56bda8",
        "cursor": {
          "ref": "2b667653-b3ec-4336-b597-0bb5b4518784",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1dd3ce4a-cdeb-413d-8fc4-63ec819cf138"
        },
        "item": {
          "id": "7d7211e2-6b60-4671-8865-4a95ed56bda8",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "68d4260d-c52c-4c18-88a9-14a961a5c3a7",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "34e0cf7e-c93a-44a0-b898-fde85d42403f",
        "cursor": {
          "ref": "e7ba78a2-399c-4a2d-994e-a4116a5751e3",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1a635aef-a0de-4d3b-9187-fea574827969"
        },
        "item": {
          "id": "34e0cf7e-c93a-44a0-b898-fde85d42403f",
          "name": "identifiers"
        },
        "response": {
          "id": "cf542098-d320-477d-b45e-4e53c944066e",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "6e27036e-ba3f-4be6-814a-20cc68c40952",
        "cursor": {
          "ref": "97a69c6b-555f-4d98-82e8-540fef68e8d5",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fedd7539-8dff-41e5-9767-cac392fffe0f"
        },
        "item": {
          "id": "6e27036e-ba3f-4be6-814a-20cc68c40952",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6b972006-7b2f-402a-8c22-ad471da8bd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "6e27036e-ba3f-4be6-814a-20cc68c40952",
        "cursor": {
          "ref": "97a69c6b-555f-4d98-82e8-540fef68e8d5",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fedd7539-8dff-41e5-9767-cac392fffe0f"
        },
        "item": {
          "id": "6e27036e-ba3f-4be6-814a-20cc68c40952",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "6b972006-7b2f-402a-8c22-ad471da8bd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "82ad339d-0083-4798-94db-fd0418b4c2a9",
        "cursor": {
          "ref": "e61cd8eb-2d6e-42c9-b797-0b6c6203d455",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4ff5f6fa-61bd-44b0-947d-559fc893dee6"
        },
        "item": {
          "id": "82ad339d-0083-4798-94db-fd0418b4c2a9",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "65bcf091-9345-4905-b101-5cb128b2a740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "66c6b8a5-ae80-4b0a-bb08-4253c0d01189",
        "cursor": {
          "ref": "1adc3ee6-7a7b-4065-9bab-d9f87afd8e8a",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fbf7a67a-2089-4813-a712-8f40f071abf7"
        },
        "item": {
          "id": "66c6b8a5-ae80-4b0a-bb08-4253c0d01189",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1d3d78ff-5832-46c2-864f-e065eea78634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "9c9e6db0-dafa-4f8b-82c0-c3ad869c5684",
        "cursor": {
          "ref": "491c5aa3-2842-47d9-b73d-9eef825bcfcc",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b3474bda-a3a4-49a5-aad7-799d7cc77f1d"
        },
        "item": {
          "id": "9c9e6db0-dafa-4f8b-82c0-c3ad869c5684",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8de41633-5f27-44ab-9ae0-2ae2b265bdf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "93e0524f-b52d-4193-a6c5-c884c7565c58",
        "cursor": {
          "ref": "f304f0fc-6bee-4e12-af86-d6542546f14e",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "755b24f0-3d5e-449b-914b-f036aca2c875"
        },
        "item": {
          "id": "93e0524f-b52d-4193-a6c5-c884c7565c58",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "4ff784e4-cbeb-4e4e-9dfb-f0d980d0a230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "934fbfc0-b485-4e5d-8424-07be72926b84",
        "cursor": {
          "ref": "9169b744-a366-4032-8da1-b8e651bc6a84",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "dbdb8948-3aaf-4b3b-9598-b1ca29bc1e62"
        },
        "item": {
          "id": "934fbfc0-b485-4e5d-8424-07be72926b84",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8d598960-b7e4-48dd-93e0-d2219ddf1dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 274
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "7b706e87-8fd4-48a3-a638-f8a5a3e3e7d6",
        "cursor": {
          "ref": "3fb9da06-52df-49dd-8c99-c08bd494a9d5",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d6004ae8-d38e-4baf-b3fa-d7ccfd6edb7f"
        },
        "item": {
          "id": "7b706e87-8fd4-48a3-a638-f8a5a3e3e7d6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7fb1b2bf-19a3-41f8-91ac-69147edf8074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "ce5ac824-816e-40d1-9057-d3bad81c5592",
        "cursor": {
          "ref": "36901122-5f9c-408f-bfdb-fe87845fcc43",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "79d7e105-cf09-4b69-bc21-76207e4a0839"
        },
        "item": {
          "id": "ce5ac824-816e-40d1-9057-d3bad81c5592",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1173b167-f1ee-4394-b45d-541372f3ba29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "cddc5887-ce50-4255-a74b-b5e161c91702",
        "cursor": {
          "ref": "c8012eaa-b21f-49c6-bace-08ecfd818f24",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6c3932c2-7bf1-42e4-a48e-09f6d05e31f8"
        },
        "item": {
          "id": "cddc5887-ce50-4255-a74b-b5e161c91702",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e019a6d0-6cbb-4a7e-acc4-d274b9c064b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "57495003-2c38-4e41-9c1f-105b350230a8",
        "cursor": {
          "ref": "dbf73be4-a323-4908-a998-d8a50c07a646",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ed40728a-7951-4e32-a7ad-3c857322bf85"
        },
        "item": {
          "id": "57495003-2c38-4e41-9c1f-105b350230a8",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "22129ba6-d90a-49de-ae81-6c3861041c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a13cf50e-4784-47cc-ab60-a9dd9ea65d09",
        "cursor": {
          "ref": "859e4fe0-b09c-49da-9f6c-9d126aa5805a",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7b6715e0-3a62-4a05-9aaf-b7b33577c979"
        },
        "item": {
          "id": "a13cf50e-4784-47cc-ab60-a9dd9ea65d09",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "f049876b-0dd4-4947-a4d0-706bb48f012c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "6864d1d9-e641-4263-a428-ceeea2c28a34",
        "cursor": {
          "ref": "87433414-c490-4960-abb7-61c82f6848c7",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9479fee9-116c-4422-a9aa-268d9145bd8d"
        },
        "item": {
          "id": "6864d1d9-e641-4263-a428-ceeea2c28a34",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2d8cf1a5-5521-4dc3-81a0-b290bde8090b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "ac2f5180-9590-4269-9a70-1baaf0c02f55",
        "cursor": {
          "ref": "62a4760b-7f4a-4da3-8f02-afce35ed5dc3",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "889307c2-107a-4ab3-ac52-e8d8126ddfc1"
        },
        "item": {
          "id": "ac2f5180-9590-4269-9a70-1baaf0c02f55",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d89c948c-9de3-4915-b95a-c5d8a1a2f04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "86e1f5a8-1244-4b22-b7bb-f208c2490e48",
        "cursor": {
          "ref": "ffa07b15-8d54-45dc-86fa-00e12a7c2d0d",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "6cc42ec3-5655-476b-8f37-924fe33f3171"
        },
        "item": {
          "id": "86e1f5a8-1244-4b22-b7bb-f208c2490e48",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "891a827e-4665-4730-9163-f28e613b5bed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "a8161851-8ec8-4891-84b5-e1f4675a75c2",
        "cursor": {
          "ref": "8b16690a-898b-4c80-b839-da9693941acd",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c2bc5f26-cbb3-4967-aa31-df447e322d7b"
        },
        "item": {
          "id": "a8161851-8ec8-4891-84b5-e1f4675a75c2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4b906846-43a1-4180-b98e-5d70e2464e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "2092b77c-6e4d-41d5-9459-c2fbcb67ade6",
        "cursor": {
          "ref": "cb8b63a7-d68e-41dd-83e9-783b0516250b",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "abd534e1-1f0b-425f-8d17-03bdc86b88c9"
        },
        "item": {
          "id": "2092b77c-6e4d-41d5-9459-c2fbcb67ade6",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "4d14a21e-51d5-4000-b65f-c91a7491e500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "85ec0c1f-1d81-4dfb-93f1-c72e910dbbd2",
        "cursor": {
          "ref": "2ddc7e30-1fdb-432c-9416-d347f284532c",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c1008438-6de4-4e73-b5c1-2a2244161b96"
        },
        "item": {
          "id": "85ec0c1f-1d81-4dfb-93f1-c72e910dbbd2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8ca1193d-80ae-482f-aa3c-655b68329d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "0b23c3ce-8068-48fe-a039-38a65a99a357",
        "cursor": {
          "ref": "b6d4bebf-f994-405f-8bf4-b0eb5e94cf78",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8f4644b2-82ac-4fcb-9616-d60a6f4703dc"
        },
        "item": {
          "id": "0b23c3ce-8068-48fe-a039-38a65a99a357",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "0a411a8d-a48b-4626-8c51-10a06db4e0d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "40caa8dc-9256-4880-8132-2d30b26a482e",
        "cursor": {
          "ref": "12f9f97d-08cd-48b6-870c-0c1fa018768c",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00da9f40-97b5-48fa-bc2f-ff1e98b449c1"
        },
        "item": {
          "id": "40caa8dc-9256-4880-8132-2d30b26a482e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "547b8b69-f646-4958-9323-95fa8f5965e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "72079541-d06e-42cd-b3fc-de74a8566638",
        "cursor": {
          "ref": "39614f0c-efac-4be8-b259-faf5eecf8f47",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "0cf8fdf7-ad44-43b7-bdf8-387263618fee"
        },
        "item": {
          "id": "72079541-d06e-42cd-b3fc-de74a8566638",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dfc52b25-0118-430f-bfa6-c92fbd120466",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "21079d0b-2afe-4840-80d6-d51d10cd5d21",
        "cursor": {
          "ref": "2e371644-6541-41dd-b2b8-3a13d3389916",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "da55cb75-f168-4f94-afa5-15b272704c44"
        },
        "item": {
          "id": "21079d0b-2afe-4840-80d6-d51d10cd5d21",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "64455839-9962-45ff-9e07-ab24f866dc65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "0cedd746-6ddf-4c96-a4a3-2689a28399e0",
        "cursor": {
          "ref": "487ed8c5-c597-4be9-88bb-013099905f5e",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "7dc5e9c6-3d8a-473f-b781-61e65dcbf0f2"
        },
        "item": {
          "id": "0cedd746-6ddf-4c96-a4a3-2689a28399e0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "976e25d8-9a8b-4357-a3e6-88e520c64fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "bebd0248-7457-456d-89a9-8d20e735236f",
        "cursor": {
          "ref": "add28c71-19c6-4f1c-8a22-41888cd46702",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "ead8aea4-d762-441c-a5a6-bf043319cf7d"
        },
        "item": {
          "id": "bebd0248-7457-456d-89a9-8d20e735236f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0fb7c8c7-e2dd-4dc0-a3f6-632119267b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "de08e781-e2a5-43c7-b306-bb4dde94628a",
        "cursor": {
          "ref": "eb367cd7-9091-4227-923f-078c5a603aa2",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ea835f11-154a-4a32-8e9c-322fcb55e10e"
        },
        "item": {
          "id": "de08e781-e2a5-43c7-b306-bb4dde94628a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f62eb7e3-1f7c-4fdf-8070-5c8bee7ad2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "12c81db9-7840-47af-b88f-cb9aae01f4d4",
        "cursor": {
          "ref": "c58fa848-317e-4e27-9363-6b6d676ade51",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8a07a873-dd4d-4c09-96c7-a29eb5771763"
        },
        "item": {
          "id": "12c81db9-7840-47af-b88f-cb9aae01f4d4",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "57d03af9-686b-4e9d-b900-02102a59c742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7b6899c4-f454-4570-a7b6-fa4a923cebeb",
        "cursor": {
          "ref": "c3c2a778-1cf1-401f-a503-9f52c2b7d68c",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5f35d524-d292-4c07-82f1-50f7bfb26434"
        },
        "item": {
          "id": "7b6899c4-f454-4570-a7b6-fa4a923cebeb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "155247d4-0824-4a16-a03e-7525edb68c4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "194650f5-c042-4575-98ae-e3c45a92aed2",
        "cursor": {
          "ref": "e55fdcee-56c9-4f3f-b754-1c21a683233f",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "fbc11414-0559-45ce-bc37-5ae77ff5bae7"
        },
        "item": {
          "id": "194650f5-c042-4575-98ae-e3c45a92aed2",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "57cc1f01-07c7-407d-abcd-6403b14d76a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "1a4c6e8a-1ab3-4890-92f7-25ead5358a71",
        "cursor": {
          "ref": "31d4c7d6-24a4-4ad6-9ae8-01dbddfe7e86",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c7f5bd9d-fac8-48fd-bd72-2dd1e8be6ed0"
        },
        "item": {
          "id": "1a4c6e8a-1ab3-4890-92f7-25ead5358a71",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f213722e-8aaa-48d2-b0ac-6bf46238e876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "528ace3a-434e-4b2d-8722-19a0f70a2c49",
        "cursor": {
          "ref": "92d41a87-43d4-4fa7-8c30-41e7550bf7bc",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "c2e218d1-3338-421d-882c-2457530603f7"
        },
        "item": {
          "id": "528ace3a-434e-4b2d-8722-19a0f70a2c49",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "74da48ad-cf02-43ac-b328-ec8ae3ed9c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "d51275e8-effa-40a9-99d2-d1b102171f2c",
        "cursor": {
          "ref": "7e5d69c6-2f4b-4ab8-bb21-a3c2d90a8f38",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "69838cbd-c2ec-4218-996a-9bc3473374d7"
        },
        "item": {
          "id": "d51275e8-effa-40a9-99d2-d1b102171f2c",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "12291d54-9d7f-4aa2-b938-9ff2650f2e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "568c88a7-8b02-4e46-8342-bb0b47a66cf4",
        "cursor": {
          "ref": "32773ed4-eb15-4106-992c-664743bf40ab",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "56f82e71-574f-470c-a253-f2ae366cbeb6"
        },
        "item": {
          "id": "568c88a7-8b02-4e46-8342-bb0b47a66cf4",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "dfdedeea-d6b1-42ca-b683-8f7ff2a485ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "12c1cdeb-2f9f-4aab-961c-ee5d3ff834c4",
        "cursor": {
          "ref": "d3447523-1865-435c-9ee8-56c95f6762e6",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "584d0d83-28eb-48d9-8b58-930437fa52af"
        },
        "item": {
          "id": "12c1cdeb-2f9f-4aab-961c-ee5d3ff834c4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "de7fa6dc-f9df-4e44-bb3e-7380a2685d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "ee57f3df-1d3e-438c-90e7-b0971a23abd4",
        "cursor": {
          "ref": "cbc82916-2f8f-4ae4-bf98-c55c000da5b9",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9bd9c445-d4a4-4c61-a498-704c60db7df9"
        },
        "item": {
          "id": "ee57f3df-1d3e-438c-90e7-b0971a23abd4",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "33451ed0-2a1f-49e6-8a87-f56c630c7500",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "284646b4-a556-4569-b547-a543636d14f7",
        "cursor": {
          "ref": "96b806c1-f37f-439d-be66-dea7411ac073",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ce86207b-5803-46c8-b2c8-fb6acdea3950"
        },
        "item": {
          "id": "284646b4-a556-4569-b547-a543636d14f7",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "d2092ee5-4fe3-4c7a-b890-805effbb78fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "205ab859-b538-49f0-bc9e-d9933fcd9282",
        "cursor": {
          "ref": "83ee6c86-27de-4433-b3ae-a77d4a230623",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "b8c8435b-3465-471c-8a81-52a297282010"
        },
        "item": {
          "id": "205ab859-b538-49f0-bc9e-d9933fcd9282",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1e3dfb69-5bc5-4b42-b247-095df5bfdd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "b9185b89-51eb-47d7-9395-e43e21b4581b",
        "cursor": {
          "ref": "dcf1043b-64ea-4e80-8acd-73b94ac703fb",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f29efe3a-bcb4-40a4-9db3-4253d5a416fc"
        },
        "item": {
          "id": "b9185b89-51eb-47d7-9395-e43e21b4581b",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3d9d3068-8c45-4ed5-9964-fb67605da751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "ced0749f-9703-4f68-ae8c-3d36aa125b3c",
        "cursor": {
          "ref": "97994a4e-4faf-4fa9-bfb6-2046df5b36ba",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5851c8e8-01d7-4e52-a248-0cc779c11223"
        },
        "item": {
          "id": "ced0749f-9703-4f68-ae8c-3d36aa125b3c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "97fb485c-e3a5-4d64-8477-a4660616f837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "68993cca-53a6-4a51-9296-40c9165ce821",
        "cursor": {
          "ref": "9cf5e876-3340-4506-96ad-22cac26d45dd",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "606de3b5-c897-4c84-9651-a016a99f1696"
        },
        "item": {
          "id": "68993cca-53a6-4a51-9296-40c9165ce821",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1e49d14d-f5b0-4dc1-b9bd-c1053efe2e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "6a6f71e0-eaf9-4c9c-b56e-4b944819b4ac",
        "cursor": {
          "ref": "9bcb0e30-ce90-4c50-ad08-12c5057de95e",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "9759ae9c-3a29-4b78-9f6c-41fe16c23de2"
        },
        "item": {
          "id": "6a6f71e0-eaf9-4c9c-b56e-4b944819b4ac",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9e159ffa-026a-4712-ab55-230503c28792",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "a6565975-8502-4d6b-8ce3-6f029ac92398",
        "cursor": {
          "ref": "40612430-6b0f-4c44-a503-2fb3314e39a5",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "2bb3c3b1-b8b6-4d2c-8a1f-8e275455b39b"
        },
        "item": {
          "id": "a6565975-8502-4d6b-8ce3-6f029ac92398",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3b0fa394-1942-4e9b-b3e1-001754c0f1b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "ae97f005-e8e7-483d-b601-b59518591f0c",
        "cursor": {
          "ref": "93397927-a672-47b7-8305-4764f4402824",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "08a0be1f-4fff-4930-bad5-934a2e2fa51a"
        },
        "item": {
          "id": "ae97f005-e8e7-483d-b601-b59518591f0c",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "461241c7-e7c5-4ac4-aca3-6a174b15b0b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4f7e8c79-0447-493b-9c6d-08a2c70832c9",
        "cursor": {
          "ref": "e2f37fc1-fce5-4772-962d-e6ffaf7b4adb",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7d0a2425-1abd-47ca-8386-c777fd4e18d8"
        },
        "item": {
          "id": "4f7e8c79-0447-493b-9c6d-08a2c70832c9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5ad3ea0f-60a4-4441-8975-b774d7176806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "23408fb5-70d0-4a87-84a6-f4189af5d9f7",
        "cursor": {
          "ref": "6741f349-3415-4e51-9f65-45d3316dd287",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e0946177-bee7-4c6b-9f47-29da15d5dc20"
        },
        "item": {
          "id": "23408fb5-70d0-4a87-84a6-f4189af5d9f7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "353e47ec-9d42-4874-bd77-f9c3991fbbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "9dc645b2-7041-4642-a02d-9a2841fc7985",
        "cursor": {
          "ref": "64664df2-2cfc-4ef2-9752-acfce5c7717b",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5484728a-d235-4958-9864-be1f8c2dc31e"
        },
        "item": {
          "id": "9dc645b2-7041-4642-a02d-9a2841fc7985",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "73efbf22-3533-4bbf-8265-afa4d20cc6da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "9129a86c-79a6-4db8-b8c4-cd3e5e9febc9",
        "cursor": {
          "ref": "4482af06-3121-49e5-bca8-60a568696f5e",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "16b81edd-cb91-400b-9e39-c83070a0b9db"
        },
        "item": {
          "id": "9129a86c-79a6-4db8-b8c4-cd3e5e9febc9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "a4f40d91-d6df-4dc6-bde6-c20e9434b6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "befc6898-152f-4053-adc2-b4270ba95bed",
        "cursor": {
          "ref": "f696040a-c821-49f6-81e4-cd33757fb09a",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "a1616157-b0e0-4a6c-9fdd-228cd4039261"
        },
        "item": {
          "id": "befc6898-152f-4053-adc2-b4270ba95bed",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "0ee0e3ff-ffcd-4f45-8f3e-a07c3b9dd964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "6f1039a0-0c11-4bb6-9551-26804c73a91f",
        "cursor": {
          "ref": "71d27f3e-f1ca-4747-85e8-62685c9f3b4f",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "1e67105e-4b24-4fbd-a740-d60f9d7a0b70"
        },
        "item": {
          "id": "6f1039a0-0c11-4bb6-9551-26804c73a91f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "677b8a84-d912-48f9-b608-ad69a642626b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "ba31796c-dac5-424a-b819-38e7f8536725",
        "cursor": {
          "ref": "4de74eec-de19-4d72-93e0-fb129a5a1517",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fda66546-7bfc-4447-83ba-d2f3ad8c7848"
        },
        "item": {
          "id": "ba31796c-dac5-424a-b819-38e7f8536725",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f86096c8-1d71-4553-9a9a-8e9d0e0b0417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "defadeb8-2b62-443f-b9ec-6eac851b7128",
        "cursor": {
          "ref": "35c26eb9-40b9-4c7d-b411-7bef13732e41",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3c265869-84d8-4af1-ac1a-744b93dada79"
        },
        "item": {
          "id": "defadeb8-2b62-443f-b9ec-6eac851b7128",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "2f2988d1-2f30-467a-b201-49750fb9b246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "ecf3d5c3-f58d-43c0-af0d-516c9505d8f1",
        "cursor": {
          "ref": "7c92eea9-d6c2-42e2-a8f2-142fd164fc4e",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fbc3d656-eb94-42af-a0b3-873157a1ac0f"
        },
        "item": {
          "id": "ecf3d5c3-f58d-43c0-af0d-516c9505d8f1",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "4df5f58a-0500-4827-9f96-3a50846a7fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "430af73f-dd06-4a16-b35d-e265f182a77a",
        "cursor": {
          "ref": "9395fa44-76b9-4ed4-b83b-cde07bcec703",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4842653c-4dc3-4b99-a27e-40b06b1bef09"
        },
        "item": {
          "id": "430af73f-dd06-4a16-b35d-e265f182a77a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "bc4f89e5-1b2b-4726-b133-fb4c3ed3161d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "11e3e98f-73c7-4bfd-9ba6-6e74e24afa37",
        "cursor": {
          "ref": "59f5bed4-47dd-44ad-b545-cebebdf0483b",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "65ffa1a3-21cc-4946-b34e-a6f4deff62e0"
        },
        "item": {
          "id": "11e3e98f-73c7-4bfd-9ba6-6e74e24afa37",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9089f4b0-ac96-4c4f-aff6-44222c1b9092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "84f06cbe-bcc1-4aab-ac8f-be9bb3eb2d33",
        "cursor": {
          "ref": "3254a058-829e-4332-bc2c-edf7a1a4606b",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "64950abd-4194-4287-8102-56884e979612"
        },
        "item": {
          "id": "84f06cbe-bcc1-4aab-ac8f-be9bb3eb2d33",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "c00dccb7-3656-4470-b6f8-c11c28c91b86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "9f9b0fec-ecb0-4d9c-b9ec-844c920144d0",
        "cursor": {
          "ref": "a84c2692-b5af-4adf-aade-4af78c1e6d6a",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8ea25547-4961-45a4-b885-15d048c11edb"
        },
        "item": {
          "id": "9f9b0fec-ecb0-4d9c-b9ec-844c920144d0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "8561d32a-124f-473d-b9ec-0077dd8c7379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "8e5d5f19-b01f-468f-a456-23e19433b0ef",
        "cursor": {
          "ref": "3ab6705d-c530-46e4-8804-f877d42ba3ef",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "006840c5-efd5-44d7-b5fd-f7efc7e732c2"
        },
        "item": {
          "id": "8e5d5f19-b01f-468f-a456-23e19433b0ef",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "a297f560-9237-4490-8e17-8c4ea6298c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "0bee60fc-3408-4e3c-96e8-eb3d44141b57",
        "cursor": {
          "ref": "5d24678d-c733-4c4d-9005-fa13a21dbdb0",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ab3e8c77-383b-4995-8845-722818b98bf3"
        },
        "item": {
          "id": "0bee60fc-3408-4e3c-96e8-eb3d44141b57",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "3b759f85-2c95-4aa5-b213-984a836b4294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "462c355d-c43b-45c2-bc30-f6b2523df33a",
        "cursor": {
          "ref": "945741ff-1cea-4e43-90ed-8d97d74b6c3c",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3bdf6c4c-9228-4c14-8a89-af60055fde82"
        },
        "item": {
          "id": "462c355d-c43b-45c2-bc30-f6b2523df33a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f990b114-cbb7-4893-9aa0-21e0d3a88669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "660e6095-14f2-4911-bb92-b1efab9fad02",
        "cursor": {
          "ref": "c28bc097-f07d-4876-8094-03b8f959617b",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "2b69ae7f-5441-4e13-a67a-dc9d4d91a195"
        },
        "item": {
          "id": "660e6095-14f2-4911-bb92-b1efab9fad02",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "41820226-980c-49de-9336-c48748159145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7adf4d73-f3bf-4068-9d5e-dd8d594ba41d",
        "cursor": {
          "ref": "2c2783fc-2feb-4c89-b3de-f85c5da17655",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e179b5d3-05ee-47bd-9b2e-3d1e44c9dbf0"
        },
        "item": {
          "id": "7adf4d73-f3bf-4068-9d5e-dd8d594ba41d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "03ef0813-3264-4368-a408-a786123b0fbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "bc1615cc-0f19-463f-a903-283fd1417184",
        "cursor": {
          "ref": "46c4d9f9-0102-4cd1-b848-58165ce7cb32",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a3d44d5e-fee0-436e-b696-b9cd263fe6d7"
        },
        "item": {
          "id": "bc1615cc-0f19-463f-a903-283fd1417184",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9f20ae4c-c7b7-43f1-b811-d749bc70c0ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "1fa0ef44-4c25-449e-b00c-cba55f4ee4d9",
        "cursor": {
          "ref": "e4dd81e6-947c-49d2-8dc6-f4c7423d6a72",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d960732b-7489-4392-bcb0-95e44ee12777"
        },
        "item": {
          "id": "1fa0ef44-4c25-449e-b00c-cba55f4ee4d9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "07a51e7b-c36e-45a4-9193-58308d9df3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "156ee807-bc0d-4af7-9da9-12abdded0bed",
        "cursor": {
          "ref": "66998b90-1e38-4293-9864-913666c713e9",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "55f027a9-d68c-438e-93b9-609c391e219a"
        },
        "item": {
          "id": "156ee807-bc0d-4af7-9da9-12abdded0bed",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c52f6b8e-161b-4866-9ce7-8ec66e6b574d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "90a1c9f3-c7de-4491-b46f-3e131ff96449",
        "cursor": {
          "ref": "7a81c2de-aee1-4588-9b61-3bad5e94659e",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "07e29dd5-f60f-4e2b-ad52-b62543135a86"
        },
        "item": {
          "id": "90a1c9f3-c7de-4491-b46f-3e131ff96449",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0002afd0-02b9-4624-9916-39a4bfb7e850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "3c9e8e2d-e589-444c-8229-14601e1c3a8e",
        "cursor": {
          "ref": "713b0c6c-b6f9-4ce3-ba87-65c7f1594431",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2f9ff528-0ca6-46ad-abb1-82ac7f0d4a77"
        },
        "item": {
          "id": "3c9e8e2d-e589-444c-8229-14601e1c3a8e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "15a4d552-12da-45fc-a796-7be2ef30e326",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "09c0b3be-4b31-4e94-a084-23e1ab86ba04",
        "cursor": {
          "ref": "b16fb6dc-8982-4496-9af6-68a9c07a7fd1",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "1dd3bb96-717a-45ae-aace-d406cec9f50d"
        },
        "item": {
          "id": "09c0b3be-4b31-4e94-a084-23e1ab86ba04",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7da2efcd-7efe-4291-b473-d9e7b0bab535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "4d3fa458-d593-4be4-9933-85199c9f4075",
        "cursor": {
          "ref": "d2d36e6f-dac5-4aa2-98b4-9d072a8b7d9a",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a98b5a30-1342-45f3-9004-5bee1fb4eb7e"
        },
        "item": {
          "id": "4d3fa458-d593-4be4-9933-85199c9f4075",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c7a50f5f-fdd2-4798-86b9-ad83adbeaeba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "3863eec4-c69d-4806-986b-0cf1ac77b352",
        "cursor": {
          "ref": "ad6bdbe1-17db-486d-94a0-df767af9e61f",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b47e66a3-5ffe-4bee-8359-c77cfab36aa1"
        },
        "item": {
          "id": "3863eec4-c69d-4806-986b-0cf1ac77b352",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "a027a494-a336-4772-b659-4728cd1cb9ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 186
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "49625092-2233-4b3f-8b4e-31af95e56627",
        "cursor": {
          "ref": "76966c3d-4478-47e3-bf6b-ab1cd4942594",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "476a69a5-a2b3-4326-a752-f14410708098"
        },
        "item": {
          "id": "49625092-2233-4b3f-8b4e-31af95e56627",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "cee0aa2c-73c8-45a9-ad23-00fff8ae41c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "0db8f424-c0ea-48c7-8857-903304ff9f62",
        "cursor": {
          "ref": "6ca5ad79-1a31-4dc0-8fb8-32a65bd042bf",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "87a7f8a9-75ba-47f7-b7db-602e435d3234"
        },
        "item": {
          "id": "0db8f424-c0ea-48c7-8857-903304ff9f62",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c43036b4-7028-4c09-8f2d-7f291682413c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "978d7460-8ec9-4d9c-9a56-87f9adf6683c",
        "cursor": {
          "ref": "e89b3e82-6fe6-4b28-912d-deb818fb7d99",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ccd323e8-63fd-40bb-87d1-673bfa1773ae"
        },
        "item": {
          "id": "978d7460-8ec9-4d9c-9a56-87f9adf6683c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "a9415ea2-c221-4be9-a5b1-5655e264981d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "fe7fdb83-c3a6-403d-8797-4d36c1baafaf",
        "cursor": {
          "ref": "2e901c78-2fdb-432e-874f-a40952088949",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "40b30e6f-4ffc-46b2-b31d-5b68ad914600"
        },
        "item": {
          "id": "fe7fdb83-c3a6-403d-8797-4d36c1baafaf",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "7ca499c4-ac01-4e3f-82e0-39b6c088af73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "e4326697-b860-4b3a-95fd-1f70981e8737",
        "cursor": {
          "ref": "4e04a500-dbdd-4162-9168-f12f62a18689",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5ec92b22-c9a4-41f5-a9d8-9ce8e2009577"
        },
        "item": {
          "id": "e4326697-b860-4b3a-95fd-1f70981e8737",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "08998d7b-bd6b-415a-afd9-788ebd83c000",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "c5be5412-f122-4281-8570-70575dbfff0c",
        "cursor": {
          "ref": "4a2d4ad0-d8d9-487c-8b03-6e0a46a975f8",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "db99315d-696a-45fd-9eee-e9e6eb6b0b8e"
        },
        "item": {
          "id": "c5be5412-f122-4281-8570-70575dbfff0c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4f5eb5fd-699b-439d-9845-4021aec403b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "1f318423-f212-4e3c-997b-66514389af20",
        "cursor": {
          "ref": "10bfa9d0-3ddb-4840-96e3-602a663d2d7f",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c8305ae3-456d-4874-8c5e-cc17dc54947d"
        },
        "item": {
          "id": "1f318423-f212-4e3c-997b-66514389af20",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "62f84555-0b45-4487-af92-6e113935ad5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "60acba5b-7204-4515-925c-70db2ce82e94",
        "cursor": {
          "ref": "be8f81f3-adb6-4ac9-a6b6-a8c02051047f",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "d3da4a3f-4a1f-429b-a8f7-2f5e4f2097db"
        },
        "item": {
          "id": "60acba5b-7204-4515-925c-70db2ce82e94",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9f80e292-0b80-4c58-aabf-7698a0e2b5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "d1e460b2-1a8d-4e73-b0ed-e834558226d3",
        "cursor": {
          "ref": "f7ef9362-2ffc-4669-9bb4-4c219f05f163",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5181b262-9b78-4df3-b0cf-1b1bdeabd13a"
        },
        "item": {
          "id": "d1e460b2-1a8d-4e73-b0ed-e834558226d3",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "68fbf850-d6ff-4e55-9970-4d23f70e7fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "d741d1a0-8b52-4b73-bf4c-708f73138081",
        "cursor": {
          "ref": "d4b45f3c-d417-4e56-9e45-4508d425f285",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "25fc3916-6fb1-4603-bf7e-e2a2eb226122"
        },
        "item": {
          "id": "d741d1a0-8b52-4b73-bf4c-708f73138081",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "eb2a812a-c90b-4ddf-81fc-0c267a0990fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "97ed13cc-f2d3-42a1-86e4-78c84cc1b092",
        "cursor": {
          "ref": "d73b0206-85b1-46e7-b7ad-15a616e739e3",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e9a7354b-5edd-48cb-804e-69868f4180d7"
        },
        "item": {
          "id": "97ed13cc-f2d3-42a1-86e4-78c84cc1b092",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "aaf34129-7dc9-421c-94ad-241587e9c4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "6fa8df26-c5ff-4153-b9b3-69eed0721fb3",
        "cursor": {
          "ref": "074c57de-f964-4ee4-81ce-7047f540e3b4",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "def79430-e964-4814-b3ea-ed6492b96960"
        },
        "item": {
          "id": "6fa8df26-c5ff-4153-b9b3-69eed0721fb3",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8cd2016c-7503-4c7b-9922-532f10032358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "1e2d8952-3ca0-4378-b94d-1b1fdc7119a2",
        "cursor": {
          "ref": "b1e495f1-d308-4981-b30d-e8c598309c09",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "0c85d61a-09a1-40e4-b77d-92fa2a36072b"
        },
        "item": {
          "id": "1e2d8952-3ca0-4378-b94d-1b1fdc7119a2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "810459a2-04df-49e0-b4bf-0363bc68d2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "71b43c0a-6ff1-4225-ac93-44a724db72aa",
        "cursor": {
          "ref": "41892d83-1f78-4916-8a36-eba45f505d49",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0b8c4934-334f-45c5-8c8a-6ee75e941c16"
        },
        "item": {
          "id": "71b43c0a-6ff1-4225-ac93-44a724db72aa",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9dccad2d-83bd-48ed-b022-3a312e3e28de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 214
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "f2c18ed2-718e-4094-b0a2-fc0e5b569dff",
        "cursor": {
          "ref": "dfce493d-a3d7-4525-93a9-b9652c772e51",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "7a034eab-9cb3-4ecc-804d-8494075f8352"
        },
        "item": {
          "id": "f2c18ed2-718e-4094-b0a2-fc0e5b569dff",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6847daa9-9580-454a-aadc-0558d8919bcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "be5b4eb5-48bf-44e3-860b-14dd7c4189b8",
        "cursor": {
          "ref": "ad71621e-114d-4019-b4bd-89f7e83cc3de",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "53454800-af03-4b08-b627-2a21c23b57ac"
        },
        "item": {
          "id": "be5b4eb5-48bf-44e3-860b-14dd7c4189b8",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "1346e99b-faee-428b-9386-73699da5ac97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "92e1893c-457f-41cd-ab4a-ee3b4909269a",
        "cursor": {
          "ref": "8f7c715b-31e4-4b3e-b34d-501e8ed25465",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e0e307f3-72e0-40a9-9066-da2528bcdf0b"
        },
        "item": {
          "id": "92e1893c-457f-41cd-ab4a-ee3b4909269a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ac23a656-e58a-44ef-9bdb-61bad8404603",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "cec326b7-1572-4d97-9990-860a4203b549",
        "cursor": {
          "ref": "666ff5d0-f43a-40d0-8ff4-725cf3c141d5",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "309b7b28-f900-4beb-b4b0-8110547f927f"
        },
        "item": {
          "id": "cec326b7-1572-4d97-9990-860a4203b549",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "45f69f1c-9a5e-4f9d-8c0a-e948612bc599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "3567a8ae-4db8-4847-9fd9-29d10ad7be4f",
        "cursor": {
          "ref": "d6fd0d4a-9797-41f0-9aad-693757d88eef",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "1d20c00f-6066-4d78-9455-786a34db3b17"
        },
        "item": {
          "id": "3567a8ae-4db8-4847-9fd9-29d10ad7be4f",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "ee345f3b-16d6-4398-b3c3-395e32cd1265",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "77c3cb23-05c4-4e95-8cb4-83a456acfd82",
        "cursor": {
          "ref": "4d8c3984-a239-4fdb-9657-a93d587cadbd",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "249622a6-9e35-46c4-ba9a-2e2552cd3bc3"
        },
        "item": {
          "id": "77c3cb23-05c4-4e95-8cb4-83a456acfd82",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "7167ab47-3b34-49b2-a608-139ce070aaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "601e9fda-a235-44c2-8528-bb310b115289",
        "cursor": {
          "ref": "3add30b4-d50b-4df7-97a8-0ed08be26b13",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d58f84ba-4275-4cff-b653-97ecc930b316"
        },
        "item": {
          "id": "601e9fda-a235-44c2-8528-bb310b115289",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "5d51c0b8-ef83-4a24-862e-77454a94d162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "9f41f3cb-303f-492c-9938-961b1c91f3b8",
        "cursor": {
          "ref": "6294088d-cd21-4a46-9d7d-23fd64efcc36",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "825d1c97-50ce-4c9c-ad7b-551840702d6d"
        },
        "item": {
          "id": "9f41f3cb-303f-492c-9938-961b1c91f3b8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "386765d6-5e9d-48b5-b698-8e71524dd253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "f0d10015-efd2-49d6-91ce-3966d5074576",
        "cursor": {
          "ref": "56e1c8ef-e053-48d9-823b-911e9103086f",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "12aa027e-eccd-4344-b327-c57b79127d22"
        },
        "item": {
          "id": "f0d10015-efd2-49d6-91ce-3966d5074576",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c7a96fcd-0845-4c37-a169-33eeb5b95e37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "1a9868f9-7283-4ee9-8e4f-c1a4fe85558d",
        "cursor": {
          "ref": "14d4ecb9-fd43-4839-b0b5-a75d0b9cf7d9",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "6a5c59b6-c89b-49a1-bf42-322c7d53243b"
        },
        "item": {
          "id": "1a9868f9-7283-4ee9-8e4f-c1a4fe85558d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "151706d8-331f-4ccd-a9bb-5a123e67443d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "9fb60d4c-8c14-427a-8343-0907eafcaf47",
        "cursor": {
          "ref": "954182b8-c012-490f-a495-8c7a8fe5a46c",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "85313365-da15-4f1d-8ed6-63d41de073d7"
        },
        "item": {
          "id": "9fb60d4c-8c14-427a-8343-0907eafcaf47",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "17a5319a-a01b-43ae-ac18-7b29047a3988",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "a9a837d1-fcec-4de5-86b6-8c35fb7dbff4",
        "cursor": {
          "ref": "90b4fab9-0e21-4131-bb0a-93a603af2ad6",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "7f5f5e1e-65d3-4100-9e78-7972fd38c91b"
        },
        "item": {
          "id": "a9a837d1-fcec-4de5-86b6-8c35fb7dbff4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0616945e-ed10-4b4d-93af-225b325d8d23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "14248389-d5c9-4c9e-b55d-e63902964ee0",
        "cursor": {
          "ref": "64b91988-6185-4070-a536-f187dff360ff",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "c64050cd-d45a-42e9-ba6d-762651880a3e"
        },
        "item": {
          "id": "14248389-d5c9-4c9e-b55d-e63902964ee0",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "43b45c7f-275a-47ae-b1e0-c2c7ee4a2ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6d13d2d3-eb21-4a89-a367-9d4ac77746e9",
        "cursor": {
          "ref": "acb4e4f7-c696-4d3c-bbb1-7149e7d759be",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b4a4ff79-bbbd-48bc-a681-2336e171ec87"
        },
        "item": {
          "id": "6d13d2d3-eb21-4a89-a367-9d4ac77746e9",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f44e4723-61d0-4d86-a85d-66743e99bca4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:104)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:104)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:104)"
            }
          }
        ]
      },
      {
        "id": "de00d613-a3c1-4403-bfe6-25cbd7bfba9e",
        "cursor": {
          "ref": "605bcb42-50d3-40c6-85ac-2fbaa07d41a4",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "91822e70-6592-4a47-85f6-59d2c32cf552"
        },
        "item": {
          "id": "de00d613-a3c1-4403-bfe6-25cbd7bfba9e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "dd7da4bf-188a-4958-8f09-5f2f55ddae96",
          "status": "Created",
          "code": 201,
          "responseTime": 4776,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "648f2037-63d4-4101-aec6-ebba24dfca75",
        "cursor": {
          "ref": "a7820ce6-4a82-48ee-b37b-7b18b0b780d9",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "55498434-56b9-4372-978e-590371366f9f"
        },
        "item": {
          "id": "648f2037-63d4-4101-aec6-ebba24dfca75",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "972c5ac6-8f0f-4f4a-919b-bd0d7fd9f086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ba78833e-f5b1-4e42-b4f9-56b1481b4eff",
        "cursor": {
          "ref": "0df3dbb2-9c01-46fb-9aea-cccd88fa1f9c",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "0c1a7537-bac6-42df-bf33-dc00e61006d1"
        },
        "item": {
          "id": "ba78833e-f5b1-4e42-b4f9-56b1481b4eff",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "8feb7469-18fe-4c84-863a-561dc8b88f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "504d9da7-df5a-4c75-b8c3-513a92c13d52",
        "cursor": {
          "ref": "44e8f30d-0377-4e55-9c5e-b7ab912704fb",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "62f14edd-44de-4c0c-8823-54189280c1d1"
        },
        "item": {
          "id": "504d9da7-df5a-4c75-b8c3-513a92c13d52",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d2454c52-9e5c-411e-9200-3994776fbf51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "c9cf2811-69ad-4d3f-aeb9-a379a6be2125",
        "cursor": {
          "ref": "b6b713eb-e99e-4c46-bd70-1cf43a58d44e",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "5607067d-6857-40bd-8f11-d1b771da2346"
        },
        "item": {
          "id": "c9cf2811-69ad-4d3f-aeb9-a379a6be2125",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8dd15249-1301-47d5-9b1c-3ccb19be012b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "4943728b-1703-4a6e-b8af-bc9ad2b5c12d",
        "cursor": {
          "ref": "775915bd-6edf-41dd-b3d3-a78777840116",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2f8668b1-c911-422b-86f2-53bc3b0e42fc"
        },
        "item": {
          "id": "4943728b-1703-4a6e-b8af-bc9ad2b5c12d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9c44f32e-90a3-420f-b78d-10678046bc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "4943728b-1703-4a6e-b8af-bc9ad2b5c12d",
        "cursor": {
          "ref": "775915bd-6edf-41dd-b3d3-a78777840116",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "2f8668b1-c911-422b-86f2-53bc3b0e42fc"
        },
        "item": {
          "id": "4943728b-1703-4a6e-b8af-bc9ad2b5c12d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9c44f32e-90a3-420f-b78d-10678046bc7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "6c5006f2-e744-4e4f-921e-c5f6d56f543b",
        "cursor": {
          "ref": "69960e6e-487f-47e2-a499-7bc8ad783028",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "8aba9a80-afb4-455a-aab2-f9fb75fa577a"
        },
        "item": {
          "id": "6c5006f2-e744-4e4f-921e-c5f6d56f543b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3d38aabd-dc66-420e-a7a8-a3ded32c8749",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "54f713b7-2e00-4e19-a24c-6aaccb1726e5",
        "cursor": {
          "ref": "20dca16e-6446-4f92-98dd-8eeb020bdd58",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9ea6a127-fe41-4a91-8bf7-2255d2fefae4"
        },
        "item": {
          "id": "54f713b7-2e00-4e19-a24c-6aaccb1726e5",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "2aab25b5-de0e-4bc2-9d22-544ca4511bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "9e17b1a5-f5a8-4314-af84-df4d902a5068",
        "cursor": {
          "ref": "338c91b6-6535-4ba8-941c-2ddfcaac44c4",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5d8ef622-5523-4e5c-8e1e-cb405ea9f453"
        },
        "item": {
          "id": "9e17b1a5-f5a8-4314-af84-df4d902a5068",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "9be932ef-b1b9-438c-8673-82190457b87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "99d9b2e3-11f3-4461-a226-7e142d2c7ece",
        "cursor": {
          "ref": "5a47cc22-acc0-4304-b282-83caef64e9e9",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "4fc7aa10-2bf9-4a92-b3c4-4da7a1820bde"
        },
        "item": {
          "id": "99d9b2e3-11f3-4461-a226-7e142d2c7ece",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0040897f-9510-415e-bcd3-9d506230224c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "c11ad223-7aae-49ad-88b2-4d9694030438",
        "cursor": {
          "ref": "26494d39-8503-47c6-b2df-a5c118e61548",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "ad841848-eeaa-4b00-bab0-def5d883dcd8"
        },
        "item": {
          "id": "c11ad223-7aae-49ad-88b2-4d9694030438",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6910a07d-a03d-42ec-927e-6fcb6b63a1f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "5dee4aad-3912-47be-aaea-ee2f343d928a",
        "cursor": {
          "ref": "2804de9f-399e-4ebd-954a-b48897b95686",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "56241505-f0e7-4c6e-a44c-57db10ad4e7c"
        },
        "item": {
          "id": "5dee4aad-3912-47be-aaea-ee2f343d928a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "9fe7c199-4126-4e84-a718-28b7841825f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "467ce54a-9504-42b6-92e8-fd86d5c87063",
        "cursor": {
          "ref": "a6aed085-6c4c-4b76-a3b6-12b04c5bdc9d",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f7813830-f5b8-4b6a-8c85-130d44657d0b"
        },
        "item": {
          "id": "467ce54a-9504-42b6-92e8-fd86d5c87063",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b4e8ee6e-1d51-435c-8a83-1032cb40d9a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7819b284-f909-46a4-b47e-555b4df58f11",
        "cursor": {
          "ref": "0e34294a-8f76-478c-acbe-f51ae5897bc2",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "af2e520b-954d-4e6a-8cbd-f82ad5eab20b"
        },
        "item": {
          "id": "7819b284-f909-46a4-b47e-555b4df58f11",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4699bce7-7ab9-4920-a70f-bbbb065c9f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "c8b4cc86-9019-4ea2-8f42-c62d513f50bd",
        "cursor": {
          "ref": "e1aaa786-d914-4c63-b447-bfeab02e2181",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "538b0892-98e9-4cfe-a89d-a21ad669cdc6"
        },
        "item": {
          "id": "c8b4cc86-9019-4ea2-8f42-c62d513f50bd",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "1c7c6177-c2cd-429b-b7a6-356f517d4954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "47f2545f-780b-4a79-a2f1-2910b5b15bef",
        "cursor": {
          "ref": "f34e21ca-a599-4229-bf3c-1e60d8e9a369",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e233c9cf-bae4-4f10-94a9-47f7db7abbf2"
        },
        "item": {
          "id": "47f2545f-780b-4a79-a2f1-2910b5b15bef",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4a05b7ff-3cb9-4695-af7d-af396335c123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "075b8bc6-cc84-4c58-8c6e-7a82b0e0b715",
        "cursor": {
          "ref": "2f6c7983-9a37-4bad-8351-27cdce3301e1",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c567be6b-5c1c-457c-8a35-65d36838ce8d"
        },
        "item": {
          "id": "075b8bc6-cc84-4c58-8c6e-7a82b0e0b715",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c243d005-7864-4a3e-85b3-3b00d074bdd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "69a9776a-0f38-4fd6-85b1-ad0e7a9c52a0",
        "cursor": {
          "ref": "ec3299d0-7f34-447a-956c-a4b8ffab0297",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2b732fc8-fa7a-42f4-bb65-08b82c88f1b7"
        },
        "item": {
          "id": "69a9776a-0f38-4fd6-85b1-ad0e7a9c52a0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "180005bd-0507-4f48-b574-f39deb98253a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "15fc7499-35b7-4392-8c87-b5ad2579e91c",
        "cursor": {
          "ref": "cb63f61c-b4fb-497a-905e-3b1c2dcaf69f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d35c36ca-4410-4527-96a3-57ed05e092c1"
        },
        "item": {
          "id": "15fc7499-35b7-4392-8c87-b5ad2579e91c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "af22792c-241d-4080-a847-9f138d19433e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "046676b6-0f95-4981-ada9-9d34b27aa63e",
        "cursor": {
          "ref": "4d1922ab-390f-4ed9-8437-e689a3a0ec8d",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "eac7ae25-b9e1-4c6f-a2b3-f5f51e48dcee"
        },
        "item": {
          "id": "046676b6-0f95-4981-ada9-9d34b27aa63e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ef28e188-5148-4bbf-9ba0-b679cb2647ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "44780b2f-6735-4447-8bcb-aa7a62d30d47",
        "cursor": {
          "ref": "56f6a370-818e-43ee-a1e2-08eeb388368b",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "40a10a79-ca72-4c26-a7e2-1a85a206d623"
        },
        "item": {
          "id": "44780b2f-6735-4447-8bcb-aa7a62d30d47",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "31687847-a1f0-44ba-8a51-c334881320c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "d7b4fea5-2aa1-421a-ab3c-ba44e52842b8",
        "cursor": {
          "ref": "5f6a0d7f-5780-4ab4-ac67-d2a1678553ee",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "02c0c939-1911-484d-9468-df75b91d2986"
        },
        "item": {
          "id": "d7b4fea5-2aa1-421a-ab3c-ba44e52842b8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "06915670-8d71-49ca-bc0e-a9451e5131ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "268d3be8-bd88-40fd-a849-a07732912ae9",
        "cursor": {
          "ref": "0a21f434-ccda-4e9f-94f8-6d71b675d48f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a8ab2cb8-d180-4239-899e-e7f515a45235"
        },
        "item": {
          "id": "268d3be8-bd88-40fd-a849-a07732912ae9",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "971e95f5-4ed5-4e43-8fc6-ecd3756fda7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "b9b69736-8e1a-4fba-8be8-5cd735fa011b",
        "cursor": {
          "ref": "ac89b022-74e7-4e12-a38b-273a31a66ec1",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d8ca7a76-81d2-4949-9771-f1d77484f0ff"
        },
        "item": {
          "id": "b9b69736-8e1a-4fba-8be8-5cd735fa011b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c867977e-d39c-4e0b-9e6a-d1509025ffac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "357baf16-9f42-446e-b4f1-fc1f7e3b5c55",
        "cursor": {
          "ref": "d9a4c2ae-5bb4-4715-a494-e6dddc5bbdfe",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3cd4097e-3691-46ff-90b8-158f9a0470d4"
        },
        "item": {
          "id": "357baf16-9f42-446e-b4f1-fc1f7e3b5c55",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3c6c5f2f-97be-4c13-bf7b-abad53ef7251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "42d26da8-0730-4068-bf7e-013e5e49f832",
        "cursor": {
          "ref": "765b1229-c4db-411e-baf0-9b066eefad98",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "12d46fc3-3452-42d5-83b7-b82820770ce3"
        },
        "item": {
          "id": "42d26da8-0730-4068-bf7e-013e5e49f832",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e7ca3e4b-0a4d-43ad-99f5-47af22492bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "7133d01e-4bcb-4699-8af5-82d80dc443af",
        "cursor": {
          "ref": "38f75ebc-e4e6-4278-b318-894ba23a91b0",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "6487dd97-236d-4807-a195-1b2202ebc085"
        },
        "item": {
          "id": "7133d01e-4bcb-4699-8af5-82d80dc443af",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4370564d-15e6-4ac9-b629-f760eb0aa73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "c786d5cb-a626-4775-bb18-cc1fc34fb6f0",
        "cursor": {
          "ref": "751cefbd-9ffd-4ecd-9b9c-6eeb02fa48f3",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "8a8fe905-ba66-4b15-a062-42370febae6d"
        },
        "item": {
          "id": "c786d5cb-a626-4775-bb18-cc1fc34fb6f0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "78eb94e6-0351-4aa8-938c-4de785ddc884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "a65d9c2a-a2a1-4d13-90be-95d7bcd9591e",
        "cursor": {
          "ref": "b9737276-7b27-4952-b637-9ea756a7ead0",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f97323d7-1b56-40ff-a0b8-aac3e2250634"
        },
        "item": {
          "id": "a65d9c2a-a2a1-4d13-90be-95d7bcd9591e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ee7ceda2-b428-4ba6-9a5c-a2fc2028b9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "7710bc03-a6ec-4a6c-8c3b-894dd39e156e",
        "cursor": {
          "ref": "97267af3-5d5a-4578-8eab-2f839f8ecd38",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e6a60f5e-c7d2-411b-a56d-23833462843a"
        },
        "item": {
          "id": "7710bc03-a6ec-4a6c-8c3b-894dd39e156e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "42281696-0aa2-4cec-98d7-9e14b60c06af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c3e42665-d1b9-49aa-8cb0-255931b5f4c6",
        "cursor": {
          "ref": "d019f0aa-5fd0-487a-8fcb-4eb3dba670db",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5696ddad-19d9-4f3c-a120-ea1f20aa2b04"
        },
        "item": {
          "id": "c3e42665-d1b9-49aa-8cb0-255931b5f4c6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b25fb886-a84c-4ea1-b4b5-0786168aa45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b8ed2e69-9c85-48be-bd70-83bfe8ed9cf8",
        "cursor": {
          "ref": "22d21eea-2ac1-4b7c-8350-c5b92b20a936",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "509e3381-a5cb-40a5-83a9-0e9491dd0573"
        },
        "item": {
          "id": "b8ed2e69-9c85-48be-bd70-83bfe8ed9cf8",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "910f43d1-e469-4288-81b9-fdd20aacf80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6b13b412-5c94-40c1-aaa5-b69bf077077f",
        "cursor": {
          "ref": "79387e8d-f7fe-49eb-8d1a-6225f5b54b90",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "4f57e563-7a36-4e5e-a440-576bd7e5011d"
        },
        "item": {
          "id": "6b13b412-5c94-40c1-aaa5-b69bf077077f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a8208dce-08f5-4dc4-b6ed-f719065df24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "112ef526-cf8e-481c-bca7-dd2cf5d37419",
        "cursor": {
          "ref": "400b7024-d769-4598-8539-e2d2074f7910",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "6c91c5dd-7fb0-42da-81a5-d21f35630bb2"
        },
        "item": {
          "id": "112ef526-cf8e-481c-bca7-dd2cf5d37419",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a07e2b65-a8a0-4e84-90ed-1790d0bd747d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "270e2bbe-cd4d-4602-9684-1b2f7be4e894",
        "cursor": {
          "ref": "8eba6c28-a7e6-4c76-b89c-48afbb9b7764",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d51f0f43-b8e9-4750-8444-f7c8769ed88b"
        },
        "item": {
          "id": "270e2bbe-cd4d-4602-9684-1b2f7be4e894",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "286c80ca-d7a5-4b70-bc03-b4c1de6a5f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "56751bc5-bf5a-41c8-892c-4515a30bb237",
        "cursor": {
          "ref": "870ca50a-d0b5-4a5c-8a60-d58a7b3da0c6",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "c6551d74-9b63-4a08-af17-a538a0a3360b"
        },
        "item": {
          "id": "56751bc5-bf5a-41c8-892c-4515a30bb237",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7dc51881-511a-4590-b56e-feb34c672eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "8e260dde-0594-429d-a34c-c97fd292523b",
        "cursor": {
          "ref": "4a5af68f-efbc-4ce6-a074-b2a3c5ae1c6c",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4a4bbb3f-cc40-4704-b60e-8e2e94a275fb"
        },
        "item": {
          "id": "8e260dde-0594-429d-a34c-c97fd292523b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2f76c113-71e4-4720-8e74-adb0189df14c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "97608f6b-e576-43c2-9163-0ef4edff8153",
        "cursor": {
          "ref": "2ec082e3-03ec-4f47-a20d-d67735564efa",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2e904eee-279a-4718-9352-6a3f3cafa19f"
        },
        "item": {
          "id": "97608f6b-e576-43c2-9163-0ef4edff8153",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a81cd236-a484-4aa2-b1aa-39ce892dce2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b8148bb6-4a9c-45bf-84cd-f1bc71a6f6f9",
        "cursor": {
          "ref": "1889b50a-d10d-4d96-af46-52b1c331c1d9",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0e37bd64-d283-4bbe-b61b-18a054bb7cf3"
        },
        "item": {
          "id": "b8148bb6-4a9c-45bf-84cd-f1bc71a6f6f9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "60059aed-434c-4d7b-a61f-6cd74767239d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "c977e70d-f39f-4bac-9b08-a46250f9190b",
        "cursor": {
          "ref": "943f8acb-7777-4a5a-8369-d836921aaf6a",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d37b205b-ec74-47b3-a77e-aa8ca07ec4e3"
        },
        "item": {
          "id": "c977e70d-f39f-4bac-9b08-a46250f9190b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ec29740c-f433-405e-b535-ac0cd924792a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c977e70d-f39f-4bac-9b08-a46250f9190b",
        "cursor": {
          "ref": "943f8acb-7777-4a5a-8369-d836921aaf6a",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d37b205b-ec74-47b3-a77e-aa8ca07ec4e3"
        },
        "item": {
          "id": "c977e70d-f39f-4bac-9b08-a46250f9190b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ec29740c-f433-405e-b535-ac0cd924792a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "53c09fcb-3360-4990-8881-401e7b23eb82",
        "cursor": {
          "ref": "8b937586-23dc-47b0-a20a-5986a98cd4ce",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "31a4473e-124a-43e6-b79d-a848bb7b3392"
        },
        "item": {
          "id": "53c09fcb-3360-4990-8881-401e7b23eb82",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "868c3e2b-55d6-43e8-bc52-b19eba691d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "d1cedd74-c1ee-4386-bf34-9db1e6ff6888",
        "cursor": {
          "ref": "345b7077-7932-407f-9af6-d333d0256305",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "59997b88-46c1-4a86-b959-dc7a7b51d7a4"
        },
        "item": {
          "id": "d1cedd74-c1ee-4386-bf34-9db1e6ff6888",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "7182c99e-f53d-4ecf-a944-d3d7bca8f055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "7db18323-32cd-4c08-8a24-28c8a0b45a8f",
        "cursor": {
          "ref": "d0396fcc-5851-4fbb-aeee-db8fe2f7caf1",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "b3530688-7411-452a-b4e2-2cec37d118e3"
        },
        "item": {
          "id": "7db18323-32cd-4c08-8a24-28c8a0b45a8f",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fc39af95-499c-49f8-87c0-cf7b5811d475",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "af4a0b96-b88c-40ba-af0b-40c8e39303b2",
        "cursor": {
          "ref": "e29b894b-9983-4f70-8bbf-08b476e45193",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "82709713-a15e-430c-b0bf-12cd48685947"
        },
        "item": {
          "id": "af4a0b96-b88c-40ba-af0b-40c8e39303b2",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "6b6840a3-2086-4cb6-876b-078cfe169809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "ec7e7bf2-a2a2-407f-a5fd-a913af935ed5",
        "cursor": {
          "ref": "b8911e0c-081d-4418-a686-ee7bbd9fbd86",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ecba28a0-9a87-46fa-8a2e-8a5ccd60b3c5"
        },
        "item": {
          "id": "ec7e7bf2-a2a2-407f-a5fd-a913af935ed5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5a6c01d0-6913-473e-9023-23e7637a87a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "0cdffd06-9b70-4f4c-b2d2-20c6782c2b76",
        "cursor": {
          "ref": "d1b2c7ca-82c9-4d6e-8bc8-8407bba3f405",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2826eccf-9407-459f-b43f-306546be6f09"
        },
        "item": {
          "id": "0cdffd06-9b70-4f4c-b2d2-20c6782c2b76",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2f7393a6-304f-40be-900d-4297f95bfbf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "cfa22abf-7707-47b2-8455-e8da8345d4c1",
        "cursor": {
          "ref": "6b47c322-36b8-4871-a2bc-5ba395e712e6",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "6ddb2489-44f0-4531-97f6-ae4381acda9e"
        },
        "item": {
          "id": "cfa22abf-7707-47b2-8455-e8da8345d4c1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "41f86841-6157-4f62-a287-7be60077d38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "825e04e2-e29f-4045-b29a-6cc3e83574bd",
        "cursor": {
          "ref": "b23e8ff1-c276-45b6-ac95-b9ba4963642d",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "0343d85b-c350-404e-97af-f14e117249fa"
        },
        "item": {
          "id": "825e04e2-e29f-4045-b29a-6cc3e83574bd",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ce470f4f-dc5f-440d-98f7-c77e907fd8a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e79cb958-2465-46b1-9dba-4414df38c547",
        "cursor": {
          "ref": "e0720f10-cc35-40c8-8d8a-f41d5f21a7f8",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "afb0c46e-762a-435f-8e8f-562a3e0999ea"
        },
        "item": {
          "id": "e79cb958-2465-46b1-9dba-4414df38c547",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d850189e-16e8-43e0-b5c9-6e6c3406e402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "e2c0ce12-a1c7-405d-9536-cde0460795a7",
        "cursor": {
          "ref": "e72cc144-5144-460a-aaff-716da26a7dd4",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f1e63be5-0d8a-40a4-b3ff-4aa59c56da62"
        },
        "item": {
          "id": "e2c0ce12-a1c7-405d-9536-cde0460795a7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0a3ba8ee-310b-448b-9114-ae8dfeb89903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "e27076a5-44dc-49ae-bb9d-c6ff67614642",
        "cursor": {
          "ref": "cd4dc724-a3a7-4a5e-b12b-ac611f3ec492",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "9e6743ae-a681-462a-bee2-c6a5c27a8614"
        },
        "item": {
          "id": "e27076a5-44dc-49ae-bb9d-c6ff67614642",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "b71fe1e1-504a-488e-af51-09bf8326178b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "efd2effc-3d8a-4350-8838-6e29ba3a77ad",
        "cursor": {
          "ref": "149ac2f3-3263-4c4a-ad6e-af60aa23a67d",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "86b7c17c-d7d6-4fdf-a15a-84650a8f3d79"
        },
        "item": {
          "id": "efd2effc-3d8a-4350-8838-6e29ba3a77ad",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ce09da37-1d29-4a14-a78f-99d6dde42183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1aa08d15-ae0e-4942-aa3e-7157d7b39308",
        "cursor": {
          "ref": "c71aa816-4cdf-4125-aa8a-1a3d9bb98b89",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b6cc75cb-f53f-4ec6-8de7-eff623c39dc3"
        },
        "item": {
          "id": "1aa08d15-ae0e-4942-aa3e-7157d7b39308",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "29f9e554-3d72-4468-8550-a5dc8fc23a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "057765a3-2039-4f69-ac9c-816e45ce44df",
        "cursor": {
          "ref": "045905b2-14d3-4ef2-9454-300037ecce94",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "96ef2bf7-5d11-45e4-b40f-e465ebb067e2"
        },
        "item": {
          "id": "057765a3-2039-4f69-ac9c-816e45ce44df",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "51e80c7f-9962-4877-9931-21a82647b626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "f6ce3bac-9c53-4ce6-a3a1-74a86ebdf42f",
        "cursor": {
          "ref": "519d1d89-93e0-4a04-8bfb-dce50924feeb",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e9b6a710-17e1-4f80-b2f3-44bab279b721"
        },
        "item": {
          "id": "f6ce3bac-9c53-4ce6-a3a1-74a86ebdf42f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "34c76814-4885-4389-9a8b-01716fffe494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d64b27da-29e5-4d92-88eb-ed0df25e2f68",
        "cursor": {
          "ref": "ab720e2f-346a-4c3e-918e-6b907a3fb6a9",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fedadf95-55d1-46d2-a86c-0798e2638ecb"
        },
        "item": {
          "id": "d64b27da-29e5-4d92-88eb-ed0df25e2f68",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d0c383fd-f31b-42e3-b7f7-e2430288a8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "e8cff50f-83dc-43ca-9384-f3c74f738bd3",
        "cursor": {
          "ref": "1ac73036-0d84-49c2-8436-e152a677274a",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3ffb634b-6421-432f-8505-3815e0bf8048"
        },
        "item": {
          "id": "e8cff50f-83dc-43ca-9384-f3c74f738bd3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "123fa1e0-97e8-46ec-a042-f0c1e217a296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4172,
          "responseSize": 1630
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "1c1493f4-8e33-4fba-b4d9-687a996b1f18",
        "cursor": {
          "ref": "b1b68e7a-4703-4a63-be93-596d23ef4cc3",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "42b1fc09-4aff-4bea-9029-16a35dba2328"
        },
        "item": {
          "id": "1c1493f4-8e33-4fba-b4d9-687a996b1f18",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "49870977-0400-4d7e-b176-a505df4cab55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2448,
          "responseSize": 1586
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "14ccd17c-8efc-43ab-8cc6-c09df03f7301",
        "cursor": {
          "ref": "88392bca-c010-4b36-aef1-698630859c3b",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ccbaf35d-ec20-4611-ab73-01a286409cbc"
        },
        "item": {
          "id": "14ccd17c-8efc-43ab-8cc6-c09df03f7301",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7a037659-33c9-4f4f-ad16-797cf400f50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3737,
          "responseSize": 1584
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "822d4fb3-812e-414f-826c-45783e2b782e",
        "cursor": {
          "ref": "039e1d17-51a6-419e-a85c-948f81c83dd2",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ed1bceac-b764-4d4d-9977-ca525ea16f7e"
        },
        "item": {
          "id": "822d4fb3-812e-414f-826c-45783e2b782e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a44d4052-a2b2-4f29-a898-4602f923b7ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "4344ab61-9950-4410-a314-354f2885b799",
        "cursor": {
          "ref": "8aeb1796-1039-42e7-b4a4-dd49714f55d6",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5a75c9a3-5953-4328-a7d5-2091c8a38f9e"
        },
        "item": {
          "id": "4344ab61-9950-4410-a314-354f2885b799",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3dc2b70c-a067-4f9a-b770-2eee2a326f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2189,
          "responseSize": 1636
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "545cdcbe-5ecb-4483-aa89-91caa6b79b27",
        "cursor": {
          "ref": "bfa916f5-b6f0-424c-b676-de1b70b14570",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6f40e7d2-cc78-46fb-b53d-ecf40384e5ee"
        },
        "item": {
          "id": "545cdcbe-5ecb-4483-aa89-91caa6b79b27",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "a876af5c-c21a-4d9b-82a9-85e73af00ccf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "6b4fcef6-4d1e-428e-a5df-9f5855a77670",
        "cursor": {
          "ref": "97271cf9-d0bf-4c34-9509-375806adea06",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "dde82974-17ad-4179-86c5-cd30858b11c9"
        },
        "item": {
          "id": "6b4fcef6-4d1e-428e-a5df-9f5855a77670",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9721b602-a676-452b-afa2-e4bd4dc8c9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "bceb1b31-d3a9-439c-8fde-b1d484e32e5d",
        "cursor": {
          "ref": "0638e4b2-fd02-4826-b87c-9ba93951bfd6",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f77efdc2-6d12-4f70-90ae-78f237acb28b"
        },
        "item": {
          "id": "bceb1b31-d3a9-439c-8fde-b1d484e32e5d",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b05b8e05-e93a-422c-bebf-4c13992ac768",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "fdd751a9-bbe7-4655-add4-b96f3959c672",
        "cursor": {
          "ref": "5d268efe-09e6-4154-8599-46cbef672e73",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "29c2f9d2-891b-413d-a295-e5a5e55d5f89"
        },
        "item": {
          "id": "fdd751a9-bbe7-4655-add4-b96f3959c672",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "7c25fd84-3dc2-473a-aa92-d6e40350df63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "91cd1316-9240-4343-8fb6-5e56a9e1af89",
        "cursor": {
          "ref": "4a400cf8-00a8-4999-924f-0219254b7eb1",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "2b120f80-ac95-478f-88ae-c82ffc7ec969"
        },
        "item": {
          "id": "91cd1316-9240-4343-8fb6-5e56a9e1af89",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fa8e0874-cf8c-4d45-9805-42a4538d2cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "da0bb8f2-e22b-443e-85b6-330b91b6dcf4",
        "cursor": {
          "ref": "7ea25075-a15b-451a-90a7-18d6acf127b0",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3fdb1fdb-bc3c-4514-adb4-a54b14af3cae"
        },
        "item": {
          "id": "da0bb8f2-e22b-443e-85b6-330b91b6dcf4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "0a879403-6362-4423-918a-90fa651b4505",
          "status": "OK",
          "code": 200,
          "responseTime": 2277,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "3a124616-ee7c-45d3-9416-ce634d719012",
        "cursor": {
          "ref": "8974bfe2-d429-46db-941b-d0b8d54b66c0",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c599c889-c3c1-4e4d-9ffd-1720e677f9b8"
        },
        "item": {
          "id": "3a124616-ee7c-45d3-9416-ce634d719012",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f8e7e082-06e7-47c2-99d8-e3a3f89a0984",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "20c9bd5d-8e58-44e9-b369-05edb2b9c01e",
        "cursor": {
          "ref": "72068aba-a71d-48d9-99cb-d42f8eee5161",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "cf8110a6-0753-4b77-8619-72e03202f54d"
        },
        "item": {
          "id": "20c9bd5d-8e58-44e9-b369-05edb2b9c01e",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "55490a35-9ed4-4782-ae9c-9f9b1366afec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "13405871-c6a1-4710-b81e-9926e821e293",
        "cursor": {
          "ref": "b8015c89-9921-441d-a353-4f3039de596e",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f3c58b88-ecac-482e-be07-7065ddbcacef"
        },
        "item": {
          "id": "13405871-c6a1-4710-b81e-9926e821e293",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "800401e3-d157-4a9c-9a33-90250829e4a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "9271f816-c0ce-475a-be28-08c10bc6f4b1",
        "cursor": {
          "ref": "4dd135e3-f490-434e-8c95-3b26f977e036",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "38e69f88-972d-4c87-9ac6-df12be9aa553"
        },
        "item": {
          "id": "9271f816-c0ce-475a-be28-08c10bc6f4b1",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "992769e0-5c41-4a2e-bd02-d27e8d9c2730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "d1d217c6-3f4a-4464-b9e0-d8fe6f2cd3ac",
        "cursor": {
          "ref": "596ee656-78cc-43f1-b527-e3c3b60df360",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9c1555cb-cf86-48ec-8fde-024af2ad17e2"
        },
        "item": {
          "id": "d1d217c6-3f4a-4464-b9e0-d8fe6f2cd3ac",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "88f4a920-1bfa-4edf-a62a-7972f759cd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "3038aaf3-1354-4c7f-8c45-0a0ef04cabef",
        "cursor": {
          "ref": "d14d77f1-0a7f-4132-b335-30e8c1060b3e",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "1e8e1f54-0a44-4f41-abe6-a34e0db017a9"
        },
        "item": {
          "id": "3038aaf3-1354-4c7f-8c45-0a0ef04cabef",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b252798f-ede2-49f8-92ac-9d871d548ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "2a3d5863-4508-418d-8f0b-29c80ca90daa",
        "cursor": {
          "ref": "6bb0d8d7-2966-4a57-89bd-8728d765194b",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4ab2d6f0-5f42-463d-9dc6-ac41552d2b8b"
        },
        "item": {
          "id": "2a3d5863-4508-418d-8f0b-29c80ca90daa",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f4e2b64a-6736-426c-bdba-938c222ed054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "35b2351a-425c-45e5-80b5-de80dd5d0e29",
        "cursor": {
          "ref": "72e35b5a-7a7f-47ac-be15-1df7d1464489",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3b8e6c1f-ca18-44c8-814c-00ad1ada8d4a"
        },
        "item": {
          "id": "35b2351a-425c-45e5-80b5-de80dd5d0e29",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "3a8dc0c5-b5cd-422e-a77c-679ad868aa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "ad0fe42b-4419-4e95-890b-0487f981b90f",
        "cursor": {
          "ref": "ad2511b5-e4f3-4482-a76b-dc81478a3abf",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2a592dad-33e5-44f2-98cd-d8bb516466a6"
        },
        "item": {
          "id": "ad0fe42b-4419-4e95-890b-0487f981b90f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "6714abda-8f08-4fef-bcb5-c2ebac84fdbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "8ad9c65a-bbe5-4353-9cac-6c042f43507d",
        "cursor": {
          "ref": "d6a12507-1aaa-4664-b1f9-f75e70ffed20",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ee5edfeb-d93c-4462-830e-1a8190cfdea6"
        },
        "item": {
          "id": "8ad9c65a-bbe5-4353-9cac-6c042f43507d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "5a45fffb-2b07-4b98-a64c-df584e77f2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "e30010fc-8f59-441d-90a1-69448350a281",
        "cursor": {
          "ref": "dfa71156-6416-4422-8222-754aa933a10d",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6461c4f8-6f06-40f8-a17f-db1484a33843"
        },
        "item": {
          "id": "e30010fc-8f59-441d-90a1-69448350a281",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b0fedb64-5448-4c7d-9ade-14beaf7ebf39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "eb0b82c6-9436-4bd1-8b10-fb3513a0f294",
        "cursor": {
          "ref": "794a02fd-4f43-45f2-ba1a-958abdaab112",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c0db5ccf-e9cf-4323-bac6-c52d8aca83c7"
        },
        "item": {
          "id": "eb0b82c6-9436-4bd1-8b10-fb3513a0f294",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e295ed87-7751-4b4f-bbd8-8b6e201bbcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "65bc0ef4-e8f8-415f-a0fb-c26fb8e36058",
        "cursor": {
          "ref": "322c66ce-409c-4f68-b2d6-853df34008bc",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "4aebf905-66eb-4070-9845-04cb01efe07a"
        },
        "item": {
          "id": "65bc0ef4-e8f8-415f-a0fb-c26fb8e36058",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "01d88afe-8cb6-4e61-9fde-fc3cc498275e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "493a004b-0212-48ab-8392-d064f050b4df",
        "cursor": {
          "ref": "9a09fa78-45fd-4ba2-8feb-369424228110",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "82c71bd8-b9fe-433b-875a-5e23abf472e2"
        },
        "item": {
          "id": "493a004b-0212-48ab-8392-d064f050b4df",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4ee9bf5b-73ff-40fc-a66c-4faae7dd6474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f8ce9488-f092-4520-9b66-1a39b3521390",
        "cursor": {
          "ref": "60ce0373-8154-4c7f-ab09-c7dabaaa9eab",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c41b0620-418a-4dab-93a6-415b2151216f"
        },
        "item": {
          "id": "f8ce9488-f092-4520-9b66-1a39b3521390",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "9ff3a013-7f12-4b33-a23d-98993437c4bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "a996b240-d0ef-4b38-ab1e-785aec241de6",
        "cursor": {
          "ref": "71beb8cd-2f04-4e32-9c8e-26464c310450",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "3e13a0ab-5b05-482b-836c-884116b93b4f"
        },
        "item": {
          "id": "a996b240-d0ef-4b38-ab1e-785aec241de6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "c1bff6c4-f381-4578-9d1a-be2f6a646f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "f57ebfdf-ae11-4eec-8588-b764b83c5976",
        "cursor": {
          "ref": "613f50bb-fe6a-4132-8881-a97ba280c1a9",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0c972894-9ca4-4b98-b4df-49dccdbb1440"
        },
        "item": {
          "id": "f57ebfdf-ae11-4eec-8588-b764b83c5976",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ad782a43-3d14-41d0-b9e9-c517fbef734e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9ed1730f-4671-455c-8e86-9b79f5f49c73",
        "cursor": {
          "ref": "9f091f8b-a82f-4299-8d3d-bb348d0bc3ae",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "819b31af-f12e-42f9-922e-da3d8e24f79a"
        },
        "item": {
          "id": "9ed1730f-4671-455c-8e86-9b79f5f49c73",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "97571168-068a-4fca-8f54-2901cde1ed4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "9ea148e6-d2d3-4b2f-9b8d-ed4c0a2dadb2",
        "cursor": {
          "ref": "2175cfd5-308a-4d41-a39c-17dfa90e0d06",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3bddd869-5599-4ce3-b54a-b36ffc73b139"
        },
        "item": {
          "id": "9ea148e6-d2d3-4b2f-9b8d-ed4c0a2dadb2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e97e7ba9-6be1-4cdd-91d7-0b674eef6fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "2afcdb22-6b27-4173-96fa-a984b612a496",
        "cursor": {
          "ref": "e5d1ee7e-df4c-4d41-897b-fcb46edc69c8",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8f239629-a626-4f30-9bba-7d95c8694c29"
        },
        "item": {
          "id": "2afcdb22-6b27-4173-96fa-a984b612a496",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "460c653c-cddd-420d-89d5-5a86a149d1e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "23575fd5-0149-48cb-b631-4159411896c0",
        "cursor": {
          "ref": "630b38b6-4e35-4531-8be5-d1eb519907e9",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e789eed9-2dc2-487c-ad98-d06d9408c047"
        },
        "item": {
          "id": "23575fd5-0149-48cb-b631-4159411896c0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0744175f-4693-4d49-9e01-7043188b92aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "e2509728-3467-4688-a22f-20e4e834ffb9",
        "cursor": {
          "ref": "2ca5ec06-9027-4e81-84b5-9cc84583e558",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "a375a07d-f6d7-44f8-9741-a1a177cd3b5c"
        },
        "item": {
          "id": "e2509728-3467-4688-a22f-20e4e834ffb9",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "916ea650-94c4-4497-9ff5-06aa91f97bba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 99,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "0c465b0b-9ca7-4db2-9603-38b11fd8da8f",
        "cursor": {
          "ref": "72ea932d-ad7e-4770-99a8-78b561079a74",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "eb95afdb-4e25-4e23-8c7a-d468e7f453db"
        },
        "item": {
          "id": "0c465b0b-9ca7-4db2-9603-38b11fd8da8f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "47e85fd0-5b5c-4943-8290-8358ec10c743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "94158796-a156-4b27-9ace-f444210b3e4b",
        "cursor": {
          "ref": "135a3949-8b01-479c-a228-fbbfc0e8a650",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fecbb958-db15-4637-85a1-f29bcbc8cccd"
        },
        "item": {
          "id": "94158796-a156-4b27-9ace-f444210b3e4b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "cb99a900-9430-4b83-8cf6-d492cb8b7737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "c99e5fab-b1e8-41c4-8706-7ef2b60f0cd3",
        "cursor": {
          "ref": "4ebc44bf-b196-4607-84b8-28e19bae63b6",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "d47bb341-d92d-4002-8af7-0d821441ba84"
        },
        "item": {
          "id": "c99e5fab-b1e8-41c4-8706-7ef2b60f0cd3",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cb9e9ea2-0be7-425c-aff3-1c0a123db812",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "f2d2e2db-0994-4bc0-a920-f37e0f30ab53",
        "cursor": {
          "ref": "02392806-6acb-4166-b739-3f2f31f437d4",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "aaec44fb-c5ef-4f85-8621-04fd8f1971be"
        },
        "item": {
          "id": "f2d2e2db-0994-4bc0-a920-f37e0f30ab53",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f1f1bf43-3647-44c7-866b-cb1b54857e56",
          "status": "OK",
          "code": 200,
          "responseTime": 4009,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "674bed5a-88e2-41ae-a508-86b9a28b787b",
        "cursor": {
          "ref": "2af75b02-8c70-4771-baa3-e0f2a75b0802",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4991112b-a5e5-460e-8eac-a406df6de6e0"
        },
        "item": {
          "id": "674bed5a-88e2-41ae-a508-86b9a28b787b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8a87f6cd-9486-4cae-b83c-f8d7c3b3d15c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 90,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "0528e3ef-4254-478b-932b-372660e32da1",
        "cursor": {
          "ref": "dfdecc47-84f7-4f0b-8a43-b8ff61b0d965",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b56a69da-697f-42a1-aa06-6f6754f86ee5"
        },
        "item": {
          "id": "0528e3ef-4254-478b-932b-372660e32da1",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "253e1b22-13ad-4e7a-97e3-b515cf3a4587",
          "status": "OK",
          "code": 200,
          "responseTime": 2189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "95526e20-90c0-453f-b17b-3fcc05dec05b",
        "cursor": {
          "ref": "b2281c51-14bd-4a91-bb66-ebca3bb3a7c9",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "89f34ffc-65a2-486d-b749-d987665a9196"
        },
        "item": {
          "id": "95526e20-90c0-453f-b17b-3fcc05dec05b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "bb613d4c-3711-45d0-9d56-b3579be9510b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "191fd7e2-b19a-4d27-80a9-7b586f5cfdfb",
        "cursor": {
          "ref": "b50ed568-2ea8-4243-b683-a3b40516ed28",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "438d9a76-5747-4cd8-bcf6-b38fb0884725"
        },
        "item": {
          "id": "191fd7e2-b19a-4d27-80a9-7b586f5cfdfb",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "4f594f6d-4a9c-46f9-a2cf-441a8b725647",
          "status": "OK",
          "code": 200,
          "responseTime": 2189,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "05dd94c7-0f71-4554-a690-3f373081c83e",
        "cursor": {
          "ref": "559aec37-6ede-4b31-b6f2-5889859d4e9b",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "6d81d42e-2c69-46eb-b48e-9de7d916f4bc"
        },
        "item": {
          "id": "05dd94c7-0f71-4554-a690-3f373081c83e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "31192590-0db9-49dd-8e68-66a81d9f6e6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3951,
          "responseSize": 1542
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "2fe19ce1-ead7-48b0-85f1-b1d39f8761c3",
        "cursor": {
          "ref": "9f0965a8-f2b4-4eed-bdaf-a1d641f285fa",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d151d815-1e6e-4c7b-9b66-b2ce1db0a489"
        },
        "item": {
          "id": "2fe19ce1-ead7-48b0-85f1-b1d39f8761c3",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b4a08d37-5c7f-4a9e-a64a-20856bd11679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2047,
          "responseSize": 1528
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "83caa8f1-9984-457b-9bc0-d90cf0b57102",
        "cursor": {
          "ref": "0dcb4fe4-7721-4b94-81f3-fe1f633a91f3",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "da6d3012-2eaa-4be6-9151-115b6b7d19ba"
        },
        "item": {
          "id": "83caa8f1-9984-457b-9bc0-d90cf0b57102",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2df96020-250f-4227-bf5f-1a57b8f84a76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "9baf91a4-9066-43a2-a75d-cea715977403",
        "cursor": {
          "ref": "b75cce9b-d448-411e-8c03-636694e440b5",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d7fb1923-e0d7-4457-a7eb-af20a885aff6"
        },
        "item": {
          "id": "9baf91a4-9066-43a2-a75d-cea715977403",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2b889700-4e75-485b-993d-89b6421ce90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 2084,
          "responseSize": 1527
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d660429f-f46f-4af8-ad65-a09d4526dc7b",
        "cursor": {
          "ref": "e65d38f8-d81c-49bc-b56e-023f58b3aa00",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9d2c92e1-305a-41f7-8a62-723e0d04c374"
        },
        "item": {
          "id": "d660429f-f46f-4af8-ad65-a09d4526dc7b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "c097367d-a807-47ad-a1da-c87cdde5089c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 138,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6dcadddf-3a6b-4d38-9d6e-5f930ca7fd1b",
        "cursor": {
          "ref": "6618778a-28dd-4223-bb61-7047d47478d0",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "950316e9-c98b-47c4-8629-868acffd655f"
        },
        "item": {
          "id": "6dcadddf-3a6b-4d38-9d6e-5f930ca7fd1b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8c4f684b-3b80-41bc-a2c7-ecfffdfda74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ed2574f4-c50f-405b-a2e5-c88de45d8192",
        "cursor": {
          "ref": "0e803cfb-a9fb-4240-8574-0d48e95d0b70",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "a89d3253-ee04-4a41-bf81-9a066de8bb61"
        },
        "item": {
          "id": "ed2574f4-c50f-405b-a2e5-c88de45d8192",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ec04d53b-fd57-4524-9222-693728b080d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 1049
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "fd5a1433-556d-46de-be9c-9c671189a07d",
        "cursor": {
          "ref": "ed3bf917-c367-4a6f-ade1-20d6642c7832",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d053f8df-7518-44c0-865e-941cb23b2808"
        },
        "item": {
          "id": "fd5a1433-556d-46de-be9c-9c671189a07d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f979f3c4-9a08-415e-872f-79ac204268be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "0512825d-ab45-476b-b6d0-af91a3a92052",
        "cursor": {
          "ref": "834db3db-c1c5-446e-bc26-aae184d90701",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "52d5500d-b19d-464d-a6e2-e1ec1cc8b2d4"
        },
        "item": {
          "id": "0512825d-ab45-476b-b6d0-af91a3a92052",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6f670891-1549-4af7-bd7e-5f12c8bb0395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "316685e6-2b17-4041-8f5f-6c03a7a502ea",
        "cursor": {
          "ref": "fcbfddf8-a09c-4931-b8a3-ebbdce55bec9",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9315c72f-1bd6-473c-b48d-152ecd1e10b2"
        },
        "item": {
          "id": "316685e6-2b17-4041-8f5f-6c03a7a502ea",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9261299c-c35d-4cda-880a-f17022760406",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "f851f2be-542e-4639-82b7-a8b9f9465b39",
        "cursor": {
          "ref": "a31e6620-0f4c-4a92-ab69-f13ac6d1365f",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a2ccb1a7-7d3f-489d-a826-d446fb008907"
        },
        "item": {
          "id": "f851f2be-542e-4639-82b7-a8b9f9465b39",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "05aa9204-14ad-4910-80af-b34910c9b566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 134
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "c0380f74-f102-473a-b20b-049b0ebc8cad",
        "cursor": {
          "ref": "c64e49d4-88bb-4dc4-9c84-d68406947c39",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "686bbe7c-532d-4afb-acb0-9ce2a9bedb29"
        },
        "item": {
          "id": "c0380f74-f102-473a-b20b-049b0ebc8cad",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f50ded09-77a5-4bfc-828a-cbe58ecef80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "1c8fd164-879c-4d6f-a005-7003891d42c8",
        "cursor": {
          "ref": "8bf695e6-fa29-4dc7-a8d6-e87945c8bbef",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "50241274-a675-400f-93b3-69bf7bfb4a2a"
        },
        "item": {
          "id": "1c8fd164-879c-4d6f-a005-7003891d42c8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cc0ace3a-da38-4ed4-9f95-62067093302c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "60f62565-b556-4d8d-9744-c6ebfe4ff950",
        "cursor": {
          "ref": "76e6d0ba-974b-4417-bcc6-04acc2d9d40c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1f7f8959-97ad-4c2f-9996-0e3c20f78133"
        },
        "item": {
          "id": "60f62565-b556-4d8d-9744-c6ebfe4ff950",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "01b5b4b3-04b2-46da-9184-296c8a84c035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e06e4a53-f6da-4039-a154-9cbb7c9d10dc",
        "cursor": {
          "ref": "2f70fac3-b87e-431a-a62e-df7da289c37c",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "548ff28c-1118-40db-bf3d-931ba4f4d4b7"
        },
        "item": {
          "id": "e06e4a53-f6da-4039-a154-9cbb7c9d10dc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "cd03268a-bf6a-4ea8-b52e-677ed10de5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "74cfcbbc-4c09-414c-83a2-b3c42b6b59d5",
        "cursor": {
          "ref": "5c6c9ba2-bb9c-4178-be6d-839ae41ff1ea",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "f830a25f-09a5-44a1-9bc4-f55000702650"
        },
        "item": {
          "id": "74cfcbbc-4c09-414c-83a2-b3c42b6b59d5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "65292a3d-287d-4f92-8263-09359e0334eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2f51c4ab-9402-485f-9c80-ee706096baa8",
        "cursor": {
          "ref": "3b528867-a107-4dd9-9272-46f8ba4b83a0",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "54f66df4-90ba-4c03-8903-37fe586ef0d7"
        },
        "item": {
          "id": "2f51c4ab-9402-485f-9c80-ee706096baa8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8a4acdcc-3509-4c43-baf1-fe1b362e4304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "03359ff8-f1b0-41a4-8bf5-06b7b2924ca7",
        "cursor": {
          "ref": "73baf9d2-2301-471f-a779-3f4b4a6fe864",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9c4e1839-7ca1-40fa-a977-0be25a1179bb"
        },
        "item": {
          "id": "03359ff8-f1b0-41a4-8bf5-06b7b2924ca7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7c0f0edf-b6e0-4b8a-8131-a7720179b101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d137bb80-fc85-4a0e-9fbe-63784fb5c763",
        "cursor": {
          "ref": "0c240c7a-ed69-44a1-8181-cdc32da2e82c",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "adffb359-0f20-4471-b191-1d6922dd71bb"
        },
        "item": {
          "id": "d137bb80-fc85-4a0e-9fbe-63784fb5c763",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "58b09679-51bd-4553-96bf-511889909482",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "6d14af1a-9243-48ab-88e3-3caed66a11ed",
        "cursor": {
          "ref": "9492112e-c329-47be-aac3-b234c66f7d06",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "801a4afa-eb1b-45a6-b125-4721e526d6c3"
        },
        "item": {
          "id": "6d14af1a-9243-48ab-88e3-3caed66a11ed",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6c4f625a-5a52-431c-b548-9098a9839401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "1f762051-0423-45ae-9886-045e07e05c28",
        "cursor": {
          "ref": "95caa2ff-cd75-430c-ab8c-16e50fc6daec",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5452827a-6928-44f9-9b2f-34f2900f8558"
        },
        "item": {
          "id": "1f762051-0423-45ae-9886-045e07e05c28",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a17dedf0-913a-4515-bff7-2e8582c50bca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "fb4c28a9-67a0-4daa-992d-cd2e08eea1a8",
        "cursor": {
          "ref": "83393e0e-a36e-4620-aa71-f94a18660549",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "32169523-3d0e-4754-93e8-2e85c5e1d8fe"
        },
        "item": {
          "id": "fb4c28a9-67a0-4daa-992d-cd2e08eea1a8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "59f614af-df2f-47b7-a225-243348203f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9218f2f8-a801-4fff-9f15-c2ed0beb6b19",
        "cursor": {
          "ref": "6e35b277-80bf-42c4-ae51-52b484565868",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8d10abad-427a-4e27-97f0-63516008b471"
        },
        "item": {
          "id": "9218f2f8-a801-4fff-9f15-c2ed0beb6b19",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "aaa31b45-2328-4604-8a86-ea512a2f8f0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "c0c0e59d-e489-4e57-b9fd-a1dddb63bd6b",
        "cursor": {
          "ref": "7aa51650-e032-4656-8773-32c563fb1a3c",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "56c1b110-ecd7-47c5-90f9-f054463045b6"
        },
        "item": {
          "id": "c0c0e59d-e489-4e57-b9fd-a1dddb63bd6b",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f97c1447-98c2-4f30-8e09-eabe809d61b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "3f02252f-c5d5-4cd9-ae67-5774fe589b79",
        "cursor": {
          "ref": "cd07e825-38d5-4768-b48a-af65be3c30c5",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "826dd6dc-ccfc-47e8-964d-934ebf3749b4"
        },
        "item": {
          "id": "3f02252f-c5d5-4cd9-ae67-5774fe589b79",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "aa452bd5-78c6-43c1-b779-fc4fde3643d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "3cbc08e8-3cfb-438a-ada2-6fe5640e5ca7",
        "cursor": {
          "ref": "4cf65365-6468-41c0-b43a-942f905c669a",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0280209b-3cbb-4827-a2c2-d9c8ec2c55a8"
        },
        "item": {
          "id": "3cbc08e8-3cfb-438a-ada2-6fe5640e5ca7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "94812abe-3172-468e-90cf-c8c87a16efaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "93b4af51-4b92-4efa-b334-c3d0aade80c2",
        "cursor": {
          "ref": "98d4ced6-85a0-4007-8397-7be638be1c16",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "dfd2a30b-9c7c-4e21-be98-850bbe812c7a"
        },
        "item": {
          "id": "93b4af51-4b92-4efa-b334-c3d0aade80c2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9d6dbee7-a967-4e30-b948-90f31e0d644a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 1489
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "69cef925-b7cd-4290-bd32-28f7231b0e90",
        "cursor": {
          "ref": "75b3e50b-880b-4be5-af79-387d0502292e",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "12230e7f-abcf-4b9f-951a-158ffaba5e3e"
        },
        "item": {
          "id": "69cef925-b7cd-4290-bd32-28f7231b0e90",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5fd4f870-064b-4a82-b12a-0ddb03d22cb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "eebc8c43-fde6-40ea-9b33-3a97e3c0623b",
        "cursor": {
          "ref": "8c420bfb-ac6a-42cf-980a-e6715004479a",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "bdd08199-b917-482b-9497-7f0e85b0ea1d"
        },
        "item": {
          "id": "eebc8c43-fde6-40ea-9b33-3a97e3c0623b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e7e4c7ae-e67c-4fd5-bc6b-6e59c4a6d5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "517741ff-4d5b-4965-8b2f-03d62f67d085",
        "cursor": {
          "ref": "49a1d07d-bc67-446d-b5ce-0f8932ed94d7",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "bc70f5e4-a6b3-492f-ae24-a4e5d6173d65"
        },
        "item": {
          "id": "517741ff-4d5b-4965-8b2f-03d62f67d085",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3fd4559b-01c0-4252-af21-1fb704e2209a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "af743226-0e8d-4c9f-8dbb-ca3070eec1a2",
        "cursor": {
          "ref": "16cb4807-c47a-4dc2-b673-cca071e46259",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "59f97bda-4930-44ca-a5e8-06af608f1aae"
        },
        "item": {
          "id": "af743226-0e8d-4c9f-8dbb-ca3070eec1a2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e9a7d981-79ad-4bd1-a058-c8f09eb181a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "9166c6c8-85ac-45ea-b5e1-6dbbbb9b4a6d",
        "cursor": {
          "ref": "c8d36b3d-7922-410b-b3ce-a36a86bb8900",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e1ac3ab9-a64c-43ca-860b-031c1532f51f"
        },
        "item": {
          "id": "9166c6c8-85ac-45ea-b5e1-6dbbbb9b4a6d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "af9f93f9-8c2f-4094-8704-b0ff463ff883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "bcbf2a30-bf82-4523-9ff3-896ccfe3aa60",
        "cursor": {
          "ref": "eae3af9b-e979-4371-9722-093330e4c310",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "bc1443eb-ad11-433e-af67-59c3828f4d10"
        },
        "item": {
          "id": "bcbf2a30-bf82-4523-9ff3-896ccfe3aa60",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "d1816d6d-cbce-43f3-8f34-731b611368de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 1351
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "d2a0d523-2266-4a43-953b-73b3da1adaa0",
        "cursor": {
          "ref": "c29aa47a-d3d2-462e-9b8b-8d2647385e73",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c2dd3d8e-5d58-4535-827e-16551edaa00c"
        },
        "item": {
          "id": "d2a0d523-2266-4a43-953b-73b3da1adaa0",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "6ef97574-0719-42cf-89bb-bbd69b48db23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "5c8e7707-0358-4aec-b1c1-a03a5b641cbb",
        "cursor": {
          "ref": "53ddef73-1fc8-42e3-b356-5405ae2c3142",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1df5375f-57de-4a6d-b7f2-8139976a2e3c"
        },
        "item": {
          "id": "5c8e7707-0358-4aec-b1c1-a03a5b641cbb",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e4bb00b9-2d8f-47ab-91b3-79534b577d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "ea137a73-6970-48d1-b165-734352e174db",
        "cursor": {
          "ref": "7ffce20d-7caf-48b3-8ab1-253e299ca7e6",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7c9626ee-3085-424c-a0f3-b98f53cef0e0"
        },
        "item": {
          "id": "ea137a73-6970-48d1-b165-734352e174db",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7ccc0e1c-3e45-40a3-8d19-73b7a6cb5dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e0f0846b-e89d-4d3a-ab10-4a6a2874f5eb",
        "cursor": {
          "ref": "bd9fdfc3-1690-49b3-aa78-21fbc5a33f1b",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "a9ba83f9-34f9-4500-be41-3901df2cb372"
        },
        "item": {
          "id": "e0f0846b-e89d-4d3a-ab10-4a6a2874f5eb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7b530705-74b9-4cd0-bd77-909dc581bbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "512a73c0-22c8-4248-bc6a-0f1fb4287482",
        "cursor": {
          "ref": "e2000bd9-79f5-414b-bf06-96354ece0083",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1e652dc1-7922-40c9-ba92-c89ab115a328"
        },
        "item": {
          "id": "512a73c0-22c8-4248-bc6a-0f1fb4287482",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f46f42dc-1b65-4545-927b-9b23f53becdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "70f85735-7893-49fe-bd64-4c2d0fbaf374",
        "cursor": {
          "ref": "7e45be8d-b4d4-4ce6-90bd-8e54b40db21d",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b0622900-08ea-4c25-8191-0d5635838cb7"
        },
        "item": {
          "id": "70f85735-7893-49fe-bd64-4c2d0fbaf374",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "06851310-433b-4c67-965e-795854219fd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5f6f6d65-4363-4a0f-bb1b-e30878076eb1",
        "cursor": {
          "ref": "5a239b3e-8520-49af-a481-831c2e42fc7c",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "31301f8f-3eba-497e-b8a4-edd8ba588728"
        },
        "item": {
          "id": "5f6f6d65-4363-4a0f-bb1b-e30878076eb1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ab46dc37-d0dc-4e65-aa0d-19f60e8f6eb6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "45d2f4b7-1d3c-4d7e-9c7e-4c3fc266ec0b",
        "cursor": {
          "ref": "9d33cc93-5f64-452a-91be-a4bb23398f27",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5c65f5d8-e5aa-46b7-b134-3cf68380d2d7"
        },
        "item": {
          "id": "45d2f4b7-1d3c-4d7e-9c7e-4c3fc266ec0b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "82b5d89a-21b8-4edb-a107-9abd810322d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 1129
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9cba519e-6b3c-4862-a2b0-ea4fad8d3982",
        "cursor": {
          "ref": "df4f155c-ec01-4797-8610-78fdb0c18e80",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a24334b3-11ce-42cc-adb6-455b75677d03"
        },
        "item": {
          "id": "9cba519e-6b3c-4862-a2b0-ea4fad8d3982",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6a2bd0c3-c1bc-41ae-aeb6-4be61a1e673a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 1129
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "f325d5db-7266-4445-9312-2f1265a71571",
        "cursor": {
          "ref": "9ec8a9a3-48bc-4e9a-92b5-439d464a3c6e",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0b497efe-9090-4b2d-a176-565dfa43257c"
        },
        "item": {
          "id": "f325d5db-7266-4445-9312-2f1265a71571",
          "name": "credentials_verify"
        },
        "response": {
          "id": "834c211b-96fa-4e3c-b3ca-db765e8e1bbd",
          "status": "OK",
          "code": 200,
          "responseTime": 4206,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "446c4d3f-e74b-4563-b4e1-0914a5bce34e",
        "cursor": {
          "ref": "75a79d36-6f6a-4b56-ad0a-dd4b0330453a",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "f1ebdaac-ea8d-4b5c-9f89-73a5ab8c665f"
        },
        "item": {
          "id": "446c4d3f-e74b-4563-b4e1-0914a5bce34e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "263394c0-88f2-452a-bbaf-9e397bebb8f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ebe3824b-0c9f-460c-92d2-35016362c3f4",
        "cursor": {
          "ref": "67aa2456-4b0e-4cca-8ef1-5884699f02f4",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e0369c9-b9b2-489a-a482-2c93f821807a"
        },
        "item": {
          "id": "ebe3824b-0c9f-460c-92d2-35016362c3f4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4b6a365-aa44-48d9-9058-f3b476b5d860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ebe3824b-0c9f-460c-92d2-35016362c3f4",
        "cursor": {
          "ref": "67aa2456-4b0e-4cca-8ef1-5884699f02f4",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e0369c9-b9b2-489a-a482-2c93f821807a"
        },
        "item": {
          "id": "ebe3824b-0c9f-460c-92d2-35016362c3f4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4b6a365-aa44-48d9-9058-f3b476b5d860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "ebe3824b-0c9f-460c-92d2-35016362c3f4",
        "cursor": {
          "ref": "67aa2456-4b0e-4cca-8ef1-5884699f02f4",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "6e0369c9-b9b2-489a-a482-2c93f821807a"
        },
        "item": {
          "id": "ebe3824b-0c9f-460c-92d2-35016362c3f4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e4b6a365-aa44-48d9-9058-f3b476b5d860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "70a41a03-b8bc-4c24-a76e-b8796f0b7ab4",
        "cursor": {
          "ref": "7ba0558f-39be-4797-92a7-d0910cc9a3f6",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5506ab23-541c-473f-9850-42345c17a8a2"
        },
        "item": {
          "id": "70a41a03-b8bc-4c24-a76e-b8796f0b7ab4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "7fde291c-0d59-472a-8288-bb7dde62c38f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 319
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "21ed4697-b144-4213-8cc1-ab4abd31a57e",
        "cursor": {
          "ref": "85247962-2a4e-45a0-bffa-98086a7bcd72",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "550005a0-983b-4a5d-a7bf-d5762159d5cc"
        },
        "item": {
          "id": "21ed4697-b144-4213-8cc1-ab4abd31a57e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5b32e872-d084-4396-9cba-88bff58eb476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "21ed4697-b144-4213-8cc1-ab4abd31a57e",
        "cursor": {
          "ref": "85247962-2a4e-45a0-bffa-98086a7bcd72",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "550005a0-983b-4a5d-a7bf-d5762159d5cc"
        },
        "item": {
          "id": "21ed4697-b144-4213-8cc1-ab4abd31a57e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5b32e872-d084-4396-9cba-88bff58eb476",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1982e231-9b65-4263-94b2-95d631224005",
        "cursor": {
          "ref": "af07c428-0bf9-4d2e-b715-22a2e2e5a659",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2ba83305-97d1-45b6-ad43-c3747ce582df"
        },
        "item": {
          "id": "1982e231-9b65-4263-94b2-95d631224005",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ee0b42d9-8fcf-4ffd-936b-3a50048bb2f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 87
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "9eed6dee-7704-4afe-aa60-4fbab3c5711c",
        "cursor": {
          "ref": "597b84f5-4d60-449e-9db0-03e161aae9b5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2ba45ffe-c56d-4445-bf89-fdbda72911b7"
        },
        "item": {
          "id": "9eed6dee-7704-4afe-aa60-4fbab3c5711c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ece11d47-0ff7-408f-ae98-c5a1096315d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "9eed6dee-7704-4afe-aa60-4fbab3c5711c",
        "cursor": {
          "ref": "597b84f5-4d60-449e-9db0-03e161aae9b5",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2ba45ffe-c56d-4445-bf89-fdbda72911b7"
        },
        "item": {
          "id": "9eed6dee-7704-4afe-aa60-4fbab3c5711c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "ece11d47-0ff7-408f-ae98-c5a1096315d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "c19bc666-f3a5-4922-ac80-6baaa36c78d2",
        "cursor": {
          "ref": "eda95f9e-8f88-4f82-ac7e-ef55de4398ae",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "40854803-994c-4a53-ad17-bedb1d624039"
        },
        "item": {
          "id": "c19bc666-f3a5-4922-ac80-6baaa36c78d2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "2e5357c9-8952-4677-97ad-e41fd47aeaa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 97
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}